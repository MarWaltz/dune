//***************************************************************************
// Copyright 2007-2023 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Ricardo Martins                                                  *
//***************************************************************************
// Automatically generated.                                                 *
//***************************************************************************
// IMC XML MD5: 86c7ceace2a6f6239ea89a0e5bc64a3f                            *
//***************************************************************************

// DUNE headers.
#include <DUNE/DUNE.hpp>

using DUNE_NAMESPACES;

#include "Test.hpp"

int
main(void)
{
  Test test("IMC Serialization/Deserialization");

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.7679766257104654);
    msg.setSource(736U);
    msg.setSourceEntity(36U);
    msg.setDestination(60680U);
    msg.setDestinationEntity(247U);
    msg.state = 176U;
    msg.flags = 12U;
    msg.description.assign("HFRNTSEHQCZQMSPBFKEWAMKDLPNKBDYPTYSUPRWVPIJINKTCGPJUZFASDOZZWAWBSBRFGMLHHJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.8135789661448135);
    msg.setSource(11963U);
    msg.setSourceEntity(22U);
    msg.setDestination(32535U);
    msg.setDestinationEntity(221U);
    msg.state = 44U;
    msg.flags = 119U;
    msg.description.assign("AZKYVNZBDUXDJQVSUCSDSKDSUHUOKLHBBUDLUEWNNVDHLAVSHPBQTBJXDGYGFMAEZQNXBWYVZCZIFBTRRIYFOLROAIMQPEHOFJCQZYPSL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.7094618026372072);
    msg.setSource(11610U);
    msg.setSourceEntity(232U);
    msg.setDestination(25979U);
    msg.setDestinationEntity(22U);
    msg.state = 242U;
    msg.flags = 33U;
    msg.description.assign("ZGGKNSLYCUADIXCMCKSOEOXDFHRPUPXYPNADRSJTNUBG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.5369439253851763);
    msg.setSource(4525U);
    msg.setSourceEntity(175U);
    msg.setDestination(7908U);
    msg.setDestinationEntity(80U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.2502933446569846);
    msg.setSource(33217U);
    msg.setSourceEntity(113U);
    msg.setDestination(41210U);
    msg.setDestinationEntity(47U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.37664354355415364);
    msg.setSource(57541U);
    msg.setSourceEntity(46U);
    msg.setDestination(38354U);
    msg.setDestinationEntity(154U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.08705753101299352);
    msg.setSource(10465U);
    msg.setSourceEntity(228U);
    msg.setDestination(18448U);
    msg.setDestinationEntity(109U);
    msg.id = 112U;
    msg.label.assign("DCYTBKFMGJQLDZ");
    msg.component.assign("DVEOUGTJQKMIOVWFYADEZTJLWQKQVHSARKLGZFTLYKHQTBPLNPNAFROXGIVZTCWFYNRLMGXPLABHGZGVBWMEOSOI");
    msg.act_time = 62368U;
    msg.deact_time = 3558U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.17348040065530868);
    msg.setSource(6364U);
    msg.setSourceEntity(118U);
    msg.setDestination(54215U);
    msg.setDestinationEntity(188U);
    msg.id = 148U;
    msg.label.assign("MRZVZRSIGMXPQWPDVRSMOYNIBLVNINPESFHOIPEZDWSHUPCADEZJWMUSRLJJDRKCBDYHGIBLVHAESBQPAMWQVGWTHZXMEQLYCBNLMJBFWOEXYXTUKRRZYJBAQNKGHJTXLGOIUOIWQRQFYGXMMSDQTCXRIUECCJEEGPYCSNFWZB");
    msg.component.assign("WBZPUEAHHKEYOYCPKJJGKPSOENNRBLLAVBASQRYXOYEWLQZXWEFBTKOVAFHRDTBQQDKPZEIYTFOZRQKWBTNGRMCXOVSHVXQDPIGHYMNUWJMJIWKAICFMMJNULXNTOPUWSMSBHJYGQGNXSIJSFFTMHSZCFKYXUHOMFZVQLRZJVWDVAIPXZUPRRATYJFPCDDLKDEYUZIDGAVOPKSZCFWXGGBCAITRMIQNRGJCHDT");
    msg.act_time = 57714U;
    msg.deact_time = 19372U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.3100093688310599);
    msg.setSource(33711U);
    msg.setSourceEntity(29U);
    msg.setDestination(16915U);
    msg.setDestinationEntity(63U);
    msg.id = 20U;
    msg.label.assign("VKJPLMRKUAKXFYXAWXZSIYOFKDMDQMTVGABEGQJDZIGOGYVIBIWTURI");
    msg.component.assign("UFVLBYQIOETDBARFGUODJQQXSTNHHDF");
    msg.act_time = 15950U;
    msg.deact_time = 63192U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.6994337195855714);
    msg.setSource(56957U);
    msg.setSourceEntity(175U);
    msg.setDestination(21979U);
    msg.setDestinationEntity(20U);
    msg.id = 112U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.2325470794620188);
    msg.setSource(60030U);
    msg.setSourceEntity(252U);
    msg.setDestination(1767U);
    msg.setDestinationEntity(110U);
    msg.id = 144U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.6132790788854341);
    msg.setSource(32776U);
    msg.setSourceEntity(149U);
    msg.setDestination(3493U);
    msg.setDestinationEntity(53U);
    msg.id = 8U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.3604225267764667);
    msg.setSource(49468U);
    msg.setSourceEntity(12U);
    msg.setDestination(33924U);
    msg.setDestinationEntity(249U);
    msg.op = 5U;
    msg.list.assign("IZBAEPLJQQERFHXCQOLPNJZVMTXFSQVRHIOZPJLMKOISBXVYFNMZOGZBCNR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.28741868387394753);
    msg.setSource(51190U);
    msg.setSourceEntity(169U);
    msg.setDestination(58528U);
    msg.setDestinationEntity(174U);
    msg.op = 163U;
    msg.list.assign("DVABWAAQUVGJXWQFZCDCITKAOQBAFZLZOAVWPYRSBMCPSDBYRNAHJKRTIKEHUFDDTO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.7004172378129717);
    msg.setSource(65194U);
    msg.setSourceEntity(111U);
    msg.setDestination(10777U);
    msg.setDestinationEntity(164U);
    msg.op = 246U;
    msg.list.assign("IDBTWHZJCA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.18243624264614566);
    msg.setSource(2921U);
    msg.setSourceEntity(29U);
    msg.setDestination(49402U);
    msg.setDestinationEntity(112U);
    msg.value = 93U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.951934395774247);
    msg.setSource(17305U);
    msg.setSourceEntity(209U);
    msg.setDestination(49099U);
    msg.setDestinationEntity(147U);
    msg.value = 71U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.5563914232670835);
    msg.setSource(9228U);
    msg.setSourceEntity(122U);
    msg.setDestination(11343U);
    msg.setDestinationEntity(128U);
    msg.value = 78U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.07821447477990606);
    msg.setSource(21506U);
    msg.setSourceEntity(105U);
    msg.setDestination(58497U);
    msg.setDestinationEntity(31U);
    msg.consumer.assign("MBVNMOLBYURHJ");
    msg.message_id = 51500U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.9015439550517318);
    msg.setSource(24942U);
    msg.setSourceEntity(62U);
    msg.setDestination(32734U);
    msg.setDestinationEntity(82U);
    msg.consumer.assign("OSDPWMNZKSNNPAROPJOTWG");
    msg.message_id = 26025U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.5220804690065658);
    msg.setSource(27890U);
    msg.setSourceEntity(177U);
    msg.setDestination(36843U);
    msg.setDestinationEntity(189U);
    msg.consumer.assign("MRKHLVVJYIDJOTRACLQRPGEKFKUJNUYOGQBHQDCNOFMRIVEDKFDTBJZANQKTPNVBSCWSPQBXZIKJDWEQBHPOBWALGDSVDRHSLLMKJSISJEYEIITFMYMECPYTFIDTVGGRXMCFACYYJRUAGUMRTUINOIJWSUDBQXSYCXCGBHGGEHZCZPWLMALKVTNLQZLPAFHIUGWZOQ");
    msg.message_id = 46734U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.4297200100154346);
    msg.setSource(55570U);
    msg.setSourceEntity(126U);
    msg.setDestination(52803U);
    msg.setDestinationEntity(218U);
    msg.type = 79U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.018012825768865093);
    msg.setSource(987U);
    msg.setSourceEntity(9U);
    msg.setDestination(11646U);
    msg.setDestinationEntity(232U);
    msg.type = 164U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.947411209055552);
    msg.setSource(11975U);
    msg.setSourceEntity(139U);
    msg.setDestination(22518U);
    msg.setDestinationEntity(203U);
    msg.type = 203U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.6418969968448414);
    msg.setSource(20797U);
    msg.setSourceEntity(61U);
    msg.setDestination(54696U);
    msg.setDestinationEntity(239U);
    msg.op = 228U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.18661559322631927);
    msg.setSource(29384U);
    msg.setSourceEntity(205U);
    msg.setDestination(49764U);
    msg.setDestinationEntity(66U);
    msg.op = 186U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.8821260171193207);
    msg.setSource(36770U);
    msg.setSourceEntity(86U);
    msg.setDestination(36128U);
    msg.setDestinationEntity(0U);
    msg.op = 53U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.2719197508015716);
    msg.setSource(19187U);
    msg.setSourceEntity(188U);
    msg.setDestination(25692U);
    msg.setDestinationEntity(59U);
    msg.total_steps = 61U;
    msg.step_number = 203U;
    msg.step.assign("LZIUVKHSSSUQKSZFKNHMOQUCXPRTKEFUERNTJFBJBKSPJOPSCXCXTMLBZWBTYGIVVPGMVJVVTHTXIGYGEFDAUPKBDDSUTZAQXFRUEBFJREOXDSOOPHUFCOVHQJYDRWEFCASWRJINWWWVLRMWDAMZLQHMYEWQQTYLZJBGQCHNK");
    msg.flags = 218U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.2023847616495792);
    msg.setSource(61129U);
    msg.setSourceEntity(240U);
    msg.setDestination(2494U);
    msg.setDestinationEntity(188U);
    msg.total_steps = 11U;
    msg.step_number = 37U;
    msg.step.assign("HXKYPDJYVIJMKAUQWYMFVAMSRDMUTPBRBFYLKFEYWDEZOOXYGDRNLXZCHAPWVBENPSTGTRNULSOZOKSNTJGGOFRALBKHDRLUXLOBGPTNCUJNMAZIVXKDKQEBEKWBJAJPPTBJXSQXHCCPEQNNXCQZULEMDQWIFV");
    msg.flags = 56U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.4517401622720676);
    msg.setSource(47237U);
    msg.setSourceEntity(156U);
    msg.setDestination(47487U);
    msg.setDestinationEntity(136U);
    msg.total_steps = 132U;
    msg.step_number = 225U;
    msg.step.assign("JPFZILGXIFJHXTKGWJYRWGBRFHMGLDZAIBSREFWOSZMLQEPIZKOQSAOTTCKGNYWGJLQTRYOYJFDY");
    msg.flags = 209U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.7499304683632387);
    msg.setSource(36892U);
    msg.setSourceEntity(154U);
    msg.setDestination(48969U);
    msg.setDestinationEntity(137U);
    msg.state = 163U;
    msg.error.assign("JYHZLMVNJDSBIGULBROLZVBFWFGPPG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.9013506648782389);
    msg.setSource(17895U);
    msg.setSourceEntity(247U);
    msg.setDestination(14857U);
    msg.setDestinationEntity(63U);
    msg.state = 52U;
    msg.error.assign("RLJTWBHZRXYLQYAMDBJHHOGFQGCUVXNSAKKWZRITPYNUUPMRCDVRQYLYTZCNKFUUIHGCMW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.5704495977732241);
    msg.setSource(56808U);
    msg.setSourceEntity(205U);
    msg.setDestination(20596U);
    msg.setDestinationEntity(124U);
    msg.state = 144U;
    msg.error.assign("KBMNBQFGRMNYWKUGXJNAZYNRCEBSOGBDASTUERCOWICHTWDTVICEGSQCXDPKJQMWGFQCIUZSPZKLSKVQKVMYYLZRDLRRFCTXYFWVRBDOOYGNFIEELAKWIEIPJMEAPANUKZEHUJLRFGSKYFC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.46141034593301233);
    msg.setSource(24987U);
    msg.setSourceEntity(144U);
    msg.setDestination(63115U);
    msg.setDestinationEntity(28U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.38553780095799206);
    msg.setSource(54342U);
    msg.setSourceEntity(233U);
    msg.setDestination(14001U);
    msg.setDestinationEntity(178U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.17809944139596523);
    msg.setSource(42030U);
    msg.setSourceEntity(30U);
    msg.setDestination(38976U);
    msg.setDestinationEntity(205U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.9912721549213848);
    msg.setSource(6786U);
    msg.setSourceEntity(113U);
    msg.setDestination(341U);
    msg.setDestinationEntity(167U);
    msg.op = 22U;
    msg.speed_min = 0.8887839750004093;
    msg.speed_max = 0.4579510930940839;
    msg.long_accel = 0.9847413959271355;
    msg.alt_max_msl = 0.06439299901509354;
    msg.dive_fraction_max = 0.09331938198036183;
    msg.climb_fraction_max = 0.8499672542742805;
    msg.bank_max = 0.7742145965729746;
    msg.p_max = 0.3396365653504093;
    msg.pitch_min = 0.4205249868997448;
    msg.pitch_max = 0.9583358644050061;
    msg.q_max = 0.7629867654172586;
    msg.g_min = 0.7689847799446698;
    msg.g_max = 0.06160099928399798;
    msg.g_lat_max = 0.5886931076467141;
    msg.rpm_min = 0.3506867869041804;
    msg.rpm_max = 0.8919918005685783;
    msg.rpm_rate_max = 0.5811710949092448;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.21898705794972795);
    msg.setSource(11871U);
    msg.setSourceEntity(157U);
    msg.setDestination(52789U);
    msg.setDestinationEntity(35U);
    msg.op = 116U;
    msg.speed_min = 0.4115889073895237;
    msg.speed_max = 0.10086167245377697;
    msg.long_accel = 0.8700224201050115;
    msg.alt_max_msl = 0.9003342695577988;
    msg.dive_fraction_max = 0.27841272647244975;
    msg.climb_fraction_max = 0.8062802538898158;
    msg.bank_max = 0.8450128175446503;
    msg.p_max = 0.6377429439076575;
    msg.pitch_min = 0.7186004962216255;
    msg.pitch_max = 0.945021514790954;
    msg.q_max = 0.22606284421846223;
    msg.g_min = 0.10925309286551677;
    msg.g_max = 0.21647174341739261;
    msg.g_lat_max = 0.4677312439062965;
    msg.rpm_min = 0.7809065285115652;
    msg.rpm_max = 0.22262340743577147;
    msg.rpm_rate_max = 0.4873175533537486;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.3938110804633279);
    msg.setSource(26531U);
    msg.setSourceEntity(216U);
    msg.setDestination(55635U);
    msg.setDestinationEntity(214U);
    msg.op = 57U;
    msg.speed_min = 0.8125548446100326;
    msg.speed_max = 0.11448724222965478;
    msg.long_accel = 0.25713365551956646;
    msg.alt_max_msl = 0.05260471101055875;
    msg.dive_fraction_max = 0.7907509235785541;
    msg.climb_fraction_max = 0.2710855394636793;
    msg.bank_max = 0.3861097144165686;
    msg.p_max = 0.20290470177546371;
    msg.pitch_min = 0.7190512875019576;
    msg.pitch_max = 0.2637564363146586;
    msg.q_max = 0.4398001351884484;
    msg.g_min = 0.6150058994863211;
    msg.g_max = 0.5488511100040092;
    msg.g_lat_max = 0.22475074717052668;
    msg.rpm_min = 0.6712268522100362;
    msg.rpm_max = 0.2987739526813278;
    msg.rpm_rate_max = 0.2121527491155092;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.43250750518348346);
    msg.setSource(24465U);
    msg.setSourceEntity(0U);
    msg.setDestination(58829U);
    msg.setDestinationEntity(138U);
    IMC::AngularVelocity tmp_msg_0;
    tmp_msg_0.time = 0.0930820513594961;
    tmp_msg_0.x = 0.008837132907667744;
    tmp_msg_0.y = 0.47998096995295003;
    tmp_msg_0.z = 0.47238439914392505;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.44321970838173974);
    msg.setSource(29040U);
    msg.setSourceEntity(94U);
    msg.setDestination(61634U);
    msg.setDestinationEntity(90U);
    IMC::RemoteSensorInfo tmp_msg_0;
    tmp_msg_0.id.assign("RZJMJLPBVAJXRCDBDADVAUYVISNQJFOILKPZYAZNLOZXHCYFFNXZAPNPVGWGLFRONIWRCKGGDGSHOCEZNYEZHROHIXJUUWTRBGOWLIVRBQERKCGJYBPOFGCQLMTPYCBFLLTEMDLFWAIDJMXWEP");
    tmp_msg_0.sensor_class.assign("EZIMBTSLMMHSEWUQXTNMXFIZJKJTKDLLIKZLCBCRYUXNJYCJCUDLADUFFMYJGTWQAYYEADQLVZRIVUEHNWBZPCIWOPOXOPYVBGGHWWNFGODOHFJORZCRRMVCHPIFDBOFCYRNUOJVSFEYGVGVXMKUATBAYQESRI");
    tmp_msg_0.lat = 0.23217326804842553;
    tmp_msg_0.lon = 0.20302939971419853;
    tmp_msg_0.alt = 0.35491077800113946;
    tmp_msg_0.heading = 0.5987780992913018;
    tmp_msg_0.data.assign("RPJHLHTUJUOIBCNIQBYRPAZUESYKVJZLJBEBHSMPXEJSZZVPKVPOEZYLMSCFXWQLUTNFRSXXHTGAAHJKGHWIEYABKQRBKWVWAHZQGWKABUOSTDMZODCDNAFPUEPVXVJIFDXCUYSFRGVCRLTNKOXXGSMFEQBULEZQOHTSUEIDMCINWYVIBPTXFYODJPLQCODCDRWMODEZHKIVWQSRWXPCFVKT");
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.22607839170029265);
    msg.setSource(7522U);
    msg.setSourceEntity(162U);
    msg.setDestination(8483U);
    msg.setDestinationEntity(76U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.7580533844262489);
    msg.setSource(43609U);
    msg.setSourceEntity(161U);
    msg.setDestination(64432U);
    msg.setDestinationEntity(193U);
    msg.lat = 0.24453017298672508;
    msg.lon = 0.0894923755061644;
    msg.height = 0.43077629846771515;
    msg.x = 0.043049676472074916;
    msg.y = 0.5175911045118547;
    msg.z = 0.5748052620190779;
    msg.phi = 0.9117988412897033;
    msg.theta = 0.8106761545979774;
    msg.psi = 0.1206711912514884;
    msg.u = 0.4938619133629998;
    msg.v = 0.35751856936838067;
    msg.w = 0.8785335838193956;
    msg.p = 0.877305192755531;
    msg.q = 0.6956274697096828;
    msg.r = 0.9242460612887288;
    msg.svx = 0.002703898801807325;
    msg.svy = 0.4614723435674396;
    msg.svz = 0.9084157417422084;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.22455636186362748);
    msg.setSource(14455U);
    msg.setSourceEntity(228U);
    msg.setDestination(65031U);
    msg.setDestinationEntity(40U);
    msg.lat = 0.6480157729908209;
    msg.lon = 0.8269633035587128;
    msg.height = 0.8566789308626536;
    msg.x = 0.21327768219764964;
    msg.y = 0.3371340637406023;
    msg.z = 0.7753035075102003;
    msg.phi = 0.43967820767459753;
    msg.theta = 0.1668719614832891;
    msg.psi = 0.06232321458846113;
    msg.u = 0.39723569027817573;
    msg.v = 0.8321371459000463;
    msg.w = 0.12694743824446586;
    msg.p = 0.41191443124086236;
    msg.q = 0.5918501623208821;
    msg.r = 0.15323654778969886;
    msg.svx = 0.4694821741106995;
    msg.svy = 0.4960534360788058;
    msg.svz = 0.21497730306310603;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.19106767330860785);
    msg.setSource(33895U);
    msg.setSourceEntity(156U);
    msg.setDestination(10120U);
    msg.setDestinationEntity(173U);
    msg.lat = 0.6507185205317358;
    msg.lon = 0.8733401068424989;
    msg.height = 0.48385719009286676;
    msg.x = 0.16026570614689073;
    msg.y = 0.975683516108525;
    msg.z = 0.9244798838484191;
    msg.phi = 0.8352978076156796;
    msg.theta = 0.6949484518532036;
    msg.psi = 0.17603056792672167;
    msg.u = 0.418735457754596;
    msg.v = 0.2454088039280664;
    msg.w = 0.26262560842174654;
    msg.p = 0.2746720282488194;
    msg.q = 0.12646670831477924;
    msg.r = 0.5905609235686359;
    msg.svx = 0.6062113504059494;
    msg.svy = 0.39279010923791435;
    msg.svz = 0.39836231499794295;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.4535464435534857);
    msg.setSource(11881U);
    msg.setSourceEntity(151U);
    msg.setDestination(49059U);
    msg.setDestinationEntity(38U);
    msg.op = 47U;
    msg.entities.assign("UFJEBKEVOH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.2687495599323103);
    msg.setSource(5996U);
    msg.setSourceEntity(73U);
    msg.setDestination(23159U);
    msg.setDestinationEntity(67U);
    msg.op = 28U;
    msg.entities.assign("UQTDXMWMEMRYMTRJIJBOUMVJAXQPCFMESURTIUYQPXQNERKLNVTHESBRPCQHHDIGAKYGVWJJVUPONMRYQAEXLEGBHBKXCIJCCAYBGADTWUHHKLSDPWPAFGAHZBZSODEFNAWWVLOLGXGHQON");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.3118607263712826);
    msg.setSource(23746U);
    msg.setSourceEntity(71U);
    msg.setDestination(61403U);
    msg.setDestinationEntity(216U);
    msg.op = 242U;
    msg.entities.assign("WIMHWZEVQHXTKEIGTHPALYVNGJJWXKIOETQWBAHYGHYPSYCHNCBXZVLOSRPULQACBUGMUURFLZYZUIKOKWDFBDXARXISRWNCHBRNHMHWPQVOTWCXKEJQIGSMMZDIVUOPMTBLKTAXQGIBTRAMZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.691130271843942);
    msg.setSource(22285U);
    msg.setSourceEntity(29U);
    msg.setDestination(45909U);
    msg.setDestinationEntity(127U);
    msg.type = 97U;
    msg.speed = 64993U;
    const signed char tmp_msg_0[] = {-117, -81, -42, -59, -121, -19, -23, -50, -26, -3, -110, 120, 83, 68, 117, -43, -13, 73, -6, -13, 70, -59, 85, 5, -24, 90, -90, -87, -6, -94, -107, -106, -73, -66, 15, 113, -9, 68, 55, -115, 75, 120, -89, 1, 73, 32, 40, -112, -70, 62, -72, -66, -63, -48, 51, -72, -39, 81, -6, -65, 97, 83, 23, -7, 81, 5, 32, -5, 112, -43, 52, 10, -57, 60, -62, -59, -126, 75, -88, 80, -3, -55, -101, -86, -100, -94, -16, -25, -27, -78, 120, -39, -23, 30, -68, 3, 21, 58, 27, 46, 82, -121, 94, 58, -92, -100, 51, 66, 29, 75, -114, 58, 115, 49, -68, -99, -17, 68, -26, 15, -124, -91, -99, 88, 2, 47, 1, -94, -111, -92, -115, -114, -108, -57, 66, -49, 103, -99, -75, -68, -28, 37, 52, -104, 6, -4, 99, 117, -13, -64, -128, -78, -18, -37, 21, -14, -76, 113, -5, 24, 23, 73, 85, -36, 107, 13, 107, 87, 18, 106, 81, -92, 36, -99, -80, 90, -42, 17, 21, 32, -23, 96, 20, -88, 25, 18, -84, 120, -94, 37, -18, -61, -29, -78, -22, -2, 68, 15, 24, -31, 47, -2, 92, 23, 2, -10, -86, -69, -31, -123, -93, 74, -40, 94, 112};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.15207347029895824);
    msg.setSource(3936U);
    msg.setSourceEntity(205U);
    msg.setDestination(23794U);
    msg.setDestinationEntity(150U);
    msg.type = 238U;
    msg.speed = 17115U;
    const signed char tmp_msg_0[] = {-31, 97, 86, 36, 60, -7, 124, 83, 41, -125, 86, 9, -114, 51, 82, -98, -9, 6, 84, 43, 90, -77, 43, -26, -12, -50, -128, 123, -123, 91, -104, 72, -77, -29, 88, 65, -16, -13, 69, -120, -60, 79, 121, -101, 0, -41, -24, 58, 86, -82, 52, -30, -62, -65, 90, 118, 126, 113, -25, 65, -26, 97, -105, -74, 105, -109, -21, 93, -115, 87, -93, -70, 73, -47, -106, -65, 70, -95, -110, -101, -102, 45, -41, 49, 48, -8, -114, 24, 110, -39, -97, -67, 38, 89, -36, -127, -110, 19, 10, 83, -123, 73, -102, -94, -32, 111, 58, 34, -12, -28, -116, -25, -21, 79, -44, -38, -69, -61, 30, -86, -13, 83, 116, 40, 57, 58, 68, -9, 36, -36, 24, 98, -83, 68, -114, 50, 51, -27, -76, -5, -121, 46, -74};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.03120893933401081);
    msg.setSource(56437U);
    msg.setSourceEntity(121U);
    msg.setDestination(19272U);
    msg.setDestinationEntity(50U);
    msg.type = 110U;
    msg.speed = 17664U;
    const signed char tmp_msg_0[] = {-56, 97, 66, 95, -9, -106, -123, -70, -58, 77, -15, 97, -10, -112, 123, 101, -58, 37, -52, 107, 106, 61, -122, 90, -90, -37, -113, 15, 114, -20, 113, -98, -52, -29, 108, 33, -93, 18, 106, 101, 107, 24, -108, -59, 68, -123, -44, -58, 106, 56, 65, 75, 14, 120, 53, -3, 36, -13, -57, 93, 104, 57, 33, 93, -111, -99, 32, -127, 87, 103, 58, 1, 116, -26, -64, 113, 64, -108, 51, 14, -93, 7, 16, -95, 27, 107, 120, 120, 99, -45, -68, -92, 100, -67, -66, 114, -14, 0, 74, -107, -62, 90, 3, -78, -28, 25, -95, -25, 49, 101, -26, 39, -39, 115, -119, -2, -92, -5, 29, -22, 21, 68, 5, 119, -19, -24, -124, -39, 24, -99, 66, -23, 119, 125, 63, 106, 16, 7, 112, 61, -108, -67, -74, 77, 70, -65, -66, 67, -63, 47, 45, -128, -104, 85, 35, 59, 106, -50, 54, -93, -51, -120, -103, 108, -64, 92, -128, -78, 24, 101, -64, -87, -46, 105, 99, -110, 50, -20, -126, -16, 106, 81, -96, -19, -62, -84, 2, -46, -55, -125, -37, -65, -47, -119, -47, -114, -74, -42, 36, -24, 59, -35, 77, -110, -125, -106, -8, -69, -55, 3, 36, 102, 28, -35, -81, 16, -96, 78, -5, -119, -107, 56, 56, -54, 8, 77, 86, 56, -60, 85, 54, 62, 43, -70, 18, -52, 46, 122, -120, 19, 89, 104, -86, -103, 5, -74, 22, 110};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.5039834970430079);
    msg.setSource(39044U);
    msg.setSourceEntity(223U);
    msg.setDestination(44338U);
    msg.setDestinationEntity(144U);
    msg.op = 197U;
    msg.tas2acc_pgain = 0.5041372329046228;
    msg.bank2p_pgain = 0.6350359560782093;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.24688299699602256);
    msg.setSource(7248U);
    msg.setSourceEntity(166U);
    msg.setDestination(24878U);
    msg.setDestinationEntity(10U);
    msg.op = 250U;
    msg.tas2acc_pgain = 0.6521376595168469;
    msg.bank2p_pgain = 0.8363260147340259;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.24559812854936847);
    msg.setSource(7272U);
    msg.setSourceEntity(219U);
    msg.setDestination(35529U);
    msg.setDestinationEntity(51U);
    msg.op = 149U;
    msg.tas2acc_pgain = 0.9079518721395005;
    msg.bank2p_pgain = 0.10172723618617485;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.1736133023592683);
    msg.setSource(45482U);
    msg.setSourceEntity(164U);
    msg.setDestination(4795U);
    msg.setDestinationEntity(202U);
    msg.available = 1641260653U;
    msg.value = 52U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.09662149034926992);
    msg.setSource(15617U);
    msg.setSourceEntity(2U);
    msg.setDestination(33183U);
    msg.setDestinationEntity(191U);
    msg.available = 1677733510U;
    msg.value = 94U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.7909020632258316);
    msg.setSource(3882U);
    msg.setSourceEntity(241U);
    msg.setDestination(44823U);
    msg.setDestinationEntity(124U);
    msg.available = 1363153340U;
    msg.value = 203U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.8021890559443209);
    msg.setSource(37249U);
    msg.setSourceEntity(190U);
    msg.setDestination(43635U);
    msg.setDestinationEntity(223U);
    msg.op = 65U;
    msg.snapshot.assign("BSGEQEWURXXFGLVOTKDWNJJULGOUPNBFVYBLWCTJHRYGPIMALYYUSERUAYQQSMSXOFXWZXQOVZFTLLQDCDAIZKZJBMYTWPEKXCHNCROYKJDONHNCBHTQXOMAWLDTCVEYJQEBPBYRZKZKFOGARTLMPRHDBYMUCOAHIQMVTWVSETZPENCBRVMDAJXSZLRDJSDX");
    IMC::UbxDOP tmp_msg_0;
    tmp_msg_0.gdop = 0.5753607027947187;
    tmp_msg_0.pdop = 0.15578122141832917;
    tmp_msg_0.tdop = 0.43339753561877936;
    tmp_msg_0.vdop = 0.30958235770891807;
    tmp_msg_0.hdop = 0.6527377375989379;
    tmp_msg_0.ndop = 0.053689699821149794;
    tmp_msg_0.edop = 0.28562549933658166;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.29555608327768);
    msg.setSource(10534U);
    msg.setSourceEntity(39U);
    msg.setDestination(28254U);
    msg.setDestinationEntity(165U);
    msg.op = 139U;
    msg.snapshot.assign("CSTWFFVNINCKVLHQOHFKEFNJTBRIFCHIDASCLWUBHIYOTYDODAKKFZFPNUEEAPLNRPHWQUMDGNLJQSESZBJBZQWYBPMOLA");
    IMC::AbsoluteWind tmp_msg_0;
    tmp_msg_0.dir = 0.7345385384141262;
    tmp_msg_0.speed = 0.2966303624028319;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.8800950666701894);
    msg.setSource(56786U);
    msg.setSourceEntity(167U);
    msg.setDestination(31534U);
    msg.setDestinationEntity(61U);
    msg.op = 47U;
    msg.snapshot.assign("XRRTQXDIFNSBLUZXEYVMFKGSPRZTTXYGLGBPQPHCQSUBBMJQPWBQV");
    IMC::DevDataBinary tmp_msg_0;
    const signed char tmp_tmp_msg_0_0[] = {-69, -13, 47, 124, -5, 29, -7, -57, 42, 98, -60, -127, 21, -16, -109, 83, -35, -14, 25, -75, 5, -95, -43, 4, -69, 21, 14, 22, 98, -41, 68, 50, 72, -23, -20, 41, 95, -105, -124, 75, 97, 44, -118, 53, -105, 82, -13, 19, -82, -6, -118, -65, -48, -6, -14, 26, 30, 98, -84, 20, 99, -125, -8, -11, -107, -64, -92, -6, -119, -17, -123, -105, 9, -19, -36, 114, 84, -33, -10, 88, -75, 48, -50, 101, -103, 23, -106, -109, -16, -11, 12, 87, -25, 122, 41, -66, -53, 123, -120, 17, 36, 80, -87, 82, 92, -89, 37, 29, -86, -88, -114, 122, -81, 50, -19, 125, -87, -19, 13, 39, 38, 126, 110, 33, 78, 119, 33, 54, -11, 63, 70, -64, 117, -58, 23, -48, 65, -128, 81, -20, -34, -107, -100, -98, 22, -97, -62, -78, 6, 114, -18, 14, -96, -66, 47, 17, 73, 115, 71, 108, -15, -108, -74, 83, 37, 119, -3, 38, -121, 83, 84, -70, -113, -104, 37, -44, 108, -102, 25, -95, 9, -40, 106, -3, 82, -124, -94, 76, -93, 123, -63, 15, 106, 55, -96, -49, -9, -70, 5, -54, -115, 80};
    tmp_msg_0.value.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.7678886894400853);
    msg.setSource(1782U);
    msg.setSourceEntity(75U);
    msg.setDestination(13884U);
    msg.setDestinationEntity(54U);
    msg.op = 185U;
    msg.name.assign("LVRSFZMTKUKMJADQVQIOPIYVCNWMCILSRZLHNSWCBTLZTDDYYSDOBIJPPWYROPQCJFSELXE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.7197754388573946);
    msg.setSource(2602U);
    msg.setSourceEntity(138U);
    msg.setDestination(34727U);
    msg.setDestinationEntity(240U);
    msg.op = 147U;
    msg.name.assign("GRBNUDZQWTSQDSIOTBJKTGKLSLPJFVVOXBQKAWAEVOMWLCHASVYXROIKDPHBUADYFSUKNADN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.1957052513566212);
    msg.setSource(16600U);
    msg.setSourceEntity(123U);
    msg.setDestination(11988U);
    msg.setDestinationEntity(110U);
    msg.op = 67U;
    msg.name.assign("GEEWDFYKMJARIRHOURDUVGMXWPZBNRJXXBFMSNTOAUTDAEQDLFLFQFLRGYYCVCXALUGLXBEIAEJDTWHNBIQDSTUTGCSMDMRUORQCDPVBDPAQQNASQFTCVYOUSBWCICTTSZXRXKGXQJBVGVJZQSNBGWRYPPMWWHPEBASEMPIOAOKCSQFZFUJC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.3075285797914592);
    msg.setSource(13941U);
    msg.setSourceEntity(229U);
    msg.setDestination(18652U);
    msg.setDestinationEntity(70U);
    msg.type = 166U;
    msg.htime = 0.4811956324972021;
    msg.context.assign("INDKCHXVOMDEPUWAKOXHMTKINSKXNFOABIZWHSFQHLPWUFEBWGGNTGXBKJFNZPTSELQQKGCRVIEAAJDHEPLUZDDTOTWBUTA");
    msg.text.assign("ESIJZYTLMAGUVRBOJAPDDHQOVLAUQPGGJHACZNSNFNOKCBTGYGZPEIMHWWWEKYJFURDTQIHSTNNZXEJZMJZFOJZHFYNOSMPQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.3684783538128069);
    msg.setSource(19050U);
    msg.setSourceEntity(63U);
    msg.setDestination(47388U);
    msg.setDestinationEntity(72U);
    msg.type = 221U;
    msg.htime = 0.9676333976061263;
    msg.context.assign("RPBBNYADTWDEHONSCAYUTFZSPWDIOZRIZZOUXXWQLMWZVMYEWIVVEDWQCDHIVWAPUPKTFKNRBEUXVUAGLQDJDPINBKZNPNHWCONLYGJLLTOQSZCDIEOCWFRHAKTTPESTHJBJYXYGUBVPXMDLOQVKZWSYMOUHGQKMKBSAGMNYVADRBFGNFIIJJQGXYOEAFSOPGSZGLFRMJJXECJAQUI");
    msg.text.assign("REVZXVPOPBAZFOEMSGMESWHIRVTUUPMTSDFXDUTJFACUHRITRNKNJNBWJBGQUYUATVFJAVLYNHRZSWEQNJIBHKAJBGJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.6664601629789086);
    msg.setSource(44370U);
    msg.setSourceEntity(221U);
    msg.setDestination(63856U);
    msg.setDestinationEntity(136U);
    msg.type = 63U;
    msg.htime = 0.051811953806496724;
    msg.context.assign("KNDSYJNGKKAXIJMENDZZSMBKELDEXVKAHIZEIQKXIFQBYWXYMPZBANWHBNTWHZFWGVTVWLQERWKDGBIIOORDRATLJBBRPCUYNIVASLMXYPWVQNTDIOTZGUGBPSRULJHFNR");
    msg.text.assign("AWTEXBUBAJEUKASKGNJIRYHVUHYDKXITAEEDGBHZUDZEWVMYPIUTDWAFCFMVGDHFMTRDLEGZQQAJNPEPCLGFHWSFZKPNZXPZISJARYTOKNOHMTLMAQEDTLJTRENIRYGFWSXFSQMCBFITCKBXOPLWPMUCXWBNAHJJXKKXQLYMUVIDQJBTOLQG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.30742774866525313);
    msg.setSource(41259U);
    msg.setSourceEntity(167U);
    msg.setDestination(60281U);
    msg.setDestinationEntity(71U);
    msg.command = 134U;
    msg.htime = 0.5679934806460359;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.1155133510441495);
    msg.setSource(65182U);
    msg.setSourceEntity(244U);
    msg.setDestination(40355U);
    msg.setDestinationEntity(236U);
    msg.command = 76U;
    msg.htime = 0.06435361302686782;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.6536991237468479);
    msg.setSource(53167U);
    msg.setSourceEntity(206U);
    msg.setDestination(22364U);
    msg.setDestinationEntity(230U);
    msg.command = 1U;
    msg.htime = 0.6340334836366073;
    IMC::LogBookEntry tmp_msg_0;
    tmp_msg_0.type = 190U;
    tmp_msg_0.htime = 0.9783476712982879;
    tmp_msg_0.context.assign("BYDZHRQWVOMRFNWUODQRMIOBYBYLNTOPUSGHQUZDBYDSUEPINAUPSCEVAFPKIXXXRKPWWRSVYKKHCFTKXXNLQNDBWGUXZOEWGTALTJVPNUKRQGZMUQZYSBLRXPOHIWLADNEECAFMWAZQIVODFDIPMNJGSXHZKLTCTSEQIARZ");
    tmp_msg_0.text.assign("QJYMFNLNXTLWXTRWADUGEJCFBIMKRGCMDHYDOUVUWYDGFITRUAVNTAZ");
    msg.msg.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.20997380394777088);
    msg.setSource(25331U);
    msg.setSourceEntity(189U);
    msg.setDestination(18858U);
    msg.setDestinationEntity(231U);
    msg.op = 62U;
    msg.file.assign("UDHVUEPNSKXTMIQOYEZFTRHCQGJBAXCHGLAQPQSFVTKLTXZLWIPPJKIGIJNFYRPDKIEEJWJGFBYEOCMRUMNFITNDOWWMQKMSHYDFSYWDCAZDOXWAVOVUZJRMHQGDPBRBBFCLNIOMGNZEXTAKSDPRBIGZUJOTCRVUPLKNWHEHVBN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.7658029648813095);
    msg.setSource(9077U);
    msg.setSourceEntity(134U);
    msg.setDestination(42755U);
    msg.setDestinationEntity(206U);
    msg.op = 171U;
    msg.file.assign("RTIQIAGKWNUTMJKEBDMLSLYJJEGNJRUXQQTHEYIOEQAYDMPIZOEDUQHFLGAMVHWMASVWPZGPDXZH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.5885962656416374);
    msg.setSource(34213U);
    msg.setSourceEntity(193U);
    msg.setDestination(46284U);
    msg.setDestinationEntity(36U);
    msg.op = 163U;
    msg.file.assign("UZQBZTFPRE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.7272202281446031);
    msg.setSource(26114U);
    msg.setSourceEntity(218U);
    msg.setDestination(26295U);
    msg.setDestinationEntity(165U);
    msg.op = 212U;
    msg.clock = 0.47604997624933887;
    msg.tz = 15;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.16936442801813523);
    msg.setSource(4044U);
    msg.setSourceEntity(161U);
    msg.setDestination(19948U);
    msg.setDestinationEntity(69U);
    msg.op = 214U;
    msg.clock = 0.9278493247446807;
    msg.tz = -120;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.9184949492711912);
    msg.setSource(62048U);
    msg.setSourceEntity(157U);
    msg.setDestination(24804U);
    msg.setDestinationEntity(131U);
    msg.op = 121U;
    msg.clock = 0.5146161658879058;
    msg.tz = -104;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.41579049840365956);
    msg.setSource(26853U);
    msg.setSourceEntity(10U);
    msg.setDestination(63264U);
    msg.setDestinationEntity(77U);
    msg.conductivity = 0.3567151077973282;
    msg.temperature = 0.47646666428581197;
    msg.depth = 0.6237404739486866;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.1322055791598692);
    msg.setSource(33621U);
    msg.setSourceEntity(37U);
    msg.setDestination(12945U);
    msg.setDestinationEntity(116U);
    msg.conductivity = 0.3931195376092227;
    msg.temperature = 0.11916444522789493;
    msg.depth = 0.9929817302260779;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.7262039977814632);
    msg.setSource(5154U);
    msg.setSourceEntity(188U);
    msg.setDestination(25383U);
    msg.setDestinationEntity(141U);
    msg.conductivity = 0.3030211230034432;
    msg.temperature = 0.15653917575620901;
    msg.depth = 0.44168068322024867;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.40376577702893335);
    msg.setSource(8066U);
    msg.setSourceEntity(86U);
    msg.setDestination(44052U);
    msg.setDestinationEntity(48U);
    msg.altitude = 0.6041598700582711;
    msg.roll = 24854U;
    msg.pitch = 21051U;
    msg.yaw = 6424U;
    msg.speed = -28457;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.5231923064883917);
    msg.setSource(14544U);
    msg.setSourceEntity(187U);
    msg.setDestination(29872U);
    msg.setDestinationEntity(178U);
    msg.altitude = 0.7420576153268982;
    msg.roll = 11455U;
    msg.pitch = 348U;
    msg.yaw = 63163U;
    msg.speed = -31570;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.9856526141552024);
    msg.setSource(24152U);
    msg.setSourceEntity(44U);
    msg.setDestination(50944U);
    msg.setDestinationEntity(232U);
    msg.altitude = 0.690356291494883;
    msg.roll = 40824U;
    msg.pitch = 51443U;
    msg.yaw = 36647U;
    msg.speed = 15899;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.9038056295446548);
    msg.setSource(39256U);
    msg.setSourceEntity(56U);
    msg.setDestination(51083U);
    msg.setDestinationEntity(143U);
    msg.altitude = 0.9378437601361673;
    msg.width = 0.28937405156598994;
    msg.length = 0.6636979577729052;
    msg.bearing = 0.8554564078797416;
    msg.pxl = 8364;
    msg.encoding = 4U;
    const signed char tmp_msg_0[] = {27, 40, -71, 41, -98, -49, 10, 13, 19, 12, -26, -85, 68, -6, -57, -3, 9, 24, -117, 68, -122, -88, 102, -36, 73, 108, 3, -13, -115, -61, -103, 49, 35, -8, 70, -30, -16, -119, 61, 86, -14, -110, -92, -125, -52, 9, 93, -54, -87, -66, -115, -128, -83, -20, 28, -27, -111, 20, -105, -125, 81, -3, -16, 72, -63, -100, 43};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.1940167765998737);
    msg.setSource(18857U);
    msg.setSourceEntity(96U);
    msg.setDestination(42727U);
    msg.setDestinationEntity(79U);
    msg.altitude = 0.4312276061396947;
    msg.width = 0.4343864310240503;
    msg.length = 0.8054727441542965;
    msg.bearing = 0.4235646227544213;
    msg.pxl = 25998;
    msg.encoding = 36U;
    const signed char tmp_msg_0[] = {62, 62, -84, -3, 41, -64, -117, -62, 16, -46, -42, -79, -113, -61, 81, -26, -111, 81, 64, 26, 39, 117, 33, 22, 75, -79, -47, 78, -58, 87, -123, 54, 115, 17, -63, 109, -86, -74, -57, -103, 89, 69, 33, -69, 0, 117, 27, -120, -47, -76, -107, 118, 62, 67, -100, -6, -102, -63, 125, -59, 23, -109, 6, 36, -119, 101, 78, 106, 113, -75, 1, -68, 111, 116, -84, 46, 109, 72, 126, -47, -94, 120, -66, -73, 79, 75, -52, 8, 111, 72, -58, 11, 107, 4, 103, 98, -109, 39, 24, -45, 0, 86, -115, 68, -127, 59, -9, -61, 11, 122, -59, -9, 78, 120, 39, 21, -118, -4, -31, 30, 75, 84, 119, 112, -50, -17, 68, -22, 17, -19, 91, -54, -32, 115, 97, 8};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.27558978422247726);
    msg.setSource(43900U);
    msg.setSourceEntity(196U);
    msg.setDestination(61446U);
    msg.setDestinationEntity(78U);
    msg.altitude = 0.7130159678277659;
    msg.width = 0.17426144334682137;
    msg.length = 0.34845173184704326;
    msg.bearing = 0.7507846357323162;
    msg.pxl = -17234;
    msg.encoding = 138U;
    const signed char tmp_msg_0[] = {-116, 85, -31, -94, -37, -51, 54, 30, -34, 31, 33, -55, -99, 70, 97, 104, -13, 31, 6, -20, 39, -97, 56, 119, 46, 28, -105, 27};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.021371025258986598);
    msg.setSource(27962U);
    msg.setSourceEntity(13U);
    msg.setDestination(60955U);
    msg.setDestinationEntity(88U);
    msg.text.assign("BVLFAMBDGWRDVAPLSCKRDOUKRGTJWUEBOBCUVNUMXNKMQLRJNEFPYHYYQUXDOWITEHQSRRKEZSYSXVCHWDLZQUHJFJVMQIIQXRHJZUXPCWSMGASLIYNSGFJORJAWBWKUCIHGDLAHKYIUVDTGOTXVEQZXOTZLWAOVBGTSCSHLEPIAFFWMRIYBQXFJIBDAZWBNPERDVMMZGKENJOZCHANOGMCKJZFPXBKUNCHEETPY");
    msg.type = 176U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.136118129805181);
    msg.setSource(54679U);
    msg.setSourceEntity(128U);
    msg.setDestination(46695U);
    msg.setDestinationEntity(205U);
    msg.text.assign("HAQNAICCAPETCMXUDCYEIGGWXFUWUZCFLIJERVVMEUWBLCMFBWSIWYYBWGIAAZJMSSUTHNZSTXYLHJJIPOXZTZTVDCYPPOFGK");
    msg.type = 252U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.12366547997007726);
    msg.setSource(39684U);
    msg.setSourceEntity(177U);
    msg.setDestination(65249U);
    msg.setDestinationEntity(248U);
    msg.text.assign("KXLMDVKNWMJRQEATHQYFIZZRRYTJOUGWEKDLCRPQNAROSVJQZJMFAUNNKGPAELTISUKAJGIYVEUGTCCHCUVVBVAOHYNIUZXFJTQIZWMCXDFNBILBEXTQDXCSPAENMVVCTBPYSMSHGDOPBEYZAHQWLJM");
    msg.type = 137U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.3938590507275783);
    msg.setSource(12170U);
    msg.setSourceEntity(209U);
    msg.setDestination(51148U);
    msg.setDestinationEntity(136U);
    msg.parameter = 145U;
    msg.numsamples = 10U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 58010U;
    tmp_msg_0.avg = 0.1475905236461189;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.7098682250398769;
    msg.lon = 0.35466977358193597;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.51496471576078);
    msg.setSource(5014U);
    msg.setSourceEntity(121U);
    msg.setDestination(2743U);
    msg.setDestinationEntity(239U);
    msg.parameter = 87U;
    msg.numsamples = 54U;
    msg.lat = 0.7810217127040296;
    msg.lon = 0.026520908935654064;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.11071195492498442);
    msg.setSource(34863U);
    msg.setSourceEntity(124U);
    msg.setDestination(51911U);
    msg.setDestinationEntity(170U);
    msg.parameter = 194U;
    msg.numsamples = 145U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 26225U;
    tmp_msg_0.avg = 0.14326041564441272;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.5329842143134708;
    msg.lon = 0.7562284282124512;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.010677235091154036);
    msg.setSource(43568U);
    msg.setSourceEntity(82U);
    msg.setDestination(20400U);
    msg.setDestinationEntity(124U);
    msg.depth = 30789U;
    msg.avg = 0.013098924073323026;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.27090601144544124);
    msg.setSource(7647U);
    msg.setSourceEntity(225U);
    msg.setDestination(17449U);
    msg.setDestinationEntity(251U);
    msg.depth = 59428U;
    msg.avg = 0.9810765620694887;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.1274300358933973);
    msg.setSource(22258U);
    msg.setSourceEntity(115U);
    msg.setDestination(14177U);
    msg.setDestinationEntity(36U);
    msg.depth = 17637U;
    msg.avg = 0.24759945112478132;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.8914000406361092);
    msg.setSource(50621U);
    msg.setSourceEntity(138U);
    msg.setDestination(37180U);
    msg.setDestinationEntity(48U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.8281444658744004);
    msg.setSource(55816U);
    msg.setSourceEntity(40U);
    msg.setDestination(22914U);
    msg.setDestinationEntity(47U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.7427228799445171);
    msg.setSource(2329U);
    msg.setSourceEntity(43U);
    msg.setDestination(64689U);
    msg.setDestinationEntity(38U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.463495853424686);
    msg.setSource(42777U);
    msg.setSourceEntity(41U);
    msg.setDestination(56544U);
    msg.setDestinationEntity(51U);
    msg.sys_name.assign("BGIQXHCATZRPKAXHFEXXSUWWGJKJCENJHFXUMAEGVFAXHUVTYNLACTOVLJIOZHCEUKHPRYVOUBROAGECGMEZLTDVRZ");
    msg.sys_type = 12U;
    msg.owner = 46558U;
    msg.lat = 0.15904528882651447;
    msg.lon = 0.9839466007077259;
    msg.height = 0.0798743369011321;
    msg.services.assign("FULDMFIZZUURSOHACAMQJNUACUDYHVJTRPUHUBEXJLQFKWVQGEQBWGYAPRBECXSNGQMVSCIRTMLDQHMFIPLXSSAEJGHNZOOZHOPONXTANTCTVFOLIDRCHPIBKZWTWFLVWZBYGEXKRJSEKXBVRBUKWKAQEDMGLVSGAYOUNYVUDZVIYLJTN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.1224676246304709);
    msg.setSource(20474U);
    msg.setSourceEntity(150U);
    msg.setDestination(48511U);
    msg.setDestinationEntity(243U);
    msg.sys_name.assign("PHQPKOXOGZJKYCIGKPKHEOQZZLNJQBUHZXSESFTUVTWGVYXWFUNNMUXTSRWOEWHVMAWJGHTAZYJWUKRGCRLDDEBXXTNIYQQPJKWNHEBUQDKSHWGBPVTEJLTINUIVHBORPJNRGSOBBECDKCOAFJFASXSWMOGANLLMZIFHDMAIXYXMUICRDLQVEBLYNIJHBZSQPMZTYSPRZFRC");
    msg.sys_type = 35U;
    msg.owner = 50998U;
    msg.lat = 0.38106059849673113;
    msg.lon = 0.20033279699603168;
    msg.height = 0.558346832041782;
    msg.services.assign("UBWHFNFFVULUXMGQNIGBUSIGJQNJQESNBQODAPZPMGRYDTQDGLLPOIZATEQF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.593239494149946);
    msg.setSource(58610U);
    msg.setSourceEntity(56U);
    msg.setDestination(5449U);
    msg.setDestinationEntity(59U);
    msg.sys_name.assign("SXKRZLHWNZEHQTTYASQFXPQMUBVJOCDJRQCZAEBKHGLXCPERQUWOGMUHCUCBWOXKGTDREHHRFBFAKMLONSCXGJQRIVTCGZVZEOOJIZJILLQWYHJUDSIYVOILQADYUOMPYTAGPZXNNXGEHVEBOKMKIPRIZLRFMWLBGAKPRQWRJHCIETPHSCJFPMEIFKXFSTDYSOADCUZ");
    msg.sys_type = 67U;
    msg.owner = 34557U;
    msg.lat = 0.3789554244466731;
    msg.lon = 0.7941494760609588;
    msg.height = 0.26609324001122003;
    msg.services.assign("UBHGXUVFBMGGZUOVBAR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.809084896100497);
    msg.setSource(60476U);
    msg.setSourceEntity(139U);
    msg.setDestination(54317U);
    msg.setDestinationEntity(229U);
    msg.service.assign("XNEWPGQRNDMVOPCUSUZBRFVBJNOQFSVZHIZJFRUSNOCVHVTOQDBQHGPKGUIZABWSMYGKCIXPMMTMNHHZCHXRDYUBZPIBCDATULSEVMZFEMBKGXXFWQSXCWIJBZFLFJBUMRRDVLWKHYWTOIYPPMEYHVDYE");
    msg.service_type = 95U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.5221355454553355);
    msg.setSource(11283U);
    msg.setSourceEntity(114U);
    msg.setDestination(63017U);
    msg.setDestinationEntity(72U);
    msg.service.assign("LLWLHBHTZFQWVEDBQBUTOQQDQEOXUMAAIFKVPZAPWTMHKALDCETTBILRKCYAEOPSILUFGADVJCEPNTCLRWKBWWMJUVGHJEHRNLBGNCYUWIGPMSZPHTCDYFEBHOTGZQJFXSZDSAVMRJKSORRYSQDMGNCUVKOQONUEXIBMEXOTNRDIVZZGXNQZPJS");
    msg.service_type = 92U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.5851878978823667);
    msg.setSource(15528U);
    msg.setSourceEntity(232U);
    msg.setDestination(36499U);
    msg.setDestinationEntity(28U);
    msg.service.assign("XNVIUFJELBIOKTEPUXYMMQCKOIXLDOEBQGLAJBGEQLWQCZJNHOMCTURCLPJZCJNSYMQKSHPZREGAGTPNAHBCVZQAHEXSGRDSYVSZAKTIOZINQLPZASEVCWVILSBAVRMNCMFYXLDGBXR");
    msg.service_type = 176U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.6810620526326499);
    msg.setSource(53246U);
    msg.setSourceEntity(6U);
    msg.setDestination(42319U);
    msg.setDestinationEntity(140U);
    msg.value = 0.5728076906312379;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.7696890284447866);
    msg.setSource(29407U);
    msg.setSourceEntity(195U);
    msg.setDestination(12000U);
    msg.setDestinationEntity(156U);
    msg.value = 0.01977144305369405;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.815492425958337);
    msg.setSource(22232U);
    msg.setSourceEntity(101U);
    msg.setDestination(55972U);
    msg.setDestinationEntity(188U);
    msg.value = 0.7425595286456739;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.9799186001750092);
    msg.setSource(31693U);
    msg.setSourceEntity(39U);
    msg.setDestination(60686U);
    msg.setDestinationEntity(158U);
    msg.value = 0.5191781641301967;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.5514729393016593);
    msg.setSource(48428U);
    msg.setSourceEntity(29U);
    msg.setDestination(15439U);
    msg.setDestinationEntity(108U);
    msg.value = 0.25131790103484153;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.4911928149544038);
    msg.setSource(48413U);
    msg.setSourceEntity(102U);
    msg.setDestination(13514U);
    msg.setDestinationEntity(44U);
    msg.value = 0.49439427171744443;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.016856279606695113);
    msg.setSource(25625U);
    msg.setSourceEntity(21U);
    msg.setDestination(703U);
    msg.setDestinationEntity(109U);
    msg.value = 0.13506571837298054;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.4418495034117448);
    msg.setSource(35206U);
    msg.setSourceEntity(142U);
    msg.setDestination(10671U);
    msg.setDestinationEntity(174U);
    msg.value = 0.7433783847727524;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.9042546967062128);
    msg.setSource(9768U);
    msg.setSourceEntity(149U);
    msg.setDestination(8792U);
    msg.setDestinationEntity(116U);
    msg.value = 0.2069994422450976;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.2414142215497519);
    msg.setSource(33835U);
    msg.setSourceEntity(27U);
    msg.setDestination(35449U);
    msg.setDestinationEntity(2U);
    msg.number.assign("KFKDDQWHKJQTUNSRNLSBQTOETIOGSGZJAPBKRUKHADPCNHNBEOWAIAFHZWELWSJYMOWTCJSLNNVMDCTRDZLKVTQAXVTFEFRQUNDMZBVYLWLZYQHTDUBOPYHKJKIPGJEYVSCXXASZRDGQCWZREIZCMFVSBEUSOEYRBPFZFIOWXKZHVULCNORVXDIMHUKBFIGQIPXNLUIMFVJTYTEXQHJPSMGLJXAMG");
    msg.timeout = 53639U;
    msg.contents.assign("VYIAOSMCDKMFLCNGVPTTZNUZSQNFZZUSDLFORTKMLNYTCRTQYRRZXHBVWIMXPDHAXVYAKTQMOSIEBUHWOBKCXAFFJKEYDJEWZPGFQLVPKSUYSIKCZISEUPQTDGZLWWICHVVPPGSJCFAJGXZQHBYAMIKLBOURUENBOYZNWBNGENQMQUCITJQPJNDDAV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.6779115293988339);
    msg.setSource(44037U);
    msg.setSourceEntity(173U);
    msg.setDestination(30248U);
    msg.setDestinationEntity(181U);
    msg.number.assign("OMAZTBSDDFNCVKGLBGWXQLSBCFTIDBRACLIRIQWECHKJQRFZKVGHMIBVJAUHWESDWQHZGQHPVZCMAGYZARRUONPFOWOBYCFCZQEXRNLMKFZIAEYJPTMZNXAOPUAXPPDXDRGBNKFTUUTXMUILQGCYWUYDLWJNSKTQEVSFRNDKYFC");
    msg.timeout = 56887U;
    msg.contents.assign("ONOPYHXAVEJWAMWQWFZOBNIYVRYDMFCNRNUNIVFHATAOMDQMTNKCBEMFLTWZWKUSSJVOHVDVVHSFGQZJXMIALEISG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.6331229452982482);
    msg.setSource(63732U);
    msg.setSourceEntity(251U);
    msg.setDestination(24410U);
    msg.setDestinationEntity(210U);
    msg.number.assign("NFVVTDWHFIYOXP");
    msg.timeout = 58373U;
    msg.contents.assign("MHYIYWSNXWZVVUEBFPCMVQNJFIQBLSOBLUBANWFZZAVRBKOSAIHJDLWCKAHTQKWA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.2341509883711279);
    msg.setSource(37048U);
    msg.setSourceEntity(146U);
    msg.setDestination(45882U);
    msg.setDestinationEntity(190U);
    msg.seq = 1182067781U;
    msg.destination.assign("BZJSDHXXQTJHCADVDIWJXHNUWIQJAELURYXBHBGZSZYMVMTHCCDXMTTZNQSNNFYOMKZPVLJAEZILXMAEWAABA");
    msg.timeout = 4684U;
    const signed char tmp_msg_0[] = {59, -56, -106, -80, -76, 56, -21, 105, -68, 79, -17, 31, -29, 25, 21, 34, -65, 10, 11, 1, 97, 82, -8, 120, -108, -76, 78, 107, -25, 110, -38, 117, -64, 95, 121, 46, 74, 68, -11, 32, -72, -22, -18, -117, -71, 84, 54, -2, 94, 68, -33, 101, -34, 24, -91, 24, 39, -72, 16, 67, 54, -20, 65, -11, 75, 97, 48, 74, 28, -62, -97, -62, -82, 107, 8, -88, -103, -61, 62, -81, 105, 125, 49, -97, -5, 84, -127, 8, -108, 18, 104, 30, 85, 40, -84, 90, 111, 27, 114, 75, 120, 69, -35, -83, 107, 95, 67, -93, -121, 77, 73, -122, -128, -22, -88, -33, -48, 106, 36, 55, -69, -96, -109, -115, 107, -120, -36, 17, 65, -12, -47, 9, -18, 73, -116, -55, 7, -47, 6, 125, 121, -41, -3, -107, 62, -55, -39, 76, 15, 102, -13, 18, -41, -73, -83, -104, 100, 90, 35, 36, -7, -31, 78, -103, -69, 106, -108, 74, -27, 24, -127, 27, 29, -65, 49, 103, 36, -20, 116, -11, -59, 17, -38, 49, -116, -60, 38, 28, -7, -52, 46, 49, 38, 12};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.7434202174657046);
    msg.setSource(51020U);
    msg.setSourceEntity(229U);
    msg.setDestination(45080U);
    msg.setDestinationEntity(6U);
    msg.seq = 3092522228U;
    msg.destination.assign("HLNOYUELSOLSNCWAVOFZVXCRIDSZJYXTRMYHNFTEMDYGAIQURNPJXLBKHONQSGMUZXRELFCEWPGCGJOMSZIJNBDCBYTBFTACOHNIHFPMQWOKSXFRJECYXDWBXUSYZDPSZWSEISNYGLTTHWUPZGAAFVIVLKFQKWGDGUIQLULWRDTAUIPBCHUHMXBZYDEMQMHAAQKOTWVPBEFYKGGKHK");
    msg.timeout = 13265U;
    const signed char tmp_msg_0[] = {-121, -33, -111, -89, -56, 104, -87, -84, 66, 123, -101, -103, 87, 3, -118, -102, -38, -117, 108, -95, 64, 73, -105, 125, -16, 41, 44, 69, -87, -42, 100, 63, -60, -4, -5, 88, -7, -82, -80, 114, 12, -113, 59, -128, -83, -54, -102, 84, -63, -27, -106, 123, -83, 32, 76, 79, -58, -102, 108, 65, -4, -111, 13, -95, 54, -112, 106, 91, -88, -104, -35, 88, 73, -118, 116, -120, 100, 103, -84, 5, -48, -101, 40, 108, -17, -72, 34, -41, -102, -21, -73, -39, -99, 122, 102, -39, -36, 83, -93, 38, -51, -72, 63, 75, -63, 58, -70, 101, -15, -18, -63, 38, 54, -50, 111, -28, -54, -39, 84, -55, 29, -63, -69, -37, -99, -37, 42, -94, -16, 20, 2, -43, -38, -1, 2, -74, -115, -31, 43, 96, 92, 59, -72, -66, -44, -103, 29, 35, -70, -9, 49, -1, 22, 119, -124, 53, -51, 79, -21, 78, -64, -14, 89, -112, 34, -64, -121, -67, -36, 86, -99, 43, -5, 50, -25, -126, -39, -90, 60, 14, -12, 1, -57, -83, -109, 44, -125, 87, 51, -6, -123, 45};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.9939550283260111);
    msg.setSource(10445U);
    msg.setSourceEntity(225U);
    msg.setDestination(63606U);
    msg.setDestinationEntity(249U);
    msg.seq = 1346927888U;
    msg.destination.assign("CVDQLUENRKTDZGHNSPHZBVOEPRLQQFHZDKSKPQRTBUICEZDCZZDEPALHDQHLGSOWVCKOWJXXYOWFYAIBNOJECZTMDFCNJHXSFOQUNKGRFPXAWUGBPZZNSTMXWJGKVRPBWPXFUOCIZIAYFEVAKABGMUCJYRBBBWVVXNUYKGAUCFK");
    msg.timeout = 41145U;
    const signed char tmp_msg_0[] = {-125, 51, 115, 26, 61, 56, -98, -6, 126, -54, -115, 103, -24, 83, -109, -10, 93, -57, -82, -63, -75, 18, 68, -31, 25, -122, 26, 20, 102, -58, 59, 100, -71, 73, 67, -126, -5, 50, -53, 2, 68, 4, 114, -1, 18, 64, -119, -66, 48, -64, 48, -3, 84, -57, 17, -42, -21, -70, -28, -69, -107, -122, -42, -113, 114, -36, -71, 23, -83, 105, -25, -20, -46, -46, 90, 17, 24, -117, 43, -118, 2, 97, 46, 106, 122, -127, 91, 28, -48, 63, 95, -16, -53, 62, 87, 124, -76, -84, -54, -103, -76, 37, -40, 56, -57, -56, 38, 33, 5, -31, -90, -53, -5, -39, 112, 11, -29, 38, 102, -123, -6, 88, -5, 47, 25, 7, 60, -21, 74, -118, 109, -95, 91, -3, 24, -66, 82, 121, 30, 71, -123, 58, -52, -87, -39, -39, 13, -79, -26, 89, 112};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.05300563927022672);
    msg.setSource(24443U);
    msg.setSourceEntity(40U);
    msg.setDestination(60589U);
    msg.setDestinationEntity(34U);
    msg.source.assign("WCELLVNGKMTYVAQDOTUUUABMHFUNAKXPBNJPWNXFWQMYAKZZTVQXVO");
    const signed char tmp_msg_0[] = {-55, 54, 2, 44, 30, -34, 84, -72, -118, -122, 72, 71, -72, 113, -111, 123, 96, -115, 84, -34, -3, 117, 83, 49, -58, 57, 21, -31, -8, -97, 123, -30, 29, 55, -95, 28, 39, -115, 39, -10, -105, 62, -15, 124, -50, -121, 18, 60, 125, 38, -119, -23, 71, 97, -93, -50, 16, 27, -48, 115, -110, -13, -89, 52, -1, -94, 56, -126, -97, -70, 19, 109, 36, 70, -80};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.27513870598424295);
    msg.setSource(4098U);
    msg.setSourceEntity(236U);
    msg.setDestination(18036U);
    msg.setDestinationEntity(192U);
    msg.source.assign("RXHJZTEONVAL");
    const signed char tmp_msg_0[] = {-29, -74, 32, 79, -25, -49, -31, 85, 75, 10, 99, -78, -68, -53, 15, 78, 74, 7, 103, -112, 7, -38, -88, 92, 15, 70, -78, -126, -39, -31, -103, 85, -79, -92, 107, -47, -22, 31, 28, 21, -78, 125, -84, 76, -30, -19, -16, -43, -70, -84, -83, 65, 69, 38, 82, 85, -49, -1, 65, 88, 21, 3, 87, 54, 60, 107, 39, -109, -39, 43, -52, -101, -120, -114, -109, -10, 43, 54, 61, -6, 12, 28, 65, 117, 64, -48, -35, -57, 74, 66, 104, 118, -41, 82, -83, 89, 63, -59, -105, 56, -27, 84, -100, -128, 111, -124, -112, 72, -117, 90, 0, 12, 67, -40, -9, -11, 9, -67, -42, 9, 45, 31, 68, -102, 38, -108, -111, 37, 2, -102, 4, 59, -36, -70, 1, -34, -82, 86, -11, 93, -43, 125, -25, 63, 80, -80, -72, -47, -114, 28, -83, -125, -6, -108, -12, -4, 101, -81, 69, 45, -37, 111, 61, -3, -106, 105, 46, 103, 18, -88, -77, 23, -9, -41, 8, -72, -126, 43, -21, -42, 119, -40, -51, -43, -28, -100, -97, 126, 41, 34, -61, -18, -30, -42, -118, -31, 98, -117, 46, -60, -37};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.7948468525298339);
    msg.setSource(18388U);
    msg.setSourceEntity(193U);
    msg.setDestination(301U);
    msg.setDestinationEntity(40U);
    msg.source.assign("JWGAYHWXMDOYBWNKDGMDHHMCPLPLHEWWTLIEIPKJTRQRMAYEDFLRDSJXSONLKNBYZDDZCIQAGFBZXGTKJZEBSAAKJKRMSYKSVQIRSUENCNTTCOFSFUOPKTHFXFPCIENT");
    const signed char tmp_msg_0[] = {-5, 48, 112, -14, 103, -81, 113, -31, 108, -92, -11, 80, 58, -29, -86, 106, 82, 34, 93, -84, 38, -53, 29, -2, -67, 38, 19, 96, -109, -63, 92, -25, 49, 35, -6, -34, 60, -30, -88, 38, -96, -15, -54, -60, -34, 124, 77, -9, 54, 49, 114, -47, 8, -97, 59, -56, 41, 8, -112, 44, 68, -56, -61, 66, -28, 46, -10, -114, -81, 104, -18, 37, 40, 113, -118, 6, 98, 11, -56, 78, -56, -95, -39, 2, -76, -84, -112, 69, 104, -94, 61, 5, 107, 117, 93, 87, 100, -33, -101, -40, -27, 41, 123, 45, 48, 12, -11, 1, -109, -66, -107, -125, 41, -7, 45, 91, 56, 119, -8, -49, 108, 98, 108, -20, -116, 11, 65, -71, 88, -94, -115, 70, -27, 60, 61, -75, 75, 125, 46, 11, -45, 75, 114, -67, -41, 21, 45, -84, 10, 39, -103, 8, 13, -124, -111, -24, -63, 94, 90, -42, 84, -5, -52, -72, -2, -126, -101, -97, -33, 65, -19, 6};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.34152712348805536);
    msg.setSource(51384U);
    msg.setSourceEntity(180U);
    msg.setDestination(31732U);
    msg.setDestinationEntity(176U);
    msg.seq = 31348494U;
    msg.state = 204U;
    msg.error.assign("SMLCPNJCORKYOACFSGHAOJVARPHGXBHYAIYCCLAGMTTGNDPIVFIMDQPNEVFJRJYKBZQFFBOTFTZKGMGFMROTYFSNBLWHEAFHUDJJQMOZVASRBNFLUBHLIXXJMICSVTUWVSXJHUKPCAWOYKQBXIKWZOAWJRQBQGUXLAPPZLPNVEWCYGUUZECDTKDUDEXEDEHKIWOPKGREQXWRMSNTVNJILQRXTDWHENVBGNYCZQIVDSZKHZWSIQPLMB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.6828028790281673);
    msg.setSource(25695U);
    msg.setSourceEntity(44U);
    msg.setDestination(13364U);
    msg.setDestinationEntity(220U);
    msg.seq = 3333816218U;
    msg.state = 135U;
    msg.error.assign("YILDGLRNWYAHIUBZMGTPPQCRNVBDSWJJMQXKBNDPVCYDOXUOVWX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.1580749372929856);
    msg.setSource(28319U);
    msg.setSourceEntity(157U);
    msg.setDestination(20645U);
    msg.setDestinationEntity(202U);
    msg.seq = 556643020U;
    msg.state = 111U;
    msg.error.assign("TYADYIXGBRWVJEEJRNKQOGSLDOGUFBAVQRILONTLCUJYRDCOXZTMUREODUDGVJSKNQFALZQHESTHCBYFIAPIHVTSHOFUUMVWZNZTGMXKNQLLGVUHQWHDHMTRRDRBYQFDDAKCZTXBXEFKNCWYHMPOCKIKIQZQBZPPGEJTYAINJLUEZYIPAVBLBIDUSRXVXJH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.055188672975206465);
    msg.setSource(12406U);
    msg.setSourceEntity(16U);
    msg.setDestination(26988U);
    msg.setDestinationEntity(170U);
    msg.origin.assign("XPZAYPCQNKHCOQPBEVZERANANVZINMEBXRQZWLWGTOGDSZYNFZWDTRSIHLWAPDWFOOYOAGEFEBPKMRWJMTZCYGLASUYVZEVYNKSLHKMQEIPOMHRQUAQIDFFASFDYOBGCBWATGMQMMHCTCXXGLXYXHUMNIEXZCIDUFBOLNIMVKJSTKJTQKTLAJWUBVJUSPJLCJUSRJNDRVFQYWYGCIZ");
    msg.text.assign("HVOJKRJOOSDTMCJLIHMJPXXTIXICVYGPULAGFOZPH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.7512185324533409);
    msg.setSource(19094U);
    msg.setSourceEntity(30U);
    msg.setDestination(19795U);
    msg.setDestinationEntity(94U);
    msg.origin.assign("IFCPIKBBTZJLOYWMGOUCNMDAVGXROVMUHDGRXLKRZMHMQVZLPUDZULROUIEWDNNTGUHQYECTZVIFDRFIXLHAYITVRRBYFYCNKKGOEZZBONFQKXFCNQQNEMGECTAPYTVQSDHHJAVBKJPCUBLAHSPULE");
    msg.text.assign("LYNWYQWXCAMDOOQVKGRYSLATGCRJLLJIEKICJTDRNWUIGESHJACMZISHEBYMQNVRCHXDUQSLGVOCXWBVATKETZNOFAFVGSTMAHZEOEQZBVIMBSYNWKNYYHMZOTKRHOPRXTAFCDGWXVVUWVSUNBURLNJL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.22392169402379358);
    msg.setSource(33402U);
    msg.setSourceEntity(112U);
    msg.setDestination(13055U);
    msg.setDestinationEntity(63U);
    msg.origin.assign("AMVDVNPMHZZSOFTFKLSTZHDHOJRZRXIFYBAKLTYJTIKHOSEQCIWJRDAQMGVOMNHUIGZGDYTPDQSUJQOBNWUMPUCBINCYYDHWODPEOQBTSXFWLITMKDHXIALRWRBGVPPBDQTHZMENELJJLFQRNKTAWQLVYVSEWRGJZYMOCAKOVEVDCKSCLIIZGMXGGCGBLPPBXVFOKUUKYFHWQJRI");
    msg.text.assign("KLHKXLRMTUNJDSFBAKQCAMGZPNANYRHERVORGASFLNMOITILOOVWEQXOAQRHGSVBKIPCUYCHEPGXPUBXQXSVTJEWAWTYJNJNJGUDVZMZBBOKFZCCQI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.7617265404282276);
    msg.setSource(13825U);
    msg.setSourceEntity(170U);
    msg.setDestination(38876U);
    msg.setDestinationEntity(3U);
    msg.origin.assign("ZFXRQWKROZKQTDMFXZNNTIJXMBDAFTYATIYXCNAPNQKQVFZWBHRJPEESQXLLVYBADZGJ");
    msg.htime = 0.19588017079822906;
    msg.lat = 0.11922036315877449;
    msg.lon = 0.3788025278047339;
    const signed char tmp_msg_0[] = {-61, -103, 48, -78, 45, 83, 40, -91, -44, -13, 122, 32, -13, 23, -85, -15, 100, 123, -74, -96, 6, 102, 39, -2, 115, -56, 119, -20, -106, -50, -64, 113, 83, -103, -40, 77, 48, 115, -110, 28, -34, 83, 100, 5, -26, 80, -19, -64, 124, 2, -8, -38, 67, 68, 1, -108, -119, 10, -66, 93, 122, 56, -35, -17, -1, 72, -65, 90, 95, -128, 27, 61, 34, -101, 73, -72, -39, 62, 75, 36, 119, 79, 85, -59, 3, 115, -114, -32, 30, 14, -110, 38, 69, -3, 69, 3, -85, -117, -20, 26, 39, -11, -3, -120, -4, -39, 111, -76, 9, 102, -9, -4, 58, 105, -111, -114, 0, 83, 100, 25, -26, 6, -73, -38, 40, 9, 49, -55, 117, 93, 126, -103, 112, 47, 71, -50, 95, -61, -26, 96, -104, 7, 121, -76, 32, -121, -54, 124, -1, 93, -126, -23, 63, 56, -125, -65, 58, -120, -33, 16, -81, 55, -79, 65, 60, 97, -28, 14, 65, 96, 23, 59, -73, 89, 13, -65, -87, -127, -43, 59, -9, -89, -30, 25, 60, -61, 102, -109, 67, -68, -91, -121, 49, 106, -7, 122, 34, 39, -95, -85, -78, 6, -28, -78, -109, 76, -93, 55, -110, -68, 18, -32, -36, 66, 88, 77, -122, -65, 104, 21, 57};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.3882985774719423);
    msg.setSource(9802U);
    msg.setSourceEntity(85U);
    msg.setDestination(30744U);
    msg.setDestinationEntity(90U);
    msg.origin.assign("WATKHBOSWCMDEDHYARVRFVCXLPSGZIDRHZIGFSCLPFSBJJKJZMSAHCWJUKHCBBYUTGREQAVRMLBPFNPXNIOZLKTVQYUFRSPRJLIDIGDZABZGFUTXMKEUNOUCVQQKXYMHBXDWTDLXLVSFCTOIXVJJDSCQVCGQZFFULTWWNWQIUGVJRLNZDAHWBOOXYKKNSOOTBQEMOHQVJGPUEPAMGPRQLNKRPIMUY");
    msg.htime = 0.8958544959946994;
    msg.lat = 0.7953629028372095;
    msg.lon = 0.28129683932457894;
    const signed char tmp_msg_0[] = {83, 45, 34, 5, 111, -83, -45, 126, 31, -98, -52, 87, -119, 119, -24, -35, 119, -69, -33, -5, 2, 126, 111, -81, -104, -30, 24, -79, -44, 110, -14, -92, -115, -105, 94, -30, 53, -64, -58, -10, -42, -53, -5, 108, 106, -57, -59, -106, -114, 51, -69, 62, -34, 25, -97, 20, 87, 80, 58, 14, 97, -109, -99, 111, -54, 96, 124, 8, 3, -88, 36, -112, 62, 124, -103, -86, 99, 68, 120, 16, 25, -111, -127, 53, -108, 47, -25, 83, 30, -65, 28, -69, -91, 0, 79, -64, 34};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.006475758432848311);
    msg.setSource(62511U);
    msg.setSourceEntity(115U);
    msg.setDestination(51793U);
    msg.setDestinationEntity(119U);
    msg.origin.assign("JGGNDUZCNNQKZHNHKDSSBRSWOWHLMGVGWIERSVXLFEAISRVQZVEUQBUPQXJJZRSQJRAFFXCIJJP");
    msg.htime = 0.14426903666029434;
    msg.lat = 0.6255764503953687;
    msg.lon = 0.40499539131055184;
    const signed char tmp_msg_0[] = {-40, 24, -93, 3, 69, -43, 21, 31, 100, -58, -58, 124, -17, -82, -116, 2, -77, -78, 122, -114, 44, 60, 40, -24, 36, -63, -1, -27, -26, -17, 113, -110, 83, -13, -1, -74, -72, 98, -102, -91, 40, -19, 66, -48, -11, 31, 125, -105, -46, -100, -54, 10, 4, 36, 69, 30, -3, -50, 106, -67, -53, 83, -44, 82, 19, -107, 11, 26, 75, 112, 46, 94, 27, -98, 54, 85, -31, -83, 99, -64, 26, -105, -9, 118, -65, 78, 89, -44, 77, 41, 121, -15, -58, 119, -120, -20, 81, 52, 104, -105, -49, 90, -70, -105, 10, 90, -71, 14, 113, 125, -16, -84, 22, 120, -25, 17, 12, -46, -111, -25, -112, -35, -120, -65, 29, -111, -78, 5, 93, 19, 111, -83, 83, -13, -117, -14, 60, 115, 91, 95, -12, -58, 67, -45, 34, -74, -101, -97, -98, -52, 96, -37, -9, -64, 100, -3, -69, -107, -114, -78, 81, 2, -106, -32, 57, 45, 39, -34, -28, -49, -101, -45, -78, -108, -29, 58, 121, 48, 82, -41, -111, 46, 125, -68, -119, 55, -57, -99, -84, -2, 10, 45, 12, -53, 52, -75, -32, 126, -102, -128, -88, 78, -20};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.1032024253166175);
    msg.setSource(1861U);
    msg.setSourceEntity(246U);
    msg.setDestination(4680U);
    msg.setDestinationEntity(92U);
    msg.req_id = 36486U;
    msg.ttl = 18133U;
    msg.destination.assign("RYQURHKKFPIHFAUDVOHJHRJZFLASLSMUIQPUTEIYPGIXIRRUPAZDENBGEHKMCDPSTEXGRGNGHYMCWYICRZUUMYLLCZKNBKEDSVOSPKXYJVJWFWMPFEXXKFYDCBWQLGQCGSIJCEMOGQARFWONVTXNJOFJCTTMBZEADEKCSDCLFTPTSTOMHNQJBATNYWNBPDZKTBQAYUSDRHILHPZ");
    const signed char tmp_msg_0[] = {5, 117, 14, 41, -112, -55, -125, -19, -35, 89, 75, 61, 108, 28, 50, 45, 84, 18, 48, -91, 59, 94, 93, -80, 116, -99, -57, 85, 35, -75, 112, 105, 38, 28, 29, -21, -30, 99, -123, 37, -53, -4, -113, -88, -8, -35, -27, 111, 32, 5, 5, -103, -125, 73, -45, -3, 54, -118, 59, -83, 1, 102, -50, 5, 75, 69, -7, 50, -39, 7, -113, -66, -96, -24, -35, 10, 32, -47, 73, 67, -112, 30, -35, -40, -36, 62, -12, 92, -106, -97, -15, 88, 19};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.0028047700127225017);
    msg.setSource(62743U);
    msg.setSourceEntity(114U);
    msg.setDestination(13329U);
    msg.setDestinationEntity(48U);
    msg.req_id = 33467U;
    msg.ttl = 8708U;
    msg.destination.assign("KLLBNHNSLQSUGZZBRJTDSKVPYLSVWORWXGBMROQBTEEUKAIDFQKATMSWHFRYIEPRNSSKVWENBYIXCPDVDXDFOQJHGADXRZTOQZKOHAMUNQYCJRCMWZUPHZOUIVNZBITLFVEKYILTVJWXEVPCBIENJJZBOHUAUSFCCGMHFCREWHLGGRZIDEAJQKFDPHKVQYMNJTAGKQCOBAWEYWUAPJSFSPJMPCGYDFHLGWQ");
    const signed char tmp_msg_0[] = {-38, -16, -48, -54, -83, 44, 68, -15, 5, 66, -49, -29, -127, -126, -88, -1, -47, -23, 92, -28, 80, 60, 90, -45, 75, -42, 61, 125, 16, 61, 103, 94, 3, 55, 74, -8, 104, 11, -29, -23, -75, -54, -128, -29, -61, -29, -7, 36, 39, 12, 40, 79, 16, -18, -102, -78, -79, 119, 97, -127, -101, 62, 29, 93, 24, -52, 49, -17, 32, 65, -102, 59, -59, 70, 109, 55, 101, -29, -95, 125, -22, -40, -36, -79, 16, -47, -6, 65, 17, -62, 62, 27, 53, 10, 68, -109, 46, 18, -36, 95, -53, 72, -26, -47, 45, 126, -5, -77, 45, 62, 67, 76, -26, 96, -46};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.5113135172843605);
    msg.setSource(63160U);
    msg.setSourceEntity(19U);
    msg.setDestination(60763U);
    msg.setDestinationEntity(100U);
    msg.req_id = 4203U;
    msg.ttl = 24334U;
    msg.destination.assign("XMWVDZTCWNNYOAPCRIFQB");
    const signed char tmp_msg_0[] = {26, -49, -63, 97, -59, -82, -35, 14, 111, 73, 97, 17, 69, -115, -89, -64, 67, 85, 20, 47, 96, -74, -2, 56, -3, 22, 39, 43, -94, -50, -30, 1, 105, 39, -32, -38, 28, -77, -6, -91, 27, -106, -19, 87, 39, -103, -105, -47, -34, 61, 7, -122, -8, -48, -23, 94, 12, -70, -85, 99, -114, 67, 68, -81, -126, 19, 5, -47, -110, 55, 14, -54, -83, 3, -102, -69, -107, -119, -34, -51, 4, -23, -13, -88, 73, 9, 3, -72, 85, 57, -79, 64, 103, -98, -78, 99, 66, 23, -40, -81, -59, 126, 79, -23, 46, -16, 84, 18, 106, -51, -12, -13, 93, 104, 112, 96, 57, 109, 16, -115, -120, 85, 118, 45, 125, -85, -19, -111, -59, -118, -52, 19, -113, -14, -67, 101, -90, -109, -79, -61, 80, 116, -56, 122, -67, -63, 91, 4, -108, 20, -90, -53, -79, 7, -53, 6, -115, 5, 92, 63, -74, 33, 52, -53, 76, -122, -121, 19, -119, -114, 91, 51, -124, -64, -42, -26, -64, -48, -9, -82, 105, -94, 116, -50, -92, 36, -93, 43, -15, -99, -47};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.8579629611371103);
    msg.setSource(49601U);
    msg.setSourceEntity(226U);
    msg.setDestination(46122U);
    msg.setDestinationEntity(186U);
    msg.req_id = 57274U;
    msg.status = 66U;
    msg.text.assign("VUXSEDYRYOMJHZJSNPCZKZCBABWLNUTQEOQRMEBYIXHKNZNLDWSZTOWVCADITBFUKDMLDTCGIYYMPMOZYQSWORLQEQJNAPITKKHUSPJHFXNEDEUSGPOCUGCVBISLWAOPGGIFLTRVZCYEXFAIODPQUJWRTRVZPXIVTANOZFPWYKGBXLMUBWKSMX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.7519456439588762);
    msg.setSource(63204U);
    msg.setSourceEntity(124U);
    msg.setDestination(53888U);
    msg.setDestinationEntity(160U);
    msg.req_id = 61527U;
    msg.status = 234U;
    msg.text.assign("CBMNFMFVMVPQUXTTNBFRMSAEMGKSAZCGGKXKJHOYLKOYJXJGPHYSTFROQVYZVUCSWSBFOOMTIBPPJIHZNXQOIWCIFTMDIIEZXETJSIUVUFUTZMNHLTVBANQLZOTOLZVLNPXRDNLGXWKKRHEPPDQECSMRUWQQGHICDVQKBDDOCQFUYHEPYSCPEIWCGTJBKSJONVXDUHAJMDAFWR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.973651351065106);
    msg.setSource(56272U);
    msg.setSourceEntity(28U);
    msg.setDestination(44680U);
    msg.setDestinationEntity(78U);
    msg.req_id = 8161U;
    msg.status = 187U;
    msg.text.assign("PUZXSOSRSPNIFEQTLHGEKOLRQZPZVVAXKPEOGCLKWASQQLVZXBNOMDTJCNVIZCNIMUIBCIMWMKAKHFCQLQJBOCOJBMNDRTASNEWOUMSYVACUTSKRDAUZWVXPKEQVTFSIJWKPNYKJUDHSBGHVBWHYLNAFPG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.945980729138424);
    msg.setSource(3844U);
    msg.setSourceEntity(71U);
    msg.setDestination(60332U);
    msg.setDestinationEntity(218U);
    msg.group_name.assign("MMFSVVCWJWKMMAUTKWORRYHLNUXLBWBEPXIWGFNHOBPFXEPKZZFMDIDDWHXHOKEQGUZYFFRVTHHEKPNNSHQWIFIALTKXLLJYCZAGNGOUDDQWXPY");
    msg.links = 3641651108U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.8922226629927358);
    msg.setSource(32429U);
    msg.setSourceEntity(222U);
    msg.setDestination(12490U);
    msg.setDestinationEntity(128U);
    msg.group_name.assign("FDOAPMHBDIBAEWRNFXOIWQVSXRPTPNVRSKOZGTCJBYOGJGOLUJDNLBZROTUGDWMVVQMQYCFPJGILFEYUEBKFJEQWETNNUSZTGSPUMAXZZMKZROXQUFVAFLKOJNLCSJTKJCVSXXZLXILBUZCEYYWLNXTEHJAYBRVDKPPDCKIGUYWYQIOAWRMAKQCAWGXVZRWBGYKJEFTLITCVTEAHMXMVRKIHSSDNFLCDHAZEQHPH");
    msg.links = 3276762188U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.9698458531717767);
    msg.setSource(46502U);
    msg.setSourceEntity(8U);
    msg.setDestination(29309U);
    msg.setDestinationEntity(174U);
    msg.group_name.assign("SCKZSIUSBOZTAEFGQJLQEJRCJJOBCZENCWTJSLFKOPGJIJFVCHBHQRTZNVMPBFBOYBVAWNPSTPKXYNWGMWHSLXIWNQIAIYLRYVFKQLUVVNPYGDABDTGBGLNXYSHWMTXHPMYVGPMPXLDJQYCUUC");
    msg.links = 161058989U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.40460277671105627);
    msg.setSource(16114U);
    msg.setSourceEntity(242U);
    msg.setDestination(30797U);
    msg.setDestinationEntity(127U);
    msg.groupname.assign("HSODILCHJPZZCRDAQYZDGPIRVTDAOYMRFYHCJUJVMOQSUWUPTAHKOVANUTKNDUNIENASUEHBQUFBQESXXLMVPQBLPHGJCGXAOIEAVEHRMZNBECVCTMBLMDIGMBUEKGIFZTKMATGTWUXCLIXDEBWJLNDVJLOPYKIYZWPMJMXIWZNWYBUAHSJKCWOZLFPSIGKDRYFFCO");
    msg.action = 192U;
    msg.grouplist.assign("TJZIWRPSNGPMSCTNGJSSUTABMPMLIYVSYLUCVJAAWFFSFLUQHQXEEQAYORHHAOCBSGKDV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.3697323454804734);
    msg.setSource(38776U);
    msg.setSourceEntity(125U);
    msg.setDestination(41038U);
    msg.setDestinationEntity(241U);
    msg.groupname.assign("XLDVIEGBXZBMRSRFOVYQOJHWI");
    msg.action = 144U;
    msg.grouplist.assign("VOUEYQUTASBNZEVXCEHHIMBRLJKYAHHOTJCWMFAIOZUHNEJUNJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.38383146013869485);
    msg.setSource(45134U);
    msg.setSourceEntity(194U);
    msg.setDestination(57589U);
    msg.setDestinationEntity(172U);
    msg.groupname.assign("TFCDOCGQKQIRSHMOIYUJCLEXNCFGKSTWXVVTVNZOIGAAIZEBDQPSKPXTQFDEYMUHPAPPCGMSYOXHKYGYPNMCDOQBVJAHTCFUYYAET");
    msg.action = 101U;
    msg.grouplist.assign("MKFVQMCIPTMRRASNUFOHDFDIVYVOQSZHMUIKBJPUSMNBJWXMVOGMERKIAVFPUNZCJQZPLNYCOOGLXSCFRCDDWSMSPSHLALUXBJIELJDTQAXKPJNTGJFASERYERMNWOJLBLTKQTPNWCKIIAFRLUGHXUAXBQBWEGVBIPPNWVYITVMU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.8428054255511466);
    msg.setSource(18838U);
    msg.setSourceEntity(174U);
    msg.setDestination(13112U);
    msg.setDestinationEntity(62U);
    msg.value = 0.8897172660093781;
    msg.sys_src = 39398U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.7103767823623914);
    msg.setSource(55991U);
    msg.setSourceEntity(100U);
    msg.setDestination(18032U);
    msg.setDestinationEntity(47U);
    msg.value = 0.45659615471468107;
    msg.sys_src = 31604U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.05233849009703129);
    msg.setSource(29583U);
    msg.setSourceEntity(9U);
    msg.setDestination(49515U);
    msg.setDestinationEntity(53U);
    msg.value = 0.05165402717681489;
    msg.sys_src = 48973U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.1630684279158141);
    msg.setSource(31717U);
    msg.setSourceEntity(0U);
    msg.setDestination(3915U);
    msg.setDestinationEntity(1U);
    msg.value = 0.35876722778928194;
    msg.units = 97U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.3853607583930164);
    msg.setSource(5114U);
    msg.setSourceEntity(132U);
    msg.setDestination(32707U);
    msg.setDestinationEntity(237U);
    msg.value = 0.5950942573723323;
    msg.units = 9U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.22293501059243215);
    msg.setSource(15522U);
    msg.setSourceEntity(119U);
    msg.setDestination(60130U);
    msg.setDestinationEntity(4U);
    msg.value = 0.822218048495615;
    msg.units = 120U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.5676489338238717);
    msg.setSource(32357U);
    msg.setSourceEntity(175U);
    msg.setDestination(24669U);
    msg.setDestinationEntity(141U);
    msg.base_lat = 0.8815600668812321;
    msg.base_lon = 0.9657058952833868;
    msg.base_time = 0.3227803770885702;
    IMC::HistoricSample tmp_msg_0;
    tmp_msg_0.sys_id = 23845U;
    tmp_msg_0.priority = -65;
    tmp_msg_0.x = -23634;
    tmp_msg_0.y = 32050;
    tmp_msg_0.z = 436;
    tmp_msg_0.t = -29263;
    IMC::ColoredDissolvedOrganicMatter tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.8819508165963555;
    tmp_msg_0.sample.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.4863316222875945);
    msg.setSource(4404U);
    msg.setSourceEntity(98U);
    msg.setDestination(15643U);
    msg.setDestinationEntity(185U);
    msg.base_lat = 0.7865137218436271;
    msg.base_lon = 0.4457071841927124;
    msg.base_time = 0.1417829706657341;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.044218895219366616);
    msg.setSource(27651U);
    msg.setSourceEntity(132U);
    msg.setDestination(59631U);
    msg.setDestinationEntity(89U);
    msg.base_lat = 0.8339384009928277;
    msg.base_lon = 0.9640136223351475;
    msg.base_time = 0.6639273037794888;
    IMC::HistoricSample tmp_msg_0;
    tmp_msg_0.sys_id = 49967U;
    tmp_msg_0.priority = 91;
    tmp_msg_0.x = -23248;
    tmp_msg_0.y = 1546;
    tmp_msg_0.z = 12336;
    tmp_msg_0.t = -30766;
    IMC::Formation tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.formation_name.assign("VDWQMWQWANCOKAAJTKFQPAZIBRMCKSTHAPFJDAPDXVPPWIDRYKSQJURQCKPQQC");
    tmp_tmp_msg_0_0.type = 59U;
    tmp_tmp_msg_0_0.op = 29U;
    tmp_tmp_msg_0_0.group_name.assign("ACCPMVVXWJKTTGFMARJXWLYCZKDQDUJZIVNUCFXSGCOFOLISLVDOCONTBKPBOWXTVPRQARYHPNJEWWPQUDLQGEPHBRZTIEFVZXWZABXIH");
    tmp_tmp_msg_0_0.plan_id.assign("RVVAQRSDLSCMKZXQKVLXHCXNFOZVTVBYWFNWPXUMHSYXIGUJULDWYOUVOQBWGBWDVOLCNAOIXEJXOMUJSKLHZGUGFTSIKJZHBYYEDHVCLEOPEKFSUWKTIPFKKTJTYFNGKSNYXOSEEZBZRIQRDCAJKRZHCQGPDGFGP");
    tmp_tmp_msg_0_0.description.assign("FEPRFHYATLHPOAOJKOIDNHGVUGIDPSJYVLUBMZBFSKQYDRBVXPNWWQCRKMUUFJAXYZHWCLENDFMSWFSTHKGKTBTVBSPFDFRVTTPDBCAYMEQJHUZGASVWBCXNIMQOLENDCWZFIZLMGLJWEZQY");
    tmp_tmp_msg_0_0.reference_frame = 71U;
    tmp_tmp_msg_0_0.leader_bank_lim = 0.9382289031700044;
    tmp_tmp_msg_0_0.leader_speed_min = 0.3718238797268123;
    tmp_tmp_msg_0_0.leader_speed_max = 0.6017064394122473;
    tmp_tmp_msg_0_0.leader_alt_min = 0.28912538815301503;
    tmp_tmp_msg_0_0.leader_alt_max = 0.3447700581975207;
    tmp_tmp_msg_0_0.pos_sim_err_lim = 0.8776027564275765;
    tmp_tmp_msg_0_0.pos_sim_err_wrn = 0.043879952977765035;
    tmp_tmp_msg_0_0.pos_sim_err_timeout = 55918U;
    tmp_tmp_msg_0_0.converg_max = 0.06726336817128342;
    tmp_tmp_msg_0_0.converg_timeout = 42619U;
    tmp_tmp_msg_0_0.comms_timeout = 58410U;
    tmp_tmp_msg_0_0.turb_lim = 0.3615640371256832;
    tmp_tmp_msg_0_0.custom.assign("MOIGIXVSDFVEWZZFMBSRFKQCHRYOPNECSCLBCWWNGAGTFYMQMPUSEYQRQQINXLORGYEPMKATNPCAIBCHOYLBIMXTTXBEUDXOJYAXLJVIZEJBVJVEATBABMQKVUHHHNTV");
    tmp_msg_0.sample.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.1142383302877491);
    msg.setSource(2015U);
    msg.setSourceEntity(228U);
    msg.setDestination(2339U);
    msg.setDestinationEntity(22U);
    msg.base_lat = 0.7741665538299294;
    msg.base_lon = 0.3363240199832236;
    msg.base_time = 0.4858504817109648;
    const signed char tmp_msg_0[] = {-38, -37, 34, 87, -11, 66, 49, 84, 106, 102, 24, 84, -125, 91, 4, 60, 110, 9, 16, 86, -57, -66, -51, -107, -102, -107, -79, -90, -70, 96, -120, -15, -79, 26, -44, -60, -74, -6, -30, 58, 19, -15, -58, -118, 19, 96, -3, 10, -24, 43, 21, -13, -16, 5, 38, -22, 9, -27, 61, -50, -128, -42, -51, 113, -33, -105, -68, 13, 39, 116, -13, 1, 117, 63, 56, -49, 25, 18, 10, 118, -67, -6, -92, -19, -82, 115, 55, -105, 110, -52, 38, 58, 15, 26, 47, -35, -37, 87, -108, -122, -29, -56, -23, -86, -37, 4, 34, -59, 101, 101, 110, 5, 17, -55, -62, -122, 48, 59, -113, 80, 11, 84, 125, 43, -37, 39, 1, 71, -97, 27, 110, -61, 88, 40, -123, -1, -86, -78, 9, 59, -115, -128, 65, -119, -128, -27, -58, -97, 63, 41, 71, -17, -58, 106, 71, -8, -7, -62, -37, -115, -106, -102, -54, 99, 88, -63, 81, 101, 54, -9, 7, -18, -48, 96, -32, 41, -31, -100, -127, 57, -91, -43, 91, 42, 1, -6, 30, -120, -37, 62, -92, 37, 109, 100, 13, 75, -14, -58, -5, 94, 20, 76, -68, 118, -30, 115, 30, -4, 14, 24, -96, -3, 48, 59, 103, 21, 16, -22, 61, 96, -124, 37, -38, -69, 21, 98, 124, 101, -124, 114, -106, 5, 123, 25, 90, 124, 82, -59, -35, 3};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.017738283927856036);
    msg.setSource(41698U);
    msg.setSourceEntity(124U);
    msg.setDestination(34774U);
    msg.setDestinationEntity(132U);
    msg.base_lat = 0.32191371590430284;
    msg.base_lon = 0.11186204885325779;
    msg.base_time = 0.07480742370099469;
    const signed char tmp_msg_0[] = {-74, 114, -111, 91, 97, -93, -31, -24, 126, 106, 10, 104, -68, 0, -113, 8, 80, -4, -61, 25, -15, 51, -56, -64, 101, -49, 8, 29, 22, -26, -53, 93, 105, 68, -71, 40, 74, -34, -103, 14, -86, -88, -47, 91, 10, -29, 68, 96, 18, 17, -69, -21, 103, 92, -110, -125, -98, 3, -52, -72, 3, -66, -100, -105, 117, -59, 98, 70, 42, 110, -5, -102, 36, -32, -95, 115, 91, 14, -29, 64, 123, -61, 62, 107, -93, -121, -121, 60, 8, 114, -83, 41, -71, -51, -116, 63, 101, -72, -122, 121, -23, 19, -36, -22, -22, -2, 20, 46, 101, -46, -7, 48};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.7050550425662612);
    msg.setSource(35976U);
    msg.setSourceEntity(253U);
    msg.setDestination(48322U);
    msg.setDestinationEntity(227U);
    msg.base_lat = 0.9124914274248758;
    msg.base_lon = 0.2815485261490954;
    msg.base_time = 0.6394200497950837;
    const signed char tmp_msg_0[] = {-111, 48, -61, 33, 63, 85, -104, 75, -79, 18, 17, -89, 124, 29, 86, -89, -40, -29, -8, 15, -17, 28, 54, 42, -86, 40, -26, 44, 70, 13, -21, 32, -126, -53, 101, 90, -36, -71, -35, 2, -84, 55, 32, 49, -88, -53, 71, -22, 82, 92, -50, -17, 101, 84, 103, -39, 70, -13, -48, 73, 112, -59, -76, 112, 22, 118, -99, 80, -74, -107, -48, -75, 27, -111, 111, -18, 14, -42, 117, -104, -115, 54, -92, 63, -126, -32, 120, 24, 75, 9, -15, 81, 72, 119, -35, -35, -32, 126, 87, -120, 37, -48, 52, -113, -54, -53, 3, -109, -68, 18, 76, 35};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.9282022317090631);
    msg.setSource(31663U);
    msg.setSourceEntity(80U);
    msg.setDestination(61529U);
    msg.setDestinationEntity(99U);
    msg.sys_id = 44004U;
    msg.priority = 54;
    msg.x = -19408;
    msg.y = -7203;
    msg.z = -1952;
    msg.t = -4290;
    IMC::SingleCurrentCell tmp_msg_0;
    tmp_msg_0.lat = 0.061248654169983485;
    tmp_msg_0.lon = 0.8928849493631686;
    tmp_msg_0.depth.assign("BHDYMTFPHVRTWHQWKWVDZINXQXFKGNJQRRAMESO");
    tmp_msg_0.vel.assign("CPFLKTWJOPLNKIYXJPWZPBHSRLZNJUMRYWPBNQVWCNSZYODVFVGUKGINPNXIXDAJWJCATZWFKGWZFRBDEIHKUFQUFUKATTMOOFIMSLMQFWSQASTCKEDEGHBVDHLLESFJDJXCUXSGNDLIOKGQKOECJOVWZAYULGZMQYWRAPMLVICAUAHDDIGCHRTJCBEG");
    tmp_msg_0.dir.assign("SVNGIEKHTJXEPPKJEROZVDNHKGCZZVGAIVSDCSZKCTLPXMUHJMNXFWCWTODZMQMKETPMIGSRULFNRHHXYCDLYOLCWSXVKRGFEHBFWFFRMEIYPJILAVAUSPDHQTU");
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.7414714007553224);
    msg.setSource(49768U);
    msg.setSourceEntity(144U);
    msg.setDestination(46394U);
    msg.setDestinationEntity(62U);
    msg.sys_id = 64711U;
    msg.priority = 114;
    msg.x = -32710;
    msg.y = 10231;
    msg.z = -28899;
    msg.t = 28507;
    IMC::Redox tmp_msg_0;
    tmp_msg_0.value = 0.9382467608883049;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.9138267390646385);
    msg.setSource(50466U);
    msg.setSourceEntity(190U);
    msg.setDestination(34481U);
    msg.setDestinationEntity(61U);
    msg.sys_id = 36781U;
    msg.priority = -57;
    msg.x = 16013;
    msg.y = 2833;
    msg.z = -6283;
    msg.t = -3332;
    IMC::DissolvedOxygen tmp_msg_0;
    tmp_msg_0.value = 0.31806375626098027;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.022625216279235305);
    msg.setSource(12015U);
    msg.setSourceEntity(6U);
    msg.setDestination(3351U);
    msg.setDestinationEntity(136U);
    msg.req_id = 19742U;
    msg.type = 132U;
    msg.max_size = 60945U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.6777367672630673;
    tmp_msg_0.base_lon = 0.5049122777550495;
    tmp_msg_0.base_time = 0.12326143817728596;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.7355383005942192);
    msg.setSource(41534U);
    msg.setSourceEntity(202U);
    msg.setDestination(23940U);
    msg.setDestinationEntity(81U);
    msg.req_id = 11393U;
    msg.type = 218U;
    msg.max_size = 50958U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.04309932532587957;
    tmp_msg_0.base_lon = 0.8348770056213839;
    tmp_msg_0.base_time = 0.028661204604090496;
    IMC::RemoteCommand tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.original_source = 42461U;
    tmp_tmp_msg_0_0.destination = 64739U;
    tmp_tmp_msg_0_0.timeout = 0.591302797777221;
    IMC::gnssSatellite tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.gnssid = 215U;
    tmp_tmp_tmp_msg_0_0_0.svid = 119U;
    tmp_tmp_tmp_msg_0_0_0.elev = 0.5230243292822224;
    tmp_tmp_tmp_msg_0_0_0.azim = 0.40216631086427546;
    tmp_tmp_msg_0_0.cmd.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.data.push_back(tmp_tmp_msg_0_0);
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.30566889652002793);
    msg.setSource(1492U);
    msg.setSourceEntity(92U);
    msg.setDestination(25137U);
    msg.setDestinationEntity(143U);
    msg.req_id = 26503U;
    msg.type = 130U;
    msg.max_size = 63307U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.7332420032655653;
    tmp_msg_0.base_lon = 0.42336819842029816;
    tmp_msg_0.base_time = 0.6769544969339014;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.7276022831722138);
    msg.setSource(8983U);
    msg.setSourceEntity(179U);
    msg.setDestination(24606U);
    msg.setDestinationEntity(203U);
    msg.original_source = 65398U;
    msg.destination = 13317U;
    msg.timeout = 0.7304727042704735;
    IMC::UbxRelPosNED tmp_msg_0;
    tmp_msg_0.refstationid = 35454U;
    tmp_msg_0.itow = 3040119978U;
    tmp_msg_0.relposn = 0.7787454083782948;
    tmp_msg_0.relpose = 0.9833794193171229;
    tmp_msg_0.relposd = 0.1697790505208131;
    tmp_msg_0.relposlength = 0.6400551775145316;
    tmp_msg_0.relposheading = 0.13526802937137605;
    tmp_msg_0.accn = 0.6597066596049631;
    tmp_msg_0.acce = 0.7330856413891457;
    tmp_msg_0.accd = 0.09652717202456673;
    tmp_msg_0.acclength = 0.2143922512981402;
    tmp_msg_0.accheading = 0.9036225762815502;
    tmp_msg_0.gnssfixok = 170U;
    tmp_msg_0.diffsoln = 160U;
    tmp_msg_0.relposvalid = 60U;
    tmp_msg_0.ismoving = 216U;
    tmp_msg_0.refposmiss = 163U;
    tmp_msg_0.refobsmiss = 14U;
    tmp_msg_0.relposheadingvalid = 13U;
    tmp_msg_0.carrsoln = 244U;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.33003407693511067);
    msg.setSource(13366U);
    msg.setSourceEntity(116U);
    msg.setDestination(53825U);
    msg.setDestinationEntity(27U);
    msg.original_source = 38577U;
    msg.destination = 61900U;
    msg.timeout = 0.7136206947632775;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.4686802276561246;
    tmp_msg_0.lon = 0.8425182427953525;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.8401578759880106);
    msg.setSource(10448U);
    msg.setSourceEntity(154U);
    msg.setDestination(10427U);
    msg.setDestinationEntity(197U);
    msg.original_source = 47555U;
    msg.destination = 45859U;
    msg.timeout = 0.7160796610872051;
    IMC::PowerOperation tmp_msg_0;
    tmp_msg_0.op = 60U;
    tmp_msg_0.time_remain = 0.8829271125846466;
    tmp_msg_0.sched_time = 0.28775972088302537;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.15671205042891445);
    msg.setSource(28675U);
    msg.setSourceEntity(0U);
    msg.setDestination(8232U);
    msg.setDestinationEntity(165U);
    msg.type = 90U;
    msg.comm_interface = 9329U;
    msg.model = 62345U;
    msg.list.assign("ELMOAKBODVZYRKVYBBKIVIUXMFDGSYDIJDMQEMBCIWACFGMTHUZJLPIHSFQPLGASTXTCRWSHDHYWZMXLSQTBENRWKUBHLDLUREJNOACKXACZTJALHRGFVNOQRPVOHUPFITDRYIHIPBBMXNGGJQXAOWOLRDAVGKFUMWZVEZPSUUFWTXQKJIVCWDEWZSXKXVNXNNEJMCBQIQJHTLQGZACNSSOFRGUESAYPEPEDTPVONKMB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.8390094592317849);
    msg.setSource(49308U);
    msg.setSourceEntity(77U);
    msg.setDestination(59997U);
    msg.setDestinationEntity(198U);
    msg.type = 79U;
    msg.comm_interface = 3898U;
    msg.model = 22983U;
    msg.list.assign("YAMFLBASKEOBABCGZVEYKHQNXKBJKHVILGNUDBMGLCHVEHLRHVHSDGMDCPKEPLUNCRXVKIFNXKCGYHTTWEHPOLBYCTOOKYFXQZXQORBASUTERZGJSSFUXAVRLDJUSGOIZMEQOYOBSTIRMEHZUHWPPLZKXNRSXBJEFUMOMVCFYRWGAVDFYCVIJMAPFLJDAGQJBYCDXIJKDGI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.20082051402139467);
    msg.setSource(32989U);
    msg.setSourceEntity(69U);
    msg.setDestination(4660U);
    msg.setDestinationEntity(37U);
    msg.type = 129U;
    msg.comm_interface = 6755U;
    msg.model = 9764U;
    msg.list.assign("WSZIJHZRXYRCQGIFPWKSYMVLXOHEOUVJBYLEPKTEWKBDKGRATDKAZYUIDLSWVOIDITLDV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.11430828413238159);
    msg.setSource(720U);
    msg.setSourceEntity(156U);
    msg.setDestination(10428U);
    msg.setDestinationEntity(207U);
    msg.type = 189U;
    msg.req_id = 3673602771U;
    msg.ttl = 2010U;
    msg.code = 242U;
    msg.destination.assign("ITYGSWZDURZLBBGCKQKEPZRKIDVXTKCNXZGTYARRMXPHOENBMTQMVORRQRGLLQHZLLHILJPIKFDBDSPZTJEWXJHZFLCZQJAHVJCOOAOJBWFIMRFNSPMRREAEAPNYHUOXUUWQQVGTACVTJWSBDJUKGNSIBLSACDUXYYFEQJVXDIBHKUTSIMWXCBYNPYFYVCDYO");
    msg.source.assign("ELKDLHDDTJHLUWQZCAGOWEXQEKVVVRTMCALWDMSSODROXCDILTRIEJKBAHXMFEQMNIBQUFWJHJILKMQGSNAZNANMQSLEHCFLKKSDUUITWPTYFGGZEWQXRAOKAMVQVOCNLQIZPPEMZVHTXYGF");
    msg.acknowledge = 24U;
    msg.status = 148U;
    const signed char tmp_msg_0[] = {100, 25, 67, -98, -116, 55, 52, 8, -87, -14, 84, -53, 44, -80, 30, -65, 117, -73, -4, -39, -48, -67, 10, -55, 56, -84, -20, -109, -111, 100, -76, 5, -113, 64, 122, 39, 54, 112, 36, -17, -34, 28, -109, -125, 107, -15};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.22539342072627866);
    msg.setSource(9690U);
    msg.setSourceEntity(178U);
    msg.setDestination(9613U);
    msg.setDestinationEntity(19U);
    msg.type = 117U;
    msg.req_id = 2101693479U;
    msg.ttl = 26382U;
    msg.code = 179U;
    msg.destination.assign("WNSOBFJCFZKFIOROQXXRKDDBDZJUUVVSEWAV");
    msg.source.assign("GWVVSYYPTQOTRUTGVRENOBQUEVNAMIOQUXVRYINONKFWGKPGUKUPHWWYAJYRDEQJIJWRVGZJPNZNDPX");
    msg.acknowledge = 115U;
    msg.status = 222U;
    const signed char tmp_msg_0[] = {40, 1, 76, 45, 7, 27, 43, -103, 58, -111, -118, 12, 35, 47, 121, 36, -7, -123, -14, -43, 7, -127, -47, 115, 97, 41, -63, 46, -100, -11, 114, -23, 52, -101, -48, 78, -14, -20, -9, -69, -128, 56, -52, 52, -11, -43, -20, 114, 78, -80, 28, 94, 44, 57, -22, 70, 89, -118, -37, -108, -44, 118, 122, 87, -104, 122, -70, -74, 41, -78, 34, 43, 87, -67, -66, 112, -127, 69, -56, -30, -79, -69, -108, 112, 0, -33, 68, 74, -6, -51, 6, -104, -54, 12, 119, 5, 97, -89, 10, -60, 77, -49, 33, 41, 85, -4, -4, -126, -85, 86, -51, -30, 57, -47, 123, -35, 82, 58, 94, -123, -98, -3, 56, -42, -111, -115, 58, 106, 75, -85, -48, -45, 27, -62, 124, 53, 116, -32, -46, 39, 6, 95, -94, -106, 5, -116, 42, -116, -106, 66, 100, -42, -100, -50, -55, -16, 57, 97, -69, 28, -124, 109, 20, -116, -125, -74, -91, 30, -24, 79, 114, 99, -82, -127, -67, -14, -48, 66, 65, -126, -82, 99, 44, 11, 82, -54, -67, 9, 126, -30, 54, 111, -49, -64, 122, 67, -103, -27, 18, 52, -60, -92, -34, -126, -104, 66, -1};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.717280279018919);
    msg.setSource(1465U);
    msg.setSourceEntity(29U);
    msg.setDestination(28455U);
    msg.setDestinationEntity(35U);
    msg.type = 139U;
    msg.req_id = 674865559U;
    msg.ttl = 8168U;
    msg.code = 11U;
    msg.destination.assign("ZPWXAELWWNNAGSIZQ");
    msg.source.assign("GDBAOQZUPWDVBGFJKUNRYBKKHIQKCIGVFZTQUGTINXBWPPHNRQTJQAXLXVWOMYAYASSJIOMGOZNLSNIEXCRRMTZNLPAWZLQDNCWTKLBCYPHQFMCOVQDMQPKGWRXLSSBCPZRLIYXFSEGEHKAZYVDULUMEAZCTMNYUEBKURSYSKUDBXBCTJEDFUGHPJXXWYMETVJMHOHGRFFNWIHLATIECYSZHSWVXURMVWOIQOVPAVBCJFDOFJPL");
    msg.acknowledge = 58U;
    msg.status = 204U;
    const signed char tmp_msg_0[] = {-128, 118, 18, 26, 73, -28, 76, 63, -26, -88, 95, 80, 35, -39, -126, 48, -83, 48, 51, 9, -30, 37, 23, -94, 15, -79, -7, 10, 1, -5, 79, 25, -97, -114, -77, 117, -94, -27, -50, -90, 8, -94, 69, -14, 17, -58, -68, -66, -75, 2, -104, -63, -27, -26, 17, -9, -10, 61, 115, -96, -9, -41, -111, -46, -94, -19, -1, -45, 84, 106, -6, 73, -91, 109, 38, -25, -10, 20, -128, 11, -127, 50, -104, -119, -93, -54, 16, 30, 59, -69, 15, -36, -122, 77, -92, -12, 26, 93, -39, -77, 116, -100, -110, -29, -76, 69, -83, -112, -122, -114, -47, -48, -122, 37, 89, 22, 17, 28, -94, 69, -39, -25, -35, -62, 45, 32, -125, -92, 29, 17, -24, -93, -84, 68, -21, -3, -1, 32, -91, 34, -86, -117, 57, -78, 62, 85, -115, -96, 3, -71, 63, -52, 93, -107};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.6876140028683432);
    msg.setSource(56248U);
    msg.setSourceEntity(81U);
    msg.setDestination(17875U);
    msg.setDestinationEntity(160U);
    msg.id = 70U;
    msg.range = 0.7645269205107729;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.9763181956714431);
    msg.setSource(17894U);
    msg.setSourceEntity(20U);
    msg.setDestination(1670U);
    msg.setDestinationEntity(34U);
    msg.id = 42U;
    msg.range = 0.5402819825518299;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.3175126215139368);
    msg.setSource(43483U);
    msg.setSourceEntity(42U);
    msg.setDestination(45368U);
    msg.setDestinationEntity(164U);
    msg.id = 8U;
    msg.range = 0.6595507904903007;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.6688267430441472);
    msg.setSource(18923U);
    msg.setSourceEntity(91U);
    msg.setDestination(41336U);
    msg.setDestinationEntity(222U);
    msg.beacon.assign("UGBKOQVQZEHTTCEJZXTNJ");
    msg.lat = 0.08770528953639756;
    msg.lon = 0.35150816151350783;
    msg.depth = 0.40973145282325596;
    msg.query_channel = 11U;
    msg.reply_channel = 14U;
    msg.transponder_delay = 41U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.6208174917917803);
    msg.setSource(55888U);
    msg.setSourceEntity(223U);
    msg.setDestination(24845U);
    msg.setDestinationEntity(112U);
    msg.beacon.assign("HXCTOXMZMHHBQSXAKBOGCWHJPIFIQZK");
    msg.lat = 0.7535838455112301;
    msg.lon = 0.5495529554580617;
    msg.depth = 0.1290240556145118;
    msg.query_channel = 13U;
    msg.reply_channel = 166U;
    msg.transponder_delay = 140U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.9511751312626752);
    msg.setSource(46987U);
    msg.setSourceEntity(36U);
    msg.setDestination(56846U);
    msg.setDestinationEntity(54U);
    msg.beacon.assign("SODLZWFFWULQAZCAIEQGSZJPMKRQTVJULHAPKFZIJNDBFBKLXTNYIOAWGIOEHFGXPYACKKXRQXFZYKCOZLVRFUMMEBAOOSFXMYPXSVVULRKDVMHETGLRNUVKAHDENFQWBXLRXRPQBUPTQPPGHNSQGTWDVBCEYDEYCGLWSJHIFKCYGONMZXDQEYPJABRISTMXNOPTKUGSIJIDAHQDJSUTYZCJUMN");
    msg.lat = 0.03674754993843454;
    msg.lon = 0.40749550079115715;
    msg.depth = 0.7414593097155896;
    msg.query_channel = 116U;
    msg.reply_channel = 239U;
    msg.transponder_delay = 71U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.5074988571435879);
    msg.setSource(46242U);
    msg.setSourceEntity(231U);
    msg.setDestination(51975U);
    msg.setDestinationEntity(60U);
    msg.op = 164U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("LTRKIBSLRLVUIXJZFZKRKOLEHQKUWOEQMMAQPZBWQGREBLPTTMPCGNAXOVXVPYOZSYIJRZSHVUZCNJOFEQSHKYAVUVHBGWVOGXWSYTNXNXJWTYIUDRBEALCYPCLNIZDNE");
    tmp_msg_0.lat = 0.915112193019404;
    tmp_msg_0.lon = 0.4647840332154428;
    tmp_msg_0.depth = 0.5667279157762206;
    tmp_msg_0.query_channel = 43U;
    tmp_msg_0.reply_channel = 114U;
    tmp_msg_0.transponder_delay = 175U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.6541927373292403);
    msg.setSource(6098U);
    msg.setSourceEntity(57U);
    msg.setDestination(45056U);
    msg.setDestinationEntity(55U);
    msg.op = 186U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("JEMPJSZTVSFZMNCJTALYQSWTYHUBUXKILMAVFYZTCLSNENNRPOEKIBHABOTROBZSPXPHWNMCDBGCHYRUHXIOHNPYQWJEGZWIQGQLSGOSEXCGQUYKMRDHAPITKQWVCHLWYQBKJKFGFGDJMEADXSRAXBEWFNZMAOXCTXCTXWYTWZFJCFINBEGNVOCP");
    tmp_msg_0.lat = 0.0881183017401751;
    tmp_msg_0.lon = 0.8126089871825661;
    tmp_msg_0.depth = 0.4264578621448748;
    tmp_msg_0.query_channel = 198U;
    tmp_msg_0.reply_channel = 240U;
    tmp_msg_0.transponder_delay = 247U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.4167680847666355);
    msg.setSource(31568U);
    msg.setSourceEntity(7U);
    msg.setDestination(12177U);
    msg.setDestinationEntity(235U);
    msg.op = 208U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.8796811417112448);
    msg.setSource(4931U);
    msg.setSourceEntity(57U);
    msg.setDestination(60868U);
    msg.setDestinationEntity(33U);
    IMC::SetImageCoords tmp_msg_0;
    tmp_msg_0.camid = 44U;
    tmp_msg_0.x = 9433U;
    tmp_msg_0.y = 48114U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.11798948623839867);
    msg.setSource(49963U);
    msg.setSourceEntity(92U);
    msg.setDestination(30384U);
    msg.setDestinationEntity(86U);
    IMC::DevCalibrationControl tmp_msg_0;
    tmp_msg_0.op = 232U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.3380357767686243);
    msg.setSource(27130U);
    msg.setSourceEntity(250U);
    msg.setDestination(58388U);
    msg.setDestinationEntity(237U);
    IMC::UbxStatus tmp_msg_0;
    tmp_msg_0.gpsfixtype = 248U;
    tmp_msg_0.flags = 211U;
    tmp_msg_0.diffcorr = 57U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.1765306390098873);
    msg.setSource(2460U);
    msg.setSourceEntity(153U);
    msg.setDestination(22912U);
    msg.setDestinationEntity(38U);
    msg.lat = 0.8447596993745636;
    msg.lon = 0.2781288424649052;
    msg.depth = 0.8650043926533559;
    msg.sentence.assign("FMSSXCZLARSRVLLYASCQUIZHIBODGXEUBBVKWUCCGPRWQVQOEJGFMDZTXEMWYEINYVOTWHPKXJFUMHHHRAYPBPZKAJTFOENNJALXKTIHWIDUPGXJMIROOMPQPVCRGB");
    msg.txtime = 0.6032459818777005;
    msg.modem_type.assign("EPPEJXKHCTERTMWZDXHUJZSOBTTIWFJLAEQWVCGMHQDDPSCYUSBOVHKVSMZLJKSGATCCIVUXHQBPGQJDEHRGAAZNNZMHSXLDVFMGHMJOBSXOYGAPKRLSVNCYXEZ");
    msg.sys_src.assign("IPWQMVYUIXJWNNOYLNAPUZWCGODDREOSJYTMTBUVRLAFZHOQDDKLCHREOPJKJWZOCVQRTMBKQQCXFAETIQHTLMIFMZXHUOKQGNXXPPGAKKEYPGWUILVVYNQLZBKCRXAYEJNUYHVDBZWUKWZRAXBYMPZCMXMCXRHUYVGRSNXDNWTASWNLAWJJYTIJSC");
    msg.seq = 27264U;
    msg.sys_dst.assign("GRHTWBGNOPIGQEKAFHVCSPQMJGBPYCEVVDWPXJDLIBZCSTNTIIYHVUEBVKGLEFGVRIMGCQNOQFLMYLDLKPTQHYSCWAYASUXNKRUXRSWAHUMOVXZZFUZAJSTEVKPABXCNBOEXFPJLIYYWMIHURBKGHVFNPAOQQRNCVMAESD");
    msg.flags = 90U;
    const signed char tmp_msg_0[] = {72, 33, 11, 16, 78, 67, 98, 12, -118, 116, -112, -94, 122, 12, -112, 18, 40, 8, 15, -114, -8, 80, 8, -19, 23, -36, -71, -25, -103, 107, -14, 15, 80, 79, 46, 49, 16, -26, -105, -37, 86, -45, 70, 46, 124, 80, -61, 62, -66, -125, -102, -121, 38, 87, 70, 93, 70, -14, 57, -48, -20, 29, 23, -56, -68, 118, -99, -33, -29, -51, -89, -54, -55, -41, 26, -61, -19, -7, -58, -53, 30, -94, -96, 0, 17, -126, 1, 99, -123, 72, 62, -66, -40, -42, 18, 29, -17, 22, 9, -22, -6, 115, 8, 117, -37, -47, -78, 60, -111, -9, -20, -109, -19, -6, -115, 37, -30, 21, 65, -15, -75, -48, -102, 101, 46, 24, 115, -76, 30, 123, -13, 122, 49, 58, -13, 73, 85, 47, -43, 126, -115, -17, 91, -3, -112, 51, 124, -93, 69, 44, 126, -52, 3, 33, 84, 28, -82, 49, 22, 65, 103, 98, 118, -87, -16, -80, 52, 42, 100, 37, 125, -28, -17, -91, 33, -17, -90, -118, 101, 19, 97, -123, -115, -88, -20, -13, -24, -98, -19, 61, 68, -122, -114, -88, -90, 115, -34, -46, -8, -99, 108, 60, -110, 7, -69, 46, 81, -22, 77, 52, 117, -8, 117, -123, -23, -28, -38, 73, 84, -26};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.7776194545553156);
    msg.setSource(24242U);
    msg.setSourceEntity(35U);
    msg.setDestination(28172U);
    msg.setDestinationEntity(77U);
    msg.lat = 0.790704137706323;
    msg.lon = 0.0302122370502389;
    msg.depth = 0.3092005249759593;
    msg.sentence.assign("TOCBHDKMUAKLNURRCDMEVEGNBAMMEPOWNSOBTJQJSULMNNGVFFBBYDGNWLJJHDUODWARWJRYTEYPICHOSYILFXYTVTGYXDSXLJOIPZRXSECQZPRHWBQOAWATMEQZNKKFZSSPPPWTMZDIWRIUKQFUHXGJSTAYFUEJKXAIVEKFEKGGQOHHPOVWXDWIRHUTFCMRDKSAYJQXEQZFDLILVCIVPZHXOGPLVZBFICNBRJBVVNMQYALMGCSQUZLTUB");
    msg.txtime = 0.7057159790636801;
    msg.modem_type.assign("TXQWLTJEQKBIQGVHJFCNPTVLUZWHRNRASHMQVFBBMYHAAKMWKJKUUGGPRNZDXLDLLKAPASOUBNCFOMRNMDIUGSKLDJSOZQCZCTJOCUUMRJQDDCIMNIRYXGPHQIOJEUKFDTRQSYWVUPOAXB");
    msg.sys_src.assign("AFEQAPNBIHRYGKWYLGUVUPSKZSHMRZTRYULECHFQPLQVHIKTGMLOWOEVGYRNAW");
    msg.seq = 23974U;
    msg.sys_dst.assign("IHEYOLMOZNMMYBORWGWSINIFUIVKVMIKYRXLZJSCHJXWGOYORLBTPDUFHKKARAZOCWJVSCPZFHVWDMEYGGTNMCJEZDELPIQRYYFFXLWTEGPFLUFMNSDMLUSRKOZSYXEAWAXHTRPTLEDKARINSPGAMKNATRBCQOZIMBFY");
    msg.flags = 119U;
    const signed char tmp_msg_0[] = {45, 43, 10, -3, -65, 115, -17, -41, 93, 21, -64, -80, -39, -87, 107, -74, 3, 24, -49, 101, 14, -32, 118, -57, -42, -21, 88, -28, -128, -20, -1, 73, 32, 26, -101, -96, -119, -119, 99, 12, -44, 62, 58, 82, -84, 54, -86, 3, -52, -78, 22, 27, -39, -98, 15, 88, 50, -109, 89, 19, -95, -120, 9, -91, 71, -24, 117, -24, 66, 56, 67, 19, -100, 71, 118, 4, -50, 30, -40, 29, 41, -77, -114, -105, -3, -107, -73, -108, -81, 1, 66, -125, -84, -43, -122, -45, -83, -92, -33, -110, -117, 89, -43, 24, 68, 61, 100, 86, 54, -13, -85, 7, -104, -63, 73, 52, -93, -82, 66, 61, 99, -87};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.808615286838663);
    msg.setSource(30484U);
    msg.setSourceEntity(88U);
    msg.setDestination(46478U);
    msg.setDestinationEntity(11U);
    msg.lat = 0.09143948750622577;
    msg.lon = 0.6085284974421936;
    msg.depth = 0.10256361047022444;
    msg.sentence.assign("HGZBUOTEZVROMCMMLSYAYYVBKLWCNEYAKRWOOCHMRPUDKGBCZXNMHEMIUGBKBWHBETRDLVLIDHUMFGFDQVSPMUATLAPSMXJGAAUUXSXCZMWCLKNUNXICPJDJFSETPCFGZHKXLIPRIJDGWORKQYFOFZSHTOFTFNSBGUDQLQNDSPAHDOHXPFVBTXWJOECJSBTFR");
    msg.txtime = 0.7726826028958947;
    msg.modem_type.assign("NQGISZLAYHSJORMGOXWIRKDPBDWAREHFKGWKNTGLEPVPNYWBYNUHLAVHEOACFGCKSIFSYPSJTETDCSMUINHFUOCFFIZQXCLTJCUQBTYOGH");
    msg.sys_src.assign("AFPDBDDVMHWPWVXQRIGEHBWEOOEOONJJBVTHLJUZAIPMNPGRZTZGNXNPZAOEMWADSHRMTKIWTTSJGYSXLYDHHWHOCTNFMRZAKQJ");
    msg.seq = 19365U;
    msg.sys_dst.assign("VXAKOQHTMBLIXPWLIGZENACJYOLORJBXGUWBAZSMYFQLGENF");
    msg.flags = 10U;
    const signed char tmp_msg_0[] = {-45, 59, 2, -16, 81, 2, 116, 3, 13, -71, 16, 108, -87, -47, -87, 122, 92, 126, -31, 123, -125, 52, -114, -116, 21, -76, -7, 68, 84, -39, 4, 70, 51, 16, 28, 3, -9, 33, 26, -101, 105, -123, -65, -120, 56, -110, -33, 105, 83, 47, 91, -5, -34, -37, -86, -123, -63, 90, -35, 16, -67, 67, 37, 42, 41, 78, 29, -90, 111, 115, 117, -1, -110, 106, -33, -103, -29, -111, 46, -114, -11, 74, 46, -127, -20, -54, -110, -120, 126, 110, 29, 64, -55, 14, 33, 26, 56, -19, 15, 33, -30, 59, -51, 34, -116, 122, -22, -30, -102, 78, -75, 80, -106, -58, 90, 34, 51, 8, -45, -76, -57, 101, -96, -103, -104, -48, 53, 118, 16, -36, -106, 5, 18, -6, 31, -102, 10, 72, 70, 30, 83, 43, 16, 14, -44, 124, -69, 102, -9, -11, -77, 44, 53, -108, 19, -50, 112, -35, -27, 55, 26, -109, 29, -36, -75, -41, -67, -21, 25, -66, -3, -38, -116, -72, -28, -58, 62};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.18083128014951588);
    msg.setSource(27194U);
    msg.setSourceEntity(122U);
    msg.setDestination(12824U);
    msg.setDestinationEntity(227U);
    msg.op = 212U;
    msg.system.assign("IKVWLXUETLXCXLTTSAQKKQMBPIA");
    msg.range = 0.5104976861720596;
    IMC::CreateSession tmp_msg_0;
    tmp_msg_0.timeout = 2635291403U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.045207652017001054);
    msg.setSource(27822U);
    msg.setSourceEntity(166U);
    msg.setDestination(28461U);
    msg.setDestinationEntity(30U);
    msg.op = 1U;
    msg.system.assign("CQIHQADCMPVRNOLWDTLCZEILKXJHRGDQNAXFQIDPLGEUGTWCVBPJYSDXCCBODWZYZPAALZAUJSNPXWAPBRGTIGFYJMSWEWLYBRKLZDVQDZIGXHWYKHOYRIUSQGPTTXKIFXFVYBDMKEMK");
    msg.range = 0.07302221383886143;
    IMC::QueryLedBrightness tmp_msg_0;
    tmp_msg_0.name.assign("PTIYLPBXQHMWVKIPTQMUZAQUSXPAKXDZJNWHVBRCCZQAPLDNYXKCAYXAJGDOLRMOXJRHETUMWFQZVKYERRFBIUQZXJDBUWCKXPRSFUFGLKVILHGLIOJGTGCSWANRVFEG");
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.26608408219334834);
    msg.setSource(64740U);
    msg.setSourceEntity(119U);
    msg.setDestination(61451U);
    msg.setDestinationEntity(2U);
    msg.op = 129U;
    msg.system.assign("BAVINRMFXAKKFIQXZUVNEOQSPOOCRFUKVCPEXBDRWTZICXEQLELHLJBTNCDMOHJGRZVWXKPKIDYHVFSRGWHRBZVGSJSQNSOIEGSHTUYHOFKQZMGXJPBCCXHKQFGFTSGWZQZCFHMETCOHPNJJVGEEULAMBIWUTLXAZMAWMDVMOQRIYWYJFLMPPV");
    msg.range = 0.5919937623282293;
    IMC::FormationState tmp_msg_0;
    tmp_msg_0.type = 143U;
    tmp_msg_0.op = 190U;
    tmp_msg_0.possimerr = 0.20069222487360106;
    tmp_msg_0.converg = 0.7936811868186165;
    tmp_msg_0.turbulence = 0.6680595342243808;
    tmp_msg_0.possimmon = 31U;
    tmp_msg_0.commmon = 49U;
    tmp_msg_0.convergmon = 121U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.6775878545773496);
    msg.setSource(1290U);
    msg.setSourceEntity(58U);
    msg.setDestination(16346U);
    msg.setDestinationEntity(40U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.772765940598595);
    msg.setSource(14836U);
    msg.setSourceEntity(125U);
    msg.setDestination(50613U);
    msg.setDestinationEntity(12U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.2655302259832881);
    msg.setSource(1805U);
    msg.setSourceEntity(54U);
    msg.setDestination(30450U);
    msg.setDestinationEntity(88U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.6576027559525642);
    msg.setSource(20106U);
    msg.setSourceEntity(244U);
    msg.setDestination(27162U);
    msg.setDestinationEntity(45U);
    msg.list.assign("BBZBNKXFLCPLOGHJMXZXORHMLWLOQETATOHITDUPVNWZZAWQBLYHDSQPJZOXCVUFYLNFFQBCEVRKFJWZIJXYWSQYCYNVVUPKDWJQQMFSAGZJSDTRUG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.8716223398879162);
    msg.setSource(60065U);
    msg.setSourceEntity(155U);
    msg.setDestination(32647U);
    msg.setDestinationEntity(90U);
    msg.list.assign("OQFSGKJXALWFRGWYTSUFMGDHYEJVUBQSHCPKNBVRKLFBSTAALYTKURPBDQQTWNGBHPECBUBCFZGNOSLSFKISADTBOUWQIPXJOSXAEIQIHUCJGZDWGRNVZMUVKLO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.6002118534491222);
    msg.setSource(15460U);
    msg.setSourceEntity(73U);
    msg.setDestination(537U);
    msg.setDestinationEntity(186U);
    msg.list.assign("YIKRROSQNLTHMBRIISJRVPEERCYKTANOEMXGQUUIVGDBRRGBBAIQYWSHMCPBAPCZGHBFQEEPZTADTFHDQQGATN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.7845318174894428);
    msg.setSource(55065U);
    msg.setSourceEntity(235U);
    msg.setDestination(13709U);
    msg.setDestinationEntity(207U);
    msg.peer.assign("YIMBKUGZRLNC");
    msg.rssi = 0.8174552903361326;
    msg.integrity = 7191U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.9985275187564305);
    msg.setSource(35199U);
    msg.setSourceEntity(6U);
    msg.setDestination(5224U);
    msg.setDestinationEntity(219U);
    msg.peer.assign("PDUSASZWFOGFCKHFQKPJENKZJDUNPEVDVGAIUWCDIYBHFFAKVMRCBXZOLQITHPTHOSESGWXIYEPZZBRSYXFJUBZHDUPSTARLERHWDUBXBRXFMIIWARMJAJDPYVWJQRLIYASJCDSHATDGTKPXOEMVSNGIYOOYLPXLTJJWVCQQDWCZCHTNCPXKNXQYEVFNOQCNGAVRKJQGMRYGHNUB");
    msg.rssi = 0.4063549974203393;
    msg.integrity = 39599U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.3434814537438371);
    msg.setSource(25202U);
    msg.setSourceEntity(139U);
    msg.setDestination(9489U);
    msg.setDestinationEntity(129U);
    msg.peer.assign("IAKEYLGDMGJXWFPMDTCLOHCWPTHEZIJZAKGNWZXXJFCAHPVPZMERYKTKSHFUQOBQQTTOXRYNKAEGIOYFEUVTQXEFZIXVKUHNRGABAWAGKIQJFSCVISQYOFJZBRUBLWVSLWJMYBFMPSBGMFZMHRQUDOKALVIPPSNDGBJRINBLCCAHJQICULISHEBDMWCHOVZYCOTMDXSNVJRGEFZYBWASTORVOPXRXLUTWGTDDYQQKUVNN");
    msg.rssi = 0.3682122227207675;
    msg.integrity = 21247U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.7636019994956896);
    msg.setSource(18861U);
    msg.setSourceEntity(28U);
    msg.setDestination(12167U);
    msg.setDestinationEntity(43U);
    msg.req_id = 58011U;
    msg.destination.assign("DQKBMWGEBSVPCLFKZCVZRADEAXOOHIPVCUDIMVFJUFUBJJVHJGNRQYPLUANPTASVVSLAEPJCGPYDZXOGJFSMBIZKAHVUFOVIODLGYLEWJTIE");
    msg.timeout = 0.9684011777036231;
    msg.range = 0.20027773155991102;
    msg.type = 31U;
    IMC::UamTxFrame tmp_msg_0;
    tmp_msg_0.seq = 36817U;
    tmp_msg_0.sys_dst.assign("HONOEDKUOEIGLZPBKEXZXJWFCAFVFLQUHFITRROVBPCLBEWRIOIWWRHAMMCJKJNZOBGSGFVOQDCMOXYYXLQRMNLPHJGHIQTZGNYSRAMWGDIBBCRMPPHASPXJIIIJYXWHYSLLHJQNCWJTQZQUROLKKCEPVDLMAVDMUNUEVS");
    tmp_msg_0.flags = 48U;
    const signed char tmp_tmp_msg_0_0[] = {-31, -93, -111, -55, -22, -45, 29, -93, -84, 59, -90, -19, 77, 12, 5, 55, -11, 14, 126, -122, 90, -47, -76, -113, -91, 9, 107, 108, -81, 111, -103, 41, 68, -15, -113, 45, 107, 80, -90, 38, 108, -42, 86, 24, 104, -37, -12, 115, 12, -17, 106, -8, 116, 31, 46, -12, 1, 103, -22, 77, -14, -74, 35, 12, -16, 39, 27, -90, -110, -51, -24, -45, 83, -55, -10, -52, 13, 122, -127, 69, 83, -27, -12, -78, -42, 44, -49, -94, -71, -55, -96, 81, -115, -59, 110, 118, 93, -105, -126, -40, 110, -65, 45, -100, 41, -36, -46, 12, -40, -109, 113, 126, 13, -113, -41, 36, -51, -107, 119, -83, 102, 37, -77, -68, 29, -91, -95, 87, 11, 0, 13, 67, 22, 126, -13, 116, -34, 110, 70, -67, -122, 93, 17, 109, -127, 94, -58, 101, 5, 110, 7, -23, 29, 64, -11, -40, -117, 46, -13, -38, 25, 99, 59, -110, 0, 104, -97, -47, -39, 83, -37, -118, 111, -91, -76, -5, 30, -35, 7, -56, -91, 98, 115, -119, -63, 36, 68};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.27228409014949206);
    msg.setSource(65390U);
    msg.setSourceEntity(27U);
    msg.setDestination(28544U);
    msg.setDestinationEntity(208U);
    msg.req_id = 6354U;
    msg.destination.assign("XFLQJLOBKDBREDMCNCOUITGQYJNYYGUDJJWI");
    msg.timeout = 0.7360856045510769;
    msg.range = 0.13133649279297088;
    msg.type = 252U;
    IMC::CompassCalibration tmp_msg_0;
    tmp_msg_0.timeout = 28393U;
    tmp_msg_0.lat = 0.4538916268822122;
    tmp_msg_0.lon = 0.5114915365464414;
    tmp_msg_0.z = 0.7865107590381017;
    tmp_msg_0.z_units = 57U;
    tmp_msg_0.pitch = 0.6731794782332616;
    tmp_msg_0.amplitude = 0.4530485920987143;
    tmp_msg_0.duration = 40264U;
    tmp_msg_0.speed = 0.29196919264986065;
    tmp_msg_0.speed_units = 153U;
    tmp_msg_0.radius = 0.22963375764901006;
    tmp_msg_0.direction = 74U;
    tmp_msg_0.custom.assign("ILBHOKHXGSRWUXTRXFVKGYZTJRQEDFVFOIALFXRVOYEMUCDGSJDPBCNYSHRUHMRYTNFTWYJEQMVWCXLWPGZAKZYQIOUFHCLDEADBSKMKLBEXCEHKNYAJPGPPGIBNOZWRHTNEDIOKBSQWUJFHKGNHVZNMWJA");
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.5981424964937793);
    msg.setSource(60720U);
    msg.setSourceEntity(28U);
    msg.setDestination(5615U);
    msg.setDestinationEntity(18U);
    msg.req_id = 35411U;
    msg.destination.assign("HSMEPHHSUFQGIAOKAYHNYGANMSHZPFJEDYJALCOYWCGADNSXBJQFVQMBZZCBQLAMCXPSZWRWDSMRYFNWOVWVWCKRGVGLJJKOIUIUGVIESSCJHEKYQJTLWVJPXXIKCVMLZAXOTAXHYZIOMUUGUHYDKEQGCVBZVZXETFRZTLRRDUHXJPTA");
    msg.timeout = 0.5988142032565283;
    msg.range = 0.6381472500042596;
    msg.type = 130U;
    IMC::RemoteActions tmp_msg_0;
    tmp_msg_0.actions.assign("IVWAQYPLZIRAERBPDWAYAJSDXQGSVXVXHMLKTICBFSGMNDCCTFLZPMVNVFJLUGRMXVTIKCMAFYBSMCEKEYDWHETRIZ");
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.378783653162697);
    msg.setSource(14429U);
    msg.setSourceEntity(119U);
    msg.setDestination(11155U);
    msg.setDestinationEntity(197U);
    msg.req_id = 27807U;
    msg.type = 247U;
    msg.status = 73U;
    msg.info.assign("KDDSMCGQEZIOLKLEONRJNYTBCTPRFDUGPGCXJLITAHWSBSHNAIDHUOBUVBTUWOVNPBMIJDDSKLBMJIFRVETTRPGHYFJZXFWAVOISEVEVXQZJKLMROLXM");
    msg.range = 0.47371683090139627;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.7120274703534138);
    msg.setSource(61596U);
    msg.setSourceEntity(75U);
    msg.setDestination(44186U);
    msg.setDestinationEntity(47U);
    msg.req_id = 22971U;
    msg.type = 178U;
    msg.status = 185U;
    msg.info.assign("MBFBVXPPIWIOGRQQPTEZAKJPFZIKM");
    msg.range = 0.8970296647807875;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.3115283080813842);
    msg.setSource(46048U);
    msg.setSourceEntity(158U);
    msg.setDestination(65450U);
    msg.setDestinationEntity(200U);
    msg.req_id = 61037U;
    msg.type = 108U;
    msg.status = 169U;
    msg.info.assign("XWQPRYHPXIEIWDEGCXTTHMITZIVLXHYZUNGNLYHTNVJGGQGSFLMNBVCNSMZGNMKKODEAWFVVXWQLTQADJBVJKPSCIFFTYKA");
    msg.range = 0.856558557040647;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.6152491430872677);
    msg.setSource(43401U);
    msg.setSourceEntity(143U);
    msg.setDestination(44921U);
    msg.setDestinationEntity(93U);
    msg.system.assign("FZTCGHHVZQZAJRNLGUVPSTKHUPFHVOWYVTQANXLPFKTJQDLGKCRLFTYNHSWXJBNBAGQSYLMHNBJOXVZRDIIFZBXTIJBZMPDOBFQKRCWOWZITINWNTDIAACCTEBUNSEICRIRKEYISDCKUOHWVAGFDYELUGYOPNMDJKXUGSAMRROQOWJVSOAVWFQMEQMYSJIRKEGPLCMUETJD");
    msg.op = 125U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.10947086030861153);
    msg.setSource(52153U);
    msg.setSourceEntity(166U);
    msg.setDestination(42745U);
    msg.setDestinationEntity(239U);
    msg.system.assign("CTMIIGJGKZYMOACDDGNVNZBAGAZWZRIEYPENWQNFHJXYOQLHKJXSHKPPYCUXQONBUCVLBECARTLRWMMAEMYHUQDXDKVPWSLLCIKVLQQDXFMNDFSTQOSHMF");
    msg.op = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.3445246316830033);
    msg.setSource(49355U);
    msg.setSourceEntity(85U);
    msg.setDestination(59320U);
    msg.setDestinationEntity(162U);
    msg.system.assign("SOKVFMRUYNZPWORNFDSTNIHDIHWGVRROZALEACWGNXFTLSYPGMRSAYZCQOVYVCAHBAUBLWBPVLHUDTATZMOLGTVBWOFFOUXSPUQODUWKAUIMYJFHLBOJMRHMAGPVISGYZNFKKDQQPBNYQMEEDBXXJIPEZSJMPTXIVDETIBJWPZYQFHBETQJLGTWZL");
    msg.op = 111U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.6171880278360761);
    msg.setSource(24938U);
    msg.setSourceEntity(19U);
    msg.setDestination(30429U);
    msg.setDestinationEntity(150U);
    msg.value = -11622;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.7993927868184254);
    msg.setSource(8753U);
    msg.setSourceEntity(159U);
    msg.setDestination(1668U);
    msg.setDestinationEntity(98U);
    msg.value = -9115;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.32605577577326983);
    msg.setSource(2579U);
    msg.setSourceEntity(182U);
    msg.setDestination(11059U);
    msg.setDestinationEntity(63U);
    msg.value = 14373;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.08927020549673481);
    msg.setSource(17971U);
    msg.setSourceEntity(120U);
    msg.setDestination(36158U);
    msg.setDestinationEntity(233U);
    msg.value = 0.36133949474171756;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.5829220382275622);
    msg.setSource(36731U);
    msg.setSourceEntity(254U);
    msg.setDestination(22253U);
    msg.setDestinationEntity(109U);
    msg.value = 0.17613836529116522;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.5591722530662726);
    msg.setSource(64278U);
    msg.setSourceEntity(58U);
    msg.setDestination(42312U);
    msg.setDestinationEntity(120U);
    msg.value = 0.41871348889250637;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.2631832654067705);
    msg.setSource(30494U);
    msg.setSourceEntity(37U);
    msg.setDestination(11551U);
    msg.setDestinationEntity(214U);
    msg.value = 0.07536832219574585;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.6794266997512507);
    msg.setSource(252U);
    msg.setSourceEntity(221U);
    msg.setDestination(47289U);
    msg.setDestinationEntity(133U);
    msg.value = 0.01626282809219648;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.6537830589030562);
    msg.setSource(50534U);
    msg.setSourceEntity(40U);
    msg.setDestination(54579U);
    msg.setDestinationEntity(46U);
    msg.value = 0.050081736903164975;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.6514761181506162);
    msg.setSource(41463U);
    msg.setSourceEntity(104U);
    msg.setDestination(20836U);
    msg.setDestinationEntity(47U);
    msg.validity = 32193U;
    msg.type = 6U;
    msg.utc_year = 44783U;
    msg.utc_month = 217U;
    msg.utc_day = 240U;
    msg.utc_time = 0.2761068786478822;
    msg.lat = 0.9317469172858036;
    msg.lon = 0.2668591646541879;
    msg.height = 0.8946111459889364;
    msg.satellites = 57U;
    msg.cog = 0.0031627550797137527;
    msg.sog = 0.1344674496144962;
    msg.hdop = 0.23724662680406894;
    msg.vdop = 0.9997007039868262;
    msg.hacc = 0.46636583369596163;
    msg.vacc = 0.8486088375333685;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.8621037997418445);
    msg.setSource(3560U);
    msg.setSourceEntity(182U);
    msg.setDestination(2281U);
    msg.setDestinationEntity(254U);
    msg.validity = 2937U;
    msg.type = 119U;
    msg.utc_year = 39138U;
    msg.utc_month = 89U;
    msg.utc_day = 186U;
    msg.utc_time = 0.22618807214767012;
    msg.lat = 0.9552944505694597;
    msg.lon = 0.5125503605907872;
    msg.height = 0.3302187621614622;
    msg.satellites = 186U;
    msg.cog = 0.6660214865806819;
    msg.sog = 0.07120851640516979;
    msg.hdop = 0.4488410927797638;
    msg.vdop = 0.7257683029658287;
    msg.hacc = 0.6008104395861043;
    msg.vacc = 0.8046023323339134;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.6204318777028475);
    msg.setSource(26772U);
    msg.setSourceEntity(36U);
    msg.setDestination(60405U);
    msg.setDestinationEntity(79U);
    msg.validity = 12562U;
    msg.type = 126U;
    msg.utc_year = 35616U;
    msg.utc_month = 113U;
    msg.utc_day = 65U;
    msg.utc_time = 0.2508568890922134;
    msg.lat = 0.23905327880376515;
    msg.lon = 0.8457344034441555;
    msg.height = 0.8731823458047039;
    msg.satellites = 110U;
    msg.cog = 0.9176783725281992;
    msg.sog = 0.17915413597521734;
    msg.hdop = 0.7580095918623652;
    msg.vdop = 0.20362564204038092;
    msg.hacc = 0.16624651753383346;
    msg.vacc = 0.40399575309343316;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.7797985221685799);
    msg.setSource(6014U);
    msg.setSourceEntity(123U);
    msg.setDestination(60820U);
    msg.setDestinationEntity(157U);
    msg.time = 0.559887986160597;
    msg.phi = 0.8920831384635879;
    msg.theta = 0.9037693873807995;
    msg.psi = 0.6240699891830342;
    msg.psi_magnetic = 0.6046448693626735;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.9293081380381144);
    msg.setSource(9731U);
    msg.setSourceEntity(244U);
    msg.setDestination(40203U);
    msg.setDestinationEntity(236U);
    msg.time = 0.6431833171573066;
    msg.phi = 0.329862711194026;
    msg.theta = 0.9984678124450489;
    msg.psi = 0.2218373176854852;
    msg.psi_magnetic = 0.819318542975864;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.5959471077348478);
    msg.setSource(37181U);
    msg.setSourceEntity(5U);
    msg.setDestination(42945U);
    msg.setDestinationEntity(119U);
    msg.time = 0.3332959035930966;
    msg.phi = 0.27333526047927104;
    msg.theta = 0.9746106965434322;
    msg.psi = 0.971644863294319;
    msg.psi_magnetic = 0.3137064201399964;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.6480264683679448);
    msg.setSource(49194U);
    msg.setSourceEntity(65U);
    msg.setDestination(2422U);
    msg.setDestinationEntity(85U);
    msg.time = 0.39303822960134904;
    msg.x = 0.4100246569067846;
    msg.y = 0.16350091577911785;
    msg.z = 0.1869032178637644;
    msg.timestep = 0.6333237552392842;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.3709619531976699);
    msg.setSource(8897U);
    msg.setSourceEntity(202U);
    msg.setDestination(19568U);
    msg.setDestinationEntity(101U);
    msg.time = 0.10220980296671789;
    msg.x = 0.39811419339114995;
    msg.y = 0.3540912450218302;
    msg.z = 0.17251628572447864;
    msg.timestep = 0.0888209813398344;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.5364026860196575);
    msg.setSource(65020U);
    msg.setSourceEntity(59U);
    msg.setDestination(40132U);
    msg.setDestinationEntity(30U);
    msg.time = 0.04046235021760436;
    msg.x = 0.754604436870318;
    msg.y = 0.055721275130371506;
    msg.z = 0.7949614084424217;
    msg.timestep = 0.2334923686537541;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.20657943974464898);
    msg.setSource(54967U);
    msg.setSourceEntity(251U);
    msg.setDestination(1531U);
    msg.setDestinationEntity(4U);
    msg.time = 0.41180887050737036;
    msg.x = 0.04662705628402519;
    msg.y = 0.29076581792495837;
    msg.z = 0.5232965137568841;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.955770361510712);
    msg.setSource(4965U);
    msg.setSourceEntity(220U);
    msg.setDestination(9671U);
    msg.setDestinationEntity(200U);
    msg.time = 0.38490666100077664;
    msg.x = 0.791205325740235;
    msg.y = 0.07058507238047995;
    msg.z = 0.7504029789790685;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.5488316508397405);
    msg.setSource(12126U);
    msg.setSourceEntity(159U);
    msg.setDestination(55932U);
    msg.setDestinationEntity(20U);
    msg.time = 0.7747453953905188;
    msg.x = 0.980141886224308;
    msg.y = 0.3640622234356742;
    msg.z = 0.457208107571073;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.38149654396939003);
    msg.setSource(391U);
    msg.setSourceEntity(187U);
    msg.setDestination(65240U);
    msg.setDestinationEntity(243U);
    msg.time = 0.06472730104362512;
    msg.x = 0.355758681068694;
    msg.y = 0.6763789656386878;
    msg.z = 0.2719580138540093;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.03929024678035942);
    msg.setSource(60317U);
    msg.setSourceEntity(80U);
    msg.setDestination(41800U);
    msg.setDestinationEntity(62U);
    msg.time = 0.6291527870042062;
    msg.x = 0.7762607736272917;
    msg.y = 0.9887117642991147;
    msg.z = 0.24669236530240857;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.6175840678947061);
    msg.setSource(24978U);
    msg.setSourceEntity(67U);
    msg.setDestination(54552U);
    msg.setDestinationEntity(56U);
    msg.time = 0.6221406597853849;
    msg.x = 0.4499743863740906;
    msg.y = 0.641115908654653;
    msg.z = 0.0024410239570713532;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.4559292849766048);
    msg.setSource(33019U);
    msg.setSourceEntity(153U);
    msg.setDestination(49749U);
    msg.setDestinationEntity(89U);
    msg.time = 0.34373743386486455;
    msg.x = 0.4179875299552954;
    msg.y = 0.26293879090868233;
    msg.z = 0.652610981716576;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.2018037937926085);
    msg.setSource(32099U);
    msg.setSourceEntity(166U);
    msg.setDestination(22589U);
    msg.setDestinationEntity(34U);
    msg.time = 0.060673427293403415;
    msg.x = 0.3611330030359047;
    msg.y = 0.7967181141802478;
    msg.z = 0.717024942939969;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.35986609159408744);
    msg.setSource(5248U);
    msg.setSourceEntity(126U);
    msg.setDestination(37965U);
    msg.setDestinationEntity(16U);
    msg.time = 0.07952188713749264;
    msg.x = 0.8073694629585592;
    msg.y = 0.5688519344474592;
    msg.z = 0.65808037122845;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.22495323897121378);
    msg.setSource(44858U);
    msg.setSourceEntity(25U);
    msg.setDestination(40653U);
    msg.setDestinationEntity(211U);
    msg.validity = 54U;
    msg.x = 0.3138690171389167;
    msg.y = 0.2889069068816561;
    msg.z = 0.3084199502480871;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.22870482391775515);
    msg.setSource(4687U);
    msg.setSourceEntity(3U);
    msg.setDestination(50901U);
    msg.setDestinationEntity(145U);
    msg.validity = 132U;
    msg.x = 0.5972433590463087;
    msg.y = 0.3909679352241322;
    msg.z = 0.2810576670135627;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.744731525082956);
    msg.setSource(5715U);
    msg.setSourceEntity(107U);
    msg.setDestination(61051U);
    msg.setDestinationEntity(20U);
    msg.validity = 20U;
    msg.x = 0.7637120502490788;
    msg.y = 0.5487595759420271;
    msg.z = 0.6213369634752155;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.8948174753931021);
    msg.setSource(19619U);
    msg.setSourceEntity(141U);
    msg.setDestination(28802U);
    msg.setDestinationEntity(156U);
    msg.validity = 77U;
    msg.x = 0.9083546335364934;
    msg.y = 0.22008487933407517;
    msg.z = 0.6654476410366857;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.7298710372312549);
    msg.setSource(54621U);
    msg.setSourceEntity(228U);
    msg.setDestination(38680U);
    msg.setDestinationEntity(187U);
    msg.validity = 113U;
    msg.x = 0.36032875521959196;
    msg.y = 0.9416222154130789;
    msg.z = 0.41435667807540055;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.8025131897658843);
    msg.setSource(25483U);
    msg.setSourceEntity(24U);
    msg.setDestination(30992U);
    msg.setDestinationEntity(3U);
    msg.validity = 101U;
    msg.x = 0.5157715872449473;
    msg.y = 0.0677094270770342;
    msg.z = 0.5557020184048419;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.686378006006317);
    msg.setSource(62884U);
    msg.setSourceEntity(72U);
    msg.setDestination(7111U);
    msg.setDestinationEntity(139U);
    msg.time = 0.3767530040049105;
    msg.x = 0.3575832627766974;
    msg.y = 0.3491438490748625;
    msg.z = 0.572855708093428;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.2512324922413237);
    msg.setSource(18943U);
    msg.setSourceEntity(244U);
    msg.setDestination(3824U);
    msg.setDestinationEntity(123U);
    msg.time = 0.634708944884669;
    msg.x = 0.18838787978544302;
    msg.y = 0.880604664102916;
    msg.z = 0.5788727819461139;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.0447904534444411);
    msg.setSource(37397U);
    msg.setSourceEntity(219U);
    msg.setDestination(23765U);
    msg.setDestinationEntity(23U);
    msg.time = 0.19946009319475966;
    msg.x = 0.627525130049869;
    msg.y = 0.9839654101358052;
    msg.z = 0.8242065799818997;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.952248026677878);
    msg.setSource(2225U);
    msg.setSourceEntity(191U);
    msg.setDestination(21905U);
    msg.setDestinationEntity(65U);
    msg.validity = 19U;
    IMC::DeviceState tmp_msg_0;
    tmp_msg_0.x = 0.6651553032340072;
    tmp_msg_0.y = 0.460895310980181;
    tmp_msg_0.z = 0.1506948854066601;
    tmp_msg_0.phi = 0.20496295861092018;
    tmp_msg_0.theta = 0.36851942691065354;
    tmp_msg_0.psi = 0.4700847395308243;
    msg.location.push_back(tmp_msg_0);
    IMC::BeamConfig tmp_msg_1;
    tmp_msg_1.beam_width = 0.9263102060045766;
    tmp_msg_1.beam_height = 0.9766720267222541;
    msg.beam_config.push_back(tmp_msg_1);
    msg.value = 0.6217455910996355;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.9514406479026788);
    msg.setSource(62625U);
    msg.setSourceEntity(76U);
    msg.setDestination(18763U);
    msg.setDestinationEntity(132U);
    msg.validity = 14U;
    msg.value = 0.9118855971599709;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.017850647570156086);
    msg.setSource(13020U);
    msg.setSourceEntity(77U);
    msg.setDestination(56750U);
    msg.setDestinationEntity(221U);
    msg.validity = 192U;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.42655105254768066;
    tmp_msg_0.beam_height = 0.8900150938265803;
    msg.beam_config.push_back(tmp_msg_0);
    msg.value = 0.8398246425010654;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.5228440562670349);
    msg.setSource(15166U);
    msg.setSourceEntity(249U);
    msg.setDestination(21050U);
    msg.setDestinationEntity(80U);
    msg.time = 0.6293326470971611;
    msg.value = 0.7510107288336428;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.21008644738040938);
    msg.setSource(29768U);
    msg.setSourceEntity(12U);
    msg.setDestination(3036U);
    msg.setDestinationEntity(128U);
    msg.time = 0.3676036495585676;
    msg.value = 0.578563319492373;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.4065129391498007);
    msg.setSource(42064U);
    msg.setSourceEntity(167U);
    msg.setDestination(52069U);
    msg.setDestinationEntity(55U);
    msg.time = 0.8633650173659119;
    msg.value = 0.6926856109839765;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.40230838162989346);
    msg.setSource(48422U);
    msg.setSourceEntity(95U);
    msg.setDestination(4653U);
    msg.setDestinationEntity(216U);
    msg.value = 0.11931226935221362;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.7847907186111678);
    msg.setSource(43447U);
    msg.setSourceEntity(116U);
    msg.setDestination(64416U);
    msg.setDestinationEntity(223U);
    msg.value = 0.9392280661457506;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.613796798973209);
    msg.setSource(32126U);
    msg.setSourceEntity(77U);
    msg.setDestination(49957U);
    msg.setDestinationEntity(197U);
    msg.value = 0.9350907178048179;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.9708906705507959);
    msg.setSource(29416U);
    msg.setSourceEntity(114U);
    msg.setDestination(1970U);
    msg.setDestinationEntity(237U);
    msg.value = 0.527763799514875;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.5416478994330922);
    msg.setSource(39174U);
    msg.setSourceEntity(44U);
    msg.setDestination(11906U);
    msg.setDestinationEntity(74U);
    msg.value = 0.5068190278475402;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.12322085986219333);
    msg.setSource(64864U);
    msg.setSourceEntity(27U);
    msg.setDestination(10373U);
    msg.setDestinationEntity(213U);
    msg.value = 0.2706264642756827;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.6550327732489128);
    msg.setSource(56390U);
    msg.setSourceEntity(12U);
    msg.setDestination(27332U);
    msg.setDestinationEntity(237U);
    msg.value = 0.5297792575635587;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.06240222765697179);
    msg.setSource(31239U);
    msg.setSourceEntity(160U);
    msg.setDestination(59044U);
    msg.setDestinationEntity(122U);
    msg.value = 0.7268364087488378;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.33026915224019304);
    msg.setSource(1568U);
    msg.setSourceEntity(76U);
    msg.setDestination(19681U);
    msg.setDestinationEntity(239U);
    msg.value = 0.24539294725623617;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.5954670519191115);
    msg.setSource(11138U);
    msg.setSourceEntity(25U);
    msg.setDestination(25382U);
    msg.setDestinationEntity(152U);
    msg.value = 0.8015806412108709;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.44173808367491496);
    msg.setSource(55613U);
    msg.setSourceEntity(237U);
    msg.setDestination(38952U);
    msg.setDestinationEntity(181U);
    msg.value = 0.5135932763264832;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.013347431238382779);
    msg.setSource(45137U);
    msg.setSourceEntity(208U);
    msg.setDestination(41946U);
    msg.setDestinationEntity(137U);
    msg.value = 0.5207589983793939;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.6448485593617498);
    msg.setSource(52192U);
    msg.setSourceEntity(76U);
    msg.setDestination(27943U);
    msg.setDestinationEntity(152U);
    msg.value = 0.11722082713336468;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.0028708169438369513);
    msg.setSource(30724U);
    msg.setSourceEntity(71U);
    msg.setDestination(10791U);
    msg.setDestinationEntity(57U);
    msg.value = 0.04685087986224168;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.5955360342423491);
    msg.setSource(22952U);
    msg.setSourceEntity(122U);
    msg.setDestination(37993U);
    msg.setDestinationEntity(36U);
    msg.value = 0.8240101467251038;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.023853559980670513);
    msg.setSource(33642U);
    msg.setSourceEntity(84U);
    msg.setDestination(3210U);
    msg.setDestinationEntity(104U);
    msg.value = 0.8272249808481261;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.6376328812957922);
    msg.setSource(40737U);
    msg.setSourceEntity(147U);
    msg.setDestination(49022U);
    msg.setDestinationEntity(115U);
    msg.value = 0.9246189384870827;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.17374277167947383);
    msg.setSource(62559U);
    msg.setSourceEntity(187U);
    msg.setDestination(40107U);
    msg.setDestinationEntity(142U);
    msg.value = 0.020833420800289937;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.5807832902623438);
    msg.setSource(63227U);
    msg.setSourceEntity(156U);
    msg.setDestination(62108U);
    msg.setDestinationEntity(243U);
    msg.value = 0.9950941950205967;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.4260255990216578);
    msg.setSource(47805U);
    msg.setSourceEntity(207U);
    msg.setDestination(29522U);
    msg.setDestinationEntity(143U);
    msg.value = 0.3905101457720148;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.44705067693713374);
    msg.setSource(44618U);
    msg.setSourceEntity(56U);
    msg.setDestination(60380U);
    msg.setDestinationEntity(53U);
    msg.value = 0.5771046036041804;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.29115504948037696);
    msg.setSource(37082U);
    msg.setSourceEntity(167U);
    msg.setDestination(51608U);
    msg.setDestinationEntity(49U);
    msg.direction = 0.45929952038540867;
    msg.speed = 0.47968151475353316;
    msg.turbulence = 0.8026257777617062;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.15891360419247091);
    msg.setSource(44611U);
    msg.setSourceEntity(34U);
    msg.setDestination(63868U);
    msg.setDestinationEntity(31U);
    msg.direction = 0.12792282970786728;
    msg.speed = 0.8035390254286551;
    msg.turbulence = 0.6849583282353013;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.5679436120404338);
    msg.setSource(47806U);
    msg.setSourceEntity(54U);
    msg.setDestination(7886U);
    msg.setDestinationEntity(199U);
    msg.direction = 0.18189682493247883;
    msg.speed = 0.22706452641290797;
    msg.turbulence = 0.12986115452978364;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.9785043561844496);
    msg.setSource(18673U);
    msg.setSourceEntity(113U);
    msg.setDestination(478U);
    msg.setDestinationEntity(109U);
    msg.value = 0.330924377249181;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.12114073389050006);
    msg.setSource(49860U);
    msg.setSourceEntity(193U);
    msg.setDestination(15275U);
    msg.setDestinationEntity(131U);
    msg.value = 0.6599222865170074;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.06585442817398823);
    msg.setSource(35574U);
    msg.setSourceEntity(71U);
    msg.setDestination(7396U);
    msg.setDestinationEntity(103U);
    msg.value = 0.6114412415314251;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.0242808354980093);
    msg.setSource(50659U);
    msg.setSourceEntity(133U);
    msg.setDestination(34696U);
    msg.setDestinationEntity(30U);
    msg.value.assign("PCVUEFDDOABICJNCGKVINJTLPXYZSDVYQFAAROJLKOHUINTKVWEJTXMEMLRAWLGUNMTHHFENZDTUVLXPXXMRIQVDHWUBLVHBJGQGEBKRSPJIJYBARPZUOGYSTQCQIZTBKTPXTVQOCYUCFASMYCR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.6613038866742682);
    msg.setSource(54389U);
    msg.setSourceEntity(136U);
    msg.setDestination(46896U);
    msg.setDestinationEntity(74U);
    msg.value.assign("ORPBBEWDUQLMIJDGONRJGYRNOLBMMGBCBSBMMWXAIIJNQHSUVUZCTAKOFHKVOQPEDWAYTXWJLQINPASMYHNHMIMCTSEQUDSRCXJXKUOEUGQCFTZFWCXYVLKLIEEAOLEMYZXVHJZVJNTUEAFJTSPFRQZVSI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.4535104539342436);
    msg.setSource(48981U);
    msg.setSourceEntity(112U);
    msg.setDestination(42303U);
    msg.setDestinationEntity(191U);
    msg.value.assign("OJGYYRFPXUXTABTVGUFBLZXIXGZSQJEPGCSAFIVVEKNOEVONAHSMUIHDRFTVGNGQJNHRBQAKIDVZSSLAKPXXJUPYTG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.09366263095669691);
    msg.setSource(28492U);
    msg.setSourceEntity(249U);
    msg.setDestination(9578U);
    msg.setDestinationEntity(82U);
    const signed char tmp_msg_0[] = {-25, -72, 83, 112, -103, -7, 84, 52, 83, -6, 31, 51, -55, -14, -49, -125, 51, -78, -112, -69, -33, 89, -109, 78, 34, 2, -52, -41, 20, 49, 58, -120, 13, 69, 22, -74, -51, -111, -124, 42, -14, 17, 101, 48, 105, -23, 12, 92, 17, 43, 94, 95, -52, 3, -2, 38, 116, -22, 5, -9, -98, 121, 41, 77, -51, 49, -57, -59, 68, -34, 4, -107, -35, -40, 112, 101, 122, -46, -105, -30, -24, -60, 35, -26, -24, 48, 82, -63, 69, -128, 121, 90, -11, -88, 82, 33, -110, 12, -47, -45, 5, 116, -94, 47, 124, -66, -110, -71, 112, 48, -55, 14, -32, -82, -101, -32, -40, 77, -5, -52, -79, 123, 26, -9, -79, 103, -80, -121, -73, 124, 126, -48, -17, 115, 100, -121, -31};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.024764681759719243);
    msg.setSource(45796U);
    msg.setSourceEntity(145U);
    msg.setDestination(31375U);
    msg.setDestinationEntity(36U);
    const signed char tmp_msg_0[] = {49, -86, -45, -49, 113, 95, 110, 2, 39, 125, -86, 61, 121, 65, -18, 68, 95, -59, 125, -19, -41, 103, 70, 76, 82, -80, 83, -59, 110, 115, -100, 104, 110, -64, 93, -71, -49, -72, 33, -53, -102, 124, -51, 71, -114, 34, -4, 81, -48, 50, -111, 61, -4, 97, -4, 53};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.4122861258453233);
    msg.setSource(37882U);
    msg.setSourceEntity(115U);
    msg.setDestination(15415U);
    msg.setDestinationEntity(132U);
    const signed char tmp_msg_0[] = {-62, 125, -84, 107, 19, -41, 115, 98, -48, 42, -30, -43, 115, 18, 73, 103, -26, -14, 37, -117, 42, 38, -119, 64, 6, 85, -35, -91, -112, -41, 110, -23, -9, -77, -76, -91, 94, -22, 17, -86, 2, 81, -3, 86, 1, 22, -126, -51, -118, -5, 91, 68, 10, -39, 4, 41, -71, -75, 31, 43, -127, 59, -63, 3, -116, 43, -114, 11, -36, -25, -34, -57, 105, -91, -102, 89, 42, -72, -7, 12, 8, -28, -26, -20, -54, 13, -90, -85, 64, -116, 110, 35, 61, -122, 68, 75, 44, 43, -35, 75, 109, -29, 6, -27, 8, 54, -127, 52, 116, 122, 61, -59, 42, -76, 70, 79, -98, 68, 88, -32, 24, -47, 122, 77, -13, -52, -117, 72, 17, -97, -13, -85, -31, -107, -47, 74, -83, -120, -120, -37, 12, -1, -91, 58, 117, 90, 104, -34, 100, 13, 22, -113, -54, 8, -104, 111, 73, 22, 57, -92, -99, 90, -57, 126, 97, 12, -92, 78, -98, 26, -55, 66, 79, 99, 114, 80, -86, -3, 40, 47, 75, -82, 53, 95, 22, -116, -63, -116, 81, 53, -8, -122, -34, -23, -5, 17, 80, 47, 73, -17, 120, -50, -112, -6, 81, 49, -63, -83, 11, -33, 88, -38, -101, -67, -1, 94, -57, -112};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.7350106079174927);
    msg.setSource(27783U);
    msg.setSourceEntity(31U);
    msg.setDestination(57937U);
    msg.setDestinationEntity(31U);
    msg.value = 0.840109746436224;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.7025216864272923);
    msg.setSource(16100U);
    msg.setSourceEntity(110U);
    msg.setDestination(56130U);
    msg.setDestinationEntity(197U);
    msg.value = 0.35349120208876206;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.34215222190147465);
    msg.setSource(40484U);
    msg.setSourceEntity(193U);
    msg.setDestination(61967U);
    msg.setDestinationEntity(135U);
    msg.value = 0.5588762790510245;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.08100094873986441);
    msg.setSource(29138U);
    msg.setSourceEntity(69U);
    msg.setDestination(23318U);
    msg.setDestinationEntity(236U);
    msg.type = 230U;
    msg.frequency = 2725839358U;
    msg.min_range = 19265U;
    msg.max_range = 29069U;
    msg.bits_per_point = 144U;
    msg.scale_factor = 0.19980662016994766;
    const signed char tmp_msg_0[] = {-50, 95, -86, 125, 64, 5, -18, -108, 46, -67, -67, 38, 90, 86, 113, 85, -113, 79, 110, -68, 7, -27, 86, 39, -31, 107, 84, -30, -82, -92, 28, -21, 68, 120, 115, 84, 2, 66, -105, -80, 84, -121, -98, -88, -28, 44, -15, -7, 122, 31, -70, 62, -60};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.809732544588081);
    msg.setSource(18372U);
    msg.setSourceEntity(23U);
    msg.setDestination(19558U);
    msg.setDestinationEntity(109U);
    msg.type = 125U;
    msg.frequency = 3691824295U;
    msg.min_range = 7530U;
    msg.max_range = 41042U;
    msg.bits_per_point = 101U;
    msg.scale_factor = 0.40558316323528953;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.8016279930043303;
    tmp_msg_0.beam_height = 0.15735796161556004;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {-25, 84, 90, 14, 122, -69, 14, -12, -28, -3, -116, 71, 68, 10, -80, 15, -44, -73, -94, -97, 21, 123, -107, 90, 118, -12, 118, -126, -101, 75, 65, 50, 33, -113, 103, -127, -44, 52, 111, 36, -108, -104, 17, 82, 52, 112, 97, 22, 80, -2, 91, -88, 7};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.39795898000247865);
    msg.setSource(21900U);
    msg.setSourceEntity(210U);
    msg.setDestination(30315U);
    msg.setDestinationEntity(21U);
    msg.type = 167U;
    msg.frequency = 1852455682U;
    msg.min_range = 5900U;
    msg.max_range = 64398U;
    msg.bits_per_point = 112U;
    msg.scale_factor = 0.03796125597206468;
    const signed char tmp_msg_0[] = {-59, 99, 16, 25, 112, -39, 24, -36, -105, -1, 126, 125, 77, 64, 18, -76, -29, 111, 116, 12, 80, 22, 26, -16, -51, 0, 76, -32, -82, 6, -74, 117, 59, 113, -57, -83, -62, 125, 75, 68, -113, -19, -93, 67, -38, 96, -45, -35, -11, -41, -65, -124, 110, 41, 85, 43, -128, -79, 18, -12, -52, -57, 0, -71, 28, 6, -8, 88, 35, -84, -106, -126, 70, 68, -118, -113, 116, -88, 93, -34, -15, 46, 81, -95, 111, -41, -25, -125, 11, -1, 101, 114, 64, 54, -22, 114, 41, -79, -2, -124, -120, 18, 123, 45, -100, 84, 119, 2, 95, 88, 46, 73, 53, -65, -90, -69, 24, 27, 4, -105, -45, -8, 13, 0, 56, -74, 112, -10, -95, 80, 10, 120, -29, 106, -44, 82, -116, 72, -66, -82, -5, 125, -43, -101, -42, 32, 83, -60, 121, -86, 123, 125, 110, -17, 47, 43, -121, 100, -31, -91, -71, 78, 113, -50, -24, 21, -123, 72, -53, -127, 61, -98, -95, 5, 57, 102, -98, 54, -80, -37, 105, -83, 33, -10, 5, 48, 19, 126, -54, -15, -84, 21, -50};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.602144646136497);
    msg.setSource(14675U);
    msg.setSourceEntity(36U);
    msg.setDestination(56251U);
    msg.setDestinationEntity(166U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.4460618164880097);
    msg.setSource(34046U);
    msg.setSourceEntity(203U);
    msg.setDestination(53726U);
    msg.setDestinationEntity(67U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.1918415374454271);
    msg.setSource(18030U);
    msg.setSourceEntity(34U);
    msg.setDestination(59891U);
    msg.setDestinationEntity(8U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.8877419304471725);
    msg.setSource(27722U);
    msg.setSourceEntity(1U);
    msg.setDestination(56696U);
    msg.setDestinationEntity(34U);
    msg.op = 86U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.632305367538142);
    msg.setSource(29852U);
    msg.setSourceEntity(160U);
    msg.setDestination(35606U);
    msg.setDestinationEntity(206U);
    msg.op = 208U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.6088142745601733);
    msg.setSource(12352U);
    msg.setSourceEntity(231U);
    msg.setDestination(8982U);
    msg.setDestinationEntity(193U);
    msg.op = 42U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.657884608909517);
    msg.setSource(43165U);
    msg.setSourceEntity(165U);
    msg.setDestination(28869U);
    msg.setDestinationEntity(144U);
    msg.value = 0.21784114851750824;
    msg.confidence = 0.815011709374802;
    msg.opmodes.assign("DQUGLUBNOKVCTUBFUPIPKLWNKJXAZYTDZNXDVDVBYPDFCPURAFNRDVWSHZKCEKHXNEQYBURSCKMIDTUYZJBSZQOZNVOWKCXCRHPYXOJWIZRAHXOVKLDGQFPQCJEQTQABTAMMOGGVMFJFWGTSOPWIISIIHIJTIHWYBSFLLUDZBNNOHHRVJQLAXYGYPCBMGJFMQERTVECYYQZOHPGSGTDEALBRRS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.3264723304634639);
    msg.setSource(29969U);
    msg.setSourceEntity(177U);
    msg.setDestination(14506U);
    msg.setDestinationEntity(60U);
    msg.value = 0.5987752513960475;
    msg.confidence = 0.9512400548537732;
    msg.opmodes.assign("TJBNYKWVQXKOMMMKIJTGHKUJVKDSAYXHXQRXGXVWNFNBPSBYXNOIOVNTWKJRRICSYZFPBBPMHYJBFAINLWSMZYZYPUFUOZICXHQNADVNBMBRYYURIEZSEOSJOGQZAAEGMCDDIUSEVZHNPUROKEURPITDPQXDKEHEKHPGHCFQMWEJICWBGAXZVBMVLPLNSTOFYLTGLZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.6853492551428335);
    msg.setSource(18642U);
    msg.setSourceEntity(218U);
    msg.setDestination(48284U);
    msg.setDestinationEntity(126U);
    msg.value = 0.8569575826006737;
    msg.confidence = 0.4590868658095274;
    msg.opmodes.assign("JUNAJTCYJEFWPOZOILRBRATQTVSLUVDRUISTESPGOPOPIDGWYDPFMUUOMCIVNKYXDCFRIGINQEMWATYMNOAGCXRQVYPKWIVCXCZXRGIAOHMZJFJQUNSZBSFYQESEBWSKPTLONAGFRFMBCLHINDMUHEZNBIQVVGLJKSCXKENYHZKURZQWSHXLWDGKMQBULADG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.539899659480277);
    msg.setSource(18232U);
    msg.setSourceEntity(27U);
    msg.setDestination(44917U);
    msg.setDestinationEntity(93U);
    msg.itow = 2085602242U;
    msg.lat = 0.298465506063295;
    msg.lon = 0.8602693067684496;
    msg.height_ell = 0.5954626878777317;
    msg.height_sea = 0.6129942080390465;
    msg.hacc = 0.05275889132672096;
    msg.vacc = 0.8756737423740634;
    msg.vel_n = 0.37896854410559866;
    msg.vel_e = 0.569059756626761;
    msg.vel_d = 0.0005574503795965358;
    msg.speed = 0.7121948462085331;
    msg.gspeed = 0.20439516065546603;
    msg.heading = 0.10165793517975885;
    msg.sacc = 0.8199742935948088;
    msg.cacc = 0.4732046263332649;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.50116354031573);
    msg.setSource(31252U);
    msg.setSourceEntity(169U);
    msg.setDestination(32293U);
    msg.setDestinationEntity(208U);
    msg.itow = 4218141555U;
    msg.lat = 0.8790630281823413;
    msg.lon = 0.07627693446271633;
    msg.height_ell = 0.4713167590525703;
    msg.height_sea = 0.6809429998618016;
    msg.hacc = 0.8087339353979526;
    msg.vacc = 0.5501226605793198;
    msg.vel_n = 0.7794109922454664;
    msg.vel_e = 0.7669544620279019;
    msg.vel_d = 0.28788158839825606;
    msg.speed = 0.6800696654789204;
    msg.gspeed = 0.8078336444702303;
    msg.heading = 0.9721896486799461;
    msg.sacc = 0.35452419757243936;
    msg.cacc = 0.2717466004556639;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.3886933281262335);
    msg.setSource(8467U);
    msg.setSourceEntity(245U);
    msg.setDestination(14546U);
    msg.setDestinationEntity(23U);
    msg.itow = 3764735122U;
    msg.lat = 0.7624200867195208;
    msg.lon = 0.18787932102058524;
    msg.height_ell = 0.9236770348761374;
    msg.height_sea = 0.8795321957366884;
    msg.hacc = 0.5316698261498075;
    msg.vacc = 0.9645039290400778;
    msg.vel_n = 0.5826399886786771;
    msg.vel_e = 0.5372077894229956;
    msg.vel_d = 0.5261259163497062;
    msg.speed = 0.9627191242835457;
    msg.gspeed = 0.6084019820452211;
    msg.heading = 0.49707520718695797;
    msg.sacc = 0.9384461079087958;
    msg.cacc = 0.20585819877969247;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.3539582751765953);
    msg.setSource(13863U);
    msg.setSourceEntity(17U);
    msg.setDestination(1969U);
    msg.setDestinationEntity(221U);
    msg.id = 204U;
    msg.value = 0.39660211512338517;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.9218861189722688);
    msg.setSource(10570U);
    msg.setSourceEntity(129U);
    msg.setDestination(49208U);
    msg.setDestinationEntity(38U);
    msg.id = 166U;
    msg.value = 0.5868739906244772;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.09446749772755281);
    msg.setSource(57625U);
    msg.setSourceEntity(239U);
    msg.setDestination(41895U);
    msg.setDestinationEntity(144U);
    msg.id = 128U;
    msg.value = 0.41058320541339266;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.023423629331792317);
    msg.setSource(48608U);
    msg.setSourceEntity(81U);
    msg.setDestination(21461U);
    msg.setDestinationEntity(79U);
    msg.x = 0.5525346506951173;
    msg.y = 0.7767464952325112;
    msg.z = 0.02883334267538673;
    msg.phi = 0.32309331502999306;
    msg.theta = 0.7699190907031401;
    msg.psi = 0.483162907949229;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.7268797328255837);
    msg.setSource(11939U);
    msg.setSourceEntity(42U);
    msg.setDestination(39298U);
    msg.setDestinationEntity(46U);
    msg.x = 0.22915145730358844;
    msg.y = 0.6097311023188695;
    msg.z = 0.8947087714624303;
    msg.phi = 0.12462284946689739;
    msg.theta = 0.9518225810241818;
    msg.psi = 0.917603873932057;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.6238043456054075);
    msg.setSource(16053U);
    msg.setSourceEntity(211U);
    msg.setDestination(46109U);
    msg.setDestinationEntity(110U);
    msg.x = 0.4614955483437537;
    msg.y = 0.22671410342158316;
    msg.z = 0.5290282020719913;
    msg.phi = 0.3931285938163287;
    msg.theta = 0.67727874688733;
    msg.psi = 0.16736576501582112;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.4153709818641288);
    msg.setSource(23145U);
    msg.setSourceEntity(137U);
    msg.setDestination(22339U);
    msg.setDestinationEntity(170U);
    msg.beam_width = 0.6688393210093888;
    msg.beam_height = 0.09391556059215478;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.45193048534860514);
    msg.setSource(17534U);
    msg.setSourceEntity(162U);
    msg.setDestination(21472U);
    msg.setDestinationEntity(249U);
    msg.beam_width = 0.22491017131611002;
    msg.beam_height = 0.23459038155607104;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.6489955147692271);
    msg.setSource(58021U);
    msg.setSourceEntity(49U);
    msg.setDestination(3417U);
    msg.setDestinationEntity(2U);
    msg.beam_width = 0.879707596419288;
    msg.beam_height = 0.9598828210351785;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.2726062766822417);
    msg.setSource(39084U);
    msg.setSourceEntity(222U);
    msg.setDestination(55570U);
    msg.setDestinationEntity(102U);
    msg.sane = 27U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.8230066470051887);
    msg.setSource(61416U);
    msg.setSourceEntity(189U);
    msg.setDestination(175U);
    msg.setDestinationEntity(191U);
    msg.sane = 169U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.29598614929808853);
    msg.setSource(32784U);
    msg.setSourceEntity(111U);
    msg.setDestination(5134U);
    msg.setDestinationEntity(148U);
    msg.sane = 238U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.5680595321535311);
    msg.setSource(56146U);
    msg.setSourceEntity(214U);
    msg.setDestination(11751U);
    msg.setDestinationEntity(234U);
    msg.value = 0.21714350791449089;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.1006389227027038);
    msg.setSource(26481U);
    msg.setSourceEntity(86U);
    msg.setDestination(54783U);
    msg.setDestinationEntity(0U);
    msg.value = 0.5809579409812442;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.02526534116367518);
    msg.setSource(25315U);
    msg.setSourceEntity(123U);
    msg.setDestination(1597U);
    msg.setDestinationEntity(142U);
    msg.value = 0.2020777448694655;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.8303018563629776);
    msg.setSource(9233U);
    msg.setSourceEntity(92U);
    msg.setDestination(32423U);
    msg.setDestinationEntity(230U);
    msg.value = 0.7459901138168451;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.03865266732186279);
    msg.setSource(24414U);
    msg.setSourceEntity(131U);
    msg.setDestination(37950U);
    msg.setDestinationEntity(242U);
    msg.value = 0.6712533735520991;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.09965420904391287);
    msg.setSource(37540U);
    msg.setSourceEntity(26U);
    msg.setDestination(55022U);
    msg.setDestinationEntity(142U);
    msg.value = 0.8938890481650636;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.6825531390373182);
    msg.setSource(34584U);
    msg.setSourceEntity(115U);
    msg.setDestination(35470U);
    msg.setDestinationEntity(145U);
    msg.value = 0.09542893214107806;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.5558250842112608);
    msg.setSource(25038U);
    msg.setSourceEntity(179U);
    msg.setDestination(16447U);
    msg.setDestinationEntity(60U);
    msg.value = 0.3040256340988797;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.42163556951127223);
    msg.setSource(61002U);
    msg.setSourceEntity(240U);
    msg.setDestination(25631U);
    msg.setDestinationEntity(153U);
    msg.value = 0.9666141191341759;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.9126772424671058);
    msg.setSource(36225U);
    msg.setSourceEntity(104U);
    msg.setDestination(26093U);
    msg.setDestinationEntity(222U);
    msg.value = 0.47388462895281025;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.3166740518299521);
    msg.setSource(53295U);
    msg.setSourceEntity(83U);
    msg.setDestination(64434U);
    msg.setDestinationEntity(137U);
    msg.value = 0.4037679994925638;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.5800706247740647);
    msg.setSource(29687U);
    msg.setSourceEntity(212U);
    msg.setDestination(25042U);
    msg.setDestinationEntity(179U);
    msg.value = 0.6869935275105192;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.6047417428674279);
    msg.setSource(54481U);
    msg.setSourceEntity(184U);
    msg.setDestination(19757U);
    msg.setDestinationEntity(217U);
    msg.value = 0.11761340880220938;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.05518596714199364);
    msg.setSource(11129U);
    msg.setSourceEntity(158U);
    msg.setDestination(45500U);
    msg.setDestinationEntity(144U);
    msg.value = 0.253476619466774;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.14132345255637024);
    msg.setSource(38125U);
    msg.setSourceEntity(70U);
    msg.setDestination(56556U);
    msg.setDestinationEntity(91U);
    msg.value = 0.3032205928284457;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.33628905220157634);
    msg.setSource(17465U);
    msg.setSourceEntity(102U);
    msg.setDestination(22897U);
    msg.setDestinationEntity(50U);
    msg.value = 0.7927620689469617;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.37373762728199433);
    msg.setSource(61895U);
    msg.setSourceEntity(217U);
    msg.setDestination(24752U);
    msg.setDestinationEntity(234U);
    msg.value = 0.5874207760343835;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.9604405236397706);
    msg.setSource(27215U);
    msg.setSourceEntity(60U);
    msg.setDestination(41379U);
    msg.setDestinationEntity(108U);
    msg.value = 0.09975478206384458;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.8238753889160194);
    msg.setSource(38899U);
    msg.setSourceEntity(158U);
    msg.setDestination(50520U);
    msg.setDestinationEntity(194U);
    msg.value = 0.17268444424132434;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.7801693081026854);
    msg.setSource(10316U);
    msg.setSourceEntity(56U);
    msg.setDestination(44656U);
    msg.setDestinationEntity(121U);
    msg.value = 0.3819122457075005;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.09031165879901348);
    msg.setSource(6531U);
    msg.setSourceEntity(61U);
    msg.setDestination(46896U);
    msg.setDestinationEntity(88U);
    msg.value = 0.47373108766055616;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.3255184782912197);
    msg.setSource(16832U);
    msg.setSourceEntity(99U);
    msg.setDestination(44179U);
    msg.setDestinationEntity(45U);
    msg.value = 0.018628922864013076;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.3774655717805032);
    msg.setSource(9487U);
    msg.setSourceEntity(252U);
    msg.setDestination(34299U);
    msg.setDestinationEntity(180U);
    msg.value = 0.9742357413610918;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.8973005766082361);
    msg.setSource(49238U);
    msg.setSourceEntity(150U);
    msg.setDestination(3143U);
    msg.setDestinationEntity(180U);
    msg.value = 0.9516065832909869;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.7935397363421669);
    msg.setSource(26259U);
    msg.setSourceEntity(227U);
    msg.setDestination(61716U);
    msg.setDestinationEntity(61U);
    msg.validity = 45209U;
    msg.type = 0U;
    msg.tow = 3440985913U;
    msg.base_lat = 0.15605606044368714;
    msg.base_lon = 0.17212235853303237;
    msg.base_height = 0.6759133365185342;
    msg.n = 0.7805714485258339;
    msg.e = 0.17804415542545105;
    msg.d = 0.6752414086399317;
    msg.v_n = 0.6831015544803481;
    msg.v_e = 0.1583478788989945;
    msg.v_d = 0.5012527467895838;
    msg.satellites = 15U;
    msg.iar_hyp = 58386U;
    msg.iar_ratio = 0.3034534408043117;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.9227410242555435);
    msg.setSource(60707U);
    msg.setSourceEntity(220U);
    msg.setDestination(22361U);
    msg.setDestinationEntity(128U);
    msg.validity = 34340U;
    msg.type = 213U;
    msg.tow = 143001497U;
    msg.base_lat = 0.09744391326195068;
    msg.base_lon = 0.44537062771645375;
    msg.base_height = 0.18095931162304668;
    msg.n = 0.23787560556938447;
    msg.e = 0.6011642847235236;
    msg.d = 0.7893524385718335;
    msg.v_n = 0.7090779256287452;
    msg.v_e = 0.4095060312687394;
    msg.v_d = 0.13064645845071465;
    msg.satellites = 105U;
    msg.iar_hyp = 9797U;
    msg.iar_ratio = 0.6707303042540461;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.65674287777937);
    msg.setSource(19819U);
    msg.setSourceEntity(152U);
    msg.setDestination(42110U);
    msg.setDestinationEntity(158U);
    msg.validity = 33824U;
    msg.type = 197U;
    msg.tow = 2712762423U;
    msg.base_lat = 0.665923529500937;
    msg.base_lon = 0.6632701508190152;
    msg.base_height = 0.5061826968049087;
    msg.n = 0.5817167155473806;
    msg.e = 0.9127485429802161;
    msg.d = 0.3086443427292447;
    msg.v_n = 0.4366672502449893;
    msg.v_e = 0.3024471282059691;
    msg.v_d = 0.5774660785583084;
    msg.satellites = 61U;
    msg.iar_hyp = 14256U;
    msg.iar_ratio = 0.2967241296846299;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.8855014578461845);
    msg.setSource(28146U);
    msg.setSourceEntity(240U);
    msg.setDestination(52824U);
    msg.setDestinationEntity(98U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.5857584349052931;
    tmp_msg_0.lon = 0.989112353112644;
    tmp_msg_0.height = 0.6333638978489963;
    tmp_msg_0.x = 0.03198148627111441;
    tmp_msg_0.y = 0.20502118725196727;
    tmp_msg_0.z = 0.9702148137400063;
    tmp_msg_0.phi = 0.5810461739641336;
    tmp_msg_0.theta = 0.937954617129954;
    tmp_msg_0.psi = 0.8979638805791805;
    tmp_msg_0.u = 0.46834136912385704;
    tmp_msg_0.v = 0.34704111856767295;
    tmp_msg_0.w = 0.8064582823841765;
    tmp_msg_0.vx = 0.5538295435998755;
    tmp_msg_0.vy = 0.11510957953650591;
    tmp_msg_0.vz = 0.9850869078035357;
    tmp_msg_0.p = 0.8829225671159789;
    tmp_msg_0.q = 0.7522343665050787;
    tmp_msg_0.r = 0.20946260430921804;
    tmp_msg_0.depth = 0.6387787850008022;
    tmp_msg_0.alt = 0.7902503865889098;
    msg.state.set(tmp_msg_0);
    msg.type = 56U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.6742783545063491);
    msg.setSource(60305U);
    msg.setSourceEntity(209U);
    msg.setDestination(10303U);
    msg.setDestinationEntity(25U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.6227451022498938;
    tmp_msg_0.lon = 0.8288947691731985;
    tmp_msg_0.height = 0.14904618929533153;
    tmp_msg_0.x = 0.8150761282466344;
    tmp_msg_0.y = 0.4452070318820259;
    tmp_msg_0.z = 0.16111170275720121;
    tmp_msg_0.phi = 0.7494152952013025;
    tmp_msg_0.theta = 0.8001396902785172;
    tmp_msg_0.psi = 0.8559614067682931;
    tmp_msg_0.u = 0.5553837815943029;
    tmp_msg_0.v = 0.3222632980521921;
    tmp_msg_0.w = 0.7841595595322365;
    tmp_msg_0.vx = 0.269718705808078;
    tmp_msg_0.vy = 0.4127624775392522;
    tmp_msg_0.vz = 0.8414772774223752;
    tmp_msg_0.p = 0.9819234535336566;
    tmp_msg_0.q = 0.3412001856644695;
    tmp_msg_0.r = 0.3043548252707685;
    tmp_msg_0.depth = 0.5076756666147665;
    tmp_msg_0.alt = 0.6889283542407486;
    msg.state.set(tmp_msg_0);
    msg.type = 163U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.3092986842418184);
    msg.setSource(7076U);
    msg.setSourceEntity(147U);
    msg.setDestination(38063U);
    msg.setDestinationEntity(62U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.30063720097917324;
    tmp_msg_0.lon = 0.15903135310827676;
    tmp_msg_0.height = 0.23540154030161786;
    tmp_msg_0.x = 0.2523432834603164;
    tmp_msg_0.y = 0.09611593642911165;
    tmp_msg_0.z = 0.30358469919067566;
    tmp_msg_0.phi = 0.14003780484861572;
    tmp_msg_0.theta = 0.029208130123964282;
    tmp_msg_0.psi = 0.3176572731338404;
    tmp_msg_0.u = 0.38459701735260843;
    tmp_msg_0.v = 0.42363828839155215;
    tmp_msg_0.w = 0.8814209668501078;
    tmp_msg_0.vx = 0.03924763674248477;
    tmp_msg_0.vy = 0.5133697286130974;
    tmp_msg_0.vz = 0.7365281852663592;
    tmp_msg_0.p = 0.5539355661412196;
    tmp_msg_0.q = 0.7321029971527181;
    tmp_msg_0.r = 0.16511775092625391;
    tmp_msg_0.depth = 0.14653908199307097;
    tmp_msg_0.alt = 0.7672316128076849;
    msg.state.set(tmp_msg_0);
    msg.type = 137U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.02457940728099217);
    msg.setSource(62466U);
    msg.setSourceEntity(125U);
    msg.setDestination(62742U);
    msg.setDestinationEntity(233U);
    msg.value = 0.6050149142615845;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.8286602360081284);
    msg.setSource(10974U);
    msg.setSourceEntity(8U);
    msg.setDestination(38096U);
    msg.setDestinationEntity(234U);
    msg.value = 0.5418158255662336;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.18839452926137423);
    msg.setSource(36903U);
    msg.setSourceEntity(63U);
    msg.setDestination(53733U);
    msg.setDestinationEntity(227U);
    msg.value = 0.8600084417319587;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.45888737229021703);
    msg.setSource(53181U);
    msg.setSourceEntity(244U);
    msg.setDestination(32656U);
    msg.setDestinationEntity(215U);
    msg.value = 0.6756765868862301;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.4743366377074888);
    msg.setSource(13087U);
    msg.setSourceEntity(120U);
    msg.setDestination(51961U);
    msg.setDestinationEntity(254U);
    msg.value = 0.5605648918223465;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.95785667991609);
    msg.setSource(36682U);
    msg.setSourceEntity(254U);
    msg.setDestination(28053U);
    msg.setDestinationEntity(141U);
    msg.value = 0.19907108793771033;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.5731264913359391);
    msg.setSource(39821U);
    msg.setSourceEntity(158U);
    msg.setDestination(32998U);
    msg.setDestinationEntity(158U);
    msg.value = 0.38252843860580255;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.35606932562260674);
    msg.setSource(22496U);
    msg.setSourceEntity(157U);
    msg.setDestination(19174U);
    msg.setDestinationEntity(89U);
    msg.value = 0.4193597798176414;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.9015385548529335);
    msg.setSource(56752U);
    msg.setSourceEntity(4U);
    msg.setDestination(58177U);
    msg.setDestinationEntity(237U);
    msg.value = 0.12578490217156724;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.3478037846839157);
    msg.setSource(18998U);
    msg.setSourceEntity(176U);
    msg.setDestination(45771U);
    msg.setDestinationEntity(6U);
    msg.value = 0.34657337130776134;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.04806899900417494);
    msg.setSource(31697U);
    msg.setSourceEntity(122U);
    msg.setDestination(16513U);
    msg.setDestinationEntity(56U);
    msg.value = 0.9919873695151096;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.06990816220636265);
    msg.setSource(8364U);
    msg.setSourceEntity(104U);
    msg.setDestination(23328U);
    msg.setDestinationEntity(225U);
    msg.value = 0.051244272526600465;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.1273782102272849);
    msg.setSource(57722U);
    msg.setSourceEntity(193U);
    msg.setDestination(57778U);
    msg.setDestinationEntity(58U);
    msg.value = 0.8630214022570555;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.6299692748328781);
    msg.setSource(31086U);
    msg.setSourceEntity(196U);
    msg.setDestination(44402U);
    msg.setDestinationEntity(81U);
    msg.value = 0.6577258486333944;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.3413140249242711);
    msg.setSource(5610U);
    msg.setSourceEntity(178U);
    msg.setDestination(53452U);
    msg.setDestinationEntity(81U);
    msg.value = 0.686675726503966;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.5257086173229302);
    msg.setSource(26205U);
    msg.setSourceEntity(169U);
    msg.setDestination(20797U);
    msg.setDestinationEntity(17U);
    msg.id = 40U;
    msg.zoom = 176U;
    msg.action = 28U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.20692287298828427);
    msg.setSource(55067U);
    msg.setSourceEntity(25U);
    msg.setDestination(5505U);
    msg.setDestinationEntity(216U);
    msg.id = 225U;
    msg.zoom = 207U;
    msg.action = 129U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.1544689466713438);
    msg.setSource(36759U);
    msg.setSourceEntity(17U);
    msg.setDestination(38585U);
    msg.setDestinationEntity(22U);
    msg.id = 235U;
    msg.zoom = 115U;
    msg.action = 60U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.570352368603117);
    msg.setSource(3351U);
    msg.setSourceEntity(251U);
    msg.setDestination(27099U);
    msg.setDestinationEntity(80U);
    msg.id = 200U;
    msg.value = 0.23883141514019635;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.032048138917112445);
    msg.setSource(7970U);
    msg.setSourceEntity(39U);
    msg.setDestination(29422U);
    msg.setDestinationEntity(76U);
    msg.id = 157U;
    msg.value = 0.28277322819865114;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.22622937750423744);
    msg.setSource(65024U);
    msg.setSourceEntity(32U);
    msg.setDestination(17590U);
    msg.setDestinationEntity(238U);
    msg.id = 31U;
    msg.value = 0.8346735894531229;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.3163262479858777);
    msg.setSource(30378U);
    msg.setSourceEntity(92U);
    msg.setDestination(55323U);
    msg.setDestinationEntity(135U);
    msg.id = 171U;
    msg.value = 0.4529444711289432;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.6385990754676306);
    msg.setSource(3381U);
    msg.setSourceEntity(52U);
    msg.setDestination(1233U);
    msg.setDestinationEntity(159U);
    msg.id = 118U;
    msg.value = 0.7969105927005644;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.20597576622236724);
    msg.setSource(33265U);
    msg.setSourceEntity(79U);
    msg.setDestination(8964U);
    msg.setDestinationEntity(203U);
    msg.id = 132U;
    msg.value = 0.6544890026743504;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.2617535099064139);
    msg.setSource(46856U);
    msg.setSourceEntity(173U);
    msg.setDestination(43995U);
    msg.setDestinationEntity(216U);
    msg.id = 81U;
    msg.angle = 0.04212038976850807;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.4469977811271155);
    msg.setSource(20163U);
    msg.setSourceEntity(95U);
    msg.setDestination(36370U);
    msg.setDestinationEntity(153U);
    msg.id = 243U;
    msg.angle = 0.24300647326019564;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.7416077518068508);
    msg.setSource(45547U);
    msg.setSourceEntity(142U);
    msg.setDestination(43760U);
    msg.setDestinationEntity(247U);
    msg.id = 32U;
    msg.angle = 0.6464356039951188;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.2192095774679257);
    msg.setSource(31292U);
    msg.setSourceEntity(200U);
    msg.setDestination(24914U);
    msg.setDestinationEntity(20U);
    msg.op = 187U;
    msg.actions.assign("JKGYRJPXBVNHRIATQAISCUD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.8928991980356075);
    msg.setSource(39193U);
    msg.setSourceEntity(157U);
    msg.setDestination(23526U);
    msg.setDestinationEntity(140U);
    msg.op = 199U;
    msg.actions.assign("MBYXAAZXALDITQBCSJVTBMKLHDQTGIVNMWPPGNAVUUHAOZEHJELESPJHDTWUIBRQRIHEXGIDMUOGUGHFXSKRWUZDLRIKVJHZBPPNBMQONZFBQGJQXVOAEFPRNPE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.02597366033483317);
    msg.setSource(63776U);
    msg.setSourceEntity(167U);
    msg.setDestination(13855U);
    msg.setDestinationEntity(150U);
    msg.op = 109U;
    msg.actions.assign("JROWOJYQFTTPIDGZEHPYHRTFMHEOZHHGFSIIFQNKPVLXXDMOVFPYHSYXJRXXVBRJQVQZAPUP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.6301382729076576);
    msg.setSource(13253U);
    msg.setSourceEntity(104U);
    msg.setDestination(36773U);
    msg.setDestinationEntity(122U);
    msg.actions.assign("BXEOBSTAUOYFQNFSLZCRSRIQLWTWGQXMTAZHKVOHGJTPCZAYQFLRNJGTRWENRCKBQDJHRQPPRXADMTHKIVDHUWGLUPIMSMIBIIMHACNSMDBKBUFENMSV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.7832703628073854);
    msg.setSource(19984U);
    msg.setSourceEntity(1U);
    msg.setDestination(28313U);
    msg.setDestinationEntity(20U);
    msg.actions.assign("CDLBGSQRNYNZMMEZADWNXIUGAEITFKCBEVDBBPAHQCFYZWVRPDMVYJIDULVYC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.2849930922696311);
    msg.setSource(48691U);
    msg.setSourceEntity(44U);
    msg.setDestination(51552U);
    msg.setDestinationEntity(106U);
    msg.actions.assign("FQVWUJYUJJFOATMLJRXRATJGDQNBHQPZECGTXYEKTEKZRARHVF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.28984105740711374);
    msg.setSource(22157U);
    msg.setSourceEntity(127U);
    msg.setDestination(56897U);
    msg.setDestinationEntity(104U);
    msg.button = 231U;
    msg.value = 137U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.9846081748901836);
    msg.setSource(44474U);
    msg.setSourceEntity(108U);
    msg.setDestination(14640U);
    msg.setDestinationEntity(202U);
    msg.button = 162U;
    msg.value = 205U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.12423947832404614);
    msg.setSource(48233U);
    msg.setSourceEntity(7U);
    msg.setDestination(52790U);
    msg.setDestinationEntity(156U);
    msg.button = 114U;
    msg.value = 134U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.9949053231069646);
    msg.setSource(65219U);
    msg.setSourceEntity(149U);
    msg.setDestination(60798U);
    msg.setDestinationEntity(202U);
    msg.op = 242U;
    msg.text.assign("EGANJNHKSDRSEWFHTONSONCCBFURAHGYFWPIUNQONZJXLQLGZJGGAOZHHKATAVKPIHQJZNSBYIIEJHUFVFFKXCGLKRMPFCVCDSQPCYGXZEKDGMOMVWXSUE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.9134124506075281);
    msg.setSource(6292U);
    msg.setSourceEntity(37U);
    msg.setDestination(17305U);
    msg.setDestinationEntity(181U);
    msg.op = 254U;
    msg.text.assign("ZVPAFHDTBPYXCQPDVGFKGRYOAOBZTEBYSENLJWZVMOARF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.5861712052173584);
    msg.setSource(62924U);
    msg.setSourceEntity(243U);
    msg.setDestination(21873U);
    msg.setDestinationEntity(121U);
    msg.op = 48U;
    msg.text.assign("SOLSOVQTBPLCTPQVQJEUUNZZMBVPYFZDQNEKJVSHHKMFCQFPLDTRIERJCLYMKWGTUYEXOCI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.46471767118513374);
    msg.setSource(13505U);
    msg.setSourceEntity(178U);
    msg.setDestination(49293U);
    msg.setDestinationEntity(182U);
    msg.op = 97U;
    msg.time_remain = 0.9773489669398208;
    msg.sched_time = 0.018147031756615584;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.5596956813600251);
    msg.setSource(31334U);
    msg.setSourceEntity(232U);
    msg.setDestination(22399U);
    msg.setDestinationEntity(218U);
    msg.op = 29U;
    msg.time_remain = 0.9566843243807359;
    msg.sched_time = 0.17080993897157903;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.9103044996163185);
    msg.setSource(21785U);
    msg.setSourceEntity(189U);
    msg.setDestination(23421U);
    msg.setDestinationEntity(249U);
    msg.op = 73U;
    msg.time_remain = 0.7585567672094927;
    msg.sched_time = 0.9876167549771678;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.32906122572784113);
    msg.setSource(42337U);
    msg.setSourceEntity(114U);
    msg.setDestination(58363U);
    msg.setDestinationEntity(165U);
    msg.name.assign("RELNKOEGGINAVQFFLAHCNHLDMVXABBIUKRCHGZWLPPGYWXDZITUMXMMKUYRNOOTKPELFSSBVFHTOQHQJLY");
    msg.op = 117U;
    msg.sched_time = 0.04205096584860035;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.8018671146118912);
    msg.setSource(11775U);
    msg.setSourceEntity(111U);
    msg.setDestination(43852U);
    msg.setDestinationEntity(238U);
    msg.name.assign("ZQTZUFLDIXKGVMKJXUMW");
    msg.op = 116U;
    msg.sched_time = 0.562760924623048;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.9464745742854422);
    msg.setSource(3871U);
    msg.setSourceEntity(155U);
    msg.setDestination(5643U);
    msg.setDestinationEntity(217U);
    msg.name.assign("VFJRECKGBNVXHNLSKVNADFYCXJKVINCYQOXZLQGIACGLEPQFILTXKKMFZRUSTCDAZQTNQFOANOGLJPMUOFEKBPRREJEHCIXSWVQNKGBMDYGKYYUYVYLOXTBJSBHALWIYSXTQPJZHSTIWBSMMCJDXHHCCYVHDDZOUNDWBWVPOZUVFSRIZP");
    msg.op = 235U;
    msg.sched_time = 0.4275906162320139;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.7609347423701911);
    msg.setSource(42241U);
    msg.setSourceEntity(63U);
    msg.setDestination(31483U);
    msg.setDestinationEntity(83U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.22615241913404915);
    msg.setSource(12947U);
    msg.setSourceEntity(8U);
    msg.setDestination(22975U);
    msg.setDestinationEntity(143U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.8992930615010429);
    msg.setSource(20945U);
    msg.setSourceEntity(62U);
    msg.setDestination(37128U);
    msg.setDestinationEntity(147U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.8752041318709824);
    msg.setSource(26709U);
    msg.setSourceEntity(210U);
    msg.setDestination(12743U);
    msg.setDestinationEntity(12U);
    msg.name.assign("BHHXFHTIAWIBMMQDHTZQCXGSWWOXAPOLHFHWYIYZMTZOWTCGYVAINLUAHRKUELJOQYGXKVENROPIBGUPSTWMDLQCVUUAMRRKZDFASRKZICESJLXWEVGKKSRDJDPAWDAJUUJKOFMXELVKENLB");
    msg.state = 68U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.39227235638824964);
    msg.setSource(2594U);
    msg.setSourceEntity(225U);
    msg.setDestination(37210U);
    msg.setDestinationEntity(121U);
    msg.name.assign("AEDQUMHBGRIJPWPQCFRYIVWNJXDKGJTYIBDJLHRNWTSVHPNKRVMCGOFNKSYZAXIPIJXGYTHUUOZUMMPWDBERZJMDAMOQLUNWPAWTMLQYLSXGPQAZUZFNLGETREBYQASAJVALCXSKONTXOZKNDKQKLCSEAIIEQWDRCXJOHGXHFXCHFWDYBVMWOFCBJCBFSBECXNYZYZPUYEZFHL");
    msg.state = 135U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.0219421706828985);
    msg.setSource(29892U);
    msg.setSourceEntity(170U);
    msg.setDestination(189U);
    msg.setDestinationEntity(17U);
    msg.name.assign("XJHSNYGREAUOXUDJKIAKQUGATBDEFYHNTQNIVACYRQSSDUPULMUPFSARVAYGZGQNDIVIPEOLTVZHFRRDJNTSOMFBWWKHCGMMOHLBMBBWCERBWYATXNVAGFOLEJVKMMRHHLKTKKORFJVZTVMGJZUGXWHNZXGIQXDQWCRYWBLLSIZYDJPSCIFLPPVV");
    msg.state = 202U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.9536161866310491);
    msg.setSource(30547U);
    msg.setSourceEntity(180U);
    msg.setDestination(6646U);
    msg.setDestinationEntity(78U);
    msg.name.assign("VMAUDGTPMTTQSEIRIHICGVPLKRIUDUEEWTTZOEICHNFSAXJJFGYSEYGDSHDUWSHLUBYAWXWFYSUKZRAQBVAUXVJMIWCZZJJMZDKBRXJJGVUDOVUWKDGTTBWFTBRHNMFQCOFWNQTMBJNFIQPCRYZPWLGOXDAQYOQTPIKOIPOMNFKJMLACJSFMMBHPXIPGEXCSXH");
    msg.value = 57U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.1454099661928162);
    msg.setSource(33915U);
    msg.setSourceEntity(10U);
    msg.setDestination(11214U);
    msg.setDestinationEntity(23U);
    msg.name.assign("SFUPSLHDJODAVXOJPVLLKHSKJLHCUYGSFYTRMUJDZIQVAEGPXCHRQTUCSEMV");
    msg.value = 233U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.6263522213569744);
    msg.setSource(16877U);
    msg.setSourceEntity(2U);
    msg.setDestination(53572U);
    msg.setDestinationEntity(125U);
    msg.name.assign("OLJWQLRSAWSV");
    msg.value = 253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.9980564595930473);
    msg.setSource(30567U);
    msg.setSourceEntity(216U);
    msg.setDestination(2731U);
    msg.setDestinationEntity(4U);
    msg.name.assign("YAMBFBGBQXZYZQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.5225006779780599);
    msg.setSource(23222U);
    msg.setSourceEntity(183U);
    msg.setDestination(28637U);
    msg.setDestinationEntity(142U);
    msg.name.assign("GGGELZXHZADEECHXMYSAPSBIEYRTYZFNBBOUQKRIRKPJTZNRXZOTOSZDBEURWYIJOTAMQDZJCDMWJTPITHIYWVNJTXQDMOWSENRDLQHUBCOREACBVDRHSIHLLCFNALFUPXCGLWJMKMAIJVHOKGYWUBCIVVPEXUZKHWZVESEASJFWPALGKGQXJMPNXWMQSMSBKGHQLVSFKNKYUOAJFUOLCRTAQUTIYQVVCTBYPLIBPPHDFNOZXKNMDFFUNGFXC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.1430296028293374);
    msg.setSource(64520U);
    msg.setSourceEntity(246U);
    msg.setDestination(3149U);
    msg.setDestinationEntity(28U);
    msg.name.assign("UTOTAHLRFDEPEEPGEMAAFTEULTUDACMRPHVICWIVCBQWFGXWCRXOBETIHSHGVZXVAUBPNGPNKMMIHVTRDFGVMUORSCXDQELSNISKAOYVBINZKPLIHQRJFQXDLGSFGGBVDOFKBUATTRPXQGCZBPHUJEPKYSLFENJKMQKRWKPDYNQAQJCDJLKLVHM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.060740012102658336);
    msg.setSource(29567U);
    msg.setSourceEntity(53U);
    msg.setDestination(10420U);
    msg.setDestinationEntity(86U);
    msg.name.assign("CWIPDPINVUPGICJQJJBNJVCXDANMKRGGJOQGA");
    msg.value = 81U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.3927635996863199);
    msg.setSource(59597U);
    msg.setSourceEntity(249U);
    msg.setDestination(58191U);
    msg.setDestinationEntity(104U);
    msg.name.assign("QYUDBZROPXNKISEVWNOWTAMZFXJNRTNLAZCEMOPPCMLHIKATXGGFXPTRKLCYHOOQCOUMTMWCRWKCOWZTDBDSSHVKHHRCXPPFQGYHLISEVECWUETJBDEYILZAFKCA");
    msg.value = 242U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.7138487259078204);
    msg.setSource(38525U);
    msg.setSourceEntity(174U);
    msg.setDestination(61466U);
    msg.setDestinationEntity(246U);
    msg.name.assign("ASETHSUPHPOWBGVVFWLEVYBVKXJLWFDZVDDWPMKQUIHZSJLOPJFRTMNUTSVDYTQWHUGVUCWDSYKJRXHCOROZJPJCYZSDLBROZQIHASKPDJCTZKKLOVGTIAXAEENTIMIUXQFKNBYEGMTHIVBFIAEZ");
    msg.value = 95U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.965698472203463);
    msg.setSource(18665U);
    msg.setSourceEntity(87U);
    msg.setDestination(29144U);
    msg.setDestinationEntity(167U);
    msg.id = 252U;
    msg.period = 1810689181U;
    msg.duty_cycle = 863527458U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.9247000242750762);
    msg.setSource(24468U);
    msg.setSourceEntity(72U);
    msg.setDestination(47851U);
    msg.setDestinationEntity(175U);
    msg.id = 19U;
    msg.period = 3966696864U;
    msg.duty_cycle = 3093964544U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.15778924133099936);
    msg.setSource(20585U);
    msg.setSourceEntity(87U);
    msg.setDestination(32061U);
    msg.setDestinationEntity(210U);
    msg.id = 47U;
    msg.period = 1478982760U;
    msg.duty_cycle = 3661757784U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.16879743476997922);
    msg.setSource(57493U);
    msg.setSourceEntity(158U);
    msg.setDestination(37969U);
    msg.setDestinationEntity(82U);
    msg.id = 103U;
    msg.period = 3149706645U;
    msg.duty_cycle = 3950333150U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.5352723519470335);
    msg.setSource(26079U);
    msg.setSourceEntity(100U);
    msg.setDestination(21176U);
    msg.setDestinationEntity(234U);
    msg.id = 140U;
    msg.period = 707401188U;
    msg.duty_cycle = 3674018197U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.9820799906138414);
    msg.setSource(28364U);
    msg.setSourceEntity(236U);
    msg.setDestination(2057U);
    msg.setDestinationEntity(138U);
    msg.id = 224U;
    msg.period = 2883296950U;
    msg.duty_cycle = 1940276804U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.18026388890233125);
    msg.setSource(4472U);
    msg.setSourceEntity(126U);
    msg.setDestination(3265U);
    msg.setDestinationEntity(213U);
    msg.lat = 0.4024513090320564;
    msg.lon = 0.6477366042661533;
    msg.height = 0.7114365814834064;
    msg.x = 0.2938688462660818;
    msg.y = 0.957808786247977;
    msg.z = 0.1793533005690976;
    msg.phi = 0.3273371922104116;
    msg.theta = 0.8884189467898507;
    msg.psi = 0.10600342564791543;
    msg.u = 0.7702437793836162;
    msg.v = 0.5669924547971203;
    msg.w = 0.69301683543066;
    msg.vx = 0.4474295628769751;
    msg.vy = 0.9924187690239938;
    msg.vz = 0.9802591010057248;
    msg.p = 0.9343859528418469;
    msg.q = 0.8215187643742505;
    msg.r = 0.4653684106206025;
    msg.depth = 0.24518881541545812;
    msg.alt = 0.5274729002587104;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.2965541724783308);
    msg.setSource(22842U);
    msg.setSourceEntity(227U);
    msg.setDestination(9648U);
    msg.setDestinationEntity(217U);
    msg.lat = 0.4804221270760143;
    msg.lon = 0.5472717160394525;
    msg.height = 0.17639920353143002;
    msg.x = 0.1493531238078023;
    msg.y = 0.18872496729911437;
    msg.z = 0.6869549749095173;
    msg.phi = 0.3033478122809766;
    msg.theta = 0.8990223558130747;
    msg.psi = 0.3790044969988434;
    msg.u = 0.2214070283412698;
    msg.v = 0.011221369375701506;
    msg.w = 0.38698238378516603;
    msg.vx = 0.1223955580608117;
    msg.vy = 0.27347058754928477;
    msg.vz = 0.5076240520368849;
    msg.p = 0.3582328661512142;
    msg.q = 0.7926440523507631;
    msg.r = 0.2478579339671526;
    msg.depth = 0.08760920415795992;
    msg.alt = 0.28358104181491606;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.4250666058799272);
    msg.setSource(28457U);
    msg.setSourceEntity(144U);
    msg.setDestination(1489U);
    msg.setDestinationEntity(225U);
    msg.lat = 0.045965417440280265;
    msg.lon = 0.5563551563833133;
    msg.height = 0.7579990005166077;
    msg.x = 0.3897217810292377;
    msg.y = 0.5814522665807933;
    msg.z = 0.5444164353961733;
    msg.phi = 0.9125567160873015;
    msg.theta = 0.8502244297842994;
    msg.psi = 0.16802355744761632;
    msg.u = 0.7311161844151988;
    msg.v = 0.8248261756809354;
    msg.w = 0.2718958742176447;
    msg.vx = 0.5032407191699863;
    msg.vy = 0.2713851240170557;
    msg.vz = 0.11109454475521785;
    msg.p = 0.9838445865662184;
    msg.q = 0.2729115560692825;
    msg.r = 0.26760189097402176;
    msg.depth = 0.33480901929812557;
    msg.alt = 0.5864829871766104;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.1638083684588254);
    msg.setSource(6591U);
    msg.setSourceEntity(107U);
    msg.setDestination(41744U);
    msg.setDestinationEntity(23U);
    msg.x = 0.8083506475738538;
    msg.y = 0.5357026845255562;
    msg.z = 0.05993308621722915;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.4937837865471688);
    msg.setSource(47240U);
    msg.setSourceEntity(26U);
    msg.setDestination(32690U);
    msg.setDestinationEntity(76U);
    msg.x = 0.4392236418079577;
    msg.y = 0.8981738894275195;
    msg.z = 0.8737769138153593;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.8009264101579507);
    msg.setSource(37239U);
    msg.setSourceEntity(101U);
    msg.setDestination(25522U);
    msg.setDestinationEntity(125U);
    msg.x = 0.6267267547344606;
    msg.y = 0.23407294558126168;
    msg.z = 0.446309338916584;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.10303402947933527);
    msg.setSource(63576U);
    msg.setSourceEntity(78U);
    msg.setDestination(16105U);
    msg.setDestinationEntity(86U);
    msg.value = 0.5685160041565939;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.9736212924540731);
    msg.setSource(51880U);
    msg.setSourceEntity(246U);
    msg.setDestination(33076U);
    msg.setDestinationEntity(62U);
    msg.value = 0.3324618153494304;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.21105019102917943);
    msg.setSource(2027U);
    msg.setSourceEntity(27U);
    msg.setDestination(14174U);
    msg.setDestinationEntity(53U);
    msg.value = 0.887305548476189;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.21177120041767505);
    msg.setSource(7574U);
    msg.setSourceEntity(60U);
    msg.setDestination(16301U);
    msg.setDestinationEntity(39U);
    msg.value = 0.8995910103722814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.5604239197781313);
    msg.setSource(49115U);
    msg.setSourceEntity(9U);
    msg.setDestination(57035U);
    msg.setDestinationEntity(229U);
    msg.value = 0.2461826795698946;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.6310208226710586);
    msg.setSource(521U);
    msg.setSourceEntity(104U);
    msg.setDestination(20711U);
    msg.setDestinationEntity(186U);
    msg.value = 0.5040317311588712;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.445994843829842);
    msg.setSource(41483U);
    msg.setSourceEntity(80U);
    msg.setDestination(59383U);
    msg.setDestinationEntity(181U);
    msg.x = 0.1271255157332094;
    msg.y = 0.4369747104045867;
    msg.z = 0.8611947828179796;
    msg.phi = 0.05508695341231884;
    msg.theta = 0.0757931511308545;
    msg.psi = 0.7755228289430437;
    msg.p = 0.6000730564622246;
    msg.q = 0.5880012960683612;
    msg.r = 0.788873087604407;
    msg.u = 0.4280064456371915;
    msg.v = 0.2290614630448995;
    msg.w = 0.4895352659211435;
    msg.bias_psi = 0.8128279235114292;
    msg.bias_r = 0.1570890251119127;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.44924831149195676);
    msg.setSource(16050U);
    msg.setSourceEntity(251U);
    msg.setDestination(10367U);
    msg.setDestinationEntity(136U);
    msg.x = 0.45489885041301714;
    msg.y = 0.9466127186526296;
    msg.z = 0.36887715609490834;
    msg.phi = 0.17022955339761203;
    msg.theta = 0.28911555391599664;
    msg.psi = 0.26127391889610996;
    msg.p = 0.8092904813449658;
    msg.q = 0.1931457483059309;
    msg.r = 0.6974643382658787;
    msg.u = 0.9770351837849535;
    msg.v = 0.6773598950586185;
    msg.w = 0.8784692689876988;
    msg.bias_psi = 0.7397253925234905;
    msg.bias_r = 0.6688897012748573;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.9936775222790873);
    msg.setSource(25506U);
    msg.setSourceEntity(146U);
    msg.setDestination(38261U);
    msg.setDestinationEntity(32U);
    msg.x = 0.21463129624056776;
    msg.y = 0.22880347848693372;
    msg.z = 0.5752506081901586;
    msg.phi = 0.862418863052575;
    msg.theta = 0.7587279736650713;
    msg.psi = 0.35795941752575344;
    msg.p = 0.6418385521416677;
    msg.q = 0.23295503101943615;
    msg.r = 0.29302980313735005;
    msg.u = 0.006970753806844976;
    msg.v = 0.4011259256453257;
    msg.w = 0.782928918612389;
    msg.bias_psi = 0.2539851585618119;
    msg.bias_r = 0.08650236312418025;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.5404690247329923);
    msg.setSource(8870U);
    msg.setSourceEntity(3U);
    msg.setDestination(33277U);
    msg.setDestinationEntity(119U);
    msg.bias_psi = 0.2358164485398644;
    msg.bias_r = 0.7769762272090702;
    msg.cog = 0.45384740482748687;
    msg.cyaw = 0.12561029352082254;
    msg.lbl_rej_level = 0.14680752413573783;
    msg.gps_rej_level = 0.451337340282834;
    msg.custom_x = 0.38293271608561863;
    msg.custom_y = 0.9989124466554306;
    msg.custom_z = 0.6651329646985091;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.4316181055389513);
    msg.setSource(1612U);
    msg.setSourceEntity(118U);
    msg.setDestination(51311U);
    msg.setDestinationEntity(153U);
    msg.bias_psi = 0.6130555776540195;
    msg.bias_r = 0.1933042621196005;
    msg.cog = 0.2920063341086261;
    msg.cyaw = 0.19968198223757905;
    msg.lbl_rej_level = 0.6578565473495678;
    msg.gps_rej_level = 0.1517915789329608;
    msg.custom_x = 0.43636275880651465;
    msg.custom_y = 0.8986196446532108;
    msg.custom_z = 0.27289767214467375;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.6769805037257611);
    msg.setSource(3578U);
    msg.setSourceEntity(209U);
    msg.setDestination(16500U);
    msg.setDestinationEntity(77U);
    msg.bias_psi = 0.8481113563163987;
    msg.bias_r = 0.32024710421208324;
    msg.cog = 0.14993072245877326;
    msg.cyaw = 0.7350495870914288;
    msg.lbl_rej_level = 0.992501259357329;
    msg.gps_rej_level = 0.9191378691358355;
    msg.custom_x = 0.208991980941431;
    msg.custom_y = 0.6525529263156519;
    msg.custom_z = 0.9896791378041891;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.9145842516913529);
    msg.setSource(18256U);
    msg.setSourceEntity(114U);
    msg.setDestination(6606U);
    msg.setDestinationEntity(51U);
    msg.utc_time = 0.6789751047388417;
    msg.reason = 6U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.184261931734508);
    msg.setSource(3418U);
    msg.setSourceEntity(29U);
    msg.setDestination(9377U);
    msg.setDestinationEntity(150U);
    msg.utc_time = 0.25746510871545314;
    msg.reason = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.31873924981657953);
    msg.setSource(39756U);
    msg.setSourceEntity(145U);
    msg.setDestination(45289U);
    msg.setDestinationEntity(43U);
    msg.utc_time = 0.9180134549965471;
    msg.reason = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.5673591271699164);
    msg.setSource(24773U);
    msg.setSourceEntity(68U);
    msg.setDestination(36892U);
    msg.setDestinationEntity(198U);
    msg.id = 248U;
    msg.range = 0.727039232918251;
    msg.acceptance = 231U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.8007938759397633);
    msg.setSource(22581U);
    msg.setSourceEntity(47U);
    msg.setDestination(40664U);
    msg.setDestinationEntity(82U);
    msg.id = 26U;
    msg.range = 0.9744316078580666;
    msg.acceptance = 71U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.2296494904903994);
    msg.setSource(36737U);
    msg.setSourceEntity(125U);
    msg.setDestination(22616U);
    msg.setDestinationEntity(80U);
    msg.id = 69U;
    msg.range = 0.5124431975000668;
    msg.acceptance = 61U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.08539999173748958);
    msg.setSource(58911U);
    msg.setSourceEntity(106U);
    msg.setDestination(50260U);
    msg.setDestinationEntity(248U);
    msg.type = 160U;
    msg.reason = 138U;
    msg.value = 0.6588585181093302;
    msg.timestep = 0.9920241646965345;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.1936231299160095);
    msg.setSource(52371U);
    msg.setSourceEntity(110U);
    msg.setDestination(61110U);
    msg.setDestinationEntity(14U);
    msg.type = 243U;
    msg.reason = 226U;
    msg.value = 0.17624093958269604;
    msg.timestep = 0.6515495358148482;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.9035217011575046);
    msg.setSource(28975U);
    msg.setSourceEntity(57U);
    msg.setDestination(34884U);
    msg.setDestinationEntity(211U);
    msg.type = 137U;
    msg.reason = 189U;
    msg.value = 0.6548947988309771;
    msg.timestep = 0.05139032848206582;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.3547533291875137);
    msg.setSource(31110U);
    msg.setSourceEntity(20U);
    msg.setDestination(10720U);
    msg.setDestinationEntity(176U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("YXALFVNOBTIFLAWRPXXHAGKIA");
    tmp_msg_0.lat = 0.012475189535115616;
    tmp_msg_0.lon = 0.4330507377710021;
    tmp_msg_0.depth = 0.03448054562817071;
    tmp_msg_0.query_channel = 76U;
    tmp_msg_0.reply_channel = 238U;
    tmp_msg_0.transponder_delay = 69U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.5302453846149741;
    msg.y = 0.038679872157360906;
    msg.var_x = 0.3242884825019098;
    msg.var_y = 0.31879636805299194;
    msg.distance = 0.33497823867950594;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.32418294866500474);
    msg.setSource(52891U);
    msg.setSourceEntity(48U);
    msg.setDestination(54717U);
    msg.setDestinationEntity(227U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("NZIJEWPNMDCJDSOFEAMAVDTATIPACMLOUZVHBIPPREJLNURGMIXVAJAFWMXFQUHOITXBRFSBHCMCYSDTGTWDWPPQEQKZVZIAVYINKMKTSKOSYZWKJTKREVFZLKCNKOFUHBIZTUBXKRQLNLDUSBUMXGB");
    tmp_msg_0.lat = 0.003115335667671526;
    tmp_msg_0.lon = 0.6132441092750068;
    tmp_msg_0.depth = 0.4443963572988977;
    tmp_msg_0.query_channel = 25U;
    tmp_msg_0.reply_channel = 190U;
    tmp_msg_0.transponder_delay = 38U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.9747398590665751;
    msg.y = 0.9686473008022866;
    msg.var_x = 0.33093267303761553;
    msg.var_y = 0.5432453310495352;
    msg.distance = 0.59114442170867;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.25217908924236143);
    msg.setSource(32808U);
    msg.setSourceEntity(130U);
    msg.setDestination(22607U);
    msg.setDestinationEntity(202U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("OATJECBRZPSRFYGAHLQXTZFNJCIVTJMUQUDDKRBYIMCGQZWFZHAUKDMBOVZQGBRTIHTIROAVQGOEPBELPVXEYVOXLROBHLOZPIWFXQOENAVYTY");
    tmp_msg_0.lat = 0.04299707898441152;
    tmp_msg_0.lon = 0.8445458539380171;
    tmp_msg_0.depth = 0.24168434292236884;
    tmp_msg_0.query_channel = 172U;
    tmp_msg_0.reply_channel = 226U;
    tmp_msg_0.transponder_delay = 85U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.45680212722636926;
    msg.y = 0.35068434632794654;
    msg.var_x = 0.16787647676860906;
    msg.var_y = 0.5282053156746798;
    msg.distance = 0.5748987954729823;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.5482172063528465);
    msg.setSource(54429U);
    msg.setSourceEntity(184U);
    msg.setDestination(53795U);
    msg.setDestinationEntity(6U);
    msg.state = 240U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.5488730572528063);
    msg.setSource(15280U);
    msg.setSourceEntity(51U);
    msg.setDestination(52653U);
    msg.setDestinationEntity(52U);
    msg.state = 138U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.15802377849184468);
    msg.setSource(10778U);
    msg.setSourceEntity(108U);
    msg.setDestination(12059U);
    msg.setDestinationEntity(101U);
    msg.state = 58U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.4128074722660938);
    msg.setSource(52381U);
    msg.setSourceEntity(44U);
    msg.setDestination(11700U);
    msg.setDestinationEntity(86U);
    msg.x = 0.9279382289756607;
    msg.y = 0.8961594047733421;
    msg.z = 0.3496758846285709;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.538611991597064);
    msg.setSource(23491U);
    msg.setSourceEntity(133U);
    msg.setDestination(8370U);
    msg.setDestinationEntity(240U);
    msg.x = 0.8716642158285098;
    msg.y = 0.31728565285694554;
    msg.z = 0.7019433000550521;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.18228500980216844);
    msg.setSource(12650U);
    msg.setSourceEntity(100U);
    msg.setDestination(14567U);
    msg.setDestinationEntity(90U);
    msg.x = 0.0358121845229451;
    msg.y = 0.6033497508583315;
    msg.z = 0.20857472338345906;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.9261622114497866);
    msg.setSource(37097U);
    msg.setSourceEntity(130U);
    msg.setDestination(54391U);
    msg.setDestinationEntity(87U);
    msg.va = 0.5960890682389963;
    msg.aoa = 0.4165979727143865;
    msg.ssa = 0.04234326540695588;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.7397980854615028);
    msg.setSource(23048U);
    msg.setSourceEntity(187U);
    msg.setDestination(32066U);
    msg.setDestinationEntity(96U);
    msg.va = 0.34370326716551236;
    msg.aoa = 0.3263699923922183;
    msg.ssa = 0.6985093650972225;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.018232870101573484);
    msg.setSource(25808U);
    msg.setSourceEntity(82U);
    msg.setDestination(40022U);
    msg.setDestinationEntity(206U);
    msg.va = 0.731121157954851;
    msg.aoa = 0.9063630011181915;
    msg.ssa = 0.9283821167028785;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.8207516017924041);
    msg.setSource(36876U);
    msg.setSourceEntity(116U);
    msg.setDestination(33666U);
    msg.setDestinationEntity(35U);
    msg.value = 0.4992590252609028;
    msg.off = 0.3924984130216209;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.689570224523661);
    msg.setSource(46080U);
    msg.setSourceEntity(28U);
    msg.setDestination(13536U);
    msg.setDestinationEntity(151U);
    msg.value = 0.7487937976039936;
    msg.off = 0.910052343588597;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.2769562504844387);
    msg.setSource(46071U);
    msg.setSourceEntity(197U);
    msg.setDestination(46143U);
    msg.setDestinationEntity(142U);
    msg.value = 0.9343254788280416;
    msg.off = 0.007687415550495791;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.38696084820524823);
    msg.setSource(26324U);
    msg.setSourceEntity(182U);
    msg.setDestination(50652U);
    msg.setDestinationEntity(50U);
    msg.value = 0.7301584967896118;
    msg.z_units = 27U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.19515829679874908);
    msg.setSource(6190U);
    msg.setSourceEntity(30U);
    msg.setDestination(36502U);
    msg.setDestinationEntity(104U);
    msg.value = 0.8389897828772288;
    msg.z_units = 23U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.14403192333332393);
    msg.setSource(24297U);
    msg.setSourceEntity(213U);
    msg.setDestination(51262U);
    msg.setDestinationEntity(83U);
    msg.value = 0.4515362013081251;
    msg.z_units = 25U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.29641118773571085);
    msg.setSource(11861U);
    msg.setSourceEntity(77U);
    msg.setDestination(58206U);
    msg.setDestinationEntity(75U);
    msg.value = 0.22457848399968883;
    msg.speed_units = 71U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.6437396593029707);
    msg.setSource(44942U);
    msg.setSourceEntity(78U);
    msg.setDestination(31610U);
    msg.setDestinationEntity(97U);
    msg.value = 0.8739922008232934;
    msg.speed_units = 39U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.14184878839329873);
    msg.setSource(47373U);
    msg.setSourceEntity(152U);
    msg.setDestination(61203U);
    msg.setDestinationEntity(207U);
    msg.value = 0.47679342095673205;
    msg.speed_units = 224U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.02901957070598382);
    msg.setSource(53175U);
    msg.setSourceEntity(5U);
    msg.setDestination(7193U);
    msg.setDestinationEntity(34U);
    msg.value = 0.40839790479455695;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.6468188446894695);
    msg.setSource(63006U);
    msg.setSourceEntity(77U);
    msg.setDestination(31480U);
    msg.setDestinationEntity(203U);
    msg.value = 0.1398988040773208;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.1577116279297578);
    msg.setSource(39578U);
    msg.setSourceEntity(174U);
    msg.setDestination(12038U);
    msg.setDestinationEntity(187U);
    msg.value = 0.07791689726238515;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.12667572668142246);
    msg.setSource(29393U);
    msg.setSourceEntity(3U);
    msg.setDestination(16284U);
    msg.setDestinationEntity(157U);
    msg.value = 0.6460657989161079;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.9753604336608482);
    msg.setSource(46258U);
    msg.setSourceEntity(75U);
    msg.setDestination(32443U);
    msg.setDestinationEntity(15U);
    msg.value = 0.12647235059828765;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.7802455296103378);
    msg.setSource(36570U);
    msg.setSourceEntity(41U);
    msg.setDestination(15852U);
    msg.setDestinationEntity(210U);
    msg.value = 0.5092342650372479;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.5542488625180979);
    msg.setSource(46416U);
    msg.setSourceEntity(220U);
    msg.setDestination(21022U);
    msg.setDestinationEntity(98U);
    msg.value = 0.08154127073113515;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.7613718517422936);
    msg.setSource(23964U);
    msg.setSourceEntity(135U);
    msg.setDestination(16457U);
    msg.setDestinationEntity(91U);
    msg.value = 0.19556058806524734;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.45262079421793966);
    msg.setSource(48398U);
    msg.setSourceEntity(92U);
    msg.setDestination(27986U);
    msg.setDestinationEntity(0U);
    msg.value = 0.5217118983215229;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.6797878836965203);
    msg.setSource(38673U);
    msg.setSourceEntity(200U);
    msg.setDestination(27755U);
    msg.setDestinationEntity(232U);
    msg.path_ref = 663402095U;
    msg.start_lat = 0.9449420886092482;
    msg.start_lon = 0.6022858073183864;
    msg.start_z = 0.06138882273870261;
    msg.start_z_units = 62U;
    msg.end_lat = 0.7100646411345706;
    msg.end_lon = 0.7030305361876767;
    msg.end_z = 0.020644702312357377;
    msg.end_z_units = 233U;
    msg.speed = 0.6292251832837993;
    msg.speed_units = 133U;
    msg.lradius = 0.6945005040810587;
    msg.flags = 131U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.7427910592711067);
    msg.setSource(28393U);
    msg.setSourceEntity(92U);
    msg.setDestination(47866U);
    msg.setDestinationEntity(241U);
    msg.path_ref = 4032255058U;
    msg.start_lat = 0.8483457880584984;
    msg.start_lon = 0.5648792727619854;
    msg.start_z = 0.10320675738009011;
    msg.start_z_units = 244U;
    msg.end_lat = 0.6896370533500433;
    msg.end_lon = 0.8939954343631359;
    msg.end_z = 0.12315660427840192;
    msg.end_z_units = 130U;
    msg.speed = 0.4105670998962031;
    msg.speed_units = 41U;
    msg.lradius = 0.21111606438463715;
    msg.flags = 65U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.6979669829573306);
    msg.setSource(17012U);
    msg.setSourceEntity(91U);
    msg.setDestination(15278U);
    msg.setDestinationEntity(134U);
    msg.path_ref = 314261635U;
    msg.start_lat = 0.711239914812706;
    msg.start_lon = 0.39993655180968;
    msg.start_z = 0.02681310907505219;
    msg.start_z_units = 168U;
    msg.end_lat = 0.22183442244155327;
    msg.end_lon = 0.20837582753096506;
    msg.end_z = 0.8451602058909988;
    msg.end_z_units = 187U;
    msg.speed = 0.9516477502140024;
    msg.speed_units = 40U;
    msg.lradius = 0.13063094959725385;
    msg.flags = 144U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.41927642090423645);
    msg.setSource(38521U);
    msg.setSourceEntity(56U);
    msg.setDestination(54803U);
    msg.setDestinationEntity(191U);
    msg.x = 0.7455541587342985;
    msg.y = 0.12935235707845283;
    msg.z = 0.8227832288518153;
    msg.k = 0.7775182350653436;
    msg.m = 0.015937422435219784;
    msg.n = 0.9672989326814304;
    msg.flags = 170U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.9959016621380852);
    msg.setSource(59812U);
    msg.setSourceEntity(55U);
    msg.setDestination(45457U);
    msg.setDestinationEntity(175U);
    msg.x = 0.7187285737457033;
    msg.y = 0.13961529948830798;
    msg.z = 0.6913635470560746;
    msg.k = 0.2663873551844448;
    msg.m = 0.7101959856347524;
    msg.n = 0.5443779174080889;
    msg.flags = 76U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.3132997245161183);
    msg.setSource(11334U);
    msg.setSourceEntity(84U);
    msg.setDestination(34497U);
    msg.setDestinationEntity(93U);
    msg.x = 0.8887220605163868;
    msg.y = 0.4453628175639903;
    msg.z = 0.7189063285893548;
    msg.k = 0.06592495914963792;
    msg.m = 0.5978530292072716;
    msg.n = 0.7850790460891829;
    msg.flags = 149U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.6429276437283703);
    msg.setSource(21000U);
    msg.setSourceEntity(228U);
    msg.setDestination(24581U);
    msg.setDestinationEntity(38U);
    msg.value = 0.24775049980085417;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.4648299063895295);
    msg.setSource(56485U);
    msg.setSourceEntity(52U);
    msg.setDestination(36388U);
    msg.setDestinationEntity(166U);
    msg.value = 0.6967324115085339;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.33450594111613485);
    msg.setSource(64327U);
    msg.setSourceEntity(165U);
    msg.setDestination(61351U);
    msg.setDestinationEntity(122U);
    msg.value = 0.032716304233459725;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.8330832008940688);
    msg.setSource(2869U);
    msg.setSourceEntity(13U);
    msg.setDestination(26075U);
    msg.setDestinationEntity(94U);
    msg.u = 0.8079340566545037;
    msg.v = 0.1617989901185538;
    msg.w = 0.01402227293270697;
    msg.p = 0.4762043626184832;
    msg.q = 0.6217894766277999;
    msg.r = 0.3930714023237133;
    msg.flags = 177U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.07960096697642527);
    msg.setSource(43946U);
    msg.setSourceEntity(43U);
    msg.setDestination(11417U);
    msg.setDestinationEntity(64U);
    msg.u = 0.07004288339912845;
    msg.v = 0.08665143124965735;
    msg.w = 0.39029501061370553;
    msg.p = 0.22949924635232355;
    msg.q = 0.33735604476009873;
    msg.r = 0.40003684056177824;
    msg.flags = 41U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.7282684004446324);
    msg.setSource(41116U);
    msg.setSourceEntity(89U);
    msg.setDestination(32392U);
    msg.setDestinationEntity(31U);
    msg.u = 0.5256339779100613;
    msg.v = 0.45142639856297995;
    msg.w = 0.4900056585403427;
    msg.p = 0.7549915808871172;
    msg.q = 0.26922806683226885;
    msg.r = 0.9705818661558887;
    msg.flags = 149U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.7486410900341174);
    msg.setSource(13990U);
    msg.setSourceEntity(122U);
    msg.setDestination(15983U);
    msg.setDestinationEntity(180U);
    msg.path_ref = 2982848093U;
    msg.start_lat = 0.7934588592003027;
    msg.start_lon = 0.36926910277858427;
    msg.start_z = 0.7139492851731049;
    msg.start_z_units = 57U;
    msg.end_lat = 0.5686676107927664;
    msg.end_lon = 0.7225428625215756;
    msg.end_z = 0.44151441876537867;
    msg.end_z_units = 41U;
    msg.lradius = 0.4305870713121239;
    msg.flags = 152U;
    msg.x = 0.1582395264163543;
    msg.y = 0.03692839855552976;
    msg.z = 0.8375697233791943;
    msg.vx = 0.16191927225463632;
    msg.vy = 0.7688258352736378;
    msg.vz = 0.7268606323577856;
    msg.course_error = 0.37175977850494646;
    msg.eta = 19093U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.9217399859174411);
    msg.setSource(12331U);
    msg.setSourceEntity(230U);
    msg.setDestination(19859U);
    msg.setDestinationEntity(231U);
    msg.path_ref = 1617179550U;
    msg.start_lat = 0.7446685035775276;
    msg.start_lon = 0.6778583903656554;
    msg.start_z = 0.41068250487142866;
    msg.start_z_units = 142U;
    msg.end_lat = 0.8013159302069219;
    msg.end_lon = 0.33747347630465974;
    msg.end_z = 0.4966366764015244;
    msg.end_z_units = 142U;
    msg.lradius = 0.20815041149869518;
    msg.flags = 66U;
    msg.x = 0.2778352199375551;
    msg.y = 0.533550268252132;
    msg.z = 0.21820192714455755;
    msg.vx = 0.27094493076552695;
    msg.vy = 0.9426306797745998;
    msg.vz = 0.705449141253482;
    msg.course_error = 0.872614507990196;
    msg.eta = 55636U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.22754699221480312);
    msg.setSource(28105U);
    msg.setSourceEntity(175U);
    msg.setDestination(13413U);
    msg.setDestinationEntity(67U);
    msg.path_ref = 451620801U;
    msg.start_lat = 0.023980316653105738;
    msg.start_lon = 0.36271991335466747;
    msg.start_z = 0.8503586622627737;
    msg.start_z_units = 89U;
    msg.end_lat = 0.7223380151025313;
    msg.end_lon = 0.41175116167051495;
    msg.end_z = 0.7599096139718653;
    msg.end_z_units = 131U;
    msg.lradius = 0.4367143641010154;
    msg.flags = 66U;
    msg.x = 0.2836110331970949;
    msg.y = 0.40799333995173737;
    msg.z = 0.13198810824027873;
    msg.vx = 0.22496593852329694;
    msg.vy = 0.895476126041836;
    msg.vz = 0.2362691490795612;
    msg.course_error = 0.409994177431789;
    msg.eta = 61251U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8554238396555293);
    msg.setSource(2098U);
    msg.setSourceEntity(1U);
    msg.setDestination(60017U);
    msg.setDestinationEntity(121U);
    msg.k = 0.48884552551792604;
    msg.m = 0.410262613101674;
    msg.n = 0.5586687348824768;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8377201116042424);
    msg.setSource(6984U);
    msg.setSourceEntity(172U);
    msg.setDestination(60886U);
    msg.setDestinationEntity(78U);
    msg.k = 0.2793966670970943;
    msg.m = 0.7825402560461981;
    msg.n = 0.7437584721594296;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8748182754488731);
    msg.setSource(44755U);
    msg.setSourceEntity(180U);
    msg.setDestination(32707U);
    msg.setDestinationEntity(6U);
    msg.k = 0.41759070877468973;
    msg.m = 0.43308892667042664;
    msg.n = 0.8845754726268441;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.24191663934826368);
    msg.setSource(6880U);
    msg.setSourceEntity(215U);
    msg.setDestination(53326U);
    msg.setDestinationEntity(188U);
    msg.p = 0.9626330294969278;
    msg.i = 0.335527378081947;
    msg.d = 0.16329072273566547;
    msg.a = 0.7818092844829339;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.6353424892724605);
    msg.setSource(22389U);
    msg.setSourceEntity(48U);
    msg.setDestination(63811U);
    msg.setDestinationEntity(220U);
    msg.p = 0.6449038259115587;
    msg.i = 0.12378924603897323;
    msg.d = 0.16666855566711236;
    msg.a = 0.9526621061075059;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.8475350142686596);
    msg.setSource(36792U);
    msg.setSourceEntity(41U);
    msg.setDestination(7295U);
    msg.setDestinationEntity(144U);
    msg.p = 0.7804798759821991;
    msg.i = 0.4501801263424249;
    msg.d = 0.5718684545036439;
    msg.a = 0.6687976019796356;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.5062807742504923);
    msg.setSource(12497U);
    msg.setSourceEntity(132U);
    msg.setDestination(63301U);
    msg.setDestinationEntity(158U);
    msg.op = 130U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.9483094228585107);
    msg.setSource(63858U);
    msg.setSourceEntity(133U);
    msg.setDestination(12183U);
    msg.setDestinationEntity(165U);
    msg.op = 239U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.70778880583083);
    msg.setSource(6083U);
    msg.setSourceEntity(225U);
    msg.setDestination(57260U);
    msg.setDestinationEntity(55U);
    msg.op = 221U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.6211561572138047);
    msg.setSource(63481U);
    msg.setSourceEntity(7U);
    msg.setDestination(5235U);
    msg.setDestinationEntity(61U);
    msg.x = 0.7460368985366599;
    msg.y = 0.02070546821644026;
    msg.z = 0.7643638727741483;
    msg.vx = 0.21028121933906307;
    msg.vy = 0.3663086394436552;
    msg.vz = 0.8958188640873257;
    msg.ax = 0.8135811845225546;
    msg.ay = 0.7191065965084479;
    msg.az = 0.7398463047384813;
    msg.flags = 23497U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.25062943881629496);
    msg.setSource(32402U);
    msg.setSourceEntity(251U);
    msg.setDestination(49024U);
    msg.setDestinationEntity(55U);
    msg.x = 0.21486766204945762;
    msg.y = 0.653980216617458;
    msg.z = 0.5779256122187236;
    msg.vx = 0.865735699430572;
    msg.vy = 0.9672087127438064;
    msg.vz = 0.549771386378446;
    msg.ax = 0.8640275569833344;
    msg.ay = 0.2095779811552142;
    msg.az = 0.8021218400158772;
    msg.flags = 29054U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.8884175663261477);
    msg.setSource(21616U);
    msg.setSourceEntity(26U);
    msg.setDestination(45254U);
    msg.setDestinationEntity(229U);
    msg.x = 0.2226623239761064;
    msg.y = 0.5207233926105282;
    msg.z = 0.6631006708295538;
    msg.vx = 0.6905636744149748;
    msg.vy = 0.6639689063756192;
    msg.vz = 0.25036839176167913;
    msg.ax = 0.9986313606104734;
    msg.ay = 0.30479991838893294;
    msg.az = 0.6461266930115013;
    msg.flags = 29546U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.17454911197808132);
    msg.setSource(39743U);
    msg.setSourceEntity(33U);
    msg.setDestination(18811U);
    msg.setDestinationEntity(103U);
    msg.value = 0.9418497972067309;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.5076523504235552);
    msg.setSource(4056U);
    msg.setSourceEntity(41U);
    msg.setDestination(24502U);
    msg.setDestinationEntity(57U);
    msg.value = 0.5179819215654633;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.4603503611810451);
    msg.setSource(58605U);
    msg.setSourceEntity(70U);
    msg.setDestination(19934U);
    msg.setDestinationEntity(73U);
    msg.value = 0.49226470213486595;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.2513115797289118);
    msg.setSource(46829U);
    msg.setSourceEntity(239U);
    msg.setDestination(57023U);
    msg.setDestinationEntity(3U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 1998820757U;
    tmp_msg_0.start_lat = 0.3195536041044036;
    tmp_msg_0.start_lon = 0.983370507548238;
    tmp_msg_0.start_z = 0.6225333440126517;
    tmp_msg_0.start_z_units = 148U;
    tmp_msg_0.end_lat = 0.7297361969821866;
    tmp_msg_0.end_lon = 0.5808229454229167;
    tmp_msg_0.end_z = 0.09910353937477723;
    tmp_msg_0.end_z_units = 213U;
    tmp_msg_0.speed = 0.2446117437821791;
    tmp_msg_0.speed_units = 235U;
    tmp_msg_0.lradius = 0.3515300325318029;
    tmp_msg_0.flags = 232U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.9099012033310396);
    msg.setSource(64206U);
    msg.setSourceEntity(194U);
    msg.setDestination(25232U);
    msg.setDestinationEntity(2U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 2693772693U;
    tmp_msg_0.start_lat = 0.46057257151862596;
    tmp_msg_0.start_lon = 0.9960139050336114;
    tmp_msg_0.start_z = 0.42816642894318024;
    tmp_msg_0.start_z_units = 19U;
    tmp_msg_0.end_lat = 0.6352699290250609;
    tmp_msg_0.end_lon = 0.8671330654957597;
    tmp_msg_0.end_z = 0.9258995294509133;
    tmp_msg_0.end_z_units = 72U;
    tmp_msg_0.speed = 0.7699544645776468;
    tmp_msg_0.speed_units = 202U;
    tmp_msg_0.lradius = 0.8484185681099748;
    tmp_msg_0.flags = 171U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.09447310949483545);
    msg.setSource(21487U);
    msg.setSourceEntity(125U);
    msg.setDestination(52279U);
    msg.setDestinationEntity(195U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 2399296156U;
    tmp_msg_0.start_lat = 0.18196210990233663;
    tmp_msg_0.start_lon = 0.4612960491655068;
    tmp_msg_0.start_z = 0.7679101092427996;
    tmp_msg_0.start_z_units = 198U;
    tmp_msg_0.end_lat = 0.9007654994913639;
    tmp_msg_0.end_lon = 0.9270944467217326;
    tmp_msg_0.end_z = 0.005067351809816878;
    tmp_msg_0.end_z_units = 162U;
    tmp_msg_0.speed = 0.5284050922297008;
    tmp_msg_0.speed_units = 213U;
    tmp_msg_0.lradius = 0.53247787464643;
    tmp_msg_0.flags = 249U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.25187211666207676);
    msg.setSource(56744U);
    msg.setSourceEntity(161U);
    msg.setDestination(63475U);
    msg.setDestinationEntity(182U);
    msg.timeout = 17661U;
    msg.lat = 0.11879991753718755;
    msg.lon = 0.655090676479645;
    msg.z = 0.01982259705124123;
    msg.z_units = 145U;
    msg.speed = 0.3080286949132909;
    msg.speed_units = 71U;
    msg.roll = 0.49713237525914267;
    msg.pitch = 0.3072890974185508;
    msg.yaw = 0.47456672345691386;
    msg.custom.assign("NHGHNSSRIITUQOLCVXPXESPEMZCIPFWADTIADXFAJRSBBNZKM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.9837984219658575);
    msg.setSource(48895U);
    msg.setSourceEntity(98U);
    msg.setDestination(43713U);
    msg.setDestinationEntity(215U);
    msg.timeout = 354U;
    msg.lat = 0.24087431204908738;
    msg.lon = 0.9875143491393665;
    msg.z = 0.5856420510012469;
    msg.z_units = 118U;
    msg.speed = 0.9324556554888143;
    msg.speed_units = 105U;
    msg.roll = 0.12398106507418427;
    msg.pitch = 0.02668422872896148;
    msg.yaw = 0.7661712177274798;
    msg.custom.assign("UVZQQXNDBZRIVCIVVKKEMEFQJEXFRIKHCKOBXZMQZXPHBQNOOTITSMHSTDFCLKNNUNYPISKSSWETEAFUPQJIUVJEHHDLJGJNIGZISWTBVDSRSVXAKJPZVOSFILNCOYYRNZZOJYPCTRWRODMGYFWPULBRWRRFUIGMWAQK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.18796243431091297);
    msg.setSource(4285U);
    msg.setSourceEntity(19U);
    msg.setDestination(1056U);
    msg.setDestinationEntity(34U);
    msg.timeout = 19024U;
    msg.lat = 0.6447852699248718;
    msg.lon = 0.7023398075018087;
    msg.z = 0.5737885555427926;
    msg.z_units = 131U;
    msg.speed = 0.0799109877711246;
    msg.speed_units = 72U;
    msg.roll = 0.46800356626572603;
    msg.pitch = 0.8226283347135604;
    msg.yaw = 0.3435478272612319;
    msg.custom.assign("XRWDDJPCNYZXLFJAPORMSKGUUXJWBLNQCVLERCOAVWUWFTWLSAIEESUIZXWPRRUWTBECVEOAJMSSPUZCADDZAICWKMGHKVNBFBIJKBEHHFTSUZRRYYJQH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.8443993410800484);
    msg.setSource(55983U);
    msg.setSourceEntity(62U);
    msg.setDestination(21096U);
    msg.setDestinationEntity(26U);
    msg.timeout = 35880U;
    msg.lat = 0.6155281425289397;
    msg.lon = 0.2768356425754648;
    msg.z = 0.9083343363599795;
    msg.z_units = 143U;
    msg.speed = 0.045579304838292645;
    msg.speed_units = 133U;
    msg.duration = 14359U;
    msg.radius = 0.7185978268147596;
    msg.flags = 190U;
    msg.custom.assign("NAXVUQYREMDXWCBIYCABZZYROMSJOKLTRGHJADFUKOTJBXFQGZHSFNGONOHNGPRBWDBVKFTMVJGTBNUUZRQTIHEAESSMBEPAHIALERECHMTZGVRWDTAFWBPMXZNCESPSSGOOWLHXFSLPAKQFPUCHZDKJKYJWGAH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.9219046336717902);
    msg.setSource(29938U);
    msg.setSourceEntity(80U);
    msg.setDestination(53649U);
    msg.setDestinationEntity(76U);
    msg.timeout = 5628U;
    msg.lat = 0.8842974834728863;
    msg.lon = 0.3989213213443049;
    msg.z = 0.24964144749663808;
    msg.z_units = 74U;
    msg.speed = 0.7866489524986898;
    msg.speed_units = 52U;
    msg.duration = 38998U;
    msg.radius = 0.18474094210479153;
    msg.flags = 58U;
    msg.custom.assign("KAKXGVQKFOEEBIOIMSILFODHHGJKSCXCRHAKYPABNZWIUNJSNCUJCNQZSEWQHUBHMTIFQKDZPPVXPBHPKPRFRZDNYGMFYJUEYKVEPJTRMIFVRQOYIUMZRQGXBNAHXMZMMNFYUOCOZMGRFTSCEQWUPYGOBTBZVTYSSLAWWTNAVUVPWTJMVHSGRDCSCRRGJZLKJFCUYBPLATLVXOWGNUQQLDETJXDKXEEAANDJLOOTQDWHVWGDE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.14756943146659174);
    msg.setSource(4186U);
    msg.setSourceEntity(211U);
    msg.setDestination(36793U);
    msg.setDestinationEntity(148U);
    msg.timeout = 4777U;
    msg.lat = 0.5065347107918755;
    msg.lon = 0.6565812194962484;
    msg.z = 0.4472472510126968;
    msg.z_units = 180U;
    msg.speed = 0.6743720843135673;
    msg.speed_units = 14U;
    msg.duration = 4150U;
    msg.radius = 0.35011503147092526;
    msg.flags = 89U;
    msg.custom.assign("BBRRDYIGUOALHEFWOBLIROTRUVUMBYMZWZEHYUBGPZLUXJREF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.8394219484496386);
    msg.setSource(1382U);
    msg.setSourceEntity(168U);
    msg.setDestination(22134U);
    msg.setDestinationEntity(80U);
    msg.custom.assign("RUIRIKTAKJLRMQABPYFGRSI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.33447415880596887);
    msg.setSource(56066U);
    msg.setSourceEntity(21U);
    msg.setDestination(49162U);
    msg.setDestinationEntity(41U);
    msg.custom.assign("YWEFFJEFOXMDMPPVSRKWDNSAKVGAVUZUWGLKCQGKURQWWDXLUMHZDPMFOYGBTBDTEUTGLFMZWISITZKGCKTPDMLWTRBSEIUFJZYPIOJHASAU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.061183929318235686);
    msg.setSource(45851U);
    msg.setSourceEntity(224U);
    msg.setDestination(48962U);
    msg.setDestinationEntity(52U);
    msg.custom.assign("WOZXHNZFJXKSMNOGKKOZHTRUVTDVOBBONEKPCFBQEEMAGMGKELFQZQZAWRNRDUJVGBHQBCYFIQGYAFJZSCFPREWOZDJICSLRDNBQJUTFLXIKBCGAIJFMOVNRNMITTEPDUHDWJCXBSCMNYEHSOWXLWXGQVICMEYJDGSMWRLWPYOGDVPUQXWWUDRSOVPPUECYFTYLHIFJVAEIJHAIQTZZBNHLKNXRRYYMDASLZTSTKHKHYBI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.3674390618089668);
    msg.setSource(62782U);
    msg.setSourceEntity(97U);
    msg.setDestination(36313U);
    msg.setDestinationEntity(221U);
    msg.timeout = 57750U;
    msg.lat = 0.5555324965530001;
    msg.lon = 0.7321932512512587;
    msg.z = 0.18742194478364027;
    msg.z_units = 130U;
    msg.duration = 3360U;
    msg.speed = 0.26152499256166273;
    msg.speed_units = 238U;
    msg.type = 166U;
    msg.radius = 0.20629394043767046;
    msg.length = 0.033633538447293776;
    msg.bearing = 0.7032665184420819;
    msg.direction = 185U;
    msg.custom.assign("ROLYQGPQHIPVKKRMMEWZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.17289103180359244);
    msg.setSource(63468U);
    msg.setSourceEntity(151U);
    msg.setDestination(23927U);
    msg.setDestinationEntity(124U);
    msg.timeout = 54612U;
    msg.lat = 0.3367298769233559;
    msg.lon = 0.13078246764275814;
    msg.z = 0.5065053564809189;
    msg.z_units = 10U;
    msg.duration = 59276U;
    msg.speed = 0.36157150896957735;
    msg.speed_units = 211U;
    msg.type = 250U;
    msg.radius = 0.6605113197951408;
    msg.length = 0.316898343664322;
    msg.bearing = 0.6915793391634014;
    msg.direction = 138U;
    msg.custom.assign("NZRXFBPBPFKPFVVDUCRJYSDMCWVLLKYSANLORVIXXOAMAEWVZIHFETPJKUPJXTMWCAFIBJZBFBPJGGOGGKVDCJBPLXMJUEKIXASEKANSGHAXMNXEUSCIQCLWFRIBJUOWWEVSNRMGQWHSEVTWOMYIBDJYSGZQHALFZZRCCIDYTXIYTOLREAHKSCTLDXGVFNDPDKHPPQROQGHGHUJIMOWMEHQUNZLZDUNTRUOAWMZQKECOZQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.45224722034599596);
    msg.setSource(34289U);
    msg.setSourceEntity(252U);
    msg.setDestination(32715U);
    msg.setDestinationEntity(85U);
    msg.timeout = 47691U;
    msg.lat = 0.2659411584663365;
    msg.lon = 0.8914996541603243;
    msg.z = 0.3822999315887684;
    msg.z_units = 250U;
    msg.duration = 31095U;
    msg.speed = 0.1286577269267336;
    msg.speed_units = 164U;
    msg.type = 230U;
    msg.radius = 0.21308286298911472;
    msg.length = 0.6433745248965504;
    msg.bearing = 0.15368555947833495;
    msg.direction = 158U;
    msg.custom.assign("VCOKSBRQZSCEDIONYJMFUIWWLTKGYVHQHGTZBPZKYJNMHFWI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.1091966389917447);
    msg.setSource(51290U);
    msg.setSourceEntity(137U);
    msg.setDestination(330U);
    msg.setDestinationEntity(87U);
    msg.duration = 49663U;
    msg.custom.assign("DVYDIEUSVJPMYCACJCUFDWRSVGHAIGTRTLQQXTPOHIBODQMHHICNPATBCTYMWXSLALFREANJIQSBMHDEOMBWWXDYFNOXRMLXPNKKEMZGFLMAOZVTTLS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.9801100790210793);
    msg.setSource(29037U);
    msg.setSourceEntity(88U);
    msg.setDestination(20458U);
    msg.setDestinationEntity(173U);
    msg.duration = 58464U;
    msg.custom.assign("TILNZWVYZNYYHBIDXDLBMQHFFCPSRTOZEVKJXIDIGSLRKHVHPLKXBHQGHQERXICRFCNOTNFQUUONZDFWLBHZIEMQCFLVHVPCYDJMNSXFFDMLPZMEFLXMECUCUFUZGYQVDWGOIWZLONYPSBXOKRDVKBQXVSEEAIAUJAGKAMJTNQOTAKTYPGJWMJMNPYISCKWOBRSYGKTHRBYWJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.32800624175299686);
    msg.setSource(49572U);
    msg.setSourceEntity(144U);
    msg.setDestination(62833U);
    msg.setDestinationEntity(176U);
    msg.duration = 25441U;
    msg.custom.assign("OQJHVANRZPNUCMIXSLQLNVZLIKTGFVIMQQFESLVKAQX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.2839831698268671);
    msg.setSource(20532U);
    msg.setSourceEntity(219U);
    msg.setDestination(29774U);
    msg.setDestinationEntity(206U);
    IMC::DesiredZ tmp_msg_0;
    tmp_msg_0.value = 0.04185033473408284;
    tmp_msg_0.z_units = 151U;
    msg.control.set(tmp_msg_0);
    msg.duration = 5850U;
    msg.custom.assign("CXFNWGUQVFQDOBTBLMMEUCTPITIZKYSXESEPEXPRJIMRGLVOZCALZFIMGZDFQKYVOBVRGUWLPSGEFLSTQHOGXAYRJSYCVUZOCQZNWUDBAGKNLMRLXGBCPZQTLYRXWUQNLOHTJPFYDMWAODWLRYJXCJXRHESUFIOHSPDKJWANYKFITXJZIHCMCMNNWUZKHOEZWBADUSNYTBBMQRVIKAWPHAKJOPSV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.2010746043199777);
    msg.setSource(51093U);
    msg.setSourceEntity(214U);
    msg.setDestination(10660U);
    msg.setDestinationEntity(93U);
    IMC::DesiredRoll tmp_msg_0;
    tmp_msg_0.value = 0.8417686600188681;
    msg.control.set(tmp_msg_0);
    msg.duration = 63721U;
    msg.custom.assign("SWJCSPJBRQZMTAJBCQPFHLRLMKWFYKQRBPVVVPILSRSWXRWRJXXNPVUUQHOMNHZYMFAICEO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.9581938138215031);
    msg.setSource(6114U);
    msg.setSourceEntity(126U);
    msg.setDestination(33794U);
    msg.setDestinationEntity(115U);
    IMC::DesiredHeading tmp_msg_0;
    tmp_msg_0.value = 0.7576500045426271;
    tmp_msg_0.off = 0.29444989670973987;
    msg.control.set(tmp_msg_0);
    msg.duration = 22794U;
    msg.custom.assign("XDFFHIYUQTUWPSRVYXSMWUPSVUDIHHUJYWUMPWJVJXEPZMGSBTHBJUREEETODPGYGDOCHEKWKJPANQWFMJSGTKLMXNZIRQB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.7327566327258613);
    msg.setSource(37717U);
    msg.setSourceEntity(85U);
    msg.setDestination(49424U);
    msg.setDestinationEntity(32U);
    msg.timeout = 46816U;
    msg.lat = 0.32834433564500864;
    msg.lon = 0.12597706570826506;
    msg.z = 0.9196246423909913;
    msg.z_units = 124U;
    msg.speed = 0.7231903439080781;
    msg.speed_units = 115U;
    msg.bearing = 0.484420923212979;
    msg.cross_angle = 0.40962217941470547;
    msg.width = 0.452096313558341;
    msg.length = 0.8578136379605429;
    msg.hstep = 0.48913131240804486;
    msg.coff = 175U;
    msg.alternation = 220U;
    msg.flags = 33U;
    msg.custom.assign("ODRVSAKPNAOXZDLTCEUUNZBWAXOSIEPIYMWGJMRNZZJYNUPLLMLUSWTTSHKGTWYSQSPPVHYQZDPBFTYZHKJWRQOHQPFRLIOATYHWBCHJFMNQGKDMRLOBMKKCAXCTHCNFXVBLINZGDJVOCUYKMNEPRXAGSJECUJBALYIXHWRDGITIMFXEACZPVGUMBBGKHCWVQTSFVVTIDENDNFGJQZJVBQKIEQHFSUEAYOWQJAMXPFKZUOXRREFBLEU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.776017470174659);
    msg.setSource(39646U);
    msg.setSourceEntity(246U);
    msg.setDestination(50129U);
    msg.setDestinationEntity(102U);
    msg.timeout = 14447U;
    msg.lat = 0.7839051839484888;
    msg.lon = 0.8753901286503575;
    msg.z = 0.24122985965247612;
    msg.z_units = 238U;
    msg.speed = 0.25351001798667894;
    msg.speed_units = 198U;
    msg.bearing = 0.9817318796622531;
    msg.cross_angle = 0.6277678856133307;
    msg.width = 0.9054482959729867;
    msg.length = 0.2910058752028907;
    msg.hstep = 0.531530509058102;
    msg.coff = 110U;
    msg.alternation = 47U;
    msg.flags = 58U;
    msg.custom.assign("PJDUHRRVGTQKVQORDBVNHDEAXCSOXLUZLKKIZWGFOZVPFHNOTDAJRPFCOJGMYMALKEPDBOPZASQVDAYMHGWZTRSANVOMEIBQWUFJPXOJHCWFTONJXYFHHYITNPJBKDRMJANTIYQGSFPKNBUUSLWFVIXXLKKCCDCWUUGBWTTZSLGQVJAEYYYRLQPZINPAQGLXZLFZQLIWEIDGCWD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.8558903418725844);
    msg.setSource(37864U);
    msg.setSourceEntity(88U);
    msg.setDestination(26039U);
    msg.setDestinationEntity(136U);
    msg.timeout = 10794U;
    msg.lat = 0.49857571370955056;
    msg.lon = 0.8039600470066248;
    msg.z = 0.26046493539557136;
    msg.z_units = 88U;
    msg.speed = 0.5547891877476677;
    msg.speed_units = 203U;
    msg.bearing = 0.9614463661707269;
    msg.cross_angle = 0.44286567972475344;
    msg.width = 0.7064836621031287;
    msg.length = 0.7555184114674598;
    msg.hstep = 0.7988212594357967;
    msg.coff = 251U;
    msg.alternation = 80U;
    msg.flags = 223U;
    msg.custom.assign("ZKWXMBAMFFMJTOUNWGDCUTTBUWQNCDPCYUEDMILZQYFC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.06332285187006059);
    msg.setSource(49937U);
    msg.setSourceEntity(176U);
    msg.setDestination(197U);
    msg.setDestinationEntity(95U);
    msg.timeout = 62999U;
    msg.lat = 0.3217575519039346;
    msg.lon = 0.24205214387823404;
    msg.z = 0.041792878111770126;
    msg.z_units = 11U;
    msg.speed = 0.8837921389570017;
    msg.speed_units = 101U;
    msg.custom.assign("HBZGXWTMRAWROYEKZFIXJUNXMRNDSOHUYTKCYAHSHWJMWLVTLPCOFHV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.6139096374548848);
    msg.setSource(16238U);
    msg.setSourceEntity(17U);
    msg.setDestination(54235U);
    msg.setDestinationEntity(100U);
    msg.timeout = 24756U;
    msg.lat = 0.2954060633514465;
    msg.lon = 0.2818866071478684;
    msg.z = 0.6138046845189647;
    msg.z_units = 253U;
    msg.speed = 0.21279131048096123;
    msg.speed_units = 248U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.9389906443499858;
    tmp_msg_0.y = 0.1873245546467509;
    tmp_msg_0.z = 0.21497487826354167;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("UJPTBUZZCNNKOLNSXKYXAVKSCBGJHRACJHFDXIRUDMDOQHEYEPYWUOXWLDFPGLLFEIQFSIEQPFCHWCAQNZWVNBFNQJBZXOOYXESGHQLSXNVJYTYFUPRRVSSWBAMAUMELNHGJEATRBWMDIVAARRSKJEMZTUFGQCZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.469864496035848);
    msg.setSource(33992U);
    msg.setSourceEntity(238U);
    msg.setDestination(14791U);
    msg.setDestinationEntity(169U);
    msg.timeout = 24081U;
    msg.lat = 0.3574817716771421;
    msg.lon = 0.7766848950686072;
    msg.z = 0.8159861066749832;
    msg.z_units = 184U;
    msg.speed = 0.24761686451435982;
    msg.speed_units = 218U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.17643681915180776;
    tmp_msg_0.y = 0.4524153511143332;
    tmp_msg_0.z = 0.0206005037553737;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("OHOQMAVGXIZRPWJTHMEIZNAOBPLRDDWMFDBFFMDOZUSHNWTLGGYHFQNPSYWEBGNESGBOFXWVZQLNHXXVFLNZSAZPBKCSJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.37226252810099714);
    msg.setSource(12146U);
    msg.setSourceEntity(125U);
    msg.setDestination(61946U);
    msg.setDestinationEntity(137U);
    msg.x = 0.646215725216782;
    msg.y = 0.8006649932064481;
    msg.z = 0.9604055230633548;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.77471633522363);
    msg.setSource(47939U);
    msg.setSourceEntity(231U);
    msg.setDestination(59754U);
    msg.setDestinationEntity(66U);
    msg.x = 0.15763617792644402;
    msg.y = 0.05152689325396553;
    msg.z = 0.1852952004613746;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.5351689580428469);
    msg.setSource(24136U);
    msg.setSourceEntity(204U);
    msg.setDestination(48415U);
    msg.setDestinationEntity(223U);
    msg.x = 0.14803253932057692;
    msg.y = 0.4748485533377742;
    msg.z = 0.26985292512371195;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.06187334516606269);
    msg.setSource(30339U);
    msg.setSourceEntity(9U);
    msg.setDestination(34321U);
    msg.setDestinationEntity(241U);
    msg.timeout = 53959U;
    msg.lat = 0.28666221782481616;
    msg.lon = 0.8831623065101055;
    msg.z = 0.27118274106903484;
    msg.z_units = 100U;
    msg.amplitude = 0.4405536798718611;
    msg.pitch = 0.3828812087399144;
    msg.speed = 0.39753298511031343;
    msg.speed_units = 192U;
    msg.custom.assign("KAIEZKFASQAPPTPPKPVOGQMNORMBALQALHIGCTLYBNKZBYQGHYMYTEJLBSXMMOV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.7459924282244275);
    msg.setSource(26955U);
    msg.setSourceEntity(77U);
    msg.setDestination(57084U);
    msg.setDestinationEntity(70U);
    msg.timeout = 28870U;
    msg.lat = 0.8955708103720139;
    msg.lon = 0.6613384757511612;
    msg.z = 0.5919771259243135;
    msg.z_units = 228U;
    msg.amplitude = 0.6672501313002672;
    msg.pitch = 0.146893262039267;
    msg.speed = 0.5046612561064094;
    msg.speed_units = 151U;
    msg.custom.assign("TAUSOVAFRZNWCKNIDXYMYJMHTXNYDKQAZPU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.1287500974792527);
    msg.setSource(48394U);
    msg.setSourceEntity(211U);
    msg.setDestination(43908U);
    msg.setDestinationEntity(224U);
    msg.timeout = 27366U;
    msg.lat = 0.7320226959007265;
    msg.lon = 0.46084636272696955;
    msg.z = 0.7602643956504279;
    msg.z_units = 211U;
    msg.amplitude = 0.39255003778522746;
    msg.pitch = 0.37547261155009726;
    msg.speed = 0.6696020021699891;
    msg.speed_units = 91U;
    msg.custom.assign("SEKYIDSGLUKQIYXZNPSXLGJYNUZOPZCLWXCBVHPJSYCFWWAYFQBUOFTIFEYHMXMUJIUSEHHTNKEKBJAVMAWHWSZWYBU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.785119891930321);
    msg.setSource(27286U);
    msg.setSourceEntity(179U);
    msg.setDestination(12298U);
    msg.setDestinationEntity(112U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.7216172501351147);
    msg.setSource(62089U);
    msg.setSourceEntity(141U);
    msg.setDestination(33680U);
    msg.setDestinationEntity(36U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.7313108737823528);
    msg.setSource(54541U);
    msg.setSourceEntity(130U);
    msg.setDestination(61580U);
    msg.setDestinationEntity(246U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.7121462657861863);
    msg.setSource(48304U);
    msg.setSourceEntity(28U);
    msg.setDestination(43854U);
    msg.setDestinationEntity(69U);
    msg.lat = 0.14112139656683353;
    msg.lon = 0.3104846016732359;
    msg.z = 0.9890186530845245;
    msg.z_units = 95U;
    msg.radius = 0.37260512976768245;
    msg.duration = 2320U;
    msg.speed = 0.4032922300030066;
    msg.speed_units = 211U;
    msg.custom.assign("APWNMXIAQEOEHPHLPPUSUKLXVNWHRFBZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.2819558986419871);
    msg.setSource(24158U);
    msg.setSourceEntity(38U);
    msg.setDestination(41488U);
    msg.setDestinationEntity(246U);
    msg.lat = 0.7832327636462265;
    msg.lon = 0.969596102560399;
    msg.z = 0.6214286367587596;
    msg.z_units = 241U;
    msg.radius = 0.3416047560450569;
    msg.duration = 22342U;
    msg.speed = 0.6433706618595494;
    msg.speed_units = 45U;
    msg.custom.assign("VFNRBLSLOAMFHBGAZPZRILFLMDGYJRSMOMETNJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.17955092829517505);
    msg.setSource(17948U);
    msg.setSourceEntity(133U);
    msg.setDestination(20604U);
    msg.setDestinationEntity(74U);
    msg.lat = 0.15659070278646714;
    msg.lon = 0.9722160394378793;
    msg.z = 0.5550803893694113;
    msg.z_units = 139U;
    msg.radius = 0.8396080069921078;
    msg.duration = 22674U;
    msg.speed = 0.17085696490814106;
    msg.speed_units = 148U;
    msg.custom.assign("PAMPZYZCUQYKLFSTGUHTECGDZITXQULCULKQACOXOYSHOUTIJMRGBABPMFJZVTIVGVTNSYRTYKEIIKFCSDUJTPMKQZZQDCMQMRHWDRGLVNZYKQFOIUCSYCGOLBUAXEABNNIFEHDHNPSBVWZWBHUWKEVKLWAXSIHSEWDWJSJTFLRCXENAJGXEJCEXFZOMMR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.25676060633496844);
    msg.setSource(30216U);
    msg.setSourceEntity(16U);
    msg.setDestination(52697U);
    msg.setDestinationEntity(196U);
    msg.timeout = 25639U;
    msg.flags = 191U;
    msg.lat = 0.5198988435882147;
    msg.lon = 0.7094908812211922;
    msg.start_z = 0.38403096706512385;
    msg.start_z_units = 17U;
    msg.end_z = 0.3120960672357056;
    msg.end_z_units = 66U;
    msg.radius = 0.8450256492649904;
    msg.speed = 0.2957704846423309;
    msg.speed_units = 161U;
    msg.custom.assign("IDDZEJDJJCAKHOSNTEICMOCCFAUDPGUQVHBYBKYRXK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.4271620523887235);
    msg.setSource(55603U);
    msg.setSourceEntity(250U);
    msg.setDestination(22682U);
    msg.setDestinationEntity(151U);
    msg.timeout = 1605U;
    msg.flags = 126U;
    msg.lat = 0.2798762160095468;
    msg.lon = 0.6784611534046099;
    msg.start_z = 0.6330814233789223;
    msg.start_z_units = 238U;
    msg.end_z = 0.6272714512580428;
    msg.end_z_units = 249U;
    msg.radius = 0.4062639170658441;
    msg.speed = 0.6949477772955572;
    msg.speed_units = 172U;
    msg.custom.assign("EEKCCKHEBIAJTYNTALVXTEVONRFFAMPI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.03176282084870752);
    msg.setSource(54215U);
    msg.setSourceEntity(45U);
    msg.setDestination(65292U);
    msg.setDestinationEntity(192U);
    msg.timeout = 44032U;
    msg.flags = 110U;
    msg.lat = 0.7531832412476304;
    msg.lon = 0.43345837860773817;
    msg.start_z = 0.4317850129255;
    msg.start_z_units = 38U;
    msg.end_z = 0.7623879015819286;
    msg.end_z_units = 199U;
    msg.radius = 0.49641751667571443;
    msg.speed = 0.12428070972312877;
    msg.speed_units = 4U;
    msg.custom.assign("XLSTSWNCIQNCFKJKASLYQRGWMVWPKSAWZYETBLDLCTQQMUOFJJEXUZOWDAABCBOTUIHSQZIRCEQRMBNORDRMFIDMMYFWHPBHKQACGCXUDHOIYUGOZZOTNLPXPVBUNJFWPNXJOX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.8305641882159267);
    msg.setSource(6050U);
    msg.setSourceEntity(17U);
    msg.setDestination(50732U);
    msg.setDestinationEntity(79U);
    msg.timeout = 11512U;
    msg.lat = 0.7055998141700282;
    msg.lon = 0.8295341459968881;
    msg.z = 0.9179517243336803;
    msg.z_units = 38U;
    msg.speed = 0.31699455995819203;
    msg.speed_units = 88U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.8406152687899761;
    tmp_msg_0.y = 0.21220619998813617;
    tmp_msg_0.z = 0.5298767202756794;
    tmp_msg_0.t = 0.7349670474250088;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("CJUAVVUWWSICJVRGTBMALVDDICJEUZJYRQXHFEAQIBIPFVNSHQJBHOJYEMRDELMZOGFSXZOEKLUXNPAXNWRNUPKLTETITHRDNBN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.7943318098834014);
    msg.setSource(55243U);
    msg.setSourceEntity(42U);
    msg.setDestination(16489U);
    msg.setDestinationEntity(161U);
    msg.timeout = 17924U;
    msg.lat = 0.7829529918086668;
    msg.lon = 0.8387487344418236;
    msg.z = 0.5896028438164013;
    msg.z_units = 101U;
    msg.speed = 0.2640916370054315;
    msg.speed_units = 106U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.7899578186089136;
    tmp_msg_0.y = 0.6159363254486229;
    tmp_msg_0.z = 0.06885417221305068;
    tmp_msg_0.t = 0.045067496456777545;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("RKHKDNMEAMXHNFGJIUBPRUL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.21368941063700508);
    msg.setSource(46334U);
    msg.setSourceEntity(106U);
    msg.setDestination(10670U);
    msg.setDestinationEntity(236U);
    msg.timeout = 10577U;
    msg.lat = 0.5000731486605787;
    msg.lon = 0.81048791241327;
    msg.z = 0.32765894202649626;
    msg.z_units = 121U;
    msg.speed = 0.5071735282710798;
    msg.speed_units = 185U;
    msg.custom.assign("EHDHJIZWXIRGJUHDGYHUXXFIYQHNACBMEQNTGUNSAXVQBGUUPCDONZYGXIFWPVKYWQUBPDLWRIPFHTBKLKZDAIYRYVWCMJEMDSMMEN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.6552209032005443);
    msg.setSource(26419U);
    msg.setSourceEntity(103U);
    msg.setDestination(8744U);
    msg.setDestinationEntity(161U);
    msg.x = 0.6371728016483931;
    msg.y = 0.6776987419276679;
    msg.z = 0.6458456501373776;
    msg.t = 0.6828273746890752;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.22077439930011888);
    msg.setSource(2298U);
    msg.setSourceEntity(240U);
    msg.setDestination(38673U);
    msg.setDestinationEntity(236U);
    msg.x = 0.3515467161820469;
    msg.y = 0.6840924544250054;
    msg.z = 0.06965429904317699;
    msg.t = 0.25834751633450403;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.4469959469419338);
    msg.setSource(3770U);
    msg.setSourceEntity(56U);
    msg.setDestination(11891U);
    msg.setDestinationEntity(212U);
    msg.x = 0.8856168580437039;
    msg.y = 0.7805693373960886;
    msg.z = 0.19650100117416647;
    msg.t = 0.6832808226612536;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.3038119368789126);
    msg.setSource(4558U);
    msg.setSourceEntity(5U);
    msg.setDestination(18304U);
    msg.setDestinationEntity(124U);
    msg.timeout = 2225U;
    msg.name.assign("DFDREULKECJQFIGUBKZWDBMTOHPJLFSROBBOTZQKYIJACAOFCWEKWOHSKVEKOQGTELEXYLCIXXCGPZSBKVFPZQQTWHXYMIMKPSTHPDGJDZANHPJRYWMIXBZGMFQWCNZAAQDNBAVAGRISJLJXZGCLMLZSWKVVFONUINCT");
    msg.custom.assign("CTVQIORCXCIBDTWMHDWFFJPWWAKUNHVXXJZHTYVPJDADJYZBIFLPRABKHCAXFNKLYNVBTXOUQFOSAKUQAFBQWEWESQZEPSRHMZGGFDIMHSTFINLYFAMCSMJVNLCWPKOUSRVXUSOTKXDEUIFYPEGLAOJGXTP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.21543865265992068);
    msg.setSource(31047U);
    msg.setSourceEntity(185U);
    msg.setDestination(1117U);
    msg.setDestinationEntity(101U);
    msg.timeout = 50425U;
    msg.name.assign("BDYRZCDGMMPIDMCAFBYJXXNAAGEWNFKQMQPPAAOASXBQWFKCHBW");
    msg.custom.assign("VEAFJIIJQQWZSIJGPPJOCLOYPXVYBTVTKAFGPOLNPXZUIQJJLWHGUHBSRMBURLCMMTDDUBXGBPEVMWHSEUSRYRJGXIRPVFSFHSMFKYKDBKZNYOMOTXUUTNOXOTCIKLQSXHEQQLGJGJZRNCCIGQPAAWRLZBFEWMIQFSQEWOKEHOVIALVMCZFDKUNZERTFMSBVWEHTVDLDXZBTGYKKHCZDVIWYXYDRNUOHKNNEQWAYRAMDWLNBHPTZY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.4635776061171789);
    msg.setSource(59167U);
    msg.setSourceEntity(215U);
    msg.setDestination(38895U);
    msg.setDestinationEntity(116U);
    msg.timeout = 49038U;
    msg.name.assign("POHZFRSCLIMUXNKQVFOFJGWJSUFZKQWOXSIOANVFZCLJEGOBDDRIQCDNZKYUSQTDCIZSMALVUTXSEFLVETPTDNRGEYHMZTPAHKCWVOOPLKEFNQJSIXMYCWJHECVEZWUTHHCBHXHTKWUGHONUZJ");
    msg.custom.assign("WJTOXIPQDNPNSGLZSMRFORVNCWCLYNKUTIVADFSMWZOLBGMCRMVJXFBRYVZSOUHJKNGUTYOMBHUAACQBHOTPUGVXSLIXKNKMVFWGNCTQJMI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.20364941849429274);
    msg.setSource(56903U);
    msg.setSourceEntity(136U);
    msg.setDestination(48863U);
    msg.setDestinationEntity(193U);
    msg.lat = 0.4829332573128563;
    msg.lon = 0.2937148576795835;
    msg.z = 0.6750238020077689;
    msg.z_units = 190U;
    msg.speed = 0.6116487579986822;
    msg.speed_units = 220U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.44470691592234435;
    tmp_msg_0.y = 0.22148844903418585;
    tmp_msg_0.z = 0.6405244427976305;
    tmp_msg_0.t = 0.3218367934353379;
    msg.points.push_back(tmp_msg_0);
    IMC::VehicleFormationParticipant tmp_msg_1;
    tmp_msg_1.vid = 42899U;
    tmp_msg_1.off_x = 0.23870775130164945;
    tmp_msg_1.off_y = 0.9049840335452037;
    tmp_msg_1.off_z = 0.790667722899094;
    msg.participants.push_back(tmp_msg_1);
    msg.start_time = 0.20742538813324618;
    msg.custom.assign("BSDUXDPTUOWARYSOAVDJOQGMATZMEGMVENHXAKXPWZTLSTKLYCEGJCCAJHFKXEZFCPUZNWZENIXCLHQNNTXKPZDRSFQHVVGKBZGFBPMQQWNXLVIQAAVYMLIPJCUIKFTWBUOOSEDMYLFMHYYEBUEQDQYRRPSHJCUQETXLSVFQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.811648212656589);
    msg.setSource(49140U);
    msg.setSourceEntity(112U);
    msg.setDestination(27572U);
    msg.setDestinationEntity(165U);
    msg.lat = 0.990222974612034;
    msg.lon = 0.29823951493352563;
    msg.z = 0.711801516837591;
    msg.z_units = 169U;
    msg.speed = 0.687884036686335;
    msg.speed_units = 76U;
    msg.start_time = 0.7312436248264577;
    msg.custom.assign("TTBTMXHIPXARTGGBGJZVMEPOVWYIRSJGRJXRZTWFALSFUKGEIOYUDDUZJWIFZYDKPLINAHWEYWSWVZRQDMGJWKPEECNTFCCMLEAOBNXLVZYEGBPBOIKQLHHIYLQLVCKDNQUCHFABFYAMKRJXXCBPUEPURXSCNMPHRFFAKJDYTULQKJXVPHRGQBFHJANMNACIMVWEZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.343634136216142);
    msg.setSource(38975U);
    msg.setSourceEntity(166U);
    msg.setDestination(35933U);
    msg.setDestinationEntity(232U);
    msg.lat = 0.06196091636971324;
    msg.lon = 0.31737381175188095;
    msg.z = 0.7468186272430511;
    msg.z_units = 103U;
    msg.speed = 0.6967378642188623;
    msg.speed_units = 253U;
    msg.start_time = 0.8820609644626637;
    msg.custom.assign("LALRWVXENEWGAENRDUGHIPRAUQFKPLGCDSEMSZFHIDBTNDHRIGCBDYEKQNGETMIKNSCGTUYEALZYZYQUQZXRCJYSHCMWUNABBHPMPCBTLPZLMMBUOEFOCZYXEQIWAIJTVRVFWSZQKRVOQVKOGCJSOSWTZYJCGMG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.07247543121496158);
    msg.setSource(427U);
    msg.setSourceEntity(148U);
    msg.setDestination(48658U);
    msg.setDestinationEntity(119U);
    msg.vid = 64736U;
    msg.off_x = 0.3432748523495843;
    msg.off_y = 0.560379000937389;
    msg.off_z = 0.02843796984249336;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.5220933656779224);
    msg.setSource(36566U);
    msg.setSourceEntity(216U);
    msg.setDestination(3134U);
    msg.setDestinationEntity(56U);
    msg.vid = 60934U;
    msg.off_x = 0.4867567688355695;
    msg.off_y = 0.5581045304096764;
    msg.off_z = 0.1736993041990157;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.8138010765818433);
    msg.setSource(39686U);
    msg.setSourceEntity(168U);
    msg.setDestination(14683U);
    msg.setDestinationEntity(60U);
    msg.vid = 5164U;
    msg.off_x = 0.45419695068700505;
    msg.off_y = 0.7774205359503492;
    msg.off_z = 0.27437682473158675;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.12437603590505497);
    msg.setSource(39924U);
    msg.setSourceEntity(26U);
    msg.setDestination(22904U);
    msg.setDestinationEntity(20U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.35684818415050534);
    msg.setSource(3516U);
    msg.setSourceEntity(143U);
    msg.setDestination(42847U);
    msg.setDestinationEntity(126U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.1630264628151027);
    msg.setSource(36196U);
    msg.setSourceEntity(97U);
    msg.setDestination(5941U);
    msg.setDestinationEntity(72U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.29589611715256137);
    msg.setSource(19278U);
    msg.setSourceEntity(164U);
    msg.setDestination(44298U);
    msg.setDestinationEntity(84U);
    msg.mid = 34581U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.5359276874821289);
    msg.setSource(45182U);
    msg.setSourceEntity(135U);
    msg.setDestination(22347U);
    msg.setDestinationEntity(145U);
    msg.mid = 58775U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.5562022473341829);
    msg.setSource(43321U);
    msg.setSourceEntity(75U);
    msg.setDestination(2604U);
    msg.setDestinationEntity(237U);
    msg.mid = 6553U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.5025030703731547);
    msg.setSource(53602U);
    msg.setSourceEntity(12U);
    msg.setDestination(46756U);
    msg.setDestinationEntity(118U);
    msg.state = 67U;
    msg.eta = 44294U;
    msg.info.assign("BHBCHMIWFCPSEEQSTAVRQUWEFSBIBROXDZJPGTGZBPLNFZXJGIFRZLVVLNTUCYDFVWOLJEZDIRPNFDAEZJIYRHDKXVADNFCRAWHCYOEGCPCNIMBOTRHVLBUZJZTBOUMADHKFAEKAHGKAWKMMDSQULXWHVDIGRBULSSCSUQJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.3992328553768769);
    msg.setSource(57934U);
    msg.setSourceEntity(23U);
    msg.setDestination(29209U);
    msg.setDestinationEntity(66U);
    msg.state = 102U;
    msg.eta = 3790U;
    msg.info.assign("HJGNCLUAPCJBSBWRYDPGTKXCTUAYWDOAUMNQOREUZFAIKVVBYICJZWSFPMXYIZZZFAWSLSIEPQHJERKRIXBWQYWPMEVBXXMHFSHVHLNBHHQKIDOTTULNQEKANKGI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.152346629490119);
    msg.setSource(3546U);
    msg.setSourceEntity(8U);
    msg.setDestination(48102U);
    msg.setDestinationEntity(104U);
    msg.state = 18U;
    msg.eta = 47385U;
    msg.info.assign("WQBVRIFUCGWLFCRYIFBZSGQHOZTIDMMUUAVREAYENZTQOETDWLNUOOBZOHXLMEHYCJHPWEUJCGRQEAXYXTGMHWPHVPQRYXPQHBRBOJMVZNKPWIBIYNAXSTXUAFNKJSLDKDXMVOMONPDUDMLJNRBZAZPAPGGFAEIYSDTSHIXEWVUXNTSCUKDJKCQWNSFHVPLAQCJTYCSKZEYNBJIGVRAVBLDKWFGTSEYJGKCQQRIZMM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.874548618142569);
    msg.setSource(23955U);
    msg.setSourceEntity(35U);
    msg.setDestination(14424U);
    msg.setDestinationEntity(117U);
    msg.system = 21382U;
    msg.duration = 57160U;
    msg.speed = 0.8379664614659945;
    msg.speed_units = 77U;
    msg.x = 0.4039967600679285;
    msg.y = 0.9673326540589366;
    msg.z = 0.9270037234270354;
    msg.z_units = 13U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.43210841956569357);
    msg.setSource(45746U);
    msg.setSourceEntity(11U);
    msg.setDestination(61432U);
    msg.setDestinationEntity(217U);
    msg.system = 35883U;
    msg.duration = 15296U;
    msg.speed = 0.086588102643546;
    msg.speed_units = 245U;
    msg.x = 0.5148025103840095;
    msg.y = 0.6138332444154231;
    msg.z = 0.08960244552828911;
    msg.z_units = 132U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.9660637176761291);
    msg.setSource(4761U);
    msg.setSourceEntity(101U);
    msg.setDestination(36214U);
    msg.setDestinationEntity(67U);
    msg.system = 38942U;
    msg.duration = 41462U;
    msg.speed = 0.9414925971168591;
    msg.speed_units = 212U;
    msg.x = 0.49935713818355465;
    msg.y = 0.5274120496448562;
    msg.z = 0.6517741835421306;
    msg.z_units = 176U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.9404772308421673);
    msg.setSource(8645U);
    msg.setSourceEntity(19U);
    msg.setDestination(58261U);
    msg.setDestinationEntity(12U);
    msg.lat = 0.7187413319026724;
    msg.lon = 0.0956462636698191;
    msg.speed = 0.26448836469935544;
    msg.speed_units = 200U;
    msg.duration = 37894U;
    msg.sys_a = 62988U;
    msg.sys_b = 64158U;
    msg.move_threshold = 0.3015163528792244;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.017668806042260066);
    msg.setSource(36465U);
    msg.setSourceEntity(22U);
    msg.setDestination(18920U);
    msg.setDestinationEntity(8U);
    msg.lat = 0.49005509742517617;
    msg.lon = 0.5420064225652321;
    msg.speed = 0.3747513680912792;
    msg.speed_units = 171U;
    msg.duration = 48982U;
    msg.sys_a = 33021U;
    msg.sys_b = 21294U;
    msg.move_threshold = 0.8859618062131227;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.9928651608177218);
    msg.setSource(1133U);
    msg.setSourceEntity(130U);
    msg.setDestination(26156U);
    msg.setDestinationEntity(151U);
    msg.lat = 0.3571475331277345;
    msg.lon = 0.5551380623871262;
    msg.speed = 0.14997861800578838;
    msg.speed_units = 114U;
    msg.duration = 13907U;
    msg.sys_a = 5936U;
    msg.sys_b = 2405U;
    msg.move_threshold = 0.42627437479460184;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.18525585862297445);
    msg.setSource(28313U);
    msg.setSourceEntity(142U);
    msg.setDestination(14188U);
    msg.setDestinationEntity(45U);
    msg.lat = 0.28546936723213145;
    msg.lon = 0.08821705865549045;
    msg.z = 0.6566281222997213;
    msg.z_units = 251U;
    msg.speed = 0.8021654982058567;
    msg.speed_units = 83U;
    msg.custom.assign("MYBECFGOJGAVXCYDUTMZAJNJTLWKTDEXER");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.25343435715297236);
    msg.setSource(5802U);
    msg.setSourceEntity(49U);
    msg.setDestination(28855U);
    msg.setDestinationEntity(136U);
    msg.lat = 0.3304736955695309;
    msg.lon = 0.7723812798146881;
    msg.z = 0.3702029179860876;
    msg.z_units = 66U;
    msg.speed = 0.6272821437740064;
    msg.speed_units = 25U;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.20499674644783783;
    tmp_msg_0.lon = 0.4763855655200515;
    msg.polygon.push_back(tmp_msg_0);
    msg.custom.assign("FJAGCJUWCNZERCSVSBIWONYKBTLPGAJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.7508714596356378);
    msg.setSource(10178U);
    msg.setSourceEntity(253U);
    msg.setDestination(56728U);
    msg.setDestinationEntity(23U);
    msg.lat = 0.123972291311373;
    msg.lon = 0.12736800842775797;
    msg.z = 0.6710883795504418;
    msg.z_units = 93U;
    msg.speed = 0.9580070086456853;
    msg.speed_units = 144U;
    msg.custom.assign("OTSBLPYQIWQCJVYTCHWAIZQLACJHVTJVMFDKIHWBKQNILKNXFCAOXKFC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.24759938936265735);
    msg.setSource(44190U);
    msg.setSourceEntity(173U);
    msg.setDestination(46899U);
    msg.setDestinationEntity(140U);
    msg.lat = 0.5197200715289759;
    msg.lon = 0.005747735106331753;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.8863339795515273);
    msg.setSource(50671U);
    msg.setSourceEntity(65U);
    msg.setDestination(9229U);
    msg.setDestinationEntity(190U);
    msg.lat = 0.3617318696131905;
    msg.lon = 0.8534018133481056;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.3934342615405124);
    msg.setSource(41901U);
    msg.setSourceEntity(122U);
    msg.setDestination(41444U);
    msg.setDestinationEntity(56U);
    msg.lat = 0.21743417915145125;
    msg.lon = 0.8317116165451509;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.894755275575692);
    msg.setSource(54882U);
    msg.setSourceEntity(43U);
    msg.setDestination(32846U);
    msg.setDestinationEntity(231U);
    msg.timeout = 11111U;
    msg.lat = 0.4638726735501918;
    msg.lon = 0.4208077082986875;
    msg.z = 0.08029012032210003;
    msg.z_units = 52U;
    msg.pitch = 0.2065993881072533;
    msg.amplitude = 0.1449974226124655;
    msg.duration = 18137U;
    msg.speed = 0.0844836193101961;
    msg.speed_units = 240U;
    msg.radius = 0.8466967997539356;
    msg.direction = 234U;
    msg.custom.assign("LDJKJDWZHUGQTKOVSXERVQKFAPWBPHAYI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.42163918468459116);
    msg.setSource(2737U);
    msg.setSourceEntity(25U);
    msg.setDestination(49472U);
    msg.setDestinationEntity(100U);
    msg.timeout = 30162U;
    msg.lat = 0.6394921811500992;
    msg.lon = 0.4217306209928391;
    msg.z = 0.7613041537022395;
    msg.z_units = 251U;
    msg.pitch = 0.24798098910592825;
    msg.amplitude = 0.9077338726285351;
    msg.duration = 44266U;
    msg.speed = 0.8580406370411457;
    msg.speed_units = 141U;
    msg.radius = 0.9119950745133529;
    msg.direction = 197U;
    msg.custom.assign("QMMSOQJQHUBEZJJBYRUEJBKDUGHMNLQGUSXCRJZSZYVDREVWYTCKHHFNWZEAVIDPPJIFEACIGYQXMYRLJDEIYILFLIBTSKSAVOBNWAZECVGNPLQHKZWQGNNANTEBXMFSNTPXKGHUKRTORSLVYRIDJWCNBWIVFDAUTCWIOZOHG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.026397742210448993);
    msg.setSource(39010U);
    msg.setSourceEntity(191U);
    msg.setDestination(12142U);
    msg.setDestinationEntity(28U);
    msg.timeout = 61110U;
    msg.lat = 0.7593045280195819;
    msg.lon = 0.7034929458797397;
    msg.z = 0.30463749426860254;
    msg.z_units = 114U;
    msg.pitch = 0.9492249700937727;
    msg.amplitude = 0.8228921320925032;
    msg.duration = 4023U;
    msg.speed = 0.2222102879977843;
    msg.speed_units = 238U;
    msg.radius = 0.5189407802093062;
    msg.direction = 110U;
    msg.custom.assign("LWANDGIUBRAMTUBPHPDZBGMRKEWRUFFYESPZTJWGJBXJQTSYDXCOUPFWQEPLYKEPKWEDFXAOIFAHADFTCXLEKNAJJMQEMPBJSOCNCLPAZHSNQYEIDLAFYHIQVTOVINAZYTFG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.7322481793161573);
    msg.setSource(11113U);
    msg.setSourceEntity(80U);
    msg.setDestination(16718U);
    msg.setDestinationEntity(59U);
    msg.formation_name.assign("GLXDRBMMPFYENOBXJVNTSNUYQYRGTGSZIOWYACBOHRYSIPVSWQTOSMOUTKIFYNRQHRAUHRZYFTWBEEOZBGQNUQKEMTIPUWCPPNSMJDWJZESGCASJVPMHFKMO");
    msg.reference_frame = 149U;
    msg.custom.assign("SUVPSOWMYMXDVQKCKXAKEYXPUWRJOSWTTUQOHMVUXJPWPRABMOTLAJKNMCJWEFBEPHLILERLUBLQDSJOGZVVZPEWADDXVXVHRSGNFGQVCDBNQWIJSFPHMICZGHXYDJZKMNTCLMNYZOJZAUUYQXCCKTLIOBKEMHNTKNOFBIEBSRIRPYFYSCRZSQZEBPASKDNGHKUTXHGHVLJIDFHETARIRUZFRFLNAPDOGWYF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.29297354002473386);
    msg.setSource(35282U);
    msg.setSourceEntity(85U);
    msg.setDestination(43802U);
    msg.setDestinationEntity(221U);
    msg.formation_name.assign("NNRNQOEUQLJUEVIZDPTXPANOPDUHPOGLJEAWLJRRUKWDKYTSSHWISVRYZZVMBNAWQRZPVXIMHGYDIXBMMJBSLTTGTHLZBGIGVCZODPPWHWMHDROQCHTBPKKYYZQJRJOSWKEXUAQCEBMFJCJQGHTXKNCZCCEOIDRVVYDRQVYYWNUBXSYNTIADCBSHEWWQMZTGKXYCSFNUF");
    msg.reference_frame = 12U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 21363U;
    tmp_msg_0.off_x = 0.738135576331903;
    tmp_msg_0.off_y = 0.5095758697473114;
    tmp_msg_0.off_z = 0.6247333753145368;
    msg.participants.push_back(tmp_msg_0);
    msg.custom.assign("PCOXLTLRQGZESUXOECGYUTKAAVAQGPYZZNPHXRSNLCMRISHBOVMWHSJJUEYSIJOKNPNGFHEQADUOTVFAGCUEXBWWMOTDRMFDODKVIGLWLPUUHGGYMXLWTDOMIBVBZBIANJVHHQIRZRNG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.6929335698778579);
    msg.setSource(1615U);
    msg.setSourceEntity(151U);
    msg.setDestination(59831U);
    msg.setDestinationEntity(174U);
    msg.formation_name.assign("MDMPWJXTHAXCCFWGATODONKCWPEAQNMBUVRXXTMAKOGENRAYOYQHNVVGKPXSFFBQHIWZFPWDHZLRGZJFMIHKVJFMDVWOORPZYBSGHXTUCASTIGAUHCWISVCHTYWNF");
    msg.reference_frame = 101U;
    msg.custom.assign("SHLUEVIAXTSGZEKLEDUKKRRQZCJPTMAQTMJZYRPBNPXMQMHNVBJLPBMSFJNAUYPOSNZQMCYXKEEYKKFIOOPDXKOYRWLQUXG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.6900975389282135);
    msg.setSource(14513U);
    msg.setSourceEntity(2U);
    msg.setDestination(53642U);
    msg.setDestinationEntity(62U);
    msg.group_name.assign("RVLHQMNDXCGYLGPIJMCAWZTKTCEBHDCKCNREGEWJZKBGYEZUDDWFVHMQXQIIKSQSWWKROOUSHVKJFBZABWWJFRZUDDBOAILJIGYNMEQDVPRVNSTLFMEMDOYOZHQVPQXJTTTPQREFLIKZXSURTPAUGGJZMUFAXILVBUBLFPYQYWSCHTHRFTPYSPFANIZLNPCNCADSCVOOXWGMOXVTBFR");
    msg.formation_name.assign("NMYABUJTHUZLTOCHLOHBEEYBQWXMUPZHSRHZJLYFLTKYDMOQYMWWETSVFOGIFBVPILFKHCPCOPKDJNJDSVJVLYIRZBICTICZGBEDCAUZXHPKRNRVOKFFOSMSCSGJGXPVZMUVHEEAQGQXJQECNXXAGNWFUVAOMMZVGWTIDNHLTPDUXDWRNOKUCNYKDQZAIBMQKQLPXRUEBVCUTRSYALGBSAYIAIDKRQBKJMHNWDIXQWPTLFJGSFPEEOJFGRZNWT");
    msg.plan_id.assign("HSVXOMLWLSOVABCTWEQCQZRXUMFMWEYSHQWNRFHRBKOPGGONQPHNFJUVDVMBCRWSAGDVXLRLJCKUCXEUKKCHKWBDDNDCVYIGSPITYEGPTIVMIVFBXJWKNBTPCQNZQHZRDRTSUHEQIWTGWIKZXYBTPLNPJSIZITJNLSOAYPQFUAUM");
    msg.description.assign("HEQRWOOUYDFPVCWJVSAUFJTMZFFACIGIHINNWSVCNWZSYVSNEVSWTRBZYGJQGRGJBOPOERLJIFKIAHBSEUAOTWNCSNMKUQLVCPZAXWVXGVVUWXIXMTJJXNGMNMKLYDTZLRGBIOMRORDWECYLEAIQBUJKLQ");
    msg.leader_speed = 0.4586913907456499;
    msg.leader_bank_lim = 0.3155737508490428;
    msg.pos_sim_err_lim = 0.037774436283551704;
    msg.pos_sim_err_wrn = 0.7937610332237903;
    msg.pos_sim_err_timeout = 53003U;
    msg.converg_max = 0.7947652430070677;
    msg.converg_timeout = 30492U;
    msg.comms_timeout = 28642U;
    msg.turb_lim = 0.294627163762601;
    msg.custom.assign("WEQFMBSCIHNENBGZDPHXMFYVOZUUIVVLURROGYVGXNYAQNBUTKTDQMMKIAECMEMQCXEKDLAOTXTINOUPUUZTHVPPLAFRHZEXIDYJDRAINDIJQDYSRWTDZSWELOTFPJBWPYGUYGUPJKQWKVWXCTSVK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.7345992445259029);
    msg.setSource(28589U);
    msg.setSourceEntity(61U);
    msg.setDestination(55703U);
    msg.setDestinationEntity(235U);
    msg.group_name.assign("CDCYGJZRAYKLQSFMWYSQKVDDBWRZCIUIBUSYNZSZPMNXYYAODIQGIXYDTLVJLLPKTRDOXJGQKEBRFXKILPCFEMEAQRMMORQQDWCFUNLGJNSDHZUJLSYJBKVPTIYZHUXXMCFXWLAFWMZWHJORACCVSDAUTNPHTNTIVXKWNGHPNBVKZWTHMQBUTECVUPKOMAXXGJUENBSRQGFZERLHRHETCAEFEENUVPOLFDSPJYGIGMOIGSBTKI");
    msg.formation_name.assign("CJLIMSPBJPLBGYSFLYDJJNAOYDAQQOERJRUUZEZNVZCDYGSODLEUWYKUTVBIUKXQVRUMTGTRRZHAEIJZBMBBVSIQGTGOQYQNKCFLLNJJFOYEIGEXWQCVHPCPHBBKSIEOFNSMAAK");
    msg.plan_id.assign("BBFAKZLHYXFMGBVQBVYPVP");
    msg.description.assign("EMXIOJDLQDANIYDEUZICQOBSWKZBQXMTGDNCSWNNYSJQLYJUQKOJMQNDEIRWORHYRHMCAZZFSVATWUIGVSSGUKTNFLDVRWAXFPONYYPGVEOBRHCXKBRVGADSZGHYJLFWZBNPLJFXPGASDDYYCIWZKZMANCVJUKXQUAWOVTBOAKEMKXLVZPEIJTPBFLHEOMOVPUXBTLCYQRFTZQMARUEMQGHURUXTCIHPIWJSRIECGTLCKHLPM");
    msg.leader_speed = 0.8413212016003698;
    msg.leader_bank_lim = 0.9738723766097013;
    msg.pos_sim_err_lim = 0.8846437627699796;
    msg.pos_sim_err_wrn = 0.614526811653175;
    msg.pos_sim_err_timeout = 11897U;
    msg.converg_max = 0.7239737604371819;
    msg.converg_timeout = 18699U;
    msg.comms_timeout = 38631U;
    msg.turb_lim = 0.634471897966231;
    msg.custom.assign("YCHBDTJJWVMTWGNSRFWMDJIPKBDUYFUBTTLPPACCXSQUSLCKGVKDVDJPUOLUOFRTVMGLHTOSHUJEOPIYUCPEPDVQRMUEEPWHBTOBLGKYCNEHJFMIWXHXNRTIIXCSYLBMANWZSEPVRFIBLXEKQLZIRUQXAQMOSAUZJRYBNOZAOKSXYRINLXHAGYK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.24833898691956058);
    msg.setSource(30535U);
    msg.setSourceEntity(221U);
    msg.setDestination(32809U);
    msg.setDestinationEntity(48U);
    msg.group_name.assign("ZLXXCRAGVKDWKUGQMBDZFHAUVOFRIXLRJGWNRXDBBDPTLVYOBZKQGVSSHUTMIEERYJNKNDMUAQNOMMJUHPXEYECBJIPCJIOSOWSDBRABJJVVYMGCFFRMTECNUPQUUHSFTVGTIPHISWSWOQYKPRWNXXMBFVNDBKWEHYDLDQLEIUBIWTTIQZAOMHJFSHZQZFOEZKZAPLGTNQTTAXKXVLYGQESWLORAUFCNZ");
    msg.formation_name.assign("SBGLJPUTXQZCKSYQXQHLMHMOKSFGXCPWTIGJLDQMWELIAZAHVBTDKEDCTEINQYKYEFZIPOTJXDDWFSQOAJR");
    msg.plan_id.assign("SDTBEBFJTFBJVUCQMMOVHNFGVRVAPTKBXXRWEMBLJMRRFTEPKQLYKSXDTRAWDYTUGOQBKLTTSLQPPXAUDYBMYLZJXVEFZLRSXETCKIMCGCWIJGMNJEDYJPOACHVCFYEGODZZGMVHYXDBNEXAJLKRYQHCSOVLOAJNHUWFQCGZFIATIWILWNQZBAPIFKUGFROURUPUABSOZKIPWHNVQUPKOKEZMNRXAQDSLWGDCDISZCWWZJYPGSOSNV");
    msg.description.assign("WBYLQIWJLWVDDHLRPXJUVNPWZIVOPZHCAOTKUAZYOZVIFCEOHQNKQGRECIMSXZKKGSQAGEAOZDONTUBNCXMKCHVSTDLWGCDEZYWKQPVNFRSXEIGTYFDLGDRMVJIGEBPTDIFEBRRBMAPRFHPCCBEUFLPJFAVOYFNGZDJLHGBPLVXYOJFZTAIOQNZUXRJTJKYXTWPGNKQXNEQYUCLASWARQSYMJMVMSUWHMLSAW");
    msg.leader_speed = 0.931496671879537;
    msg.leader_bank_lim = 0.7904486292224142;
    msg.pos_sim_err_lim = 0.9035879857064734;
    msg.pos_sim_err_wrn = 0.8506298541214582;
    msg.pos_sim_err_timeout = 52539U;
    msg.converg_max = 0.24603681173806147;
    msg.converg_timeout = 50723U;
    msg.comms_timeout = 1920U;
    msg.turb_lim = 0.7582130212461348;
    msg.custom.assign("NJLTMXZBBLFXALCVTGFFIXALDBZZHRWEYIGEPXLGTJOMPXPDQNOULZUYCWWZVQSRSOVTKCQSODOPNKZYJAUOKNZFIZQYHTWPBAKSQADROIXOMRHJNVQDMPPUHPBEDXTXNVYAHUNENRUCJTQYVCXIGMLAYMEHFPQTVKQQZSEUEBELBRFRCSCENVYIMS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.9975856304534247);
    msg.setSource(54170U);
    msg.setSourceEntity(220U);
    msg.setDestination(14004U);
    msg.setDestinationEntity(231U);
    msg.control_src = 49239U;
    msg.control_ent = 82U;
    msg.timeout = 0.7049951918256229;
    msg.loiter_radius = 0.35863202567942776;
    msg.altitude_interval = 0.3336859940829966;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.8825432022171606);
    msg.setSource(5771U);
    msg.setSourceEntity(21U);
    msg.setDestination(17141U);
    msg.setDestinationEntity(226U);
    msg.control_src = 33908U;
    msg.control_ent = 158U;
    msg.timeout = 0.5219519353144173;
    msg.loiter_radius = 0.25840458853082815;
    msg.altitude_interval = 0.09520166491545645;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.384581718926433);
    msg.setSource(8624U);
    msg.setSourceEntity(30U);
    msg.setDestination(20700U);
    msg.setDestinationEntity(91U);
    msg.control_src = 53755U;
    msg.control_ent = 16U;
    msg.timeout = 0.0978045171043811;
    msg.loiter_radius = 0.7115583316595012;
    msg.altitude_interval = 0.610470184277673;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.751068969229619);
    msg.setSource(5796U);
    msg.setSourceEntity(74U);
    msg.setDestination(3974U);
    msg.setDestinationEntity(36U);
    msg.flags = 82U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.2375980594307251;
    tmp_msg_0.speed_units = 176U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.1889107654473252;
    tmp_msg_1.z_units = 123U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.3345939714693529;
    msg.lon = 0.09852078613930493;
    msg.radius = 0.9770732200522987;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.24781855464257607);
    msg.setSource(52186U);
    msg.setSourceEntity(19U);
    msg.setDestination(35219U);
    msg.setDestinationEntity(229U);
    msg.flags = 125U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.45523391289084836;
    tmp_msg_0.speed_units = 179U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.30465354986356585;
    tmp_msg_1.z_units = 133U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.8090714585581977;
    msg.lon = 0.3789236442198951;
    msg.radius = 0.10485819358263049;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.941544300110589);
    msg.setSource(17336U);
    msg.setSourceEntity(108U);
    msg.setDestination(8387U);
    msg.setDestinationEntity(5U);
    msg.flags = 78U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.5205221388995177;
    tmp_msg_0.speed_units = 193U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.31304008269494177;
    tmp_msg_1.z_units = 201U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.047526410222701765;
    msg.lon = 0.9781285693865646;
    msg.radius = 0.47709653946351216;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.5292120245983737);
    msg.setSource(41209U);
    msg.setSourceEntity(136U);
    msg.setDestination(22828U);
    msg.setDestinationEntity(181U);
    msg.control_src = 23579U;
    msg.control_ent = 68U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 106U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.5203351627571224;
    tmp_tmp_msg_0_0.speed_units = 149U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.42962281425691984;
    tmp_tmp_msg_0_1.z_units = 110U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.7849542905730746;
    tmp_msg_0.lon = 0.005926017943058692;
    tmp_msg_0.radius = 0.9101861331002988;
    msg.reference.set(tmp_msg_0);
    msg.state = 5U;
    msg.proximity = 26U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.6144666136576361);
    msg.setSource(25752U);
    msg.setSourceEntity(194U);
    msg.setDestination(24362U);
    msg.setDestinationEntity(68U);
    msg.control_src = 18601U;
    msg.control_ent = 168U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 77U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.2365942148466349;
    tmp_tmp_msg_0_0.speed_units = 239U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.988786252944386;
    tmp_tmp_msg_0_1.z_units = 63U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.12305464487643558;
    tmp_msg_0.lon = 0.40607359856805025;
    tmp_msg_0.radius = 0.6198456327108179;
    msg.reference.set(tmp_msg_0);
    msg.state = 198U;
    msg.proximity = 57U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.9052182888638483);
    msg.setSource(47548U);
    msg.setSourceEntity(82U);
    msg.setDestination(39277U);
    msg.setDestinationEntity(120U);
    msg.control_src = 55570U;
    msg.control_ent = 220U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 180U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.5692256420341024;
    tmp_tmp_msg_0_0.speed_units = 15U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.9120814967787555;
    tmp_tmp_msg_0_1.z_units = 107U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.8737612980286598;
    tmp_msg_0.lon = 0.34811585475020046;
    tmp_msg_0.radius = 0.025187447643521543;
    msg.reference.set(tmp_msg_0);
    msg.state = 232U;
    msg.proximity = 49U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.5842639450380379);
    msg.setSource(35419U);
    msg.setSourceEntity(112U);
    msg.setDestination(9562U);
    msg.setDestinationEntity(139U);
    msg.ax_cmd = 0.31990630071160175;
    msg.ay_cmd = 0.023079523473747754;
    msg.az_cmd = 0.44915750504022667;
    msg.ax_des = 0.9010817162221383;
    msg.ay_des = 0.23596121329621877;
    msg.az_des = 0.035365623527009005;
    msg.virt_err_x = 0.557180239910533;
    msg.virt_err_y = 0.7854346256123852;
    msg.virt_err_z = 0.44641732657748334;
    msg.surf_fdbk_x = 0.9834820683140488;
    msg.surf_fdbk_y = 0.6781895928427022;
    msg.surf_fdbk_z = 0.8523184928158242;
    msg.surf_unkn_x = 0.01081882063149009;
    msg.surf_unkn_y = 0.44415303837010767;
    msg.surf_unkn_z = 0.781742347427099;
    msg.ss_x = 0.172386553915705;
    msg.ss_y = 0.9860559992827403;
    msg.ss_z = 0.9296211816119982;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.20467017217307548);
    msg.setSource(63602U);
    msg.setSourceEntity(232U);
    msg.setDestination(9777U);
    msg.setDestinationEntity(227U);
    msg.ax_cmd = 0.5356384244098572;
    msg.ay_cmd = 0.741527531148054;
    msg.az_cmd = 0.03527451768110712;
    msg.ax_des = 0.06086250042297203;
    msg.ay_des = 0.7136611100486338;
    msg.az_des = 0.14962499483695324;
    msg.virt_err_x = 0.004246840377957084;
    msg.virt_err_y = 0.8758745936909369;
    msg.virt_err_z = 0.5932602729186357;
    msg.surf_fdbk_x = 0.36279893151464637;
    msg.surf_fdbk_y = 0.3520191030702736;
    msg.surf_fdbk_z = 0.14909679907765205;
    msg.surf_unkn_x = 0.8846783292433928;
    msg.surf_unkn_y = 0.10336737768880877;
    msg.surf_unkn_z = 0.67019845205373;
    msg.ss_x = 0.6784557602601945;
    msg.ss_y = 0.1421879597778224;
    msg.ss_z = 0.28988122967635677;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("SDLAEBLBTUGPZLMFGRJCJAIWVTMMFPWVSXPDRALSKHYHVZCBUMLCUHRMKNYTAFBUROSTQJPUDDXLIVYGJNEZSAGFMMORNWCPRNFAVORYWIZQHBJENODCRCCHGOCKHUWVLOLVZXXH");
    tmp_msg_0.dist = 0.8159441968134713;
    tmp_msg_0.err = 0.10997628761137479;
    tmp_msg_0.ctrl_imp = 0.9750992471460382;
    tmp_msg_0.rel_dir_x = 0.018844172558630135;
    tmp_msg_0.rel_dir_y = 0.9821216622184622;
    tmp_msg_0.rel_dir_z = 0.9311745252710691;
    tmp_msg_0.err_x = 0.8057499719299539;
    tmp_msg_0.err_y = 0.6295631764335333;
    tmp_msg_0.err_z = 0.93895098877108;
    tmp_msg_0.rf_err_x = 0.45698778823587116;
    tmp_msg_0.rf_err_y = 0.3597229941851189;
    tmp_msg_0.rf_err_z = 0.6697382012465247;
    tmp_msg_0.rf_err_vx = 0.1846216545749112;
    tmp_msg_0.rf_err_vy = 0.842425206101722;
    tmp_msg_0.rf_err_vz = 0.11593666299265137;
    tmp_msg_0.ss_x = 0.570674539005516;
    tmp_msg_0.ss_y = 0.6739738525652066;
    tmp_msg_0.ss_z = 0.09455486421632386;
    tmp_msg_0.virt_err_x = 0.6084457541410775;
    tmp_msg_0.virt_err_y = 0.5367875539257574;
    tmp_msg_0.virt_err_z = 0.21922940270393643;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.34547479007305704);
    msg.setSource(50408U);
    msg.setSourceEntity(144U);
    msg.setDestination(57302U);
    msg.setDestinationEntity(165U);
    msg.ax_cmd = 0.33993541667431737;
    msg.ay_cmd = 0.5204761026101081;
    msg.az_cmd = 0.9165186760149469;
    msg.ax_des = 0.0033000268925172938;
    msg.ay_des = 0.6338514766281426;
    msg.az_des = 0.4496143712617031;
    msg.virt_err_x = 0.35968427970573347;
    msg.virt_err_y = 0.9628669510255611;
    msg.virt_err_z = 0.9356922102483866;
    msg.surf_fdbk_x = 0.14488314565049576;
    msg.surf_fdbk_y = 0.9412547499127654;
    msg.surf_fdbk_z = 0.8891157779390727;
    msg.surf_unkn_x = 0.8436359186610446;
    msg.surf_unkn_y = 0.543175068117865;
    msg.surf_unkn_z = 0.03522178417652155;
    msg.ss_x = 0.6010938494462353;
    msg.ss_y = 0.9984499129821035;
    msg.ss_z = 0.0426937128889443;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.8705027891071273);
    msg.setSource(22165U);
    msg.setSourceEntity(90U);
    msg.setDestination(45931U);
    msg.setDestinationEntity(99U);
    msg.s_id.assign("KXUHYTBLXXCOAYHGGSZLVJWVRRGXYLUTVFEZLCZOMIFQDIUDRWJHYEVTWCXAPZNKPSWRTHDOKEDDSKBFJLCNCOMFABZRABELNPLCFAAJZNFBDCZKNRDGJAQXXLHSYNICEHKAPUKLARGFTCRXMMYNJHQPVSVRQKRIHJUPQGMIKQIWNUZBEDOOBMETPWBPLICSUBUPTSIFQHTMIGYTVFEVAWKDNSMEZWOGDSXFOMTVIJGNVJPQ");
    msg.dist = 0.5567227853968849;
    msg.err = 0.1392462519929305;
    msg.ctrl_imp = 0.04268725688012731;
    msg.rel_dir_x = 0.1418055488166412;
    msg.rel_dir_y = 0.21843511566720697;
    msg.rel_dir_z = 0.25661353973102663;
    msg.err_x = 0.29447518462582734;
    msg.err_y = 0.33491277083606164;
    msg.err_z = 0.16685997855340695;
    msg.rf_err_x = 0.15197085775060148;
    msg.rf_err_y = 0.2994228995930367;
    msg.rf_err_z = 0.7277536941158728;
    msg.rf_err_vx = 0.38763685576599494;
    msg.rf_err_vy = 0.392467608130214;
    msg.rf_err_vz = 0.41276450745060067;
    msg.ss_x = 0.25454689761465044;
    msg.ss_y = 0.21267628624326962;
    msg.ss_z = 0.9138512873205478;
    msg.virt_err_x = 0.2899972786800087;
    msg.virt_err_y = 0.22030607762546928;
    msg.virt_err_z = 0.58597009129454;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.15078434337773572);
    msg.setSource(27458U);
    msg.setSourceEntity(187U);
    msg.setDestination(2532U);
    msg.setDestinationEntity(140U);
    msg.s_id.assign("XCWATUBYDLTQRDPNKHVHMOXSZBFQHSVSNINITJVJCZLYNRGSQMUKIZK");
    msg.dist = 0.4051511190587018;
    msg.err = 0.7711332105119377;
    msg.ctrl_imp = 0.23604598283995692;
    msg.rel_dir_x = 0.9328590513225528;
    msg.rel_dir_y = 0.695894455120262;
    msg.rel_dir_z = 0.8000331729381408;
    msg.err_x = 0.3311455396100005;
    msg.err_y = 0.2650908834549922;
    msg.err_z = 0.6276302174701156;
    msg.rf_err_x = 0.09632069720947634;
    msg.rf_err_y = 0.49493607913058635;
    msg.rf_err_z = 0.04871660530807531;
    msg.rf_err_vx = 0.3206922994880762;
    msg.rf_err_vy = 0.13930991132613302;
    msg.rf_err_vz = 0.5304471702880461;
    msg.ss_x = 0.3872241815803745;
    msg.ss_y = 0.11372911575609856;
    msg.ss_z = 0.07488654752641577;
    msg.virt_err_x = 0.9265028341552551;
    msg.virt_err_y = 0.5692458668719321;
    msg.virt_err_z = 0.4009786078692461;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.20952295100872054);
    msg.setSource(37592U);
    msg.setSourceEntity(69U);
    msg.setDestination(22344U);
    msg.setDestinationEntity(90U);
    msg.s_id.assign("QUAIRQEYPJOLFKFBWS");
    msg.dist = 0.6133447286713094;
    msg.err = 0.5695799573066254;
    msg.ctrl_imp = 0.8891374167661081;
    msg.rel_dir_x = 0.2998826263790294;
    msg.rel_dir_y = 0.7035637320768979;
    msg.rel_dir_z = 0.7135586069534421;
    msg.err_x = 0.4304410171405416;
    msg.err_y = 0.6281933866623207;
    msg.err_z = 0.05736176928083547;
    msg.rf_err_x = 0.008241612059043946;
    msg.rf_err_y = 0.3338502595472427;
    msg.rf_err_z = 0.4489305182270793;
    msg.rf_err_vx = 0.26553790535270905;
    msg.rf_err_vy = 0.04591307752820095;
    msg.rf_err_vz = 0.20950040860606367;
    msg.ss_x = 0.4563751155263811;
    msg.ss_y = 0.6975100290990126;
    msg.ss_z = 0.0794229248383388;
    msg.virt_err_x = 0.4980308180599211;
    msg.virt_err_y = 0.16439408438587289;
    msg.virt_err_z = 0.005101212300017144;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.6800288613045227);
    msg.setSource(14729U);
    msg.setSourceEntity(1U);
    msg.setDestination(34440U);
    msg.setDestinationEntity(156U);
    msg.timeout = 54201U;
    msg.rpm = 0.982529841257579;
    msg.direction = 21U;
    msg.custom.assign("BGAYMSIJJLNPKFRCKYBONPWDEFTAADNKQLZMLLKSARLTYTQTQJXRUDKFICVSXNTXWNLKABNXAJITZEVZX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.8163117844618064);
    msg.setSource(4148U);
    msg.setSourceEntity(15U);
    msg.setDestination(16075U);
    msg.setDestinationEntity(79U);
    msg.timeout = 44728U;
    msg.rpm = 0.5614364396841482;
    msg.direction = 124U;
    msg.custom.assign("VRIABSDOWNJDXFATYKLBEYVRVRCTNFLPDZFXLEBOYSKGHUCUQKTBKYAZNVMICSOSHTPDSVBRNWJOOSDCXEMFFRYVBJIPNVFEWSAYLIPDJPDTLGMEVZSEJMCUJTGQQSWFOAGXKB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.29338963213506297);
    msg.setSource(8705U);
    msg.setSourceEntity(210U);
    msg.setDestination(15798U);
    msg.setDestinationEntity(249U);
    msg.timeout = 19790U;
    msg.rpm = 0.4706465896355341;
    msg.direction = 26U;
    msg.custom.assign("REJYMPHNHJMWIQZDZAKKWGOIWPBJZAJDMWIDXBKACXQGNLGCYKEYHAFMQSGBVJKCTFDUVEYORIDRUERBOBALMXUCDXXHLSJVVSZWISAPSORGNXXHZTBHBYFFDYRJUMQALWMNUXTOXTJAELAYPK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.08013683885882861);
    msg.setSource(5980U);
    msg.setSourceEntity(83U);
    msg.setDestination(49797U);
    msg.setDestinationEntity(21U);
    msg.formation_name.assign("ESYGVCFKLELSHKCOUAKIGIFCANMYFXBFGNRYDYKSMVXLOMUGTGHPMVQOTMSHZJMTSNCUGEABLIDSCPWDLWVWPHEZKZWOVLWKKEONSGBGRPROAJWOOMUATXMPDZAWHEBWSZFJRNNNAZHIVYAXDUUZXNIDECRQMYTJBUTITQZXXVVLJUBQEHICFLIVXQFARUKQQOJFDPBPTZARDEYGXPJHKBFNCDKUDEMLV");
    msg.type = 222U;
    msg.op = 61U;
    msg.group_name.assign("CHCQWZSOIIPZLEMVLJVGWLYOBUZKFTQGWPWYTUJOIZJWFXRKVVSMAMAOVXKLDBAHFIKNJBBBMTKKKUBLRVIYGGNXTHNBZWPBESFJEDPAJOGPLQTJMPMZSFF");
    msg.plan_id.assign("ZHJTNMXPHOIEQZEYBWLQIGQRAYXTELAOQSOVROQEPDDKYMNDUOJLSNYJSUAWYDR");
    msg.description.assign("XMSPXZJCWUDROVEUQANLPAWTJBKQGQWLKMXGTMGKSBBHSIUQFXMRRHCCDFVJSPJDUDDEZSN");
    msg.reference_frame = 175U;
    msg.leader_bank_lim = 0.3050771410812144;
    msg.leader_speed_min = 0.35680726524097994;
    msg.leader_speed_max = 0.31135779393393603;
    msg.leader_alt_min = 0.1092754650295068;
    msg.leader_alt_max = 0.8020436059728356;
    msg.pos_sim_err_lim = 0.6292786823627373;
    msg.pos_sim_err_wrn = 0.6111642581603419;
    msg.pos_sim_err_timeout = 43939U;
    msg.converg_max = 0.35496942142929555;
    msg.converg_timeout = 33606U;
    msg.comms_timeout = 7756U;
    msg.turb_lim = 0.8401964862254834;
    msg.custom.assign("MMHQUALRDRIFZHUYVQDPYOXCFEKCPJMIDPBPYIXYKSDGWQLZUQIIVLJNNUQFFNISZTOKBRHGVJJFUUXQL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.9594129399158209);
    msg.setSource(49001U);
    msg.setSourceEntity(224U);
    msg.setDestination(32853U);
    msg.setDestinationEntity(5U);
    msg.formation_name.assign("QOBBAVJQDETXPXCUAHVWBYCOLDWXNHMNPMHIWFQJJBUMYHMOPYOKJHKRYSPGHUFGUVZGPOIXVENXNAAZQPXAPSGIEMRTZKBTYAVLYFDYSUJBMNTGUELVNCJIRLYZAQTDEDGLSRVEQXZQITFKWPNMPQXCSRDEXVTGNFUCZSNNMHMGIFWSERWJZFOIKATLBJVGMYKFCRJKDTOZPWFHBARXDJOLAZVCQODLKKWCHGEDQ");
    msg.type = 169U;
    msg.op = 70U;
    msg.group_name.assign("FRNHJBSIUJUQEEDMMECXNTIJGLONUKU");
    msg.plan_id.assign("MTDSJVXGXCKBPAWGASXJVSBZTJDDRKMYHMYHRWMCNCAFWSFVXHDMCRQIMJVPRTIZSBOKTKMRLYPONCQEEEJCESAIPLOVXUWYAYNFWDAIOROLLQVADIAQUWPNWBNTLMXSYITGDVFGFNLOCJHHWZISTECJZQEUVCHNTPMQXHPJNPGDKREJHURZZQPXULGUPWHZUBFLCLYYXNKFUZIQUQOBJKELGZHGUEXSFFMGZGK");
    msg.description.assign("KPXSWPRLFNOPJDARTOKKGZDNGGSTSCAEJIJNFKQCCBURCWOYIPSCHIISDFDMEZIJNXXBMJZGUCHLPCDPVCYOYITADOFAHHRDYAFWOGLABFNBXKGPIKEEZJLVLWYXMLXZJFRSPVOWHZWJLUPNUYTVJMQVYQXFQCESUMHOTKGMYHVTAUKGBIWAZZSENNYXTXIGRVMBHPLXYSQBLFDG");
    msg.reference_frame = 252U;
    msg.leader_bank_lim = 0.7701554951835087;
    msg.leader_speed_min = 0.9274539707583278;
    msg.leader_speed_max = 0.9130046195150799;
    msg.leader_alt_min = 0.7816782693071727;
    msg.leader_alt_max = 0.2073889988002532;
    msg.pos_sim_err_lim = 0.46788624145303526;
    msg.pos_sim_err_wrn = 0.4058788632699857;
    msg.pos_sim_err_timeout = 11354U;
    msg.converg_max = 0.9738336614284689;
    msg.converg_timeout = 29899U;
    msg.comms_timeout = 57094U;
    msg.turb_lim = 0.5547354841202808;
    msg.custom.assign("VKOVQFZKWBDXSZBPQMTPNNSNSBHXLTFKGEGWOYIXYEOETKUAHFICYWHSJRMZRYTDXZWSCIGSLAXEPHOJMTQKRZJFXKYNHPRMQKWRFVZLIQSLMUQBBQWPAGRRTJJIXRMOLPXHFGHIIJDC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.6504652959412777);
    msg.setSource(22230U);
    msg.setSourceEntity(166U);
    msg.setDestination(59645U);
    msg.setDestinationEntity(129U);
    msg.formation_name.assign("HJECLCAKYZGUTCPIJRISR");
    msg.type = 127U;
    msg.op = 128U;
    msg.group_name.assign("DNSHDRAPWVXZYYNVKIPFAZSBNTYJHAUQOZLKFDPOWLUDATRB");
    msg.plan_id.assign("DJYHQRXYZENHUGBOJBKAHLSHSEWMDIANYOAUBDUHPAGETILWHSPOHFGACHTQUZANLDWWTWCYCKEOWIOXSDTKNFBFRLGXOXZMCGOFFIEABEVKCOKPVSHNFUJPMYRBPZDSVFISSMMRMBJEZWODXRJQDNHMFURSVZDMUZBKMFSVTECVQXCXZGQTMTBRQPYWGJBPTYCIGUZOJGDPVEQJVVXNRPKKYLRTCJARCIWLNPLZJNUULWINFAAEXQLL");
    msg.description.assign("DQPVOFWMJKRCQHNRKYEIPTAQCGXSSMOYSFSBJMNZBVRJZRHDKTNDDRWSHHBIBLVLMQUKBBGLMULJXTHFXQTSIZYPSAFGXUKYCFNADYKOMPOAZWQKLTUJVONTPFNAREQPQVXXAGPIPLMIGCVFIEGWEEJTUDBRAQYKPGTGCBWCE");
    msg.reference_frame = 82U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 13654U;
    tmp_msg_0.off_x = 0.39294888826275376;
    tmp_msg_0.off_y = 0.9261813584193737;
    tmp_msg_0.off_z = 0.25621643981259257;
    msg.participants.push_back(tmp_msg_0);
    msg.leader_bank_lim = 0.27773691034583126;
    msg.leader_speed_min = 0.6834086273271386;
    msg.leader_speed_max = 0.4648759840920078;
    msg.leader_alt_min = 0.9416529350164187;
    msg.leader_alt_max = 0.926360441912241;
    msg.pos_sim_err_lim = 0.37623205287125916;
    msg.pos_sim_err_wrn = 0.20577673688916054;
    msg.pos_sim_err_timeout = 49410U;
    msg.converg_max = 0.7462214323520765;
    msg.converg_timeout = 4477U;
    msg.comms_timeout = 17712U;
    msg.turb_lim = 0.5162450896019972;
    msg.custom.assign("IQSACRBATRAFWMOXKBWNVCYMLACHRAWNUUNMQROOVPPNIYKLUBRXDBYCENYAPIEWVPWNJGWIGKOJZVIXJZACCJTFPCXBVTKSWSOHXHYIZDAQOMMPEIQVJQGSFGPIOYAPYNLKDJPZMCELHBRWDHZUNDWDXBRLHTHKOSGZEDGRXKTCUXMGEBTADSKESLTWZBRQSUQHNYRIJJUJUDYLZHQVEQTQVLXVOKGMKVLNYDFUGEZOPBF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.9931302122964281);
    msg.setSource(31770U);
    msg.setSourceEntity(137U);
    msg.setDestination(61134U);
    msg.setDestinationEntity(192U);
    msg.timeout = 15818U;
    msg.lat = 0.025701999918415597;
    msg.lon = 0.4414707800983785;
    msg.z = 0.5539603053264167;
    msg.z_units = 251U;
    msg.speed = 0.8687007805611529;
    msg.speed_units = 59U;
    msg.custom.assign("DGOYZEWLILRMZPTBXIZOIKSDESORDPZBMVAJHLSJOFJK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.5119405532406882);
    msg.setSource(56118U);
    msg.setSourceEntity(92U);
    msg.setDestination(11495U);
    msg.setDestinationEntity(62U);
    msg.timeout = 5314U;
    msg.lat = 0.10631688679865148;
    msg.lon = 0.5220999993372881;
    msg.z = 0.09771321044809844;
    msg.z_units = 57U;
    msg.speed = 0.837316248197747;
    msg.speed_units = 59U;
    msg.custom.assign("GIYOIJQYBMEWLCWUBLYAAXFVLKCHGGSJZQFCPEGCUORRLRETRKJHPWKQEHSJBMFYATLSVBCDTCDYOTNEXNYVPBMXVLACJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.5165091520613553);
    msg.setSource(50484U);
    msg.setSourceEntity(121U);
    msg.setDestination(49725U);
    msg.setDestinationEntity(9U);
    msg.timeout = 58490U;
    msg.lat = 0.20208529071237513;
    msg.lon = 0.21602130104869732;
    msg.z = 0.7808479353003465;
    msg.z_units = 103U;
    msg.speed = 0.45596685149721605;
    msg.speed_units = 2U;
    msg.custom.assign("RGYRQERNXWNPHKOTOPBGUAEMCPXURTWFGBOIQFZIOOCVWXGRIOELZUUVNSTDRBQAEQKYAOBIDLTWYVICSCTFWNPHKVCDTXYUSAJZGDMZSAHLIYSAQUDKJJGDETWXKJPWILUYWMSNMXLXPRVWKQEMCKQUTHJBGPXJONHJBZLZJLZHKMWCMFKLAYDQAIOVLZNBMITSDAQQVFTMVFAFVRPHCU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.20303826276310277);
    msg.setSource(62998U);
    msg.setSourceEntity(147U);
    msg.setDestination(24500U);
    msg.setDestinationEntity(31U);
    msg.timeout = 31051U;
    msg.lat = 0.0396177054909046;
    msg.lon = 0.7489927479939684;
    msg.z = 0.620379775790342;
    msg.z_units = 12U;
    msg.speed = 0.10681561696121333;
    msg.speed_units = 224U;
    msg.custom.assign("ONKVJKUKHVUCCEOOGUXYYVNVFXXPBGORBJKJJDFFBMTZWAAZYSCUHNWIUKUKVCNPDOYWMWKDTRUEPRSCQXMYMYWLQQLLPJQTIUYITTWZKGITHAMFPAIZNJHERKVLZPTRJECHRMDQZPOMIRNLLBCMIGQBQLSJFHSEKJXSHPZSMAUOGAQTNLXJXGANTBVHYVRESWZIOSFXRRIGBAFDOZAHULVWAYDEPGIX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.6245162222235612);
    msg.setSource(56775U);
    msg.setSourceEntity(205U);
    msg.setDestination(36200U);
    msg.setDestinationEntity(198U);
    msg.timeout = 35795U;
    msg.lat = 0.6494884551804222;
    msg.lon = 0.15839541491145803;
    msg.z = 0.40440151730028273;
    msg.z_units = 49U;
    msg.speed = 0.08197747533417965;
    msg.speed_units = 253U;
    msg.custom.assign("HODEROFDHTUBGKVJFQLYCJIKMNGNVZGZAIXWUUWYBBTSMFWGVSZQSTQSJZXUUEYSUQRMFBQERAKECCWAPGROCMDFXCJJDSYOHCKTJVMHIBTBEPPUIYHPWEYGKWZCNSZSRVALZLDHNQHXZKBVDPOTNORNPLXXKKSUCRXFIAYAXVLTLYN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.8999215263529711);
    msg.setSource(59103U);
    msg.setSourceEntity(119U);
    msg.setDestination(41356U);
    msg.setDestinationEntity(155U);
    msg.timeout = 62425U;
    msg.lat = 0.7779442739181764;
    msg.lon = 0.5235986898892699;
    msg.z = 0.8797593027853131;
    msg.z_units = 248U;
    msg.speed = 0.8926744134388167;
    msg.speed_units = 59U;
    msg.custom.assign("ICEYIUXYQPACYTHENEODRVNQZHPWRUBGTMHRVBEKURTGAZGJYFBIIAPKTZBAXOFSQPWZVPDLFIMTXNFWCJKJWHBMRUOSCZEVADKSVFETSTHQKTZDIKDONMSCGCBGWQLLLDXEQLTSLXRIMCUVQFYXNWNVDBAVKONONQUCMXKWZESMUOSZGREKJGNRXYJJLJBNWBDHZYCDPACLOUIEAHRFPTUGPVFHSIAQMM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.5811705969676649);
    msg.setSource(13178U);
    msg.setSourceEntity(25U);
    msg.setDestination(65042U);
    msg.setDestinationEntity(98U);
    msg.arrival_time = 0.21006641734512232;
    msg.lat = 0.97907427883982;
    msg.lon = 0.3823947982567768;
    msg.z = 0.6217849781801801;
    msg.z_units = 189U;
    msg.travel_z = 0.18224967001668335;
    msg.travel_z_units = 199U;
    msg.delayed = 248U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.797657973855992);
    msg.setSource(22516U);
    msg.setSourceEntity(164U);
    msg.setDestination(32133U);
    msg.setDestinationEntity(97U);
    msg.arrival_time = 0.21400869816185408;
    msg.lat = 0.39406217988542624;
    msg.lon = 0.504110040867279;
    msg.z = 0.5915504189678118;
    msg.z_units = 133U;
    msg.travel_z = 0.04459030159444621;
    msg.travel_z_units = 82U;
    msg.delayed = 72U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.5992387857928964);
    msg.setSource(48216U);
    msg.setSourceEntity(63U);
    msg.setDestination(19403U);
    msg.setDestinationEntity(148U);
    msg.arrival_time = 0.2439592605493891;
    msg.lat = 0.9035730480328498;
    msg.lon = 0.9000146500157061;
    msg.z = 0.031757208462358855;
    msg.z_units = 5U;
    msg.travel_z = 0.8845603145818279;
    msg.travel_z_units = 58U;
    msg.delayed = 38U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.752629360853319);
    msg.setSource(48147U);
    msg.setSourceEntity(41U);
    msg.setDestination(5944U);
    msg.setDestinationEntity(84U);
    msg.lat = 0.8998647044206293;
    msg.lon = 0.9640493344689546;
    msg.z = 0.16159965545412647;
    msg.z_units = 96U;
    msg.speed = 0.3842990122792096;
    msg.speed_units = 4U;
    msg.bearing = 0.1790066044942349;
    msg.cross_angle = 0.0151615988376681;
    msg.width = 0.5725592284466082;
    msg.length = 0.9307544985317325;
    msg.coff = 238U;
    msg.angaperture = 0.1246198999912781;
    msg.range = 58757U;
    msg.overlap = 106U;
    msg.flags = 29U;
    msg.custom.assign("GURUWUDGBNQSRPXELJCQAOTVYKVKFWCSPPPTRUDJHKNWUZSQGQHRSGGKQMONOOSBBTPBKDOCIATWDHXYACUSBIYZDVVARJNHSRLFERZNCKSRAQXFBWFZNXJLPEKIYBQDEIMOGIVYYSDOEONXXSPIOKDMVHRLLTNHWZCMEQFFCQZZTXAGDAZIZHKXJMYWTAHUYBCFLTHPBALYVVBCG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.2641234937622273);
    msg.setSource(21416U);
    msg.setSourceEntity(52U);
    msg.setDestination(17390U);
    msg.setDestinationEntity(207U);
    msg.lat = 0.638824586730066;
    msg.lon = 0.8270180846371277;
    msg.z = 0.4804307669578328;
    msg.z_units = 155U;
    msg.speed = 0.6080917447913514;
    msg.speed_units = 95U;
    msg.bearing = 0.7443357040994508;
    msg.cross_angle = 0.6619498422518157;
    msg.width = 0.5234976423144059;
    msg.length = 0.10086449234695194;
    msg.coff = 205U;
    msg.angaperture = 0.827764600070103;
    msg.range = 53374U;
    msg.overlap = 249U;
    msg.flags = 6U;
    msg.custom.assign("YPNZHGLDHNDOEXWSZLVGHALECHIDSBVLMPSUJICFZPRULNPGSZBMJBRVTTPAQXB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.7365250188943674);
    msg.setSource(18795U);
    msg.setSourceEntity(61U);
    msg.setDestination(50433U);
    msg.setDestinationEntity(75U);
    msg.lat = 0.9482722918668537;
    msg.lon = 0.8237383876999548;
    msg.z = 0.40988420612388965;
    msg.z_units = 1U;
    msg.speed = 0.059371860962354805;
    msg.speed_units = 145U;
    msg.bearing = 0.8156198747513324;
    msg.cross_angle = 0.645738113817672;
    msg.width = 0.8518571106593504;
    msg.length = 0.3326524104082714;
    msg.coff = 150U;
    msg.angaperture = 0.5945792590045945;
    msg.range = 58164U;
    msg.overlap = 208U;
    msg.flags = 254U;
    msg.custom.assign("WZZKOCDIMFVUTLWGQGORNADAEWIZWKQIAXVBEEUTOLRICNEEZQHEAHGFWFQNMKFPDNZXNVVDZXCTCWLUMIQPGLLXVOEJBQHJAZRDHJOHWPMPSOBZYGWBERZBKISBDNYYSMOPLYYXLDSIPQYMKTTQIZMTFTTHMFSVJXNPD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.8425648875358075);
    msg.setSource(17816U);
    msg.setSourceEntity(71U);
    msg.setDestination(49282U);
    msg.setDestinationEntity(144U);
    msg.timeout = 15290U;
    msg.lat = 0.9773412095892612;
    msg.lon = 0.5200114736748706;
    msg.z = 0.08183825977824732;
    msg.z_units = 195U;
    msg.speed = 0.8081229482558542;
    msg.speed_units = 186U;
    msg.syringe0 = 229U;
    msg.syringe1 = 163U;
    msg.syringe2 = 37U;
    msg.custom.assign("NOHVCGQMYRLUNAYZHNYBJQKWSJUMCPZKEAWTGAPIFRSWFDZMTJQKERHZMEHFKWNYAUNUMZZTBJYNVTGYVEKXS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.5450970079414947);
    msg.setSource(5983U);
    msg.setSourceEntity(70U);
    msg.setDestination(22681U);
    msg.setDestinationEntity(33U);
    msg.timeout = 31329U;
    msg.lat = 0.29412186685419595;
    msg.lon = 0.6660265589971088;
    msg.z = 0.6118031306509344;
    msg.z_units = 86U;
    msg.speed = 0.8422271819633855;
    msg.speed_units = 93U;
    msg.syringe0 = 150U;
    msg.syringe1 = 247U;
    msg.syringe2 = 181U;
    msg.custom.assign("AMNLNCDIOWQLANMDRPXLGFQSRRCWYKJFVBXBNKSOBYDKTSORZETZTWOVGBGNOWLIJLHHKKACARRJUEMSQHXUEGQSVZMZJILRQHLFSREIXBDMXNAKHIIQWQXTVZHBMAXRQGIKLVDNEFVMVZYAKVPFLUFDBZPECUGAPBFGJEAIXDPJOPSUMYCCGETTYPYVTOIDFW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.1398601005249448);
    msg.setSource(22441U);
    msg.setSourceEntity(220U);
    msg.setDestination(29574U);
    msg.setDestinationEntity(127U);
    msg.timeout = 47924U;
    msg.lat = 0.956464636800247;
    msg.lon = 0.19951087704167902;
    msg.z = 0.5910458236763924;
    msg.z_units = 194U;
    msg.speed = 0.36926578455365955;
    msg.speed_units = 18U;
    msg.syringe0 = 241U;
    msg.syringe1 = 93U;
    msg.syringe2 = 218U;
    msg.custom.assign("LDXUNOUELHMKOEWRVKSIMHWUDUXRVRYEJDBJVJNUIGALCZSRKTMVOXKEIHKPSERSRATLDFVUSRGIJNLQOMRMOPHHAEYTKMMCBJWVHRKCCDYTEQESWSASG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.3320287481982275);
    msg.setSource(24781U);
    msg.setSourceEntity(152U);
    msg.setDestination(21848U);
    msg.setDestinationEntity(200U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.20593939825302032);
    msg.setSource(1227U);
    msg.setSourceEntity(74U);
    msg.setDestination(12628U);
    msg.setDestinationEntity(176U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.5118023857135043);
    msg.setSource(42999U);
    msg.setSourceEntity(108U);
    msg.setDestination(45372U);
    msg.setDestinationEntity(7U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.770569530134187);
    msg.setSource(1631U);
    msg.setSourceEntity(96U);
    msg.setDestination(5355U);
    msg.setDestinationEntity(100U);
    msg.lat = 0.7347740117704405;
    msg.lon = 0.7585778351277472;
    msg.z = 0.47121847181449916;
    msg.z_units = 225U;
    msg.speed = 0.40901223032820166;
    msg.speed_units = 226U;
    msg.takeoff_pitch = 0.26817146270075565;
    msg.custom.assign("UTRQOGLDLGZPBWIIPWGUTEOYLAVBBOCKDCNGZNNPZZSECRTOVIGYMGJIUPSOBXXBNBFDMBVJKFHMMGMXKAKJVSPYAMAEHVLTJFXCEYIQAHIJYGUZJHSGRVNWRTFACMHDPHWONDEVFJSXFDCECTOXKYENULWZXIKSSQK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.2726188291296259);
    msg.setSource(22109U);
    msg.setSourceEntity(87U);
    msg.setDestination(17090U);
    msg.setDestinationEntity(7U);
    msg.lat = 0.7234584498316851;
    msg.lon = 0.7739365793399977;
    msg.z = 0.19074683184977304;
    msg.z_units = 156U;
    msg.speed = 0.030421180910571666;
    msg.speed_units = 26U;
    msg.takeoff_pitch = 0.22723426653182965;
    msg.custom.assign("SSWQZDOMOTKIMUCMLKYZDVRXCOIKFVXOXHWHJPHEUOHLDHXETNFVSZGIQTNRLMHAGWAJGVVRIBXTVEJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.5878931933781321);
    msg.setSource(37729U);
    msg.setSourceEntity(29U);
    msg.setDestination(41666U);
    msg.setDestinationEntity(84U);
    msg.lat = 0.9913300343372471;
    msg.lon = 0.05514009175478529;
    msg.z = 0.9455456631017474;
    msg.z_units = 48U;
    msg.speed = 0.835638117974147;
    msg.speed_units = 171U;
    msg.takeoff_pitch = 0.5537194274336126;
    msg.custom.assign("PQASZIHLCQWNXWSAQBZOBNTDLKYPOGAIFJVDAYJIVKJVJKYUAFMRMWIVMOAOPUMHHBOCJJOXNXLIZFRZKRQFSPBVR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.5014252357840299);
    msg.setSource(37340U);
    msg.setSourceEntity(65U);
    msg.setDestination(20920U);
    msg.setDestinationEntity(159U);
    msg.lat = 0.3980068219325783;
    msg.lon = 0.7822759438809039;
    msg.z = 0.5734317098572137;
    msg.z_units = 249U;
    msg.speed = 0.9553309398589926;
    msg.speed_units = 101U;
    msg.abort_z = 0.3058688339480492;
    msg.bearing = 0.030036167754073917;
    msg.glide_slope = 136U;
    msg.glide_slope_alt = 0.6583961663829633;
    msg.custom.assign("MISOHYKRCNCYNYFIEAKORIQBNZJDPXSWUFROIHGPQVKSCALFHZGIJZTSGSADMMPTWVGFQLZIERVPFHEXDQEDHFAGVQGFAOZESPEBPMTCATPSHLIBBUOQAOOBHZLYCN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.873930613518874);
    msg.setSource(28873U);
    msg.setSourceEntity(53U);
    msg.setDestination(17985U);
    msg.setDestinationEntity(140U);
    msg.lat = 0.755363623170309;
    msg.lon = 0.5001173451992919;
    msg.z = 0.21825559349754664;
    msg.z_units = 229U;
    msg.speed = 0.6195225159622583;
    msg.speed_units = 249U;
    msg.abort_z = 0.5513799749685959;
    msg.bearing = 0.9299615413422302;
    msg.glide_slope = 134U;
    msg.glide_slope_alt = 0.5844832186334283;
    msg.custom.assign("DJLRTJRTWNOKCGDSDELWLBQHFNTQJXRMEYVXZORIFPCQKHRYMBDZCSFQFKNINOPAIKSGGAFMEOJPSAIZSIYJAMLKPRLZPBIHCOSYFSSPOWBJLTXZEXMXRGWLP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.3690192566069711);
    msg.setSource(32815U);
    msg.setSourceEntity(86U);
    msg.setDestination(52664U);
    msg.setDestinationEntity(25U);
    msg.lat = 0.9077132482734697;
    msg.lon = 0.36650867580940905;
    msg.z = 0.02879266326037455;
    msg.z_units = 244U;
    msg.speed = 0.10560931944070306;
    msg.speed_units = 94U;
    msg.abort_z = 0.5224686566095138;
    msg.bearing = 0.21762492525848398;
    msg.glide_slope = 217U;
    msg.glide_slope_alt = 0.6265015257888978;
    msg.custom.assign("NQKONGADRUVMJLCDYBYAIFDEBMTNGIWJZOVFUHPNKMJPEARTSQBAQETDAOEKZCVWQDOMTPOVHBPHRQFJDMXKSWIIIVWUDCLZXTBWHWUZUCIGYFCTASMOZKJUKBOWEGVCGUSZXWHFLQRYYXEUWZFTVLYKLGVRTFUZIFZMCOOJAHGHPSGEBD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.6079041125395125);
    msg.setSource(23451U);
    msg.setSourceEntity(128U);
    msg.setDestination(53299U);
    msg.setDestinationEntity(104U);
    msg.lat = 0.7998197368922253;
    msg.lon = 0.33080680113375105;
    msg.speed = 0.8443869760563938;
    msg.speed_units = 166U;
    msg.limits = 154U;
    msg.max_depth = 0.12471113179691706;
    msg.min_alt = 0.7846589838587902;
    msg.time_limit = 0.8782359741474732;
    msg.controller.assign("APLGIXPMGAHKACHNKCVHOTHMLISHNYXPNRJUVLFQLONJDWXEZKHQFNPAZRHMWESMHTOSUYNEE");
    msg.custom.assign("HRHTUCVAIEDNDLHAKNJJFBOVIYPESRWTHMTKCLJGMLNVAZBZOORCSFLZRFVICQSZWYDUJHTQUBUQVQWECIPAPZXNCLALCTPXMSWHYTFBYXWQCYTMWSUXDSRKQJUKIFKYSJYNFDKQZDEOMJVINYUVRGELANMVJZUAZJPHVBFCPDSFGBXUKEOWXEPHFKIIRDGVBGKAGMQAXGENLENZMYRKXFGALWHSZWGP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.032796080788878856);
    msg.setSource(27344U);
    msg.setSourceEntity(20U);
    msg.setDestination(21907U);
    msg.setDestinationEntity(54U);
    msg.lat = 0.6612713712932508;
    msg.lon = 0.9457660366334902;
    msg.speed = 0.6252727058805925;
    msg.speed_units = 214U;
    msg.limits = 140U;
    msg.max_depth = 0.8617998571283727;
    msg.min_alt = 0.709703287987386;
    msg.time_limit = 0.7498819046806173;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.12537043939773507;
    tmp_msg_0.lon = 0.39542225240818496;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("HWAZJVTYDGFJUTFCDMGBCCKLLRHKFPKEIVLGOJTKZAACTYLBSMFZFNZULJEENVBIQQJGQKPBQGAFTYUXRABSNMWMQITPJHFGINBXFSXVNIMRWRRCXDGBPPYSSWLCDKZ");
    msg.custom.assign("DFMQWFSDJZWFFYOUXXPYHKMVEQXCBMYNBBBYCTDZRHAKZTGTRYPCSSDDXSNRZQGITXLUMSRSORNVVXGRFJNCUMIIICGGZTNCYPNEWZAJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.3046240811658464);
    msg.setSource(51384U);
    msg.setSourceEntity(94U);
    msg.setDestination(27964U);
    msg.setDestinationEntity(135U);
    msg.lat = 0.1748938927735495;
    msg.lon = 0.9364382149640539;
    msg.speed = 0.33710450504966494;
    msg.speed_units = 177U;
    msg.limits = 178U;
    msg.max_depth = 0.2998825052754961;
    msg.min_alt = 0.19021017068629265;
    msg.time_limit = 0.6612218437339997;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.45288441866900886;
    tmp_msg_0.lon = 0.9076217234520693;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("RTCDPIGCAEDENYBYWBLHXUJTFMSOYBSNKFQZZWXKPBDRIZJTDBGVSXPRDSIZVQEAGFCZPOEKRFXTKISOFQSGPVUMLJOKPIYOCSNTZUFBMNYCDYZVGGRTGZHTDBGISHWQAMJINIKMNYNHCSXVYAWLLCLEUMDKRKVXAWRCMVXFHUPAEJGAQBXIJLUKYHJAE");
    msg.custom.assign("XCXWEPYJNOMASCTGVJOEEKLQVGIGRJGLKMGIKYIWJRSUWBEUHPOLMIXCEMXHZXWYDUHBUVCPQSUBSWHUTTAUJFZLRZBPJZBKSTZPDWCWFQMFVVKKDIFQVYDNVFELHANULTOJIYLBMTHFZHRKGAFUEEJLZPRMBKPDNVIRABACCYGZWEKGNPWCJXRRPHVIJSSYKHACB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.3406924392659145);
    msg.setSource(29129U);
    msg.setSourceEntity(74U);
    msg.setDestination(26231U);
    msg.setDestinationEntity(194U);
    msg.target.assign("ATJWWGYNMBIKOBVIVRAWSKUDCGGLSTDQYNCPXPJHERILIPPQZZYLCADRGXHGGQJWNFACVSEDTSUXSZOHSAMQBNIWCJZUUIKMYQKKQENHFDBMFXFQAYFSLMOLJBUMEAYMBDRHJZZMECFKPTCGJXCKIFONIVVEOWRVPSYCQWTXFXBHVIQHCPJNSZMLHIKNPOTNXBVHSRVUEFGFWXLEKOJRUODGOGPRWL");
    msg.max_speed = 0.2351702386029637;
    msg.speed_units = 176U;
    msg.lat = 0.9289224530931582;
    msg.lon = 0.7468363583768849;
    msg.z = 0.2246002185101399;
    msg.z_units = 97U;
    msg.custom.assign("KTIXXOHSGRJEEKUYWUOYMZPPKCMINGVQFDAYCPDQVOGKGDXFQZDFMAITGGXRGMLSLQKWFLYJPSNJTOMAMBONEWNHSDBLEZVHBECVFJBBWDQLHFVVITEUPXTCPZHPAZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.41803582114601);
    msg.setSource(18051U);
    msg.setSourceEntity(170U);
    msg.setDestination(64617U);
    msg.setDestinationEntity(220U);
    msg.target.assign("USUOZNPZCYBEDCQGMXWWBQCMTGJMBOSSQAPSJBZDKKBAXNHLSMIBWFJWZKXYEANPUKGGTDKWMJQOKZSPXHAXMRFMLWJHRAMFSCLYUFORIWOENRAVKYWMQRZBIEZXNVUJOCYGPVULZORRDEOTJJUGIWIHCTGKECFHTHLCNNGEDATQVGEKFYVBLPGAWYDHDCQBHZYJXSENNXFVZTIITU");
    msg.max_speed = 0.34490636821672993;
    msg.speed_units = 64U;
    msg.lat = 0.7572262095530562;
    msg.lon = 0.1837485386548533;
    msg.z = 0.3240744030250928;
    msg.z_units = 118U;
    msg.custom.assign("YCYRRUWTBSRHKEUDKVLWQDWXTDHJVYJSCHJRQHWDDIGQZDGWBTOYIVKMCEHLAMKEGVMZYGNPUTAOIMCIXOFDAKOABINILLIIOFWMUVFUVFOWDGNPZBTBIBRNBMFHGLMDMERX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.07606441107423645);
    msg.setSource(12402U);
    msg.setSourceEntity(165U);
    msg.setDestination(52139U);
    msg.setDestinationEntity(196U);
    msg.target.assign("TALJOTJFQNBHQULEKPZMQDKRNWPFXMIIQVTPCKUCXKYAGQOFTXMBBNYHEADDTXFVRCTLONTTJGYYPLTVYWPJNXJZVNGESHCVDYHSQNIXNGQKYOWRBIIXLIOZCDG");
    msg.max_speed = 0.2357501893984234;
    msg.speed_units = 67U;
    msg.lat = 0.10444223069679148;
    msg.lon = 0.771018114515927;
    msg.z = 0.9090473969943894;
    msg.z_units = 128U;
    msg.custom.assign("SDLIVRHHNMRCMTSYQNBUTQGMQJKPSBTNZKYIHKSMSYVRVEGZYAQWITLRXWGKHPQSVFFWOZJKZZMXZVEIRJOHKSCRDGLNMBLJHVCKCXQWCEHFFICNHYAZTSJP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.7213916380252064);
    msg.setSource(62473U);
    msg.setSourceEntity(106U);
    msg.setDestination(471U);
    msg.setDestinationEntity(196U);
    msg.timeout = 26963U;
    msg.lat = 0.3098799076023284;
    msg.lon = 0.8628956875424244;
    msg.speed = 0.19512597550954602;
    msg.speed_units = 110U;
    msg.custom.assign("EVHRVUUPZQUCJXSBDKDGPOMMBPGTRGQXNBVUKJANZUWVGKTHUNYJELPBHOOYMDZWRA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.49666739052628095);
    msg.setSource(2066U);
    msg.setSourceEntity(148U);
    msg.setDestination(31323U);
    msg.setDestinationEntity(18U);
    msg.timeout = 17147U;
    msg.lat = 0.09873842904776553;
    msg.lon = 0.7805247521197963;
    msg.speed = 0.3629056102776341;
    msg.speed_units = 83U;
    msg.custom.assign("UOAOWJZOYPLFLDHCVAMCMKVFQLXHKJTYLAPCZBPGPOJJQGYAIPNVGAUVOZXKHMWDKUETQLSXNTQNORMDDQXEJYXZAUROGTWPHTRMPIKYAOXQKUUUHUYIJIWISLTHVWLU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.6020487623875889);
    msg.setSource(40149U);
    msg.setSourceEntity(141U);
    msg.setDestination(61015U);
    msg.setDestinationEntity(122U);
    msg.timeout = 9319U;
    msg.lat = 0.24177222867922799;
    msg.lon = 0.7344754369669552;
    msg.speed = 0.10461312059333594;
    msg.speed_units = 202U;
    msg.custom.assign("YFHDJMBHIBEECENFCCUBZRCTUILX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.5966311777258992);
    msg.setSource(4422U);
    msg.setSourceEntity(87U);
    msg.setDestination(53042U);
    msg.setDestinationEntity(118U);
    msg.lat = 0.36316344048874616;
    msg.lon = 0.2762692330512999;
    msg.z = 0.8436206625388806;
    msg.z_units = 105U;
    msg.radius = 0.18652514836842693;
    msg.duration = 14008U;
    msg.speed = 0.9161661692867712;
    msg.speed_units = 78U;
    msg.popup_period = 21930U;
    msg.popup_duration = 16074U;
    msg.flags = 63U;
    msg.custom.assign("HGDWOURWEZEWWOTKNRKHVQJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.511342331306879);
    msg.setSource(40421U);
    msg.setSourceEntity(83U);
    msg.setDestination(39630U);
    msg.setDestinationEntity(48U);
    msg.lat = 0.42699879282757514;
    msg.lon = 0.8783137008026177;
    msg.z = 0.9226425000832429;
    msg.z_units = 230U;
    msg.radius = 0.5031972853304236;
    msg.duration = 21682U;
    msg.speed = 0.7131649134387796;
    msg.speed_units = 192U;
    msg.popup_period = 8070U;
    msg.popup_duration = 12152U;
    msg.flags = 215U;
    msg.custom.assign("GDLNGFRLXIZQZLEXYHQWVMZXFWVPBYFKMPGOYPDGUJCNYIRBAFBXLOQVACJTLCUFBPQTBPQFSKCTMNZUKSJAKEHKNXSQVPRBXDIRPYBEFNICECIN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.9551996176774524);
    msg.setSource(39501U);
    msg.setSourceEntity(140U);
    msg.setDestination(53462U);
    msg.setDestinationEntity(198U);
    msg.lat = 0.9390774451047783;
    msg.lon = 0.9133559396160355;
    msg.z = 0.06066949911723052;
    msg.z_units = 71U;
    msg.radius = 0.6264608202440946;
    msg.duration = 4930U;
    msg.speed = 0.885935910351707;
    msg.speed_units = 112U;
    msg.popup_period = 32126U;
    msg.popup_duration = 6151U;
    msg.flags = 87U;
    msg.custom.assign("UVTVGASLCIYTQYGBJOYMIPWLPSCXBDGJUYRLWHBRVKYHCZZTJCUJPDXRTEOIBAHISXKUIAZRWMZLBCZHEFAFJJTWAPVOEOYPKXGXVZLMBFKZUKSYUWNDXNYFWTUVSJQDKHEQCXSUHTKLUFCJBFSRWFFGTQQLVQTNZDILMPGABEXGENTKCNHWOVWQNDOGKXZPAOSWIJASKOSLCHERNPMPENIGORDJHHYZQPNA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.8742890035521848);
    msg.setSource(51995U);
    msg.setSourceEntity(182U);
    msg.setDestination(40150U);
    msg.setDestinationEntity(165U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.031890264349626496);
    msg.setSource(9144U);
    msg.setSourceEntity(31U);
    msg.setDestination(1118U);
    msg.setDestinationEntity(214U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.6953580497160409);
    msg.setSource(8561U);
    msg.setSourceEntity(249U);
    msg.setDestination(10882U);
    msg.setDestinationEntity(237U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.17860402767708417);
    msg.setSource(29286U);
    msg.setSourceEntity(204U);
    msg.setDestination(27451U);
    msg.setDestinationEntity(64U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("TJDLIDZNEVBI");
    IMC::FollowTrajectory tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 29914U;
    tmp_tmp_msg_0_0.lat = 0.12326137589946773;
    tmp_tmp_msg_0_0.lon = 0.7636837853505574;
    tmp_tmp_msg_0_0.z = 0.7944892932060563;
    tmp_tmp_msg_0_0.z_units = 212U;
    tmp_tmp_msg_0_0.speed = 0.8081511647314243;
    tmp_tmp_msg_0_0.speed_units = 58U;
    IMC::TrajectoryPoint tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.x = 0.6611681888436595;
    tmp_tmp_tmp_msg_0_0_0.y = 0.5117523587694908;
    tmp_tmp_tmp_msg_0_0_0.z = 0.4755172391554261;
    tmp_tmp_tmp_msg_0_0_0.t = 0.6736197990586772;
    tmp_tmp_msg_0_0.points.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.custom.assign("HVLHECYEWXKVGSOBWZLSBSPMMKAVAQHTONRIFQPVIHCGGOYJTBWFAJVUYWGOUILJRTCZDZMKZCUAQQZASJB");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::EulerAnglesDelta tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.time = 0.019492189035852148;
    tmp_tmp_msg_0_1.x = 0.6635906258260346;
    tmp_tmp_msg_0_1.y = 0.9855509613608975;
    tmp_tmp_msg_0_1.z = 0.7430037168613366;
    tmp_tmp_msg_0_1.timestep = 0.5531046072840642;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    IMC::RelativeHumidity tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.value = 0.8163973003573646;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_2);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.7084206597608654);
    msg.setSource(44345U);
    msg.setSourceEntity(127U);
    msg.setDestination(55218U);
    msg.setDestinationEntity(0U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("EXTIAKUTTFOKTSQTPNMLPFJLUBVOZFKRCGRBYZOUXAPDWPKMQWHSUUERGUJROYHVYSMQAPTYMCBJIMVFQDYXGZNWZIFIWCFOTUMHCNPMJRAENDQWMERPCEGVTBRIXLDDDSVLAXGKXDFEOVXARZ");
    IMC::Launch tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 50297U;
    tmp_tmp_msg_0_0.lat = 0.06668569914051126;
    tmp_tmp_msg_0_0.lon = 0.840386069964539;
    tmp_tmp_msg_0_0.z = 0.41946136204760587;
    tmp_tmp_msg_0_0.z_units = 110U;
    tmp_tmp_msg_0_0.speed = 0.5251951497270051;
    tmp_tmp_msg_0_0.speed_units = 46U;
    tmp_tmp_msg_0_0.custom.assign("KJUWCTFBGRKLXHMPIZRDAVLNYSTGXTACEZXWPKXR");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::EstimatedFreq tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.7298473768000278;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.15241570124778892);
    msg.setSource(37445U);
    msg.setSourceEntity(136U);
    msg.setDestination(22462U);
    msg.setDestinationEntity(140U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("EVKCRPXQKKWXTMQZZEBQMJLHDRPIOAMAYQJICVARVJOMKJGNZRLNCHZQEMPISBWOTPBXIXNWXAQENUFSBMILLXOHHLRYESVTTYOQJZMIKOEXSSDSFAANMDKAAWOUWGFDRGCGLEISWKJNTRLLPPXVTWHVGUHBDDGVWRGODKQJTMAVFYXRPZSNCQGUBFUYFUEEBVTTJDBORJJSNUCWCZLNBCGDFBZUMZYCKGFLTFHYIKH");
    IMC::CompassCalibration tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 52940U;
    tmp_tmp_msg_0_0.lat = 0.030619467593516525;
    tmp_tmp_msg_0_0.lon = 0.7020886564150409;
    tmp_tmp_msg_0_0.z = 0.35427832289586847;
    tmp_tmp_msg_0_0.z_units = 99U;
    tmp_tmp_msg_0_0.pitch = 0.3663907309374277;
    tmp_tmp_msg_0_0.amplitude = 0.6600592632793165;
    tmp_tmp_msg_0_0.duration = 36357U;
    tmp_tmp_msg_0_0.speed = 0.9752580670065276;
    tmp_tmp_msg_0_0.speed_units = 81U;
    tmp_tmp_msg_0_0.radius = 0.6070011235967312;
    tmp_tmp_msg_0_0.direction = 243U;
    tmp_tmp_msg_0_0.custom.assign("APOOAMVJMMORJIJJKVBSLENEWUGBJCZCMSRIRLHLYMFNFGPIAGXBCKHPOZTWSZFBYGPB");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::VehicleOperationalLimits tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.op = 79U;
    tmp_tmp_msg_0_1.speed_min = 0.39603526348639806;
    tmp_tmp_msg_0_1.speed_max = 0.9609440686586171;
    tmp_tmp_msg_0_1.long_accel = 0.2510947290051302;
    tmp_tmp_msg_0_1.alt_max_msl = 0.4144152932693843;
    tmp_tmp_msg_0_1.dive_fraction_max = 0.006373949447865623;
    tmp_tmp_msg_0_1.climb_fraction_max = 0.34344756438198565;
    tmp_tmp_msg_0_1.bank_max = 0.008169886884125566;
    tmp_tmp_msg_0_1.p_max = 0.6781641121463858;
    tmp_tmp_msg_0_1.pitch_min = 0.18389911109586887;
    tmp_tmp_msg_0_1.pitch_max = 0.3498517539475936;
    tmp_tmp_msg_0_1.q_max = 0.9257667444253285;
    tmp_tmp_msg_0_1.g_min = 0.36609936220855954;
    tmp_tmp_msg_0_1.g_max = 0.8383105224647671;
    tmp_tmp_msg_0_1.g_lat_max = 0.8216895972409243;
    tmp_tmp_msg_0_1.rpm_min = 0.2919335865275511;
    tmp_tmp_msg_0_1.rpm_max = 0.8385763541701822;
    tmp_tmp_msg_0_1.rpm_rate_max = 0.02993549643371196;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.5514286844474274);
    msg.setSource(50032U);
    msg.setSourceEntity(219U);
    msg.setDestination(25618U);
    msg.setDestinationEntity(183U);
    msg.timeout = 9459U;
    msg.lat = 0.42994848883696435;
    msg.lon = 0.5070621923587251;
    msg.z = 0.28445678464981194;
    msg.z_units = 127U;
    msg.speed = 0.46857550367017864;
    msg.speed_units = 26U;
    msg.bearing = 0.04651580018548307;
    msg.width = 0.4073863219097774;
    msg.direction = 213U;
    msg.custom.assign("UDTTEWEIIBUGRHAKCFHDOUJLLKRDXGTQCJEWVHNZJZYRMLIMDENINESAXJPKDBSRLRJYPOAOWQVMAPFULQOPWYHFIKPZJJUVLTHLNDNNBIYJEFUKEPRKXPURDNDBGVTFMSFYDQJCMNPWWVLBZYZEQGWJA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.6961197723610428);
    msg.setSource(21080U);
    msg.setSourceEntity(241U);
    msg.setDestination(34133U);
    msg.setDestinationEntity(179U);
    msg.timeout = 8506U;
    msg.lat = 0.5728185458073004;
    msg.lon = 0.6213869037776647;
    msg.z = 0.2763222737601888;
    msg.z_units = 116U;
    msg.speed = 0.6158774868293806;
    msg.speed_units = 98U;
    msg.bearing = 0.789212523106268;
    msg.width = 0.116289660583902;
    msg.direction = 124U;
    msg.custom.assign("LWLABJLVQGWSFFOKAFZUYDTHBMUTDXYKTJWTGUEMAWZMCGXNGBSGAKHDQIVJTLPIKANSXOECDSVZODPYBMVTZJYCWRVXSHTFKHJRBAFRFPKDCO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.35780793430730473);
    msg.setSource(33325U);
    msg.setSourceEntity(120U);
    msg.setDestination(64487U);
    msg.setDestinationEntity(108U);
    msg.timeout = 32910U;
    msg.lat = 0.8346503659130116;
    msg.lon = 0.9497873410858347;
    msg.z = 0.7875931482340839;
    msg.z_units = 201U;
    msg.speed = 0.2260100169375936;
    msg.speed_units = 113U;
    msg.bearing = 0.6140250790683829;
    msg.width = 0.14255246385098053;
    msg.direction = 144U;
    msg.custom.assign("ZCOFGTWDRAAHAQQDCCWYDOZLPEJQBEQSSBHTMXXILYEBILBPJXHEIHLCSMHLMYFGDSKETOJGRGVQWGSTVFFQRPZPNRSKPVAAIUSELTIVDOVZKRCTVXKJRCRWOHCOTICUQNKUGFEKZVIJJWWMUDZEXHBKHNUPWCLEBHKOPMAEZRSKYQPVTVPXJGBTFLCFDFAOTMZDOU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.7962543653201857);
    msg.setSource(10239U);
    msg.setSourceEntity(118U);
    msg.setDestination(14728U);
    msg.setDestinationEntity(79U);
    msg.op_mode = 145U;
    msg.error_count = 28U;
    msg.error_ents.assign("EKKBKZUCHQXVPOQDITFAFMBVLRNOHIGJINZXRWATNNGOZRFJNUABOQKYTTRISZDTVIYGWYZ");
    msg.maneuver_type = 52747U;
    msg.maneuver_stime = 0.7685728830728434;
    msg.maneuver_eta = 46587U;
    msg.control_loops = 1674144437U;
    msg.flags = 55U;
    msg.last_error.assign("NWNZSURULVMJMTURCACLMDHMHHENLTAFJNWXPZVHYMESEBLTYGCZBLLXECZMVAWGTUQXQGPCUZRVYMSNOJYVPRDSCYWKHCQTKWGVBPFPKAVCQJRTCDNFZZWKVTEXJPKRHLGIOLAKWITXXZOQEPADKBKIXTOGZOY");
    msg.last_error_time = 0.3637945510306003;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.23079650786362516);
    msg.setSource(44166U);
    msg.setSourceEntity(71U);
    msg.setDestination(50119U);
    msg.setDestinationEntity(57U);
    msg.op_mode = 69U;
    msg.error_count = 192U;
    msg.error_ents.assign("XVWBTEMSWBXHZEJLUKVMEYVDALFGAQJITNRBZCBNWWHUVGQCJRXJVKLCGPHSMMTZANHUBWKKYTWLOJDWHGMIRSXVGDPYRTRSIHPVPEDNKWQGBECSROZAIQOZKIWKUQICFEKIOYDYFQJTUQEXFMDOHJLRIPALVINMSZZXZYJALDAEGDYZCBRXCDUAUHFUNMNPSTXLEOFOVCQGTJXPS");
    msg.maneuver_type = 8534U;
    msg.maneuver_stime = 0.08502959513859454;
    msg.maneuver_eta = 35429U;
    msg.control_loops = 3757082552U;
    msg.flags = 136U;
    msg.last_error.assign("VWJWFFJTIOMAISLTLHEPPZGDRMTNXHOQMYPSOLONRJPYFUVDKGRUTENINLILQWESYDYHUBAGKCVWI");
    msg.last_error_time = 0.8565892370404047;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.8153575539393142);
    msg.setSource(3903U);
    msg.setSourceEntity(68U);
    msg.setDestination(52608U);
    msg.setDestinationEntity(154U);
    msg.op_mode = 87U;
    msg.error_count = 54U;
    msg.error_ents.assign("ZZQDWEQBBKPITUQHVIFESUBUCYFFCPZQVUCQRZZEIRPXMIHCOBPPYEPTWVUYVLBXIYRMVGPUAGBTRMFOZCSMFKMHHDSBYRMAJMMJEWAFRWXJLLNCLHDFJYXGLCHNWQRWTBKCSKCJAZNPJNWOGDBPJTRKDVHFJYZWZCHNNSDHSYTOIGFBXQKXIXUEEAHRVLSOTLINKDNVXGAVIQGTEMLNDQGGREDKSTA");
    msg.maneuver_type = 3898U;
    msg.maneuver_stime = 0.7633084267794892;
    msg.maneuver_eta = 1646U;
    msg.control_loops = 584605019U;
    msg.flags = 80U;
    msg.last_error.assign("PLTENGIKRGZYVHVCYIFYQFDQYZYANUQFCJXFOJHRSMBBBMPKUKEJASFNVJWPTSKAYXZTLQNHKAVOWVMXLRQCHOHDFUWNPYCGTGLKBYRGDNOEJVLISXTOVISMZINFUXTHJPDRWFNCMLNYWDQDJOAGZAFKCEFYBIUWAXXSNQRJPBRUPUOMHXHLPTIZWEBESIMTBEUATQLT");
    msg.last_error_time = 0.8499553357316769;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.16528452291886353);
    msg.setSource(54938U);
    msg.setSourceEntity(46U);
    msg.setDestination(27159U);
    msg.setDestinationEntity(167U);
    msg.type = 237U;
    msg.request_id = 49610U;
    msg.command = 166U;
    IMC::Takeoff tmp_msg_0;
    tmp_msg_0.lat = 0.896453085053171;
    tmp_msg_0.lon = 0.958594828388286;
    tmp_msg_0.z = 0.2499581556487922;
    tmp_msg_0.z_units = 151U;
    tmp_msg_0.speed = 0.5456655735929289;
    tmp_msg_0.speed_units = 27U;
    tmp_msg_0.takeoff_pitch = 0.910330893248218;
    tmp_msg_0.custom.assign("RVHPDGEOPFJTEBZQC");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 43418U;
    msg.info.assign("VQPRRGYRGZLUITLXTSBNIXBACZNRMZZPJYWYRWDYKEIYQCKVJIZGALRKTWSKQMNKZLTSDWLYIOEYU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.5180642480313322);
    msg.setSource(2213U);
    msg.setSourceEntity(140U);
    msg.setDestination(53283U);
    msg.setDestinationEntity(39U);
    msg.type = 76U;
    msg.request_id = 38306U;
    msg.command = 79U;
    IMC::Sample tmp_msg_0;
    tmp_msg_0.timeout = 26344U;
    tmp_msg_0.lat = 0.18451645386866777;
    tmp_msg_0.lon = 0.16161399601483084;
    tmp_msg_0.z = 0.22045548080569155;
    tmp_msg_0.z_units = 102U;
    tmp_msg_0.speed = 0.06818251141870046;
    tmp_msg_0.speed_units = 254U;
    tmp_msg_0.syringe0 = 103U;
    tmp_msg_0.syringe1 = 0U;
    tmp_msg_0.syringe2 = 226U;
    tmp_msg_0.custom.assign("ESYSBMBGHCPRAYTJXXUDZODVNVLBWBBWUSJGTSOLFEJCOVHXOFGWZ");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 64133U;
    msg.info.assign("ESXHVWEIYODHQITWKPYCEFJIZQGCGBLWKXLPXLCWUUTTGXJCNBNMHUOKJPKFONSVOYLGMVZCRZVSRAVZXDBNXWMPGRB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.4452146340771077);
    msg.setSource(15337U);
    msg.setSourceEntity(178U);
    msg.setDestination(50676U);
    msg.setDestinationEntity(41U);
    msg.type = 71U;
    msg.request_id = 37278U;
    msg.command = 4U;
    IMC::StationKeeping tmp_msg_0;
    tmp_msg_0.lat = 0.3170924561732402;
    tmp_msg_0.lon = 0.5318078199243262;
    tmp_msg_0.z = 0.12053073487473642;
    tmp_msg_0.z_units = 234U;
    tmp_msg_0.radius = 0.4811102579732891;
    tmp_msg_0.duration = 41491U;
    tmp_msg_0.speed = 0.21145541890576136;
    tmp_msg_0.speed_units = 31U;
    tmp_msg_0.custom.assign("TJSAAKNWFHLRFSHIMPGOMAELQBHFFGKBULWRYPKLYKMVSOIAPYXZXUXLQIZBVKWEDDQIJZFT");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 14069U;
    msg.info.assign("QMPCUNNPSJQEJWPOZXOODXSGHXWWZWRUCYLXJFMYQVERDKBMFBDVLFEFDQKAIK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.7951771558367138);
    msg.setSource(64313U);
    msg.setSourceEntity(158U);
    msg.setDestination(45646U);
    msg.setDestinationEntity(23U);
    msg.command = 249U;
    msg.entities.assign("KDRJJHXKXBEMJLJHTSMDHBQXRLXFJFMWHDIQSKCWWYZUJCFQKREXPHDUYGRSNCYGTZPSQYPWRQJJAQJCQMXEFGFZLAUKZNZJTXPYMIBQCUDKGNFPNKSDFSQWVSSRGKDIGWEEVTATWMPCIZDPIYZEGOHDVGZHYLKVRYCYASUNIUAVAHLABOBAMOXCCWGESTIDHVVYOUPKBXENWOFZVNOCWETLXBVOPO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.3098953076262606);
    msg.setSource(16899U);
    msg.setSourceEntity(213U);
    msg.setDestination(22815U);
    msg.setDestinationEntity(54U);
    msg.command = 93U;
    msg.entities.assign("OTXBYLNBOOWAUCCHZXBYQBCSXUCOTSSWKUZSPKYUVNSHFMGLFNSCQRCHDIWOXHNFDFBFFARYQZTAFRDUQBJGRRAJLTJTBRFYHIJMKWEPLHWZLMYMJAIVTLDXEKESEKDAEGEGPZAQJNPFUVPOCDXZGWKDGRXZXNGKWVIEJIVYUGRNRIMLQBKUPSDGDWOONZERZZIITJLYVMXQAJHMHXCGINMPSHUBYCENQTVWQTIAPYVOATVBEMMKPFJPDLSV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.16779666739416688);
    msg.setSource(38523U);
    msg.setSourceEntity(243U);
    msg.setDestination(54580U);
    msg.setDestinationEntity(195U);
    msg.command = 53U;
    msg.entities.assign("UAADVQBEJHHPYAITCFPXKULJMRXEPMJQJUDONVRGMXOYLUAKFCQNYVIKRTWEDSAKDXVBIKSOOSGLDGXDBMQCFAQILOIGFORETYAQRLXEZDHNLFMNWZMRHPPGXBBPZIIOLSVRJUYSFTCNUZWBMYXKMKBNEYFSONVMHTJGJRNULTVUHPPUKLVXHOCGCZUHHCZIZWGSLTAPFCCQPBGEQTDQABBWXTVDNJZI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.6003798740868443);
    msg.setSource(44651U);
    msg.setSourceEntity(230U);
    msg.setDestination(46623U);
    msg.setDestinationEntity(113U);
    msg.mcount = 208U;
    msg.mnames.assign("YFAPPXFJHKBVCXCOSPDEMOGCGPBZLGTEVKSTUWZQXHDWMQLNDISWUQRMEZINDHEZMQQETRXIRKTVWBAITLSSRRLBWWKATQTCYEF");
    msg.ecount = 44U;
    msg.enames.assign("JYSOGFSDQWWLRAWYQRNSYPDGOSPMTQOJYHWUEPLSOVPGSKQVRJPWLKXJREFUOLTQHILVXUZUKGTBHTOJPECAULYRXHQFL");
    msg.ccount = 149U;
    msg.cnames.assign("PPUWWUMXAOBR");
    msg.last_error.assign("VAWZRMNRMPHPTEDBBIAHLSUIVEPDTBUVEHZZEPSJPKDVHTKAIUIQYQHHZXL");
    msg.last_error_time = 0.6447289743085591;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.9409424206986041);
    msg.setSource(47209U);
    msg.setSourceEntity(208U);
    msg.setDestination(42298U);
    msg.setDestinationEntity(124U);
    msg.mcount = 203U;
    msg.mnames.assign("FOSBVSIXGMEYOBWLTBJFHKFUEUXMBEJHKBRFDULPHBTHDBQKIPNRUPIIMWGNTXWHOPCNEQFGRHWBIHTFRKUYOYAIZXJRESIZSGUAGNKWLCYYJYZDZIQVQZEZSSAJQAMYLLZMTAXCUSGWKVCCL");
    msg.ecount = 159U;
    msg.enames.assign("HULNZALHHYARGIWSJOVUQJCMFXBWGZRRYESZQSEIISYFWGLHKSSTCVGOMFXPTHPTQEIGRVAQTPYFXUVRRDDOCCTZHIL");
    msg.ccount = 245U;
    msg.cnames.assign("KYCQKWZNRLVKYJPGFGYZUFSBJIQXZABYOPQYQSDEYVKOAOGMTPPSJNGMSKPVSBXQTTJDEDIXEQDVCWDXDGNAEGQTTHHUVUZKHWFHRRNPMLCECZRINEJYNQYGTUO");
    msg.last_error.assign("LGSGJFIXSJTIWCNBAXKDCBVORYUTDISZEPAUCOPYJVTETCTULGEMVHJCIXOTKUXDIPFXAEXOHLDDVILNVPBKGPOTWKZXRONRMDWUZEKQMQSJYJQIZKGUSSWYLRBDYUMBQEMRMPZYU");
    msg.last_error_time = 0.5300521568766576;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.6724720641577314);
    msg.setSource(54157U);
    msg.setSourceEntity(157U);
    msg.setDestination(51644U);
    msg.setDestinationEntity(94U);
    msg.mcount = 211U;
    msg.mnames.assign("RKGNIETJSBNPVWUKARTZUBOCJHWZOIJLJHLECKQZAFIAFHVWMNYGYWIMN");
    msg.ecount = 149U;
    msg.enames.assign("PJPDHNJMPFLGFEXCMIUFRIGLMLXFKLHQSIDZQMHQSEDCSOYYTIBLRRSLWYZNNHOSUOAVKQZENKJONCAXAPWMYDUWWTWBJJHJRDKQNKWCQTYYPUGFEEYJTSWXGGCGBJCKHDBGOPCUGSAAOIRTPNEGBIPLZXMKRZOBUTDHYJVBSQOOIKADWUKBVSNZLPBZZGMETZTMXAESIANVXEYVZCOQRIHRWNKFUVCYXHETJ");
    msg.ccount = 1U;
    msg.cnames.assign("KKPDXMFORQHWCYKCRFLICGZHICIGEDYRAPOMZKSQKBFBTHXLAVZQSOQUKMXYGBKXBJMYETNYERWJLUWPHVUHCCLPXJVMETTMZOVZCQGBQQYFVVAOFBMDWLPR");
    msg.last_error.assign("PHQGQZXXEUOUZRGNNTOTMDJQSGZMENMRTJNEWBBTHZCFMOHGDJOALNAAYIWHDJAUWLGPCDTRXDPXFIZNVOEJMIZNSNUKBSCVJFMKCHOFVVWJSXPUWLLIYUBMFFURCIXAHYKPEYXKCVVWFLLDTBUSAVKQKJHBWLYIJPVQTDWZUQCZUWTFQTXRI");
    msg.last_error_time = 0.3398936744878538;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.01767224848405957);
    msg.setSource(27837U);
    msg.setSourceEntity(8U);
    msg.setDestination(7455U);
    msg.setDestinationEntity(72U);
    msg.mask = 39U;
    msg.max_depth = 0.7653163679040212;
    msg.min_altitude = 0.17878037761867682;
    msg.max_altitude = 0.7927800379604933;
    msg.min_speed = 0.07904604926403025;
    msg.max_speed = 0.8800067782261346;
    msg.max_vrate = 0.7263078175632316;
    msg.lat = 0.08621394423095075;
    msg.lon = 0.44154734136717666;
    msg.orientation = 0.6409031032334916;
    msg.width = 0.16868324000681012;
    msg.length = 0.36666094265905214;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.20728382296338255);
    msg.setSource(4089U);
    msg.setSourceEntity(59U);
    msg.setDestination(53680U);
    msg.setDestinationEntity(186U);
    msg.mask = 62U;
    msg.max_depth = 0.2477634603791824;
    msg.min_altitude = 0.47376944479159555;
    msg.max_altitude = 0.708306544571355;
    msg.min_speed = 0.36265671729489524;
    msg.max_speed = 0.9092988425419221;
    msg.max_vrate = 0.1757930995066297;
    msg.lat = 0.792295337701385;
    msg.lon = 0.15081243168377367;
    msg.orientation = 0.1284585819713715;
    msg.width = 0.4268525072129469;
    msg.length = 0.46096881660471767;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.6188507731385939);
    msg.setSource(3117U);
    msg.setSourceEntity(35U);
    msg.setDestination(32066U);
    msg.setDestinationEntity(185U);
    msg.mask = 175U;
    msg.max_depth = 0.9239412730690204;
    msg.min_altitude = 0.27209377822328873;
    msg.max_altitude = 0.268281408283384;
    msg.min_speed = 0.48003454761408126;
    msg.max_speed = 0.7483656205608946;
    msg.max_vrate = 0.03883152497843401;
    msg.lat = 0.23551443387821436;
    msg.lon = 0.08354505600450146;
    msg.orientation = 0.8234276736063831;
    msg.width = 0.7501805982979505;
    msg.length = 0.04530306438585019;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.4764946879021448);
    msg.setSource(46969U);
    msg.setSourceEntity(86U);
    msg.setDestination(35578U);
    msg.setDestinationEntity(153U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.8928474200541504);
    msg.setSource(38982U);
    msg.setSourceEntity(214U);
    msg.setDestination(61728U);
    msg.setDestinationEntity(106U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.32366124176592037);
    msg.setSource(42304U);
    msg.setSourceEntity(85U);
    msg.setDestination(34794U);
    msg.setDestinationEntity(70U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.670302393093061);
    msg.setSource(50508U);
    msg.setSourceEntity(201U);
    msg.setDestination(50082U);
    msg.setDestinationEntity(201U);
    msg.duration = 41137U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.23204036055067134);
    msg.setSource(12197U);
    msg.setSourceEntity(37U);
    msg.setDestination(18158U);
    msg.setDestinationEntity(112U);
    msg.duration = 26103U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.7959157576347509);
    msg.setSource(19468U);
    msg.setSourceEntity(122U);
    msg.setDestination(34974U);
    msg.setDestinationEntity(70U);
    msg.duration = 37740U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.6587900814116859);
    msg.setSource(5679U);
    msg.setSourceEntity(118U);
    msg.setDestination(56261U);
    msg.setDestinationEntity(218U);
    msg.enable = 51U;
    msg.mask = 3292502153U;
    msg.scope_ref = 3745259559U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.648841142952899);
    msg.setSource(16874U);
    msg.setSourceEntity(124U);
    msg.setDestination(28960U);
    msg.setDestinationEntity(18U);
    msg.enable = 152U;
    msg.mask = 3338777428U;
    msg.scope_ref = 3666237486U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.35002870346519843);
    msg.setSource(9675U);
    msg.setSourceEntity(168U);
    msg.setDestination(55176U);
    msg.setDestinationEntity(35U);
    msg.enable = 20U;
    msg.mask = 3750814641U;
    msg.scope_ref = 4064077136U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.9012025906542668);
    msg.setSource(9042U);
    msg.setSourceEntity(19U);
    msg.setDestination(25976U);
    msg.setDestinationEntity(123U);
    msg.medium = 211U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.49366635050914154);
    msg.setSource(39878U);
    msg.setSourceEntity(165U);
    msg.setDestination(6619U);
    msg.setDestinationEntity(218U);
    msg.medium = 76U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.6446133107599069);
    msg.setSource(12650U);
    msg.setSourceEntity(11U);
    msg.setDestination(52638U);
    msg.setDestinationEntity(11U);
    msg.medium = 252U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.18697170789610784);
    msg.setSource(474U);
    msg.setSourceEntity(116U);
    msg.setDestination(61964U);
    msg.setDestinationEntity(35U);
    msg.value = 0.28050540426118153;
    msg.type = 45U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.13233496029783076);
    msg.setSource(5600U);
    msg.setSourceEntity(17U);
    msg.setDestination(19921U);
    msg.setDestinationEntity(135U);
    msg.value = 0.5675677379119131;
    msg.type = 56U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.5591620375188144);
    msg.setSource(19265U);
    msg.setSourceEntity(167U);
    msg.setDestination(56661U);
    msg.setDestinationEntity(5U);
    msg.value = 0.2503333200261627;
    msg.type = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.9138501281174413);
    msg.setSource(56018U);
    msg.setSourceEntity(71U);
    msg.setDestination(25274U);
    msg.setDestinationEntity(38U);
    msg.possimerr = 0.08427376332057945;
    msg.converg = 0.9109734354332989;
    msg.turbulence = 0.7597018784564695;
    msg.possimmon = 46U;
    msg.commmon = 222U;
    msg.convergmon = 249U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.48688695063550536);
    msg.setSource(3741U);
    msg.setSourceEntity(167U);
    msg.setDestination(59263U);
    msg.setDestinationEntity(240U);
    msg.possimerr = 0.3328513771882471;
    msg.converg = 0.037913044635878745;
    msg.turbulence = 0.4865303774710016;
    msg.possimmon = 86U;
    msg.commmon = 88U;
    msg.convergmon = 125U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.8215843805172324);
    msg.setSource(64074U);
    msg.setSourceEntity(121U);
    msg.setDestination(55537U);
    msg.setDestinationEntity(138U);
    msg.possimerr = 0.5180270618542614;
    msg.converg = 0.780548560544342;
    msg.turbulence = 0.7219260817213276;
    msg.possimmon = 102U;
    msg.commmon = 161U;
    msg.convergmon = 156U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.40436167442046234);
    msg.setSource(34479U);
    msg.setSourceEntity(42U);
    msg.setDestination(36857U);
    msg.setDestinationEntity(73U);
    msg.autonomy = 124U;
    msg.mode.assign("UFKUHPRBOBHGGSCUJGTURSXWGCSFWBJZMJEGZDXWFSLXMDUUDGPIELRAHEYOIKIZIEAOKYJYPCYTJGWBRLPVKVVQECRQJPVWDVNZANDFMVQOTQDQMJIBCASVCDFJGAGJNQXEBYACQKHRYSHHOIVSTTWNVPRWNXNXLTXHZWFYYAKABZUMTHYLGECFAXWFOHQMSAYEMZPTIFKMBUIDWILLOZSQZCXLXEKTZKNEQPBMNFB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.9208242874239433);
    msg.setSource(64715U);
    msg.setSourceEntity(227U);
    msg.setDestination(51585U);
    msg.setDestinationEntity(5U);
    msg.autonomy = 22U;
    msg.mode.assign("QTHWCVNWNBAAUGLRKFCBOHUVUKHYMHCKLTMIOZIWPUUDOCPXJERIJXTMHGJWGVCZAKZYBEBAEUTMRTLDGDBSYJSIICOPR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.8137278291757594);
    msg.setSource(8589U);
    msg.setSourceEntity(240U);
    msg.setDestination(1968U);
    msg.setDestinationEntity(52U);
    msg.autonomy = 78U;
    msg.mode.assign("KHJMMBLYWZUYQPSQBEKFRXVRHCSGZUKSYPHMQRQKNNVNTDWDLMEODBYTUJZJEIKJJBEOXPFIOSBJCISVRTWNKXWUEKGZSSQDECKPLTVLWSDAEDFQFGDXHSZPZEJHYBOGOMYXPZOOURTRGOTIMUIHU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.6921187809155703);
    msg.setSource(42554U);
    msg.setSourceEntity(12U);
    msg.setDestination(52010U);
    msg.setDestinationEntity(8U);
    msg.type = 31U;
    msg.op = 174U;
    msg.possimerr = 0.5301482215537097;
    msg.converg = 0.09554222415284586;
    msg.turbulence = 0.8516101233547585;
    msg.possimmon = 126U;
    msg.commmon = 89U;
    msg.convergmon = 61U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.3766854171401972);
    msg.setSource(64764U);
    msg.setSourceEntity(104U);
    msg.setDestination(45576U);
    msg.setDestinationEntity(254U);
    msg.type = 129U;
    msg.op = 88U;
    msg.possimerr = 0.1259160764516729;
    msg.converg = 0.038470825742100256;
    msg.turbulence = 0.7977652364037462;
    msg.possimmon = 176U;
    msg.commmon = 123U;
    msg.convergmon = 169U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.8168736921519271);
    msg.setSource(15823U);
    msg.setSourceEntity(86U);
    msg.setDestination(21606U);
    msg.setDestinationEntity(118U);
    msg.type = 21U;
    msg.op = 105U;
    msg.possimerr = 0.32126037033828225;
    msg.converg = 0.85073006280096;
    msg.turbulence = 0.9105072826388357;
    msg.possimmon = 55U;
    msg.commmon = 231U;
    msg.convergmon = 253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.18292786903774294);
    msg.setSource(7656U);
    msg.setSourceEntity(41U);
    msg.setDestination(39171U);
    msg.setDestinationEntity(175U);
    msg.op = 109U;
    msg.comm_interface = 246U;
    msg.period = 31330U;
    msg.sys_dst.assign("URSVGLHONTCZMYXMPHAIPKXBEGIWZNXLYSXSJGBRKUBFSFHYPJMIWLFZAZOMWRWOGOPJYPTQXDLMELTWRHZRYHPVBAPWNPGVJGKLBEVHLYWXJCLKQMDJJUWCOEUCNGECTSQVRYZVQPWOUXRNAMEDSUNNRSXHTMDHDUDATOQCHUBDQPXOSZYBIQIK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.5972311645996571);
    msg.setSource(13740U);
    msg.setSourceEntity(102U);
    msg.setDestination(52516U);
    msg.setDestinationEntity(172U);
    msg.op = 207U;
    msg.comm_interface = 156U;
    msg.period = 25016U;
    msg.sys_dst.assign("YVUMVXJVKFZUCHVNJFQNEJQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.8225322705444439);
    msg.setSource(5900U);
    msg.setSourceEntity(48U);
    msg.setDestination(58151U);
    msg.setDestinationEntity(13U);
    msg.op = 230U;
    msg.comm_interface = 117U;
    msg.period = 5914U;
    msg.sys_dst.assign("PWASSZAYLPFGJYXQVGKYLFDEZKBMKVOELNHIIUYBTQRJQWLYBJQWTBUVHFNANNIGXJVCRPJWXNICJUUHTFHDPYFPEVJDSHNWLXJFCZTEIKJHZGETVNWKOCVKUBZFNQAHPTOMXFHRCFELRGOEWYUMTDGRQDUHVGQCIXEMWVGDURZMRANILAMOYQXBZAIRIKBCAVWSKPRJDQLPNXEZXEWOCLICOBAMRDODTKGMMYAFUHPYLZCQSS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.7710250836046251);
    msg.setSource(26126U);
    msg.setSourceEntity(223U);
    msg.setDestination(36565U);
    msg.setDestinationEntity(165U);
    msg.stime = 3607991131U;
    msg.latitude = 0.21363301123965528;
    msg.longitude = 0.04397089125767617;
    msg.altitude = 26748U;
    msg.depth = 34877U;
    msg.heading = 60653U;
    msg.speed = 10539;
    msg.fuel = -55;
    msg.exec_state = -114;
    msg.plan_checksum = 749U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.12655744362887456);
    msg.setSource(4967U);
    msg.setSourceEntity(32U);
    msg.setDestination(49942U);
    msg.setDestinationEntity(12U);
    msg.stime = 851044847U;
    msg.latitude = 0.3755018750519197;
    msg.longitude = 0.16519290680566212;
    msg.altitude = 50142U;
    msg.depth = 37197U;
    msg.heading = 1552U;
    msg.speed = -31544;
    msg.fuel = -86;
    msg.exec_state = 88;
    msg.plan_checksum = 43654U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.29831684031151795);
    msg.setSource(11447U);
    msg.setSourceEntity(186U);
    msg.setDestination(14317U);
    msg.setDestinationEntity(145U);
    msg.stime = 3194034544U;
    msg.latitude = 0.21409932443452395;
    msg.longitude = 0.8426215711268267;
    msg.altitude = 40672U;
    msg.depth = 44207U;
    msg.heading = 5624U;
    msg.speed = -14312;
    msg.fuel = -96;
    msg.exec_state = 87;
    msg.plan_checksum = 50886U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.009910875539911546);
    msg.setSource(53765U);
    msg.setSourceEntity(202U);
    msg.setDestination(63635U);
    msg.setDestinationEntity(172U);
    msg.req_id = 11633U;
    msg.comm_mean = 73U;
    msg.destination.assign("ENPTAINLRZQCFEPECAMNQNLCBZELHCJGLMJDSYHNDVYPGBHUYXDQOVZKGHHADVCPPTZOFWXQRYHGFZKPDRBTBGXIOVTTEVXWASVMVWYQJOFOXKYSMTBIXFRLNJMXPUDGBAATMPERRBZKDCGVCN");
    msg.deadline = 0.8095577232458312;
    msg.range = 0.2679584263914949;
    msg.data_mode = 150U;
    IMC::FormationEvaluation tmp_msg_0;
    tmp_msg_0.type = 224U;
    tmp_msg_0.op = 159U;
    tmp_msg_0.err_mean = 0.24412440983316863;
    tmp_msg_0.dist_min_abs = 0.9506790684847124;
    tmp_msg_0.dist_min_mean = 0.8960544551285754;
    tmp_msg_0.roll_rate_mean = 0.4305270626772617;
    tmp_msg_0.time = 0.4732673436320399;
    IMC::FormationControlParams tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.action = 157U;
    tmp_tmp_msg_0_0.lon_gain = 0.0017595639222481863;
    tmp_tmp_msg_0_0.lat_gain = 0.11329000804617506;
    tmp_tmp_msg_0_0.bond_thick = 0.7885818927009977;
    tmp_tmp_msg_0_0.lead_gain = 0.8524402472657844;
    tmp_tmp_msg_0_0.deconfl_gain = 0.4665412340555395;
    tmp_tmp_msg_0_0.accel_switch_gain = 0.49871721394180746;
    tmp_tmp_msg_0_0.safe_dist = 0.7233607749728097;
    tmp_tmp_msg_0_0.deconflict_offset = 0.4459059207985949;
    tmp_tmp_msg_0_0.accel_safe_margin = 0.4594038965340108;
    tmp_tmp_msg_0_0.accel_lim_x = 0.6057520508268935;
    tmp_msg_0.controlparams.set(tmp_tmp_msg_0_0);
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("CBPPICVFCKMTAOXBEONJFYUGXVFDQDTLESBUKHWRLAZIGESIPRQFOZPIVCQYN");
    const signed char tmp_msg_1[] = {34, -73, 72, -84, 10, 32, 123, 2, -2, 38, -85, -91, -61, -66, 67, -42, -70, -44, 21, -124, -64, 1, 17, -21, 46, -104, 56, 24, -91, -84, 112, -38, -74, -58, -66, 38, 18, -19, 23, -96, 103, 65, 23, -9, 25, 84, -63, -68, -9, -82, -20, 27, -112, 99, 61, -43, -100, -97, -112, 19, -97, 1, -26, -2, -45, 92, -75, 35, 24, -9, 44, -57, 103, 103, -65, 94, -121, 2, -19, 14, 115, -99, 0, -102, 20, -74, -12, 98, -47, 47, 6, 94, -99, -82, 79, -95, 90, -84, 62, 28, 73, -79, 14, 108, -102, 27, 32, 102, -26, 20, -113, 18, -24, -109, -21, -96, 83, 77, -2, -119, 4, -51, 24, -113, 67, -35, 102, -126, 65, -104, -31, 66, 33, 122, 13, 53, -35, 115, 1, -7, -111, -41, -116, 95, 70, 110, -43, 114, 11, -22, -112, 61, 6, 38, 102, -39, -44, 91, -76, 47, -117, -19, 108, 53, 68, 38, -100, -94, 6, -115, 34, -18, -48, -115, 65, 65, 84, -69, 15, -105, -62, -67, 59, 33, -84, 97, 75, -69, -103, 24, -43, 53, 96, -90};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.28530742300462697);
    msg.setSource(57405U);
    msg.setSourceEntity(234U);
    msg.setDestination(56598U);
    msg.setDestinationEntity(109U);
    msg.req_id = 60323U;
    msg.comm_mean = 93U;
    msg.destination.assign("CAFSZNHZUIEBHEWNKJYWZOADFSQFASPENHJIAIGSLXUWBXYYKBOYPUPODJGPLDMVMTPNOIRZONSTMPIGHWHLDJBNOGDOIJQDRYQQENETJWKSFJVTGMQUJGMV");
    msg.deadline = 0.8596671115398588;
    msg.range = 0.5996840660823757;
    msg.data_mode = 240U;
    IMC::TBRFishTag tmp_msg_0;
    tmp_msg_0.serial_no = 1792062713U;
    tmp_msg_0.unix_timestamp = 4005938767U;
    tmp_msg_0.millis = 18228U;
    tmp_msg_0.trans_protocol = 100U;
    tmp_msg_0.trans_id = 2775827342U;
    tmp_msg_0.trans_data = 56071U;
    tmp_msg_0.snr = 38U;
    tmp_msg_0.trans_freq = 98U;
    tmp_msg_0.recv_mem_addr = 57406U;
    tmp_msg_0.lat = 0.1425720226276993;
    tmp_msg_0.lon = 0.7672474730710561;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("GVEZBKNUPYOOISWQAEVSCHRSWARTSJRBEEJIWBFDKLLFWFGLVLARMKAWKDMVCWNZXKOHFJPZDXNPEFLMIEJCRZQUFYJYKCQRACSKBSUWVPTPLBGZ");
    const signed char tmp_msg_1[] = {-10, 47, -47, -74, -106, 60, -31, 69, -60, 69, -86, 85, 122, 112, 39, 27, 45, -115, -5, 9, -7, 115, -110, 41, -7, -85, 17, 91, 10, 62, 53, -87, 37, 33, 63, 56, 74, 113, 123, -33, -68, 18, 58, -53, -71, 72, -29, 64, 118, 63, -29, -102, -94, -81, 83, -86, -32, -16, 15, -127, -60, -11, 83, -45, -22, -114, 0, 2, -107, -113, -45, 20, 107, -97, -102, 126, -70, 23, -90, 9, -3, -87, -63, -54, -38, 21, 48, -69, -40, -44, 10, 24, 60, -44, -53, -56, 78, 111, 26, 106, -119, -120, -36, -18, 53, 49, 12, 44, -106, -85, 22, -64, 92, 52, -28, -54, -77, -20, 48, 56, -5, 46, -42, 45, -23, -109, 41, 103, -103, -71, 122, -35, 38, 119, -47, 123, -128, -47, -37, -53, 105, 126, 32, 23, 53, -4, 76, 116, -60, 79};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.26394260525434265);
    msg.setSource(4699U);
    msg.setSourceEntity(125U);
    msg.setDestination(8876U);
    msg.setDestinationEntity(30U);
    msg.req_id = 45419U;
    msg.comm_mean = 253U;
    msg.destination.assign("ZIXAKQKZGMECOYIZWUHKNEPXECFBBYSZQNWHRYEORHRGJTBLWSFPZOTUVAOBSIWUYAFCULAFXRUNVAIMXSUEJMVQMXQIOTNPPDJHJGTOMVNCJAEGDQHAWINPCSXHALUBHYOYHRLFFIBGZCCSQMQKBBBESXUTPRTVZTARKGYONDWXFNJKZJJX");
    msg.deadline = 0.7553899014186797;
    msg.range = 0.3358343427804146;
    msg.data_mode = 181U;
    IMC::DesiredPitch tmp_msg_0;
    tmp_msg_0.value = 0.6209099269999877;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("UYPIWYPTAZTYFTTOWWAGRBNDEEKTOMIHOHRIIVQSLCHVFBOSFPKPPFVMJJZTZBNWLVEVLEWQCBEXEGWLV");
    const signed char tmp_msg_1[] = {-89, -43, -68, -66, 11, -74, 100, 68, 109, 34, -64, -112, -75, 78, 90, -99, -101, 100, 85, 98, 59, -18, -21, -5, 1, 47, 106, -16, 108, -23, 24, -76, -24, 61, -49, 71, -23, -64, -77, 62, -7, -69, -64, -103, -48, 107, -127, 43, -126, 10, -8, -127, 120, -48, -31, 2, -6, -118, -46, 78, 94, 124, -1, -12, 18, -84, -83, 34, -52, 70, 91, 66, -59, 18, 34, -26, 44, -15, 93, 17, -42, 113, -94, -99, -68, 95, -42, 56, 64, -4, -2, -56, -70, 89, -22, -33, -19, -19, -107, -83, 34, -94, 23, -124, -124, 106, -16, -122, -73, -71, 111, 97, -97, -106, -20, 74, 10, 34, 29, -100, 120, -64, 84, -44, 13, -116, 8, -115, -91, 75, 100, -88, -5, -10, 82, -123, 21, -111, -99, -77, -119, -68, 39, 35, 26, -5, 121, -43, 118, -43, -61, -61, 39, -80, -86, 97, -56, 105, -106, -103, -54, 29, 32, -51, -12, 122, 72, 17, 95, -45, -21, 105, -21, -106, 5, 89, -36, -17, 87, 11, -40, -61, -60, -69, -14, 17, 58, 93, 30, 58, -76, -122, 78, -31};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.1373077681594993);
    msg.setSource(12281U);
    msg.setSourceEntity(61U);
    msg.setDestination(29446U);
    msg.setDestinationEntity(162U);
    msg.req_id = 14528U;
    msg.status = 244U;
    msg.range = 0.9588924730676591;
    msg.info.assign("XAQEXRDHMEGHKMVJWFYYKPTSNFTGMCOVHSMDQZIQTUTIXWGLRVINAACGAQLOZQPLEWZHYQILESIRQEZMLWWXUKRFTHNILORUPRVDFCLOUFOSKZHGAFBKVEBROMPFVLGB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.7034695682315552);
    msg.setSource(30816U);
    msg.setSourceEntity(137U);
    msg.setDestination(8399U);
    msg.setDestinationEntity(242U);
    msg.req_id = 44324U;
    msg.status = 170U;
    msg.range = 0.21203838794790786;
    msg.info.assign("UQVYPXYUVAEELRMTOAWKQIAJCOCTIQTATADSWNBDWFKGDZLANHKGPUWCEQHLDMNYYLFZMCJUZLHBTEUOBIOEGSQQYDJOLTHTRVRBDUZTKTGDPXYGVAHNNXMSFXASFZZGNDDVVHWMNUSEIPISQEJRSIFRJKPXPZNXKXYYGOBIYVQBNIEBGCUHKROXLAPFERPKJFMBNARBVLOCLWXDZBL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.42287658804144923);
    msg.setSource(20169U);
    msg.setSourceEntity(103U);
    msg.setDestination(49479U);
    msg.setDestinationEntity(28U);
    msg.req_id = 39235U;
    msg.status = 13U;
    msg.range = 0.9930546147274834;
    msg.info.assign("FGCQBUESFROKPABLMYAKDMLUVPUMKODZCCDBPWUVXKMSAWTQXIJOXZIWNCUNYRRBKBEKMXMW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.8242001257876754);
    msg.setSource(18418U);
    msg.setSourceEntity(149U);
    msg.setDestination(41364U);
    msg.setDestinationEntity(196U);
    msg.req_id = 11295U;
    msg.destination.assign("EIRZSPVVXXVQSKFJMSGETRADXBMHXMMRBCYAWIOGSLJBNKUMFXEFYYGMZAJFMKOOVLCGFTRBUKVSWINGPULWICYDRFTQACEBVJRAJOMTZWNDQFUORKQLDVOHOBHYMYLYUTYBIZSUIIUFDAIGHGNSLGCJFAZCHDQDJCCFXOPPIEHQHSVDNVZLKURAWWKTQQBMYZUHTNCXEPKGDSXOBBETKWLRWTANNOPVEYCHJENPGLTXDQRZJXZWPSAIUZPQPN");
    msg.timeout = 0.3479019398840588;
    msg.sms_text.assign("YBZXWEWRMHAMDWQWIS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.5700583153052061);
    msg.setSource(34357U);
    msg.setSourceEntity(193U);
    msg.setDestination(55662U);
    msg.setDestinationEntity(72U);
    msg.req_id = 4731U;
    msg.destination.assign("BJXEIVANIWLCDCGBUEHEIGXWCSUEQNXMKLVIRDROPLCFBSKHURDVEAIJJLJDJEAJXTEZHMQBMWCHCACFUPQPTKIZCSAPMGAWTUYVRVGSXSCWGXMYFQDURHEYVSVFBIOVREKAMMXMAOOVMSNQSBLBLMSFTEDFTIGYJJPPTKLSF");
    msg.timeout = 0.7432732002648822;
    msg.sms_text.assign("USZTAVMAWHTFBZYBPBIKXNZGEXAMJXHOWERPBEGVHRJCSXLVNQDDRGKRCSVTTCDGNRWSMTOIBY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.5727990888686946);
    msg.setSource(15443U);
    msg.setSourceEntity(214U);
    msg.setDestination(8162U);
    msg.setDestinationEntity(68U);
    msg.req_id = 105U;
    msg.destination.assign("RXXTVPNPIZKENAMHVIZJDVFBCEIYKBWTQPFWRCUWLQKUVROABKKLCFLDKJW");
    msg.timeout = 0.18060052828572504;
    msg.sms_text.assign("EYROVLGGMIDCDLNIHXZHKHFVOVZPOGHUCRQYJMQPRKICRBIZNOTMWDHMLKNIMPDSAXGMXRFEWFTTRQSEUCSJOBIDBCUMDMXQCOUYBASRLGBNAOMLXBZWFTPKEWELFUSLJFHWZISWTTOHWPKKZJZVBGBUJSVCVALYDLKNWETCSPGYRNNQXYJFKFHYADZOCQQBCKNYTVQAZHVPNSTGXFRTJPPILEUUXQFXASZAIVEAJNIWPYYGODXBQW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.9898688561177346);
    msg.setSource(34520U);
    msg.setSourceEntity(46U);
    msg.setDestination(22948U);
    msg.setDestinationEntity(127U);
    msg.req_id = 37504U;
    msg.status = 22U;
    msg.info.assign("DICBIYLHSMEUFNWTJCHRWTTPKPLEQBHAYLFEPMJONPQEEBYINYLSMFWGDTFVDYKNPMULHSAFYCXEOKCVSKMZRQPO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.5124799537804379);
    msg.setSource(42925U);
    msg.setSourceEntity(26U);
    msg.setDestination(49516U);
    msg.setDestinationEntity(172U);
    msg.req_id = 9514U;
    msg.status = 249U;
    msg.info.assign("KBMWLVSDSIHMGWCFYUHHGO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.13753542248442796);
    msg.setSource(28181U);
    msg.setSourceEntity(8U);
    msg.setDestination(35353U);
    msg.setDestinationEntity(246U);
    msg.req_id = 9446U;
    msg.status = 157U;
    msg.info.assign("EUINWVOCDWBGMNYFEPHXUGWVCWITNKKLHLCJDTLDCYELSWFOCOIJWJMPRHAIUOGTBOUCQSDPVMMKMAUKZMKGEZSGMPFHRCLOLIZBAHEBPYJBTGSOVJAXTOBRXHVLDNCURWVXSNVCOARBRMISYNNJTINXQFGQZFXSNDOJQPHXQEDARDPIFJYIPTADKSUKHVMWJYBTARYVPUSTJEFZAEPAXWHZRTZWLGBQXERFBKFUKFMCLZXQHVIYQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.9859410223384629);
    msg.setSource(44684U);
    msg.setSourceEntity(251U);
    msg.setDestination(17203U);
    msg.setDestinationEntity(253U);
    msg.state = 132U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.7336272930639266);
    msg.setSource(26578U);
    msg.setSourceEntity(194U);
    msg.setDestination(6724U);
    msg.setDestinationEntity(188U);
    msg.state = 248U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.8853338595333989);
    msg.setSource(29885U);
    msg.setSourceEntity(137U);
    msg.setDestination(55677U);
    msg.setDestinationEntity(154U);
    msg.state = 220U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.01937151025989492);
    msg.setSource(47452U);
    msg.setSourceEntity(4U);
    msg.setDestination(42846U);
    msg.setDestinationEntity(82U);
    msg.state = 84U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.01206955855620817);
    msg.setSource(37156U);
    msg.setSourceEntity(236U);
    msg.setDestination(7254U);
    msg.setDestinationEntity(80U);
    msg.state = 166U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.61260932989439);
    msg.setSource(12992U);
    msg.setSourceEntity(33U);
    msg.setDestination(64187U);
    msg.setDestinationEntity(41U);
    msg.state = 33U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.1601805804324754);
    msg.setSource(43480U);
    msg.setSourceEntity(213U);
    msg.setDestination(31692U);
    msg.setDestinationEntity(132U);
    msg.req_id = 30466U;
    msg.destination.assign("MMTHUTAIDNAGCFNLZZOKMAIVHZCYXJAFUPRVCNJKZMNTWHDIQRLVZGTOPIYYIXMRSDWCFUHBD");
    msg.timeout = 0.8091965343005024;
    IMC::EmergencyControl tmp_msg_0;
    tmp_msg_0.command = 193U;
    IMC::PlanSpecification tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.plan_id.assign("UMPEOZORVGUQKROJQIJCSSVYNJTSRCCCHGPAHQGFHIPAPRMNMVKMLKUYECQBX");
    tmp_tmp_msg_0_0.description.assign("RHVCDSODLWGJIMAPQHEAZPKANJMLXVFXIQHJWFSPAARCYZTWXGCYJZSGPXELBQPGPXFRA");
    tmp_tmp_msg_0_0.vnamespace.assign("AZDJQYKWCAUHFBSZJXSYNQQBOWTBZDKFICNOYCDLLYYACATFKQSQEXRTEDXFEVIPGRBKMPBOGEPWCKRCMJUBHPCKXOWIWXRUBHPTEJMJLDZQLOUTIYMQBRZUPVMXDFTJALGU");
    IMC::PlanVariable tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.name.assign("NHPENLUFGGIGEKVKVPRHDFXMVTRRBIAOJHOQCUXUSNGYSHPXWXKWJIPNDMYPQSJDJYSEDGMQHQCIVOIBUDNANQJTKEZVBUBTWTRUNGJBKEQAPPYTKGAXFMOXHTJSXOCUDCNZRYCTBGKMVZHWESUFKAMBJGZTJXLROVWLCKWAIFYLMFYAOENQALGLCYEVFCCQNWJRLZSYOECRMVQOSPTIDDZILBBUZRXKWPSLZRDYAHPEMLIZWAQ");
    tmp_tmp_tmp_msg_0_0_0.value.assign("PWIWZONOVHYXCPSFLJHZEDHUGFKGOUZKLCTWLFNZVSZYVFVNGRBPOGHZQQCXDBQOQABMALYOZEXMFDRBZWUBODXVSYJMNUVTYDYGXJIGUBHLLQFSMARJDTKUESDRMHRBECYWMBNBWSNTFGQJTTAHLPCAHSPWACICDXYOKEMKP");
    tmp_tmp_tmp_msg_0_0_0.type = 247U;
    tmp_tmp_tmp_msg_0_0_0.access = 4U;
    tmp_tmp_msg_0_0.variables.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.start_man_id.assign("ZZFKMEAAWWVIUGJZTYMVEYGNPRUIHNSNFEEMXXFXYKEQFOFGMUROTALTJCMANDOUXVLOBYZVSCZJVVDYISPFVHRLSKEZJDATRBIZKKTVDXNIWMNHCIIOHISJFLPGZARPVIGWRDKTGPWBMWYPRJBKQEAOKCEXBJ");
    IMC::PlanManeuver tmp_tmp_tmp_msg_0_0_1;
    tmp_tmp_tmp_msg_0_0_1.maneuver_id.assign("DJRBTNXUCYSKUVQWEQILHEZDDZHRTNJEUAANCUTFCQMBXVBVBHXCCWBJOFPHOXMCFDVQBNVGAMDFTNWPGGYWRNRLEGSVPJXCFRCCW");
    IMC::Elevator tmp_tmp_tmp_tmp_msg_0_0_1_0;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.timeout = 33672U;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.flags = 233U;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.lat = 0.3360646366429133;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.lon = 0.7273664224234614;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.start_z = 0.7680568406388397;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.start_z_units = 186U;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.end_z = 0.28858951958415735;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.end_z_units = 3U;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.radius = 0.8717902064700963;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.speed = 0.4689459523287247;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.speed_units = 215U;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.custom.assign("JHSLVUTKCTMZDXFRNSEBCJAUMEFJYHSPMNZTKFPJEQKHINGQNCVKPARGSLYAAPXXOGVYYSLFVAEAYXLECCHYQELZPFNKMYGMRKFFJDRKUWOQOZXIJWZEODTIPXGSLNWVRDTQETCVIDTORVEMMVQTUJWWGDPNWHUJCDSYNOBKOUPQCCANOHZXLIIBUZHSFFGZPIHJDUBMMDIRLIGBXTHAYTRWZUVWXI");
    tmp_tmp_tmp_msg_0_0_1.data.set(tmp_tmp_tmp_tmp_msg_0_0_1_0);
    IMC::SetControlSurfaceDeflection tmp_tmp_tmp_tmp_msg_0_0_1_1;
    tmp_tmp_tmp_tmp_msg_0_0_1_1.id = 235U;
    tmp_tmp_tmp_tmp_msg_0_0_1_1.angle = 0.17570656370539517;
    tmp_tmp_tmp_msg_0_0_1.end_actions.push_back(tmp_tmp_tmp_tmp_msg_0_0_1_1);
    tmp_tmp_msg_0_0.maneuvers.push_back(tmp_tmp_tmp_msg_0_0_1);
    tmp_msg_0.plan.set(tmp_tmp_msg_0_0);
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.27484240347526556);
    msg.setSource(28855U);
    msg.setSourceEntity(39U);
    msg.setDestination(48118U);
    msg.setDestinationEntity(206U);
    msg.req_id = 24313U;
    msg.destination.assign("RBTHPDTKORBRQARMIFIYLSSFMGZVWMTHUBYQRSIWFHSNDSTHBQKTCPDUDDOTALSHUKEAGKWXKMYHRBTJJLUZFDBRVVZNVFHEWVOTYXCRMMVZFALNPNNOYEGBPXBJJCNCMPQECFKPJISIZXKEERLMGWJPOSIIIYOZAAYNATIUPVXNZVQDCQCMPWEZXNJ");
    msg.timeout = 0.1803994206501809;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.8232155917965635;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.8812578130058802);
    msg.setSource(54425U);
    msg.setSourceEntity(240U);
    msg.setDestination(3930U);
    msg.setDestinationEntity(214U);
    msg.req_id = 199U;
    msg.destination.assign("XZBRGVYOMZXUJRYERLEOBZBHETSAQSZCAIMPPENPKOFPUFDYQAXZXHYSR");
    msg.timeout = 0.5482045037542811;
    IMC::ImageTxSettings tmp_msg_0;
    tmp_msg_0.fps = 245U;
    tmp_msg_0.quality = 124U;
    tmp_msg_0.reps = 233U;
    tmp_msg_0.tsize = 5U;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.32884748522613194);
    msg.setSource(2844U);
    msg.setSourceEntity(195U);
    msg.setDestination(59695U);
    msg.setDestinationEntity(39U);
    msg.req_id = 56171U;
    msg.status = 70U;
    msg.info.assign("VQFVNSXYKSMNSNIEPABYNGDLUYMFDURKRXXOGWOMBKNIHYAKJSOMWHPXRPBHGQHGJYZEMZNKFHOVHNQUQPLSVEZPDKKSVWLRXL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.4951341616039562);
    msg.setSource(20303U);
    msg.setSourceEntity(133U);
    msg.setDestination(40048U);
    msg.setDestinationEntity(125U);
    msg.req_id = 31974U;
    msg.status = 119U;
    msg.info.assign("QVKIPDRVUAGARHQCLONECEIXNDTFUWVFBXMNQHBVXVWFLEQDNNPYBVDCGYPWDKDNKRXTWJGSDHGYEGGDSRMTTRMZKAHUTZXFSZLLBCDCYIKFFSVHPZTJHPWRJJWCCAOIQPMLAUFFXJAJURGINWLJYOVKZBQZKBUOLPGPXENQSQQJSRSEXCXBQYYZROLYACUKMJSMIGEWOISELMVUCBDFOBHLHAPKZBMOKNVIFYYZHTIIXNMHOJTAOERPGWT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.2758247018710446);
    msg.setSource(18457U);
    msg.setSourceEntity(219U);
    msg.setDestination(42509U);
    msg.setDestinationEntity(88U);
    msg.req_id = 59968U;
    msg.status = 230U;
    msg.info.assign("LOKMOPNRVBCNFJNSHJPCULSAIQCRUCMAU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.7334010981799964);
    msg.setSource(10986U);
    msg.setSourceEntity(0U);
    msg.setDestination(25511U);
    msg.setDestinationEntity(243U);
    msg.name.assign("QYFJMEDYOQHXAWIMNNRWYUBJSOGMVRACPHBKIOBOTTBBYPUSRGXJEATVGXMGCQJDEFNKQUZFPPJPYKTNESZUHFSFILKNXLOIZJUDAAHCJIKNUAFVZHPZPCTOZSYQDIWNQMNKQWXWERIGZBKBLDRBAWXRVGLHGIECEUVVHCNQTWCXLRWLFWHVTGIFVPFGRYYBLLOFMKWLXMUMPYDJGOVPOOYSXAT");
    msg.report_time = 0.32342407370391213;
    msg.medium = 213U;
    msg.lat = 0.44694700131417087;
    msg.lon = 0.3409030183269983;
    msg.depth = 0.12096931131145316;
    msg.alt = 0.2648317163194277;
    msg.sog = 0.4542452183618354;
    msg.cog = 0.6101261965836648;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.6223119289918964;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.6902410156456277;
    tmp_tmp_msg_0_0.amp = 0.5201297722707859;
    tmp_tmp_msg_0_0.cor = 41U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.8973672346654455);
    msg.setSource(14208U);
    msg.setSourceEntity(29U);
    msg.setDestination(11697U);
    msg.setDestinationEntity(42U);
    msg.name.assign("DUIWKNTZHFPUVYIKAFKEBDWNCMIWZTYXIUDPNVAIHFGOJUZBFPDTOJUFDF");
    msg.report_time = 0.37983399414618124;
    msg.medium = 143U;
    msg.lat = 0.6258909103036804;
    msg.lon = 0.6871672378642111;
    msg.depth = 0.2165069439920846;
    msg.alt = 0.834294939209;
    msg.sog = 0.22305850872683575;
    msg.cog = 0.8604802303906235;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.4578384017196401);
    msg.setSource(33707U);
    msg.setSourceEntity(187U);
    msg.setDestination(56690U);
    msg.setDestinationEntity(191U);
    msg.name.assign("DLHQTZYXTRYTOIMEWBTNUQNGQVHWRVCBOYPLKGCVZZFDDYEDRBJQAKKPCUTLHEAZOQOHIITDBTDYSBAVMSXTVDJMERFMLYPXW");
    msg.report_time = 0.6183312437002046;
    msg.medium = 170U;
    msg.lat = 0.5805668889198443;
    msg.lon = 0.9440627890372437;
    msg.depth = 0.6692823673276821;
    msg.alt = 0.041875218932530656;
    msg.sog = 0.11229391839806946;
    msg.cog = 0.23701882740376867;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.3675929757470401);
    msg.setSource(65094U);
    msg.setSourceEntity(196U);
    msg.setDestination(1211U);
    msg.setDestinationEntity(252U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.5809684999050024);
    msg.setSource(30780U);
    msg.setSourceEntity(214U);
    msg.setDestination(22137U);
    msg.setDestinationEntity(68U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.9514858900203547);
    msg.setSource(34642U);
    msg.setSourceEntity(74U);
    msg.setDestination(25782U);
    msg.setDestinationEntity(183U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.1801010474831578);
    msg.setSource(21570U);
    msg.setSourceEntity(113U);
    msg.setDestination(30656U);
    msg.setDestinationEntity(40U);
    msg.plan_id.assign("ODKYLJTWAATKOKQAFCQZQNGGUCHMMCHUGBVMOBDCADNNFARVDCSOYKGNVSJSTGVBBFJXPVXYQUVRZQMMHILOLPKYIDUGZAOESJIFNXQCXQDOJXHBYBSRTUPWLNLK");
    msg.description.assign("TLAEPMTMSICKNKNATZCGSWHLQACJQQBZUGXFFZAOVIIYLXWBMQXSWVMFPEDNLHNQREBHXJKHPFWDPVFRSVNIJIVDTKLZCUTLREJRCDOUXKYBCVURDEFZKATABONJPIDODPAXNSGLYNRKKPLJYUTDZCXTCVWREORJGGMWGUJPCBSISVSHZPJMFKOYFIYSTHOWGLQMMDP");
    msg.vnamespace.assign("AUGHPTYOJNOAZPBYWSAXZIZSTRWHBODTPWQMHMKGNWUNVHCFJUYCOBHDZQWGSGERVRSWLYZYYCZMSPODOTGXHWOFVQOCCXXEAEIGNRAWIVVLTGCDTJASVEBRKYBOLLFULLYPTMLMKZBSKJQDZEAFMPGCGSHVIIPFXSYJXRXCAGKQMNWQTIFXBFJBBEKUCRFPNXNAVJXWHQKHUTLQNOV");
    msg.start_man_id.assign("GOBTGRZMSGPLXUNVPVOZPTLJVWQULEIGDMZBWUAKRXFLEQGHWUDNGYZSKPJOIYNQWSXMQRHHVIGMQCGKIHBBTMEEJLXZTPSCTBERNRZAZUAHILPKCDCVLSTNMHSLMGWHZFDHQGPONCERMXWAZOJXECAXWVWACNAJDUNMQKYQVYEHYOT");
    IMC::RhodamineDye tmp_msg_0;
    tmp_msg_0.value = 0.1610851086025077;
    msg.end_actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.06615589739712602);
    msg.setSource(62005U);
    msg.setSourceEntity(99U);
    msg.setDestination(29334U);
    msg.setDestinationEntity(143U);
    msg.plan_id.assign("OPWOVLVOIHYFQROCFLGILCJMODTZHDTPLMGBKUIJCYBKLHQFTBSSXGJUOBJSYFUWXMNEZNWCAIZFZYNQLXSNEVXPKAPHWKDWJDSEYRAAIHKEUKWARUGSKOADDJNXEUPNBRTXEWFGP");
    msg.description.assign("VBSDSSIWXTPDFGCRZWGVMFISRPESJNAYVCRHNUNTBPIPGKDQKXMQGETKHCWOWCYAQEDWDHJITHEUQRLOTIFPOMRUMVSVXWSEZUJOFUPCTWXYOLNAUKZWNCJUXKMIIUZRBXVNMMQNKHRPEFLLPTNGZZGATKLRQHDIHYFRLHAIJKLZAFXVQBEIFBESYAOVCCDAFZQTYSYDTGNYNPWLMKOKJQE");
    msg.vnamespace.assign("SFGTRGZLROQBJRQZFFKNFAGOSIWFHZRENWFKNLRSMLEXQWJITLPNTVCHKYRBCXQQYBDVWGUFSWKGMIEYQOXHDUTUIKUMODEWKHAXHZXEBTLTHNDPMCJJMABMCKQLHBAHCUICNVRYAOVVGYWGVPISJVUIFKSASAFPXCNCBDRUZDDUBPZMPTECGNPDNVMOAYAJZWJTRMYOFVTLJ");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("LHSLWBYVSEMEAJIVKYIULVNWIGTAVDATCGNLCJCMPBWTBZUXQMGIVVXYGZJZDSNUUSWOSQRFYPIXKEWMPUKCSHGXLQOBDQNJNBHKFOTTPHWQKDQJHASSIIBAGDLCMLYKTSKRMEUVHSAPMCOF");
    tmp_msg_0.value.assign("HMCLQVJWCQXPQOHCTGGATGSKKOJNEXZZVVKRKMINRPMKSONEZDAEHFATPTLPBGGQOPPSWBKBVQXSPWZHORFCVQSMVNXDLUZMSKFOWJRXEDTUYUHMYHITNVDLQDJTAAHGVETFXMDZSYDWZFQXYNYMGBBMXMEACBZUOLFERYOGIZSLZJCRHGVIXLFJIAPOJOJKCKUEXNNYWICWGABHJEYFCUUP");
    tmp_msg_0.type = 200U;
    tmp_msg_0.access = 94U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("BLSJGKPVXGZCZWYHBTTOGDASOVMURSYMUMYQUJLRTVRIKCUNNWPLNGSCWC");
    IMC::PlanTransition tmp_msg_1;
    tmp_msg_1.source_man.assign("ASVATQNHGBQTMHQLYGQXXURJBFCMDYVBKKCTTIUMFZEORJSKPRMSACSTTTOAIPZKKIGHXTXSZOAJMOBYHGOEZBLBPQWRCZHSIOKAVVWGGZLDLFYSJFWPHMJRDIJKVWEGGYMPPENKFAEIFUWCEZXUZMCAQVUSOUWIPIJNNWCLQHFGBCKDCDORNRVYMDRINWQVSBFDHUPYUIBR");
    tmp_msg_1.dest_man.assign("CNEJDXOKHOGSPGLZXRMNIRQZVOIGGCAQMYKHTETXHMFBFEUMMBQWYJUGWIDZCXSKQTAPUCRHARSHWBMGWRAUZPQTERXNRLFDEWDUJHNFJAXASJLJJOMPBVGMVXCABIJNSCESFKHPVPYYDFVFYBSSQAECWOKTZMMDUUPHYLDQTNVQNWBFVSKDTSQEWFBKCGABQFEYIOJOLTLLXPNRYXILKOAUHIWUIPVYZNDUEXCZJLVLIRGRIKNCTWZVBZ");
    tmp_msg_1.conditions.assign("IUFLNCMDWITUBIYBPXNGREUVHAZZQTGAVRYNAXQXARYPXNZKCPJGJIRVIIXVWBATABVXEOVLWTCHQLPRNZYILDNWVEQAJFJWGMLTRLBVZQXDNZFFMBCHNLSVFPSULEBSHHCSKKWUGCNUTOSARVOTZBEJKWKEOMPYKLXNAQPDIYYBTEOUGJOAFYMQXUOWZHJBDRDRCQKISSDJGUGTWPPJGGSXWSFDCMKDCTDKYIOMSHFEHMQPOHMCMJYLFEZKR");
    msg.transitions.push_back(tmp_msg_1);
    IMC::FormationEval tmp_msg_2;
    tmp_msg_2.err_mean = 0.9368149227262094;
    tmp_msg_2.dist_min_abs = 0.5851174403213485;
    tmp_msg_2.dist_min_mean = 0.3756080789077727;
    msg.start_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.727620871200561);
    msg.setSource(17147U);
    msg.setSourceEntity(168U);
    msg.setDestination(3217U);
    msg.setDestinationEntity(221U);
    msg.plan_id.assign("JGZLMBITFXPKFOXYIECYXFCPMMDDWUVKKRPSJLZYVNMCEVHETUPIGVIPHZYOZAPVTKVSUMTNSJAJSYSVRBCZHRUWGQZFNLMBSHUNQLQ");
    msg.description.assign("VPVKTAURLQQPAEIUHAZGNINQMJNDPWFUNKIWRWUNGOHLAAZUICYOYJXAWAHSBKIZOXTBKULBHYSPRFTQYRTRHAGDCNHBPRAITOBWGPSEJSZSOLMGEEVCVCVQDAZKQPUGNTMDXNJMLOSWKXFGOLEZYHXLFVIXOEPHCNUFXMTDRYQEDVDGBKVBODYCKXZXGQKEWDFLHRWXJTSMKULLTBCZYIVIMJBCEFPMYCRMSYJWFSTJMQOQVJN");
    msg.vnamespace.assign("VISRCNLXLBTMQSKGNLAGVVZYIAHYIPRHUOZOCSOVWYXMUGQWSI");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("HFSHYTMWONNHFYLJTCDKBOORCNIURDEYXLDTDKRYRKVGVWPNQMUEYUCTRSSIRLADJAODGBXMKUVTMZOZAGAJFEICFEWUHXSVZFJ");
    tmp_msg_0.value.assign("NWXVNJMUCONPSCLAEKUCOTKMMLZGMHNULTXQUGWJNCNMSVZFJZIBVKLVRYVBUPZEOSWUTITJIMDKYVDMAPFDTOTNGEHKCDAYHGLPMTJKFSIWKFPLQEMWBBOQRSCWDBKQYZQTXXUEDRCISRLCXFYRZEWFSLTHPHHSHNGXE");
    tmp_msg_0.type = 164U;
    tmp_msg_0.access = 94U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("OBKCCWSYCMBFDEQMSUJNFFDHTFLHKEEYLGQROJROXNGVVPGSEENLAZMPADVULMJWYWJUCCOKXQGSSXBZTRIZCKUTHDABWZPYGZQPSHONEJKNELHBEDICURXXWAIHVMHTISDSNVFDXWGNFYZBRNJJUPVVACTTLWFMIXWTSEZZLTQKIHRQDPDKMKYVVOAFQANGYSAJKYJPUMHRTABEBJPPOIY");
    IMC::PlanTransition tmp_msg_1;
    tmp_msg_1.source_man.assign("FOOQUTSOEUXXOWVUSLYCJNLWHZWEVHBTHMQPZEKHBKRELXJHRPMCCAWKDRGNPAYSYAFXBJRZCIAGEHRHSIGSGUQYXLKIIARCVVFCKLAIGNCXCOKTRADFMPIZIGNPPHWFHVFTLDTJYTQNPFWOJNFAHBFAUOUZLXEJRYKVCJSSYQMFVJTYGGDRBZWNKNUETOZDZNYSILMXNGBDMJJSTMVBUBL");
    tmp_msg_1.dest_man.assign("QPLSADIZDQNRHGWGMUGSVAZOGACIUUIXAUDYBRVZPYJMJWVVHHYKVEQECCWNFPIKYGUIYTWUGFRIMAFTBZNKBAYTJRWJVLNMGYULRPDGLFLOZHDNDJH");
    tmp_msg_1.conditions.assign("DWHISJOPMUYPAYHVQPRRMDJCWSFHAQYNMFKENXEGBOVNWCWXYCKCTILKHSTXOBIDFHDXQEIQMGVXRORMBBGJHNEHRVDLSLSMVGBLTSWEETSP");
    IMC::RemoteActionsRequest tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.op = 19U;
    tmp_tmp_msg_1_0.actions.assign("CHBSXEGPCEJAIGUOCBBQETEOZUYVNOXUSQOQFYUUEKKPHOYWJBBEXJIHVJZXGIFMLCPNJWLCZUAMOTCUMBBKSKIWNOFQRRNARTFJTKWARQDWTVZHYZOFCGN");
    tmp_msg_1.actions.push_back(tmp_tmp_msg_1_0);
    msg.transitions.push_back(tmp_msg_1);
    IMC::Formation tmp_msg_2;
    tmp_msg_2.formation_name.assign("EOYMAFCKPYSANISXEJRFQLYFSZAOS");
    tmp_msg_2.type = 36U;
    tmp_msg_2.op = 105U;
    tmp_msg_2.group_name.assign("ILLRMEPKKWDVPWKZRGXLBZIXJAZMJJARXOHYNRWNSNEMMGJJLYUMFATQB");
    tmp_msg_2.plan_id.assign("ESUUGJWKDPPHVZAIKKDVEYTAXRVGJHGQEGVOFUCJKIVRCWWXDMZAYOBUMBWPBSXEFNTYFHPTXEPMNQTGJORGKBFUTDPVUNEKJDMXSPAEEFUBROLRMQCITTPDBDZZFRDYCIRFCJOKBZLSONBZFFAIAACQYDOXALQRHYJLVOKMGW");
    tmp_msg_2.description.assign("BWAKARARPHYAQYXLHRCDTUIBNTKCYLLCVQUJRQRLAGGCVCOGEFSOZHDBOQFONPPLDNUMMRSKZMDGDATEDXIMLKUFTAZMHVBXJVBJQKXWZWFEMKRHVUIOECUDPVTCQYWHJFECQDPIFQKTMZDPYHKJMYAIBWSBRSOWSBXTUFDGCMSCSVKYHOWIJOEMZWXZUJTLWPYXTJLFPFVEFSGNBZJJVVNGQPYALREENISHKWIXUGGITZB");
    tmp_msg_2.reference_frame = 77U;
    IMC::VehicleFormationParticipant tmp_tmp_msg_2_0;
    tmp_tmp_msg_2_0.vid = 42356U;
    tmp_tmp_msg_2_0.off_x = 0.1752232582725599;
    tmp_tmp_msg_2_0.off_y = 0.9516658080851627;
    tmp_tmp_msg_2_0.off_z = 0.23861961774254692;
    tmp_msg_2.participants.push_back(tmp_tmp_msg_2_0);
    tmp_msg_2.leader_bank_lim = 0.21390366889757328;
    tmp_msg_2.leader_speed_min = 0.5951246800910955;
    tmp_msg_2.leader_speed_max = 0.7159426749591215;
    tmp_msg_2.leader_alt_min = 0.632033820083777;
    tmp_msg_2.leader_alt_max = 0.8533557662442074;
    tmp_msg_2.pos_sim_err_lim = 0.2875018231145272;
    tmp_msg_2.pos_sim_err_wrn = 0.4326682164370075;
    tmp_msg_2.pos_sim_err_timeout = 6140U;
    tmp_msg_2.converg_max = 0.2020376868496233;
    tmp_msg_2.converg_timeout = 22603U;
    tmp_msg_2.comms_timeout = 53062U;
    tmp_msg_2.turb_lim = 0.25045325430256626;
    tmp_msg_2.custom.assign("GMHZEKIIYQMVYEYBUDTHDDEHJQQRFHDRYKJTXQUDAKQOSXVKPHFLESFVKYMCLZXUGRYGKJFOTPGRMQLLJWTTBCWSACXZJNWSXWALAFDCXUFRBEBGINJCBNSUCYZNUTLRSGOTVFHXJENMZHOBSNHWKQGDG");
    msg.start_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.8913438076003789);
    msg.setSource(31518U);
    msg.setSourceEntity(133U);
    msg.setDestination(23018U);
    msg.setDestinationEntity(127U);
    msg.maneuver_id.assign("GXLYLUTHSRPZEIMCWMKVSWITAHEMKYJEXVALEPHATPMNUCZFXGPHPOAZYOMFNKFYAKJNCDNJHFIGOQLBGRGFDXSFCHMBRMSOKWWFSSSGTRBABIYFX");
    IMC::ScheduledGoto tmp_msg_0;
    tmp_msg_0.arrival_time = 0.09828055278980663;
    tmp_msg_0.lat = 0.5776552851839182;
    tmp_msg_0.lon = 0.5680688105465099;
    tmp_msg_0.z = 0.698054590825504;
    tmp_msg_0.z_units = 139U;
    tmp_msg_0.travel_z = 0.9706133517228677;
    tmp_msg_0.travel_z_units = 1U;
    tmp_msg_0.delayed = 151U;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.3146052614159017);
    msg.setSource(22916U);
    msg.setSourceEntity(192U);
    msg.setDestination(36205U);
    msg.setDestinationEntity(32U);
    msg.maneuver_id.assign("QABGIEPHXMSGUDCRTVGZKONTYRAQMRPKHFSO");
    IMC::FollowPath tmp_msg_0;
    tmp_msg_0.timeout = 32558U;
    tmp_msg_0.lat = 0.05892262250698932;
    tmp_msg_0.lon = 0.3565066866097303;
    tmp_msg_0.z = 0.9155721891935841;
    tmp_msg_0.z_units = 70U;
    tmp_msg_0.speed = 0.7732820727158437;
    tmp_msg_0.speed_units = 163U;
    tmp_msg_0.custom.assign("CSYBUTZLNRRXMLKBLIPSPKUFREQUINTOKPOHVPJRDGEZKBPIHOZFEEDORRCCKGMWULC");
    msg.data.set(tmp_msg_0);
    IMC::FollowTrajectory tmp_msg_1;
    tmp_msg_1.timeout = 49865U;
    tmp_msg_1.lat = 0.44834231245543377;
    tmp_msg_1.lon = 0.9417940779207978;
    tmp_msg_1.z = 0.6669223069684299;
    tmp_msg_1.z_units = 234U;
    tmp_msg_1.speed = 0.6597363426821581;
    tmp_msg_1.speed_units = 177U;
    IMC::TrajectoryPoint tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.x = 0.12039405487150712;
    tmp_tmp_msg_1_0.y = 0.6093682579603088;
    tmp_tmp_msg_1_0.z = 0.8192896425204391;
    tmp_tmp_msg_1_0.t = 0.8924392851712245;
    tmp_msg_1.points.push_back(tmp_tmp_msg_1_0);
    tmp_msg_1.custom.assign("EAFEDXEXTGLYNQPZJNWQAPDNUBHCUECOSHXJFRILBNTJMYHVKSFAROEXMQXAZKQKCFCLNJTGHKLOTPVXYGOFSATNLEWJIOWRBSUPDNOSATCSGSDRPGVQWTUIKYBKKIPXZVISRFVMGLZWJPHOREFZCQYIYZKLIVZEIPDU");
    msg.end_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.19010440884809787);
    msg.setSource(44691U);
    msg.setSourceEntity(214U);
    msg.setDestination(12896U);
    msg.setDestinationEntity(4U);
    msg.maneuver_id.assign("OPGSIPFPEEGDCECXENOZXJHXVQMR");
    IMC::YoYo tmp_msg_0;
    tmp_msg_0.timeout = 61266U;
    tmp_msg_0.lat = 0.1526432886761948;
    tmp_msg_0.lon = 0.1437876672158207;
    tmp_msg_0.z = 0.38191496935324043;
    tmp_msg_0.z_units = 47U;
    tmp_msg_0.amplitude = 0.6385334466474379;
    tmp_msg_0.pitch = 0.010378115624393947;
    tmp_msg_0.speed = 0.801385488083272;
    tmp_msg_0.speed_units = 39U;
    tmp_msg_0.custom.assign("DJYMPWMOYHDTHJGTNHYTTWCRIPFSUHSYOIOUNGLAXVPBAEFTLBALHNMRV");
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.38887289217640153);
    msg.setSource(23534U);
    msg.setSourceEntity(103U);
    msg.setDestination(35506U);
    msg.setDestinationEntity(4U);
    msg.source_man.assign("QGZBLCCKMJBONTPPTUHJSLLQFVZKNEDHOUOFUAGJGHAYWYSDVKKHVWILKGCDKXTYTPVFNHMUERULDFQDYLARGGENJZSPGWPPIXBV");
    msg.dest_man.assign("FDDZPKMONKVIEMYLAQWSCRYKUAXXGOUIKSVHPMVGCPWMNCGOVMEBZQRMRNZZUIAWYPEHEJPYWCDIRHSJVIFTEZLPFKLOWR");
    msg.conditions.assign("GDEQIEAGUCNNXKTQWBRZTZZBASPKQTHKRYJRQEXHEBNLIMTMOJPMCMWURGHNLHBVJCCLIPVSGGHSSQIRZSOQUHYLUDAUSXOVXYPCVEVZONYMJPWTTKNBZRLICVQG");
    IMC::UbxRelPosNED tmp_msg_0;
    tmp_msg_0.refstationid = 62306U;
    tmp_msg_0.itow = 1449276542U;
    tmp_msg_0.relposn = 0.8600396976539909;
    tmp_msg_0.relpose = 0.5962413156731041;
    tmp_msg_0.relposd = 0.10255928762077104;
    tmp_msg_0.relposlength = 0.8785619792668629;
    tmp_msg_0.relposheading = 0.6628648510917946;
    tmp_msg_0.accn = 0.6175466395717536;
    tmp_msg_0.acce = 0.0434991465520439;
    tmp_msg_0.accd = 0.7587844928170112;
    tmp_msg_0.acclength = 0.7475180999284797;
    tmp_msg_0.accheading = 0.6981166608638177;
    tmp_msg_0.gnssfixok = 53U;
    tmp_msg_0.diffsoln = 53U;
    tmp_msg_0.relposvalid = 251U;
    tmp_msg_0.ismoving = 138U;
    tmp_msg_0.refposmiss = 78U;
    tmp_msg_0.refobsmiss = 209U;
    tmp_msg_0.relposheadingvalid = 55U;
    tmp_msg_0.carrsoln = 65U;
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.28096533061292306);
    msg.setSource(8203U);
    msg.setSourceEntity(184U);
    msg.setDestination(4106U);
    msg.setDestinationEntity(110U);
    msg.source_man.assign("FTMZHBJQEQUTCLFSMFUAMTCKJLABIVFCCQUXYYYLAPIYMT");
    msg.dest_man.assign("TSCDWDBRYMRNFZFQTHXVXVQQIIMUBURGELHKTAXVPPGJTEJKOHAVGMWLCKKWQDFFZIVCYIBSJYPUGZXNHKEMQEOEDARBOYZMUCLQEXLFABNWCSUQCKJKPZUHZUVIYOBYKNJATCILCLWMBKDQWUDHSINFAASTETNNSWRFCLDEMVZYSFYGPNGLMTDPQRRGXYOCHEUVIJPBBDJFZBPOJOFUGVRXTIOLO");
    msg.conditions.assign("AFGJXNPSYRWQXFHAYEYXZVCRJGJRPEOWLPQVSXZOIDBEMEJLKXEDUHNFKRADFUIGUSKSCTYVMQVTJYXUEUYOJZHTIGLSBRFOQQPOCLZAASCTSTMFAZFAHGIAMDRIGQQNRIKNOYCPAGMLEFSBN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.4030491532984629);
    msg.setSource(2100U);
    msg.setSourceEntity(124U);
    msg.setDestination(43501U);
    msg.setDestinationEntity(28U);
    msg.source_man.assign("YYAPPJDVHQKWDVW");
    msg.dest_man.assign("WIBLQUSUGQIYUBSQCPRYIGNARWTWWHNWIBMDCFFVOVMMNRFXITQ");
    msg.conditions.assign("NKQQHQPNGRXWOWYHLBXOKDLZDNFEVMUAGYTXDZSEJZDFTFETLFBXNQUCGVZIUHGLPDRNGLARFXWCCRSYSLOSTRCMYHI");
    IMC::PulseDetectionControl tmp_msg_0;
    tmp_msg_0.op = 87U;
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.6398980158917236);
    msg.setSource(39362U);
    msg.setSourceEntity(62U);
    msg.setDestination(17942U);
    msg.setDestinationEntity(172U);
    msg.command = 5U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("WIRGGRAXECJDNLVNRLICUQGSHRRLYNPEYYADPN");
    tmp_msg_0.description.assign("OUYCZJNOEYHBIVZUQXKWYMQNHUTZBFOFYOMAWIKCDBNHACYCSPRBVGLPVULGMSIRXMJAGREBZFIBCVFQJZNXVIWXDRVHSSMPOMLKQSEGSWXYFHHLCDJFAUVUXSTIMLTKTDKQLPQRRLTNBDUFNQMG");
    tmp_msg_0.vnamespace.assign("UJOZUCOSRPNISGHNOZZVYT");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("AYQDTAMATYANGCAXUOCYIXOJRZFHVTXHQKXNYQJQPMQJQBZFPNMFXJJQCMGCOIHAPRTFETBYGUZVQPSESBHTEKWDHUZEWVGMWMHPNQLMRAWOFALIHFEHGJSMNPFDXWGLAIDYBSLIBPZLXCUTUE");
    tmp_tmp_msg_0_0.value.assign("MDLFOCYOYFQWVNDRPQCZUHGAKSFDVLKRLWNTPIUAEOBMPNIIWZUKXZPDBYCAZIEUWIUMPPOXBZXPMQNSNHJUJLMIEGVIVWESOZDNRLSERNHCUHRBKSATJUMWTTBGQSJPEWAERVPQSQCHDWHDBXJSGVOVYYGKWLK");
    tmp_tmp_msg_0_0.type = 233U;
    tmp_tmp_msg_0_0.access = 112U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("GVSKPGTTCYBAESNLQWGHHIFLCOFYOWZYSDKXLSHYOHJTIFAIYGCZGLYZWFFTDPRUPWDOUGVOBVAFORWXZEMIOEZZGJFCADEEPYNYUJ");
    IMC::RemoteSensorInfo tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.id.assign("JPYQGQMVTHJGLEFVVIUTOJAUHLAMHGIWKNKJJVZCYGVNBUKKIEKEUALOFRLWQPJDGSCSLANWCRTNOQNVRNMFZCAZPQOCZMELLXIAIPDNIFMCOHHBYGBTOBIJLPSDSBGDMKRXWFXSGMTHQURNEVDZVBLYATRBOTQQIXSUTMPGLUZSNBPH");
    tmp_tmp_msg_0_1.sensor_class.assign("FFJBMLFJGOXAGHYKAUZYXDCCRVHVFTNJCAYQAUZAVPOWSGRUNGSFSUWCCEHUSMPXACQBDJMGKQZOSQEUFBBJJMBGIHQ");
    tmp_tmp_msg_0_1.lat = 0.06689528335812966;
    tmp_tmp_msg_0_1.lon = 0.3553891745372708;
    tmp_tmp_msg_0_1.alt = 0.7489457973456858;
    tmp_tmp_msg_0_1.heading = 0.8508069545097798;
    tmp_tmp_msg_0_1.data.assign("MLQNTIJAZESTVUBCDPENLVQXDMOOAMDHGBPKHYZHBBJHWQRVKEMFKLNKDXTSJFSZCCRCDTDXDAOCFIIQIAGMWJZEDXLFWJGBJHOFTIQOFTVEPJWOVTUUPASHVQPVGYXMBIVMJNPXHNCZXEIFXWGUOFMRNCEBPWAYKSNLZKNRBSOTKWPZWUSZLGGAISFYQZKTYENOLKRKWGVGIHERUMBDUYTRRHAYXCCJCIYLANUGBDHYXMQWPQRVLZO");
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.2909961989245522);
    msg.setSource(12487U);
    msg.setSourceEntity(204U);
    msg.setDestination(5965U);
    msg.setDestinationEntity(41U);
    msg.command = 161U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("PMYUOQOQENSTHSTMFKTTMRFWSYZJNWPZENCSKJDFHWBMBAUQKRBDDOTOVPCPOQFXIZLLVIAEIUGKAFZMFDHSKZMZMPQIDYCUTFJEWGXZJLWSHVNGHJRHCGKNORLBVIXFACYQQTFKVEANASYGTZEPBXWYMOHDREJLPQRGAUEVERGQWHUCXOXXIWDIKLRYXJJZPDKISMGYWRRZPKLBHUNBJPDGCMAACEJ");
    tmp_msg_0.description.assign("FVXDLVRLHIQDIUFLXLZZISJAKPYGGGCWTOXMJEMPVRFZYEAZABCQTNDJAXJBXADHRVJBERJJWNXBZNLCOVSOMWUHVDIWQBPQGKUTMWFCQHPHREODGYSMMKXVDDLEEKXWCQHWISPKAFVPUOATLBZBNFWNRJNSIKQTNHOOBLPSRHDPIWGZPCVXUXCCLYMAEUOQKNJYRCFFZSFKRDHUUQIPFMELEQOSNGJYNSITBOWKZCRYZ");
    tmp_msg_0.vnamespace.assign("QDBAZZQUDIHQTPOTSJYDIMHXZWASRUJFNRHFIFJMPXDXGGVSFPIIGSYUGWZOLLMUWKFTPSAOHCBJOXOCLQEYXMJRXBEXYKEHXHONDKGUKPGTVDWNKERLFPOVQYYMNUQOBZSPAGDCVNMIZWVNAVCDJMLCFCABTMRITPBUKNVNOJ");
    tmp_msg_0.start_man_id.assign("HMWBFRRBCPCTGJGVMTMXZAYNZSCFPEQIDNYXGOVGLLWHEFRLNKEVASZIRBHXSMYCCSEZBPAKJHJCGFTFNMKPBQJZBZACDIWOTFEYWXUWMRQETDLAKZSQXLPOQVINRYNOLSDCSQPDFUQVPKMTXGEUIHXGFPBDQHWPTNSUYKIJVASLEJBUGKDRZNHWLJ");
    IMC::PlanManeuver tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.maneuver_id.assign("NBJLUSCPTOCFLRBZXHINWTJCJMNFGZARDAFYZYTCSNMHVWJMYTILMJVRHUVSUGOHFLEMQPTQXFCOZOYXIIHSERBFYKIWOKQJRLBYQFOACTPAKUVBENALVKPVCPNLUGGLDPSHFOIJGKGDZQSJKIZXQDEUHMOLYXWBSERWZKNOKKAVXDOSICHPDJUVTECBMCRFEGDXENLVWHBIDWFBMGVAJUZRSQDEWMRQYITTTWPAYX");
    IMC::CompassCalibration tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.timeout = 2174U;
    tmp_tmp_tmp_msg_0_0_0.lat = 0.31298445946234754;
    tmp_tmp_tmp_msg_0_0_0.lon = 0.35145638330484397;
    tmp_tmp_tmp_msg_0_0_0.z = 0.4784401814760425;
    tmp_tmp_tmp_msg_0_0_0.z_units = 200U;
    tmp_tmp_tmp_msg_0_0_0.pitch = 0.6845717996557843;
    tmp_tmp_tmp_msg_0_0_0.amplitude = 0.6907540756462637;
    tmp_tmp_tmp_msg_0_0_0.duration = 10334U;
    tmp_tmp_tmp_msg_0_0_0.speed = 0.5170163855133608;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 166U;
    tmp_tmp_tmp_msg_0_0_0.radius = 0.6857697615821954;
    tmp_tmp_tmp_msg_0_0_0.direction = 14U;
    tmp_tmp_tmp_msg_0_0_0.custom.assign("FWOUMYSAMBZEJWWYURDTWEKCHLXKNUQSZEOPTATAAQAFLHZZVDJABYPFSSJZXONCKEHHVTSSEVJFJLAQRCGTLZJIUTOILQDDABPBCYOMGWJOZORMVYSCNEDUHIIQRZNORQGWUKWQSHIXNYWVIFNAP");
    tmp_tmp_msg_0_0.data.set(tmp_tmp_tmp_msg_0_0_0);
    IMC::MapPoint tmp_tmp_tmp_msg_0_0_1;
    tmp_tmp_tmp_msg_0_0_1.lat = 0.5894444850062406;
    tmp_tmp_tmp_msg_0_0_1.lon = 0.17924395414399708;
    tmp_tmp_tmp_msg_0_0_1.alt = 0.73165560994224;
    tmp_tmp_msg_0_0.start_actions.push_back(tmp_tmp_tmp_msg_0_0_1);
    IMC::SetPWM tmp_tmp_tmp_msg_0_0_2;
    tmp_tmp_tmp_msg_0_0_2.id = 179U;
    tmp_tmp_tmp_msg_0_0_2.period = 605757365U;
    tmp_tmp_tmp_msg_0_0_2.duty_cycle = 3585015796U;
    tmp_tmp_msg_0_0.end_actions.push_back(tmp_tmp_tmp_msg_0_0_2);
    tmp_msg_0.maneuvers.push_back(tmp_tmp_msg_0_0);
    IMC::UsblPositionExtended tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.target.assign("QSOYUTEGUPNLYQFBEIHJDNWGIQLSBQDMJTTUYHIAXHAHNIBWRDZYYMCZKEKIPNSTFXKJPWZUMCZMRVSTORLXRVDNYDPDDMPGFSBEPJNDXVKHCOUJYKEOITTLFTCMKOAQZRIVXPXZRLJRIJZLUMYWUAGVRUOSKGHPCMVLWHNKDQABOOSAUBITHYFXBFLWNHSXXNGVZASNFEQWBOFQ");
    tmp_tmp_msg_0_1.x = 0.9352309250022177;
    tmp_tmp_msg_0_1.y = 0.11055128754575072;
    tmp_tmp_msg_0_1.z = 0.6688595788705612;
    tmp_tmp_msg_0_1.n = 0.9782819126781309;
    tmp_tmp_msg_0_1.e = 0.5804196828987032;
    tmp_tmp_msg_0_1.d = 0.7689801628495033;
    tmp_tmp_msg_0_1.phi = 0.0015671284092384496;
    tmp_tmp_msg_0_1.theta = 0.09738772976050081;
    tmp_tmp_msg_0_1.psi = 0.9537195575934778;
    tmp_tmp_msg_0_1.accuracy = 0.27155570136080776;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.8218383799253227);
    msg.setSource(50457U);
    msg.setSourceEntity(84U);
    msg.setDestination(43473U);
    msg.setDestinationEntity(114U);
    msg.command = 140U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("DMNQZLXTGXLROBKMNZLHDTFJOWDFRJIKZXERYBAYMAISEFVWCPELOQUOSIM");
    tmp_msg_0.description.assign("TGQJSPCJKWHQFUZGXYQNBDDRYOZGZCCYZYBAOZWFHUFGLPNRYVCMCSKLSEUDZRBWKSPBIXDCXOHYQUEOCPSUYNWRMWABXVEEIEBZHLGAILOLKYCJWJELAHNWVOVFPIMLMQTQDIDGPYJHKYRAFPHAIKPZRAM");
    tmp_msg_0.vnamespace.assign("MLQRGMAIRYPCAUPUNIEIWJNUBSFPQATUTUYMHAGSTHTCVCJOVJDMOKNCHJHRDRKFVDGJEBOOSPEZWVWVPDSBQEIVNDCFLDDZBILYGCTQLKZHETVUONAWESPYWXHBSQJFTKOUKMGUYRFCWXWZAXTDDKRPQXBFHSPMJHPXWSBOZMYLTITKEGCNOZNVGGLKXLLZRWQUFJECXNBCAHXIWEIIYAFJNRSRIYLBQJVZPMR");
    tmp_msg_0.start_man_id.assign("VTPOSWKHWCRBOKLCSFLSQSGMDJKNQNDOXGYXNALACLDKARRMLNPKSVTPZTMLGFYIVMGUVKCOVQBDPCROQS");
    IMC::PlanTransition tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.source_man.assign("FGQXTTKAPNCOXEZUOHCYGIEXTUZJCBFPFVWUMBROOZOHADIVHJQHXSDVGGPBZCVNRLOKTSDCNEKOTJUBPWYFMWEQHRDABZWGRWIFGBZDCUDDMXITKGJSFAMCTVWXQYKNXQPGOAUVS");
    tmp_tmp_msg_0_0.dest_man.assign("DFYRXPSVMHOTTIZHFVPNKURPLERSBILUQLMZRCVUXDXDWYWPOLRNKHOUQGDQBTQYJLFNFSPJJBZDTKJCDNBRBJOAMRVHIXIHGRXQSFYWVDAPAKWKVOXLSYZBLMRZFCJGSMKMCJFATNGWWVCZGEZYUTJRVCIQKYCEVNPUFXSKPWGZOCEIGNGBBIJDCPHWGDESUUHHA");
    tmp_tmp_msg_0_0.conditions.assign("MZDYRLIRKJOPJMIYNKRWGLABCYOLPRXDJUFXGVYTIMBGTJTHUTBFWSKCSOKLXSZAOFRVMMBPDYFBWXZREBEPOUWLYJJXQWYNGTUJANCEXMZRSPHYLMYPANPHBHFZGGTB");
    IMC::Force tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.value = 0.20352014747038905;
    tmp_tmp_msg_0_0.actions.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_0);
    IMC::DataSanity tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.sane = 93U;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.4766676846802783);
    msg.setSource(40106U);
    msg.setSourceEntity(19U);
    msg.setDestination(23602U);
    msg.setDestinationEntity(130U);
    msg.state = 184U;
    msg.plan_id.assign("XNHNVUWIHMXLFARDJZPBTSATOSTILTPPAHAVJNEYQXRCHBMFZANTOIJGYVDQCDFKRVPTZCGZBVLUOPFFPNXENSUNYAUZKJXIYVLLMRCBQCWYIBFETKZLPLIOOSBOSFQYILESUNCOYBZRVLDUGBRJMHMVYFQGRW");
    msg.comm_level = 124U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.16459296575055415);
    msg.setSource(46785U);
    msg.setSourceEntity(98U);
    msg.setDestination(3713U);
    msg.setDestinationEntity(28U);
    msg.state = 63U;
    msg.plan_id.assign("DWMIVLROGPAEVCWEBXMFKFKHBWGXCCZGMOVPAIBXKZKHSTAEHRBFSCLTMUYEDJUTNVUYQILRGPYSIJIPYXHFMHGVUGQRUYJMUWXPTFKDNZBYSASQJNFYHAGNTGN");
    msg.comm_level = 242U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.6462137022219331);
    msg.setSource(487U);
    msg.setSourceEntity(3U);
    msg.setDestination(19048U);
    msg.setDestinationEntity(155U);
    msg.state = 226U;
    msg.plan_id.assign("QLQIDCWMHLGCJUAHOMAUGJJPKWLDAUMXIZP");
    msg.comm_level = 249U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.439284016716189);
    msg.setSource(55698U);
    msg.setSourceEntity(18U);
    msg.setDestination(2290U);
    msg.setDestinationEntity(190U);
    msg.type = 139U;
    msg.op = 169U;
    msg.request_id = 25526U;
    msg.plan_id.assign("JRSZTDLEPWWZJAVYWVBFGIUIDPNSBWUERSQHYBMYYDRRVZYITXHGZOZPZDBITEMLGCTUWFIVSWDHNYGSMDVEKNMPDUJCAKJUPCBDSQHHPGHBGLVAKXFNNMCMOSCUSQQLHXAOOLXANETZOTFOIXXVHZKQKJOFYAWJ");
    IMC::CcuEvent tmp_msg_0;
    tmp_msg_0.type = 16U;
    tmp_msg_0.id.assign("FIMKJEPWHHFUPBPUJLJVDQECWTBUQTKUIOCPRIAACQFHWXONTSCXVAGMVNGGGYHLNLLYBSW");
    IMC::HistoricData tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.base_lat = 0.599950349667954;
    tmp_tmp_msg_0_0.base_lon = 0.24190729149614265;
    tmp_tmp_msg_0_0.base_time = 0.07059795241100564;
    IMC::RemoteCommand tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.original_source = 63908U;
    tmp_tmp_tmp_msg_0_0_0.destination = 22343U;
    tmp_tmp_tmp_msg_0_0_0.timeout = 0.44225165546923806;
    IMC::ControlLoops tmp_tmp_tmp_tmp_msg_0_0_0_0;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.enable = 54U;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.mask = 2444502931U;
    tmp_tmp_tmp_tmp_msg_0_0_0_0.scope_ref = 455376356U;
    tmp_tmp_tmp_msg_0_0_0.cmd.set(tmp_tmp_tmp_tmp_msg_0_0_0_0);
    tmp_tmp_msg_0_0.data.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.arg.set(tmp_tmp_msg_0_0);
    msg.arg.set(tmp_msg_0);
    msg.info.assign("TUEHFXNZUSJQPMWQZDPVJKEJNJVKLOOREVJTRTJNPQFCSBVSGHKAUDYWOJFULOPLMHWYIIPTOCDLWTCYBMGMZUPXXEMGVKEWRAXEQPTCHJAZBXVDIGXMYWYUWHNZSFTIJKOIGURQCQDAPBFUEWGNNEOSGTKYSUQAQFZIFRAVNTAYBOMDYZLKGIEXLZREIAR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.1030877267768402);
    msg.setSource(41976U);
    msg.setSourceEntity(231U);
    msg.setDestination(56993U);
    msg.setDestinationEntity(250U);
    msg.type = 254U;
    msg.op = 126U;
    msg.request_id = 18376U;
    msg.plan_id.assign("QTYTUSTJMQTPKLQOK");
    IMC::DesiredHeading tmp_msg_0;
    tmp_msg_0.value = 0.9091386560971161;
    tmp_msg_0.off = 0.7296821886339698;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("SQVOUBTFMUSMJYHVBHKULFLWNUAHWZISEYDGPACDYRTMWD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.029092588807810293);
    msg.setSource(17014U);
    msg.setSourceEntity(230U);
    msg.setDestination(47773U);
    msg.setDestinationEntity(33U);
    msg.type = 246U;
    msg.op = 198U;
    msg.request_id = 36351U;
    msg.plan_id.assign("ENDACZEYMTFHRDSIEBKRYBWQZBTOWHDMZNDYUORWPNFYYBNOBWKETPDORWICTOAYSGBUGVAGNOJLC");
    IMC::SetPWM tmp_msg_0;
    tmp_msg_0.id = 75U;
    tmp_msg_0.period = 2330141985U;
    tmp_msg_0.duty_cycle = 1569331816U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("PAFLKZMEHDCVJYZBKJHOCRBIRX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.9216093432915916);
    msg.setSource(59049U);
    msg.setSourceEntity(206U);
    msg.setDestination(56425U);
    msg.setDestinationEntity(225U);
    msg.plan_count = 20166U;
    msg.plan_size = 3075442566U;
    msg.change_time = 0.44817551710464476;
    msg.change_sid = 44570U;
    msg.change_sname.assign("ONVZGYQXIETFQBZUQQOIAIJCBCVWY");
    const signed char tmp_msg_0[] = {-98, -77, -44, 54, -128, -120, 87, -29, -42, 49, -47, 4, -20, -25, 81, 28, -37, 52, -14, -88, -106, 16, 38, -112, 91, 36, -123, 41, 51, -71, 49, -98, 19, 57, -80, -7, 35, -125, -24, 120, 114, 66, -57, 10, 10, 75, -44, 111, -75, 37, -88, 107, 95, -60, 3, 46, 45, -6, -23, -7, 97, 71, -67, 60, -36, 51, 3, 68, 5, 12, -87, -61, 62, -20, 53, -27, -76, -57, -69, -94, 118, -123, -75, -123, 17, 48, 119, -95, -81, 63, 60, 117, -83, 53, 14, 71, 37, -60, -10, 26, 37, -116, -126, 7, -85, -95, -27, 35, 100, 0, -78, -122, -79, -70, 5, 11, -20, 90, 39, 13, -83, -61, 96, -37, -45, -3, -45, -103, 3, 47, 57, 113, -7, 102, -104, 102, 73, -88, 75, 35, -65, -34, 45, -42, -122, -121, -77, 71, -74, 7, -101, 12, -25, -107, 17, -124, 10, -52, -102, 79, 29, 14, 109, 30, 85, -43, 91, 30, -39, -19, 47, -26, 0, 69, 93, 81, 116, -30, 108, -35, 61, -74, 106, -26, -17, -80, 124, -38, -81, 50, 1, -26, 10, -58, 18, -74, 60, 68, -91, -59, -46, -113, 17, 39, -106, -56, 74, -60, 125, 91, -65, -69, 48, -53, -46, 65, 61, 57, 40, -3, 103, -42, -111, -17, 42, -95, -10, 70, 15, -42, -81, 126, 27, 22, 93, 58};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.9341421013947097);
    msg.setSource(63521U);
    msg.setSourceEntity(167U);
    msg.setDestination(5055U);
    msg.setDestinationEntity(72U);
    msg.plan_count = 15226U;
    msg.plan_size = 3543091997U;
    msg.change_time = 0.6689088207548206;
    msg.change_sid = 36922U;
    msg.change_sname.assign("EJXRHFJGDAGGPIGOMIVTAFJKAVKJQEXGLUCKMWQNXPNNVNTMBSZFQMLLWOXNCSLYUWXFFLVRGIYBQVRCWPEVNTOUBYDRBCOKKOLZSFTMGHGDXSHDZTMVLZHIBWDBUYJLANBZZWSRCMUVABACLSTE");
    const signed char tmp_msg_0[] = {-34, -85, 102, -77, -86, -64, -64, -55, -53, 50, -98, -52, 40, -21, -84, 19, -15, -128, -79, -1, -49, 44, -58, 94, 74, 93, -95, -36, 79, -120, 21, 69, 69, -1, -93, 75, -29, 120, 112, -49, -45, -20, 114, 115, -19, 84, 1, -24, -51, 102, -118, -89, -122, -46, -13, -91, 4, -74, 46, -103, 40, 18, 88, 67, -44, -51, 69, -90, -98, 101, -67, -6, -72, 100, -68, 126, 123, 87, 15, -33, -73, 126, -106, 20, 124, 108, -123, -65, 17, -39, 78, 81, 21, 103, 7, 39, 114, 38, -95, -89, -114, 119, -12, -86, 109, 68, -81, -70, -123, -103, -107, 99, -116, 122, 96, -6, 79, 75, 75, -15, 118, -39, 92, -108, 90, 63};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("SMIFCRROPQBWKHAAZGLWQBITDZXXVYOOJSLXYEHSAVMMXMVPZNAOSBJPBZVFICOZSNMMERHXKVVPETZICAHJFLCWEGWXPVIDIRLFRFVWNJPKUEBKZXBITRJKNXCBDEWJGCNRYXYAYDNAAUDPUOUESZDGHLUASROGPMEQQGLAKVYDCJNOLLTJQZUJOTKSKRTDUGDIMMTUVYPCJNTQFLHFSHGUTQQQW");
    tmp_msg_1.plan_size = 4424U;
    tmp_msg_1.change_time = 0.2843074455903595;
    tmp_msg_1.change_sid = 6410U;
    tmp_msg_1.change_sname.assign("GPLMSQSYEECUCRMPPSNVSVOFIQEKESGWMSOYSRABVENJKDRZLVQIQQYJWJHKDPUGGFFKCTUDRKZDMXRKNHRIVUUVNODHYCHRTIDOYTFCJBYZLXGJZLGIZCZJDETXEZUDNHOPOF");
    const signed char tmp_tmp_msg_1_0[] = {-80, 10, -7, -128, 94, -11, -68, -20, 98, 120, -58, 39, 38, -72, -45, -43, 3, -93, -103, -31, 19, 110, 95, -94, 1, -109, -88, 119, 2, 80, 95, -14, -59, -74, -69, -27, -57, -34, -128, 37, -64, 122, 85, -24, 66, -7, 86, -116, -24, 3, -25, 61, 57, 35, -83, 74, -35, -108, 45, -82, 118, -1, 95, -92, 90, 109, 100, -106, 23, -110, 74, 93, -53, 73, 5, -45, -69, -10, 25, -17, -117, -99, 104, -126, 77, -127, -3, -79, -80, -75, 3, -65, 106, 73, -42, 56, -51, 10, 28, -102, 64, -71, -97, -58, 113, -92, -123, -67, -92, -49, 14, 51, 61, -99, -4, -64, -113, -25, -39, 14, -35, 48, 98, -67, -92, -54, -126, -9, 82, 54, -76, -47, -45, -69, 113, 110, 109, -90, 39, -31, 91, 101, 110, -75, 48, 65, -51, 89, 0, -57, -115, -67, -85, -26, 62, 37, -78, 108, 46, 24, -122, -115, 68, -22, -106, -63, 104, 109, -93, 55, 63, 4, -18, -46, -64, 104, 27, -88, 88, -53, -121, 92, -28, 79, 20, -116, 70, -91, -12, 114, 52, -44, 122, 108, -54, 125, -87, -54, -85, 98, 69, -123, 57, -94, -46, -41, -101, 83, -72, -94, 4, 69, 49, 89, 15, -54, 2, 123, 29, -55, -90, 46, 80, -116, 49, 53, 56, -39};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.09359817812298499);
    msg.setSource(36339U);
    msg.setSourceEntity(130U);
    msg.setDestination(26383U);
    msg.setDestinationEntity(216U);
    msg.plan_count = 42465U;
    msg.plan_size = 2268219909U;
    msg.change_time = 0.6345865049675027;
    msg.change_sid = 37637U;
    msg.change_sname.assign("WEGMSEGAAIFXFKDBSGZAFKFV");
    const signed char tmp_msg_0[] = {-94, -83, -3, 73, 82, -13, 100, 79, -35, -35, -7, 79, -33, 9, -21, -113, -43, 27, -94, 119, -114, -93, -3, -27, 102, 58, -73, 65, -109, 85, -60, 89, -114, 114, -99, -112, 41, 70, -15, -41, -14, -33, 100, -33, 34, 51, 53, 113, -97, -1, -78, 55, -67, -92, 5, 83, -24, 43, -16, -84, -25, 39, 2, 22, 82, 14, 73, -8, -64, -85, 4, 112, 124, -70, -61, -16, -86, -46, 66, 27, 75, 2, 2, -73, -83, -41, 59, 35, 20, -89, 10, -4, -28, 105, 105, -8, -118, -50, -8, 100, -73, 92, 40, -12, 16, -60, 61, -68, 67, -118, 100, -67, -110, -1, 15, 21, -105, 125, 104, 40, -16, 63, 67, -91, -91, 9, 67, -14, 93, 99, -48, -11, 28, -112, -117, -23, 100, -119, -128, 17, -75, -19, -109, -7, 68, -63, -18, 25, -125};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.9077126253780733);
    msg.setSource(2301U);
    msg.setSourceEntity(173U);
    msg.setDestination(57883U);
    msg.setDestinationEntity(223U);
    msg.plan_id.assign("JQDWXZVXQGFGPWIFUINXIMISYKUQITEPNXMZXKOFNYQVKBLDTEVAQHBDOEAPBOMOBHUKRHQIUHBGFSYMEJALODOHTTPCANSVNLWZZBBTIPUYQLDDFJEVCKOMVVWZTFAZMMZHSYJMGJWCFASLLHGCYCPNRCSXGIJKXNDLWUMUWTGXQ");
    msg.plan_size = 16516U;
    msg.change_time = 0.9991298307476019;
    msg.change_sid = 11868U;
    msg.change_sname.assign("XNPCITDMCJZHHQABVDYPJHGVBWXZNXTGUWTNOKRSJCJWCFSDLFLRSJZMLMEYOJGPZGFTNIENOYYUUBAYHAMMPQJWKIKFRZAZNRHFTLTBPPSTVAXIDMEVQSKIFHAXEUQLRKLOGLIFANERQEMQQIUBEVAXHXIPHUSTMWCJZPYDKGKXFZGDCSQWHCQVWXKFOEAHTBBFSDVU");
    const signed char tmp_msg_0[] = {45, -61, -119, 81, 83, -74, 34, -93, -113, 97, 107, 95, 48, 72, 46, -106, -64, 8, -112, 30, -21, 76, -6, -98, 110, 7, 29, 74, -112, 98, -106, 25, 69, 4, 9, -10, -117, 106, -125, -52, -60, 33, 20, -95, -111, -106, -108, -58, -77, -5, -128, -19, 68, 68, 45, -17, 102, 6, -115, -103, -50, -61, -36, -67, -71, -56, -37, -30, 60, -29, 63, 4, -13, -76, -115, -99, 36, -15, -52, 64, 125, -126, 26, 83, 3, -55, 47, -64, -17, 81, 81, 102, 15, 91, -106, -62, 121, 123, 15, -116, -113, -101, -64, -86, -71, -103, -41, -65, 84, 19, -17, 76, 99, 32, 47, -120, -29, -43, -51, 17, 35, -36, 70, -46, 47, -91, 41, -28, -54, 48, 4, 46, 50, -47, 125, 27, 14, -111, 1, 84, 83, 113, -35, -60, -14, -92, 21, -26, -123, -39, -82, 69, -102};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.11610142582043348);
    msg.setSource(60940U);
    msg.setSourceEntity(135U);
    msg.setDestination(7302U);
    msg.setDestinationEntity(67U);
    msg.plan_id.assign("QHQQMTPMUVLHOGAPLB");
    msg.plan_size = 33711U;
    msg.change_time = 0.9996031093420921;
    msg.change_sid = 22168U;
    msg.change_sname.assign("IQJCZKUQYXBWSJFAMWTITYCJIPHVGJAAOBQQAZBOJHCGPLRJRLHGCKBUXMZWZEXSYTVEFWHSSOWJEHBRFYARITDEZFJLUROPPHJQTNRXPPNIUFNRBMHKEKVCNOUMWPLEQTTLSIPQDYBSHFTCZKLUVZDPVZCVMYBSXKXAYXNVFIYDNNDEHJLGYNZLSGLDKGFINOHTVUFRBQKAEGVCIUNRWAPQDMUWMEY");
    const signed char tmp_msg_0[] = {64, 49, -120, -105, 72, 26, 99, 44, 85, -100, -73, 33, -82, 49, -124, 28, -15, -62, 64, 68, -95, 1, 38, -72, 120, -31, 13, -52, 33, -78, 123, -48, -115, -104, 80, 95, -40, 39, 54, 51, -20, 36, 62, -92, -104, -91, 61, -89, 86, -99, 49, -37, 50, 3, -64, 19, 79};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.6721801666437015);
    msg.setSource(14173U);
    msg.setSourceEntity(176U);
    msg.setDestination(45519U);
    msg.setDestinationEntity(6U);
    msg.plan_id.assign("DUDALSSGSVWKZGPOPBAKYRPUVKELUMNJTLPXIDFZEDKAKVFSCEOUXJEQAHMROQPFBHWBNJXEZLLBEWXMNPCZLVIRITKWBDYFRXNFTGILHYVRTBGQIHTJDEJVTQGSQOBTYWLDAGRPSDGQKUNNJIOMOWJHAWMEQCFB");
    msg.plan_size = 6326U;
    msg.change_time = 0.6643432468067119;
    msg.change_sid = 57963U;
    msg.change_sname.assign("IVLXYYLAOBUZCDSFVMFVILQMHSDCFWPCQXVWGGKZWTVOOMZFYGBTKIZPVXIPLFJUWOGJWHQHTQFBNLXENJKHBKIQDABAOPRRCGQRCAWVYYROLOJWNHVD");
    const signed char tmp_msg_0[] = {45, -39, -96, -78, -1, 62, 40, 30, -52, -60, 26, 47, 81, -67, 9, 22, -58, 18, -88, -18, -26, -122, -102, -127, -30, 116, 26, -72, 108, 107, 31, -81, -20, 62, -27, -58, 2, -46, -45, -109, 95, -42, -11, -115, -111, 78, -39, -126, 93, 26, 96, 100, 116, 126, -71, -78, -10, 48, -123, -64, 78, 106, -30, -42, 43, 3, 69, -82, 32, -113, 0, -101, 64, -41, -35, 10, 46, 21, -124, -122, 66, 92, -102, -117, -108, 18, -76, -83, 64, -51, -123, 108, 52, 104, 116, 64, 90, 27, 56, -58, -75, -126, -35, -27, 123, 53, 56, -55, -4, 17, -49, 18, -18, -65, 0, 90, 104, -96, -66, 107, 112, -126, -44, 31, -82, 104, 5, 56, 4, -117, -95, 126, -50, -100, 100, 98, -75, -107, -11, -18, 86, -99, -19, -65, -3, -110, -45, 110, 8, -39, -71, 74, 126, -85, 71, -58, -47, 67, -76, -35, -62, 91, -14, -58, 26, -40, 126, 55, -48, -98, 111, 48, 126, -39, 112, 115, 103, 59, -16, -50, 90, 24, 81, 73, -65, -17, -59};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.4437194577014594);
    msg.setSource(3239U);
    msg.setSourceEntity(101U);
    msg.setDestination(54563U);
    msg.setDestinationEntity(220U);
    msg.type = 221U;
    msg.op = 188U;
    msg.request_id = 63383U;
    msg.plan_id.assign("YJNNMCJJZTBSERZCXCZBFERDPDDRXAJCGNBHNEAPOQODBVUNOYUKQYUZFYRBNFMXRISUEZMCHKLGEGAYFXIWTLXUIVKMQPTSWBIYYADAKDLDLYUJXKWJAGWZRVOZLQNSVFTDPTUNFOGWEPOFWOPTMXIYIR");
    msg.flags = 59512U;
    IMC::PlanTransition tmp_msg_0;
    tmp_msg_0.source_man.assign("IHSXUXPLTVXGZFWFTQKHOWNZEPJAAWV");
    tmp_msg_0.dest_man.assign("SIIKMYRGZFXLHDYFFZABVZHNRVGOJGZ");
    tmp_msg_0.conditions.assign("OQPTSIAAXJLRUIX");
    msg.arg.set(tmp_msg_0);
    msg.info.assign("BASBMVFOXBTXPPDSCCPDXQKZDQCVHUVDCSRVDRTBOWFQGPFVRHHURYLYKFEZAVZGYAJWOATHAGXHBNEWUAGNKXYNSBTMCWNPJQOESSNZFXFOHBZUOPGIAZMPTJYICBMQALIGLCNYTJTIXLPNZVGGKNIELRW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.4135898493106347);
    msg.setSource(51847U);
    msg.setSourceEntity(79U);
    msg.setDestination(3209U);
    msg.setDestinationEntity(219U);
    msg.type = 73U;
    msg.op = 69U;
    msg.request_id = 56098U;
    msg.plan_id.assign("GEIKBHQRQAFEBGTOTIXFXWCVPRVUIORNKZFJGNAZSJRMOZQJQWUXRPAUPCMXIXLZS");
    msg.flags = 40840U;
    IMC::LblRange tmp_msg_0;
    tmp_msg_0.id = 121U;
    tmp_msg_0.range = 0.8777430021554636;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("APDJVYNKXPHMIMKFGZXAKXOAWCVBJJHFQQNYMIIYTEZLYHCHOJUXOUOPORVLGXPZKQDLBSMURPANZCKERLFRYRLKWISBYJBMVRKMTDVIQMHXDNRSRWYAOUWDQGQNARZTTRCOBGLYVKIVFPCPI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.43690999513149253);
    msg.setSource(37400U);
    msg.setSourceEntity(186U);
    msg.setDestination(65500U);
    msg.setDestinationEntity(61U);
    msg.type = 254U;
    msg.op = 60U;
    msg.request_id = 1470U;
    msg.plan_id.assign("ATRFYMZTMLCWYSIEMJHBQSEPATQAYEMLFRGHXHHAFXJRHVKBYG");
    msg.flags = 1115U;
    IMC::TransmissionStatus tmp_msg_0;
    tmp_msg_0.req_id = 3902U;
    tmp_msg_0.status = 22U;
    tmp_msg_0.range = 0.3316402659506765;
    tmp_msg_0.info.assign("HWNTLKHPGKAMPTFBBMNBQERFYN");
    msg.arg.set(tmp_msg_0);
    msg.info.assign("QDVEXAHZLSMRHJOMPLJIPZIRHVFTDQGYUAXJJICDAFATEAPLSZRZKORSWMBAPGKSBFJKHGYCVMCSWVGSBIZXYQOETCVPIUGEGTBFKIYXUJXVREDMOYBAFNOSYOSINFCWPDTUCOQHWYLLRHFVUMXSWI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.5153546901466115);
    msg.setSource(14657U);
    msg.setSourceEntity(248U);
    msg.setDestination(147U);
    msg.setDestinationEntity(41U);
    msg.state = 59U;
    msg.plan_id.assign("XJMOLABNQJZQWGOWWHOGZBG");
    msg.plan_eta = 407474590;
    msg.plan_progress = 0.10119030216076375;
    msg.man_id.assign("FBICHYOEVWCKIGUZPOKOJNAJCKFBLCVZNZKJFAESQFGRFKRRBAWZXYIQIJGNDBYCRDPTLWISGCXNRFJWFLXOPLUOPIHCRYOVBPUHSJERTTVEYQMLENQ");
    msg.man_type = 14886U;
    msg.man_eta = 1806047368;
    msg.last_outcome = 62U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.02134507099719829);
    msg.setSource(55206U);
    msg.setSourceEntity(224U);
    msg.setDestination(32857U);
    msg.setDestinationEntity(61U);
    msg.state = 11U;
    msg.plan_id.assign("DYIEOMGHIVDOJKHLMGVSFDTPNOKWWBCZUVDVYHFGCZOZBFXUTIQNKEFRIFASDKBGUELJPELJMRYHLPPNQDPY");
    msg.plan_eta = -547916160;
    msg.plan_progress = 0.4823071526556141;
    msg.man_id.assign("LGVAQRKYQKMFNRHDSEABKUZCWCOXQEAMOYOEGPPODAJZADBVUEACWEFSPUDCDBNLRHFLGMDBSIJIBGHHMTAUJCUKCMYIYTKTHNXTNUTFOYMLNBLZGTZTUQQYYLRZXLSWSBWJTFZQHNVVWVFPDGSEZMVSRPBMXIVXISCJNTKPSPLLXVSHJZ");
    msg.man_type = 37312U;
    msg.man_eta = -1115390720;
    msg.last_outcome = 166U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.06382445257313751);
    msg.setSource(45590U);
    msg.setSourceEntity(4U);
    msg.setDestination(23060U);
    msg.setDestinationEntity(199U);
    msg.state = 149U;
    msg.plan_id.assign("OKTPGFPXYQHRKDMONMEQJAYXCTDPHJMLJFEFYHIECYWDWVVJASHUTSBKLSOXXNOBGGBAMKOXGRVZCISRNNRVLSXPIJTICWXHI");
    msg.plan_eta = -708006949;
    msg.plan_progress = 0.12604698022228766;
    msg.man_id.assign("SOSLPECDIEULGBTOKCXKSYQBHCBJYDAIHABHMOMTRAIVUFGDFVYNRIGFTZDHKWOPCJRRWILRSHFYPVAEVXYBCUJJZRNEKCOCFRLIUFODDGJXQQROYKPWDVXTBTXRSEJLWXSWVWJNTHPUBLMTKPNSRPVAMXIMMABLAWXEUGDLPFMGNJINLNZGZAYTTLVSHNHNDAPNQQKTOEJFUOWCV");
    msg.man_type = 49912U;
    msg.man_eta = 933394127;
    msg.last_outcome = 122U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.43730649202007876);
    msg.setSource(63419U);
    msg.setSourceEntity(119U);
    msg.setDestination(19893U);
    msg.setDestinationEntity(108U);
    msg.name.assign("JDIQXADBJEWSLQVYCHYRKMTIZBTPUQPVFGKFARXGQFKMPXLVHJHBUHGEXXTZCOMYRIGKSSVUCCOOLUSBYWAEEGCOQLNCNIJPWHDHRMMYQRIFOCRVSESZFVLWZYTZNMLQIQTNPUQDWCSTBMYOENAJNWGIKDCJTRQBFWPKDXZ");
    msg.value.assign("GMZXWSTRKUKDIDLGATSSEUUAHDQSCH");
    msg.type = 96U;
    msg.access = 28U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.3622061982234467);
    msg.setSource(25339U);
    msg.setSourceEntity(79U);
    msg.setDestination(40697U);
    msg.setDestinationEntity(180U);
    msg.name.assign("BLXNJQYQXBEZYGBSDVPLFHUOAFMBLYNNNCPVUPAVITJQEAYZJCRMKTVSFBOPZEIXK");
    msg.value.assign("PYQWZYPULLFCSJQWDEJDODWGRYOBDPXMH");
    msg.type = 170U;
    msg.access = 189U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.8491181119061258);
    msg.setSource(63394U);
    msg.setSourceEntity(9U);
    msg.setDestination(61808U);
    msg.setDestinationEntity(223U);
    msg.name.assign("OGHFAXURZCAUVFLJKESVY");
    msg.value.assign("BMNKQCVWGIMZRLTEUUUYKOSYVAHIDAFKKZRDQHUDAXVHELHBWNLSMGOPUXBFABKQMICXCCWJBQNXZANAFWAIGTMYKBIMCPJKDPLYSBGYLIIDNXCTUFBQSUHWEKRFDTZTGLEEDVHKZTJGXGQWFNTPPFRMVQNI");
    msg.type = 52U;
    msg.access = 85U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.5510886664265376);
    msg.setSource(39577U);
    msg.setSourceEntity(61U);
    msg.setDestination(53870U);
    msg.setDestinationEntity(193U);
    msg.cmd = 244U;
    msg.op = 74U;
    msg.plan_id.assign("WJAQRQVDGKGTTNLUHYFIGXZZYEOPDLQWSVQFMGPGJBNFXYDCAFPRYAIHDJJJCSMCULMZCRXEGEANEQUKHIYXMNIOYTSBPW");
    msg.params.assign("YYCQTWXDLLHFPRWUADKIHNZBQXVOGDJEGKSGBUIUHKXHZPGKVFXAFXEYKRNOWFQZBMHJKKROXHISWWISVPJFAAPGTEFVZSZDBQDGPSXCOMUASALIMGXLEBRYMBOCYCIJKEUSIWZNMFNXETFRVLZPYYOYIKQHYBFCLORCOLQPHDUGLTPNJVOURMRNTSPBZOECGMJNAJTPHFENUVAAXDJRQCWLNYIBNUSEQSQMCJTDWJAWTDMMKUVLHTZIBTCVD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.6540576644637278);
    msg.setSource(34273U);
    msg.setSourceEntity(195U);
    msg.setDestination(12145U);
    msg.setDestinationEntity(109U);
    msg.cmd = 121U;
    msg.op = 156U;
    msg.plan_id.assign("GWEWKDLYLFYCXBIFZDFLXFJQMIABEZBUNWMGWDYNGAPNOGCTIRPDRIXRSLKMETBMWQJZLKKFXVIOMTPRTSWZGJF");
    msg.params.assign("JWYLFVMUYGKZWHIBEASEBHCFMOCBAABZLMLJNYRKORLDONZAHZCJGXGDJKOBUJBLRVWGHTRNTXFTNXIZLHERWSDHCWVSQSUKYDFQQTMPNIMSOQRBUVKIBUKIMIYSKUNQLIKTAZSIDETCSWBUPEDWXOEVNAVVEZXOJDMJFEKTLQGNGQFPFGOOGZECXCAEHVHPCDRRVYYFDZVUXCQJROTANIYBWTWIZMFJGSPPTQYASPUKGCMQAPHDNRXMLP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.9001256120504973);
    msg.setSource(40828U);
    msg.setSourceEntity(55U);
    msg.setDestination(24210U);
    msg.setDestinationEntity(27U);
    msg.cmd = 38U;
    msg.op = 33U;
    msg.plan_id.assign("RSTTQNXKOBQD");
    msg.params.assign("JYXRPJNHDZRGBRLSVTDHCMKLFRNVEHASIQUCFYIQLGEPFNSAQAAVCYSBCHPMLZEROXAGHWCKKYTIVCYRWXGTKPGKFXUZILISOYXRSEFZSJDQLEUJIGMPMRTYKXBLGDRPPYWMJAOQTVDABJIODLBAOBFGHUDNHEZDNK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.31629826230623836);
    msg.setSource(57034U);
    msg.setSourceEntity(206U);
    msg.setDestination(56004U);
    msg.setDestinationEntity(129U);
    msg.group_name.assign("GEPBOGSGIFOSHELWULWDIEXCMJHKLNTIOUUKBWNPWZRMUJVZHDNYACUPJZRNKLBZOOOQEXEEPCXUFGWNUEXRZKFYKXYZQTVMLUMBCQNMQQFDHWVJSHSLZCPKPLNDPIOHTCASGQVXWMDFLDXJGACYFTRDSJAAKBFHVWZIMBKQMVGBYGRHDIXSRFKTSRBJIICVVTDAQJ");
    msg.op = 135U;
    msg.lat = 0.8194671031487053;
    msg.lon = 0.8475837215211872;
    msg.height = 0.830884388731052;
    msg.x = 0.5568650938430568;
    msg.y = 0.2885480407031882;
    msg.z = 0.4215369781308318;
    msg.phi = 0.3300970039412898;
    msg.theta = 0.4317102044957324;
    msg.psi = 0.4128392959966902;
    msg.vx = 0.07778508553060692;
    msg.vy = 0.5090745500324039;
    msg.vz = 0.7679783105820887;
    msg.p = 0.1832330383282179;
    msg.q = 0.943660246029538;
    msg.r = 0.8668021081302195;
    msg.svx = 0.7173664873560793;
    msg.svy = 0.8914332999654478;
    msg.svz = 0.4310201452452572;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.20931569473977185);
    msg.setSource(27267U);
    msg.setSourceEntity(136U);
    msg.setDestination(54662U);
    msg.setDestinationEntity(163U);
    msg.group_name.assign("TJLVZIGSGWOUTESNMRSQSLKMFYWWWTTIXSEYFJTAOPEBOEZDAGKQXZCKMTGKDUMCXORZAYHICNZGHKHHKUTJCOVLBJNZPNSZJSEVJVEZHQSHIGYHEQMIAYXODDDXSFVUORUABPHFRFPQCR");
    msg.op = 101U;
    msg.lat = 0.7452556448782631;
    msg.lon = 0.0017271267521851152;
    msg.height = 0.950341069281953;
    msg.x = 0.8979671990488394;
    msg.y = 0.22473632058903337;
    msg.z = 0.9659579539234696;
    msg.phi = 0.4079000032743427;
    msg.theta = 0.4048595178339268;
    msg.psi = 0.2565810842694304;
    msg.vx = 0.20889054792517314;
    msg.vy = 0.37045033020662055;
    msg.vz = 0.7138459905408177;
    msg.p = 0.13957644954883197;
    msg.q = 0.0336167777907761;
    msg.r = 0.785290287659026;
    msg.svx = 0.6564584829291015;
    msg.svy = 0.2228583566707445;
    msg.svz = 0.2653356143225216;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.3701175395238647);
    msg.setSource(25743U);
    msg.setSourceEntity(189U);
    msg.setDestination(11406U);
    msg.setDestinationEntity(215U);
    msg.group_name.assign("SVFIGXHOYEPWRRTSUBEYSWPOW");
    msg.op = 107U;
    msg.lat = 0.2997787670266262;
    msg.lon = 0.9062810298248515;
    msg.height = 0.2764290432908182;
    msg.x = 0.6183966013747291;
    msg.y = 0.014509704242552046;
    msg.z = 0.9199672226279096;
    msg.phi = 0.27654803220614144;
    msg.theta = 0.8082537612843623;
    msg.psi = 0.1440763926162396;
    msg.vx = 0.12740328137247892;
    msg.vy = 0.2588322105901165;
    msg.vz = 0.6892309125414491;
    msg.p = 0.8520311852625299;
    msg.q = 0.8710527742457996;
    msg.r = 0.7263254405803;
    msg.svx = 0.5467056098152687;
    msg.svy = 0.6744707001937886;
    msg.svz = 0.7977041785530283;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.7048693964560164);
    msg.setSource(55526U);
    msg.setSourceEntity(78U);
    msg.setDestination(64807U);
    msg.setDestinationEntity(38U);
    msg.plan_id.assign("DKHOJMNMULGINEHNIJNCTAVZCIZZRPOIIROPUFGLRXGXNKLUWJWPODBXZVURJBLXRQTITPYEOAGKMPXEGTVABEUYYMOFDAYWZVVCRTFBYEHVQMFDGGBLKAQCAUCWNJ");
    msg.type = 135U;
    msg.properties = 243U;
    msg.durations.assign("GXLPGYSVHSQCKFHMUGAUODFPXCLQJZKLBUBMXZSUIAJUOGANOILTOSZMJXXCBJIAVAZDQWFIWENWTXPZIWXHYEQTVYPSEVMVIQSNQIUYYOPTDHWMFZTWEBCUSIXJKTMHGEKGEAJFHQTB");
    msg.distances.assign("KODQPWOSOZA");
    msg.actions.assign("LIBGJPFZSAVPURSPPWJDXOKCWMRNYYWRALGHXTOTQBMEPITCYVWREXLJMJSGCVLRQVIIYMOAKFGDOOKQUKXPBOMQKROWSKEQRENPDXZSAQHNCBENVUSOWHUELEGLBXQUTYWNTXKZMQSAKMLGDVJJDXFFIEJHJVDQRXNTHDZUWAMOTL");
    msg.fuel.assign("OULFTNXSJEQGMV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.7508509260431694);
    msg.setSource(27440U);
    msg.setSourceEntity(97U);
    msg.setDestination(11941U);
    msg.setDestinationEntity(143U);
    msg.plan_id.assign("GOLXJXMZEKFZWIIJMDVOILXC");
    msg.type = 215U;
    msg.properties = 57U;
    msg.durations.assign("HIZSCXFFRGUVCWXBESDLGFFDMWFJDTDWLANQZCWEJWOFDWZLZFRUFYSIQOTAVNXLALNIUDMTSJQTQLAMJJQJXKOKNEXPCEYMHPAYSEYSNYKMRUWBLUOYUMUNLRPDJCDIBKMTGVQARWJNCBKHZPEVHAYTBRITBRASGDXRIXOGVBRGCIZWVWZRYCHPMFTQHOZGKVXOVBYEHFPPTATJEEIZXPBGGUNCNJBDECKYHULQKHOQVMKZNLPKOO");
    msg.distances.assign("IMQVMOHWDTUXQXMZBXHRUEKVM");
    msg.actions.assign("WJVAXSQZCKQLZFDGBJFPKVMXPOLSIHEHXHGXHWYBNRWLCXZZFLYBOMYAYTKOMEHWNEFUGVIWEXCOVAQQQTIAMXREUPPDRNSYAGESHTOTMDKCJZCCABJTAVEOJQKFKKRQMCLZIHRMJKWNZWSDLFSBGQUUDUDBGYZBEVVKFRNTWVJUITCDOCLMODBSPGPIDREFFVPMFYHNPITYATIPZGIYITYCX");
    msg.fuel.assign("HFBRFBKUDZNJZDQXRNOTNSFGWDQGTTFFONMDVBLLDXIQXWJAUFRWACOBXUNLPCPONQATAUYPMIIHEJODBIQWSHUKWZIZQSMTNGQMEIVLUIJEUCKECRLENCBRYTLXWWPL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.8234924072470164);
    msg.setSource(30125U);
    msg.setSourceEntity(197U);
    msg.setDestination(59272U);
    msg.setDestinationEntity(199U);
    msg.plan_id.assign("YNLBSYARXZMOZDOHKKVYHEIDVIAETUMQLMFQJGNSZISWJPIZDCSRHXWFCHAXHBVGQMKUKYNKXXMGRWUKWILORVEHZGNFVNSNDBRSTIKMZKTEGJU");
    msg.type = 35U;
    msg.properties = 121U;
    msg.durations.assign("XDOJQCYEFRBKSAAYPWEQVUWTJHORTDCEMZSSCZRMCDXUNQFRABJINBEUZRTVNIUZLLTTEAXBLGDXYIMDNWKVVVBOBPLER");
    msg.distances.assign("KWRNYYULMUAQRZGNKCNBNLIXEFLDTUMCOKMMGXBEEZUDJXXFUSZITALSCSVQOIOBGKQRXTCWMRHBJYDWDVEUCJSZXYYEEGVTAXBGNVQUSLQHEPLYBGJXKTJRAWVTCRZAPDORSFPPUDWXPIVDMFTIZENOGTVYSBN");
    msg.actions.assign("YREBRWKZNKOXPTSMKQVNDCHGNIDUYABHMYPAHVGKXSJBKLAJVUZZNVALCFQONFRXUYCOIVWIQOJDRWGSXIZATWBIGUWBOTUELZULXDKPIJAIRVDIDBEJVCZJ");
    msg.fuel.assign("DMBVPGFZIHDCDKJKLMICYFXAIALKOTPIEEOMONXUVPJZDMXUEWYEUVMEBBWUPVBYJQCZMOGLNCPRAHMKLGPTPFHLZIPREJSBNNWYO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.05635110447594216);
    msg.setSource(37206U);
    msg.setSourceEntity(233U);
    msg.setDestination(15055U);
    msg.setDestinationEntity(232U);
    msg.lat = 0.7644130329720495;
    msg.lon = 0.452944820908703;
    msg.depth = 0.4759837221341757;
    msg.roll = 0.9732102809004611;
    msg.pitch = 0.8717404003537726;
    msg.yaw = 0.8315131255288809;
    msg.rcp_time = 0.17494242088086553;
    msg.sid.assign("SIGITCMNYDXOLLXKYWNKNONJSNOQJIQNSBRHWHMOQELZQGELEGPZRBEVLCREYOJXIZUGFUAWSJMCWJHRICRQNBJHOABOASUFDAAGXJBNIBQTBRYWOTMUWLFXSELWMTVRJVWQIFMKVPISGZTXPZZGUVDQDZLPJHPSGFHMYGDRPFTP");
    msg.s_type = 146U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.4936044657795138);
    msg.setSource(16246U);
    msg.setSourceEntity(190U);
    msg.setDestination(50830U);
    msg.setDestinationEntity(190U);
    msg.lat = 0.07788219234809957;
    msg.lon = 0.1908825516437439;
    msg.depth = 0.3763822572871999;
    msg.roll = 0.5662670553916603;
    msg.pitch = 0.4566130033263396;
    msg.yaw = 0.9411172984431694;
    msg.rcp_time = 0.19422203051714892;
    msg.sid.assign("GPCTLWFXPKWSQYSDINGNJBCFWUWAMCCZZSGFQPZKQOOKTEWLUPNNEVLISOIXBYHCHJKIDKZWOSYQDYRPRFRXKRYTMUOKUTWLEMRWZGHDOJOCMRGZPAJHUXVBCJUTVYIYBLZEZPCDSUNSYYSNVZPBDVCNQMNFKVMZVETXKDMOGFGLALB");
    msg.s_type = 35U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.05320165595550275);
    msg.setSource(5829U);
    msg.setSourceEntity(195U);
    msg.setDestination(34447U);
    msg.setDestinationEntity(121U);
    msg.lat = 0.7318773867061074;
    msg.lon = 0.47385539609464156;
    msg.depth = 0.5610756046767854;
    msg.roll = 0.31949961113916525;
    msg.pitch = 0.7581505850770104;
    msg.yaw = 0.8924741703856065;
    msg.rcp_time = 0.303611513026513;
    msg.sid.assign("FUATETBWUVPOCWMFJPQWDXBNENOQMHGIYNJIQFFYB");
    msg.s_type = 17U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.5080040789068929);
    msg.setSource(12539U);
    msg.setSourceEntity(221U);
    msg.setDestination(18965U);
    msg.setDestinationEntity(26U);
    msg.id.assign("NADKZFDCPHPZUXNZJPHFHAIMFSGYTIOREREWVFJDXQGQIEABCCXFLOVMXHYRXKRRSTZNQSJIQLEVXXJVAXDNDTISVKFMBUKPBQJUEJMWSRYHMEPSXWVUOWBMPWQHODPVBIULZB");
    msg.sensor_class.assign("IXUCVQDZQMWGINWMYJYMHSSMINZFWTQSDTRESLMOPLJZDIXCHQKGKDUUGYKONVHZUBEIZFAULAGVFLANSUXWXPOGOCZDIFUPDHLKWVWKVFPETVQVDXYIVLWDGRBXIFHQUABBHMJZECLKTWYTGEBGNCTLQWRSRYFFAONYAHQZGOOPLTNJNSBKCPFMRXHESXNDXBOGJEPKMLRJ");
    msg.lat = 0.3411004690236644;
    msg.lon = 0.8827533423647023;
    msg.alt = 0.8811848006544667;
    msg.heading = 0.007118766018637479;
    msg.data.assign("YUYCTBNIYCCBVRSEMTLP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.6682203492615458);
    msg.setSource(21378U);
    msg.setSourceEntity(225U);
    msg.setDestination(22376U);
    msg.setDestinationEntity(51U);
    msg.id.assign("ETNHRCSFAXEVBGXRKIMLUKYZYZPCJNMICCJNHPLQVGWERKESVYHZVEIUTDJOTGFBHTOWQBGJMDGDYQWTNGXKJQDNBETWCYOOOSGSMRHBAYFOUSXNQAZPMSYPNAKBXVSWLWJGDOVAFUFVWNBLJZPGKLZGTDLKJXLZ");
    msg.sensor_class.assign("TJTKUKMLXHAZAOSCWMBZQYOAKBFMKNHEUEIXXZJZSQEVZVEIPRSJBYHAGGEHTLOMEFZDGN");
    msg.lat = 0.7486600089017689;
    msg.lon = 0.4918627140087134;
    msg.alt = 0.5921143738396315;
    msg.heading = 0.5760613420349001;
    msg.data.assign("UUYQNYIZSFWAAGKCDWOEBNHSEFLPYSJGHXNEBRORYCVZORMDOJZTWAFZXWDVUPCUZDISBUYGUWHIQUQVPYHWNYQSOFDGLBWTOGLVMEZHIHDZYLVKEJIPNXZFQKRPSKOGJGRKBCDCJKPCVQXNTFMRTBITPMLNOZOSRXBKSGJUTZLEPLGTMVWUECCYRXVAEAUSDFXECXJQJYIAWBJITBNCKHMMKAIVJEXLLHA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.21772213999797407);
    msg.setSource(65183U);
    msg.setSourceEntity(74U);
    msg.setDestination(19706U);
    msg.setDestinationEntity(31U);
    msg.id.assign("AFCSINIUDGBDTOXBZSYBOAZKXJLWZLKMNQKSNXHSFDOPZTMEVUDZIZBWHAXQNPNYXSFYFXTTBKHUMHYLXJMMKVMWACSVGSFOMJNBCPHZDKHHQRWPNCQDAYAGXYOFNBYRHLRPCCPOKETTGJLYRPEGLRNKTMJUUVICCROEJPYIVGCEUNAPRJLKRSGEIWLDIJGBTURXAVMASVDQOCHUUOFVSTRUALXFIZFGEZQDTWFEWI");
    msg.sensor_class.assign("HHRBXFOCYTKBPKFRWDPJLNVMJJVNNBZOHKQADZFUBGPSIANJDEABMQUKGTHCXWXFIJEMOEWUZWHKKFPPZDNLSMXSIOZGCIRLSEOJDGWOXYHSFUEYBDACHGYWBNRGPTUYZWDCZTJQRQVDESLLTMSFUWNAUUNPTXLFYVGRPLMYCQ");
    msg.lat = 0.8919744852259953;
    msg.lon = 0.8722233277007927;
    msg.alt = 0.040744625112318356;
    msg.heading = 0.4685769886282988;
    msg.data.assign("GRCGLPGZNGUNOGSTPBBVLMYMDXHBISSFBQRWHIQFOKVSVNEXYGDXFMIOESQCXKJBDZHVLIEASXLWDJWETXZDOYHXUWVAXTWWNBLTQDWOCBAEFMFUGQFIVAELJKIMRYCUNUCGUUKPZGZMBPSTHTYOJDLDVKCVMQBJKRIACPQCKAZKVQSDAOZJEQNYHPWYHALQDEKRHFYTPGUWISJPRRNNNEXNAOZMZER");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.16004797668670845);
    msg.setSource(38659U);
    msg.setSourceEntity(190U);
    msg.setDestination(13385U);
    msg.setDestinationEntity(94U);
    msg.msg_type.assign("SAFDWUZXQJSUDHEUFBBKEESHZIUBNHYJMNRKMOHMMVRXMUOPSYNXHTBNMWEOJGZRDJQXHRBAFRILAUAXZOIDFWIETNOCINJZVBISQYACXGLCRDTCPWEQTXTHPLYVKYIEMDVMYQHTDNLJKWESIFDPNBOUJLBJIPHVVKCZGLVCFFNQOUELVALCAVDXRGGXTRKWNRFPAKPSQVYHBSWMQAGTFUZMUSYSXCQZGCOCK");
    msg.sensor_class.assign("OAIXOFITWVSURDQWYXHDMAPYFKTNAEJBNNWDEXLZKQDZESIRHJGNQPTJRBRICNQXZFSGKLPZUCUVOZQWDSDAMYEVASMCRHQMRUVGBMJCVMHAPZNJCLLLECHEGJIXPGACHJYZPVYPMQYGALNHHEVWOUTRJZCFABUJTTOSBBDHPKMOXFRTRSDLCZMWXEVTOTYSDZOYEBLKXXFWKQSPIVDQOUBENIKKSNINFVBF");
    msg.mmsi.assign("UADNWJMDHLYXDZGGVRBPFDXFILEBQTKPHBCPYBCXAOSDQBHUVBKQWSUWTAHIAFSXBFNHTVGAMNMKAAFMEKKSZMDPMKCREIJHWEUGWRFGWLNIIZRQECKOEVYSJRGJAGQNPGLBWRIQGAOUGJPKDRYLXQESEVUJLXPWWETDDBCNCAYZXUXFLIRMXBOXYQNCTHUZVO");
    msg.callsign.assign("TYKKKFWBUNMNVSATZJKQWLUPSADWYYZBNMIDKUDYBIDVFVDSQRM");
    msg.name.assign("DSHOSRIQRAHHQMWSUNTBNOMTUTCSVNTGYVIPZBJNLGOZNNMRYPTNCBIBEADRXFYAXIARZPWZNLYPVBSPMMEXFYFKWZXRIZKQGKHQIUCKZRQOYZLPGIOEWBMGLDCQVJJFNWKJFEBFYHPCVWWJUVGYCEJMSNPLVHEWMCHFMBWYTIUEUKLOCTPDLSIRK");
    msg.nav_status = 176U;
    msg.type_and_cargo = 32U;
    msg.lat = 0.7136713971818495;
    msg.lon = 0.34852989076441976;
    msg.course = 0.7857285904634597;
    msg.speed = 0.0056317910464469545;
    msg.dist = 0.3207433642798867;
    msg.a = 0.8559277895139678;
    msg.b = 0.5092650203704209;
    msg.c = 0.17953039748467992;
    msg.d = 0.16598319683155427;
    msg.draught = 0.6125448074371863;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.6634301262565547);
    msg.setSource(12708U);
    msg.setSourceEntity(94U);
    msg.setDestination(7765U);
    msg.setDestinationEntity(252U);
    msg.msg_type.assign("PZQVIUXPZNIKGUZYCJXFYGQFXMHGBZQBKKIKCXQLJZCNXQHKHLNJNOWHAGOIVOARIFSPDPDJOBIJRHYBNEMVVTTRVHYWQSRABXEWFEUWYFEIECAWXCTUCTOTLHAPDHFLRNJUQUCAYWMILRZMBGVTXLPYVUGRCJMJZUMBGDAWEKOHQQVDEBISSXSISMKQEGR");
    msg.sensor_class.assign("JSHIUOYBUTLABDZBPXYYBIRVEPCMSVGNDBMCDMHJNMAVUGOEGOAMLXKPIZCYLRRUEUHELXIXKOYIFTOYAQYVUGMNRWXCCFDWIDFMNLBKTFPQKQJGQHFSCKENATRWZOLEKQXTBEKTWVRQFSSPVKPGCWBZKTCGXWPZXXUOFHUVISZBVLJWRDHZZRDZMJLEHQUQCJJEJUZNWYRFMDWSNCOHRSXJTGFGFVAHLPQMGNHPVJITIKAIAONSADWNSBO");
    msg.mmsi.assign("PPZCYTEINAGGVKVNIWMADDJLSNEKBVSGCNKKUNOAIQQJGVABZMLVHAXQBUEFQERRCZLWJSBFDYPBDRVNLOZOLPTBQIWTKMACSOIJKTHVQYCP");
    msg.callsign.assign("OQBXQOXVICFRJSBXCGRYEFDJYQJLWTZKNSUCANNTDLHGXEBEPFVOVEITIAQDFWKFCRGUWDNLTZNAVRUCQFAGSBUBMSYAEVRTSUGBBAHPJDQZONJKMMKZYGGSVMTBJPELUYXHFQOHLWXZWBWLOCDQZLMMUCGKUOKNAYHWMPMLSNNHMHPFTUPPWRQRCVTF");
    msg.name.assign("TXXHOWIUZPTBCQUARPQVYZNBRJUOZMEEXEIOMXKHQSAGLMFNVVTNHJYICWDYCGKJIFYVCOWDXJWDRLAVXQTFPMGZGTIKFEHTJXCSNMRGYFTCDLEMLEUCGWHXPSZHUBUJNVPFNCBOAFSAXQKTLJWQMSWSEMAIPRDNLXDPBHAGLNYZBRRRFQ");
    msg.nav_status = 98U;
    msg.type_and_cargo = 160U;
    msg.lat = 0.9250211238910964;
    msg.lon = 0.13469562279210268;
    msg.course = 0.5611922010116959;
    msg.speed = 0.08282684983003752;
    msg.dist = 0.4204208125652007;
    msg.a = 0.4239620925219316;
    msg.b = 0.7470110201292428;
    msg.c = 0.053195561434818295;
    msg.d = 0.8150283862670503;
    msg.draught = 0.22838536059690395;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.6678475180430526);
    msg.setSource(35967U);
    msg.setSourceEntity(228U);
    msg.setDestination(50909U);
    msg.setDestinationEntity(48U);
    msg.msg_type.assign("ECBPOZEVCEUPHBOFLEXSVPGKCFMZJULVFUXTXAKGZRRGJLSYHHSKVRXBJCNGHZUONBKGZYRJYCOMKLPDZLDEWDHAWDTNDYYGVNYGIWLHAHFQEEUJAKVULGAYQLCQSRIRPOBBFBVPUMTHMVRMNAOGXPPEBOSAWWITNCCMXBWFURICAJGSCFMDLIFYPSDTTMAODWOJHYXFRMZWJJQTHZZLEQXZTRQDABOKIYQIXSUXDFMSSNQ");
    msg.sensor_class.assign("HUJZTKGICCNKJAQLPNXJGXDRAZOTMXDDTVZEVZPHXMEMJJHLNBCDSYJGSIOKILMSODZEMCJXSWNGNHCOTUR");
    msg.mmsi.assign("YABIVUCTHQUHUFMDKQAFJGWEMSIVUEJGWNTFIPZKNKOPQUDWISYZRKKNGNOQPZLWKQMBHRIVEOESHWMZIKFURXHMQLALYAESPFTHLXKYMCGEZCOUWNZEHCOXATRCNGAVUSFKBTLJNJBVDHBTDJCSIFLJPOULOSNBDTWYJPUGRDQIDGZRPCWEAVIMQYARBWWCGCXENZTVALYTIJOSXPJX");
    msg.callsign.assign("JPKDWTEBXYHWNOEUNFKGQGZINQHLSHRCPEZUHURRUINTJRQZDDTGZWVKCTXYHIWFQIJEJDTWIODDNFIMCEQNSDEILPWFMSRTBVHSGPCFTMOVXCLAPPHRAGMXO");
    msg.name.assign("QKYFPUYAFOXVWZHMSYZLEWHUAWKXKJGOGNCZNWBPMJSGYKTDUFFRKGVXLTLBIOEYWXQDQFIJLAICZOGMATXZCTSCBKUNETTXDYFVAKERCPMJXIMGOSHHYPUIBOZNJSLKHMQWI");
    msg.nav_status = 144U;
    msg.type_and_cargo = 14U;
    msg.lat = 0.4381694823300437;
    msg.lon = 0.062400650691724846;
    msg.course = 0.8152296862284276;
    msg.speed = 0.43934397137330927;
    msg.dist = 0.6846932614792219;
    msg.a = 0.08216427637805679;
    msg.b = 0.3641329946653703;
    msg.c = 0.2840736032099592;
    msg.d = 0.44518122536285487;
    msg.draught = 0.7379964552637571;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.43957159209048835);
    msg.setSource(38190U);
    msg.setSourceEntity(128U);
    msg.setDestination(50418U);
    msg.setDestinationEntity(74U);
    msg.id.assign("EXLQBCGXTV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.6971773731796231);
    msg.setSource(28799U);
    msg.setSourceEntity(43U);
    msg.setDestination(29161U);
    msg.setDestinationEntity(198U);
    msg.id.assign("WNJBRIQCQWLBDSEWUFONHTBVPEOKWHSTOKXZHSHNIODDJFSCRMWWVCMXGFCEDMYCKEAMTYLSUUGQDQTDSNSIBBAVYXJVOLLNWCRCUHPDFOMAKMMZAJYRGIJPKKNHCJTPJAEIEYABVQTFUYTXJLSLPGZQBBRUOZZXPINIBKFYUXLODYCDXQAZPOGLUGCOYMHEKAKFVASUHXNVZJXURREBQRELT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.028270003070168026);
    msg.setSource(47745U);
    msg.setSourceEntity(110U);
    msg.setDestination(28009U);
    msg.setDestinationEntity(136U);
    msg.id.assign("HRZKDPCYLNQNPVNBJWTGAYLLOFAZAABLCBHKXZAFGNS");
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("YPEUQIVXDOKABGYJVRJOGCULWDDCPGWXVKGOBJXUTFNLCIPWHRTHT");
    tmp_msg_0.feature_type = 250U;
    tmp_msg_0.rgb_red = 216U;
    tmp_msg_0.rgb_green = 141U;
    tmp_msg_0.rgb_blue = 165U;
    msg.features.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.04040687125848108);
    msg.setSource(21046U);
    msg.setSourceEntity(73U);
    msg.setDestination(28687U);
    msg.setDestinationEntity(175U);
    msg.id.assign("LOMFBGBPFSCGUUXQZRITYZFAUBJULRCEOQFQGBHDPZWCZLTQIXXGWBNIIENRWLYMJMTUWMZTSPFRKDDDABGBZAVUOKKXHRNGMKIKDTFCPJJNGHWVIYQFCYUYMKVYSYPOJKXEZAWAVGVDDJJUVQRYSHMOKTOUZMFGPLCJTOPJYXHTHAVQHKYIPWWSZPDDXSXQEJLAIFEHWNLXKINTEELNUHHVARNSRGMLXOEFNBCZROQM");
    msg.feature_type = 65U;
    msg.rgb_red = 106U;
    msg.rgb_green = 230U;
    msg.rgb_blue = 90U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.06262567967076249;
    tmp_msg_0.lon = 0.05815817705510984;
    tmp_msg_0.alt = 0.4607596176033627;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.9855542874891674);
    msg.setSource(1819U);
    msg.setSourceEntity(67U);
    msg.setDestination(62537U);
    msg.setDestinationEntity(4U);
    msg.id.assign("IOIPBTLUCOCKEMYUDSUIKUYIJNNKTLHRHYWTVVQHGOPPOPWRKQRFIEKNWPRKXXHLTKJQOXSONMDCJOTEVNMZXIUUNXJBRTFSQAZZARLYOSODLDHIMBSAAPWXIMMPEOTHAGDZQNYKQDLQXGAVDWZFLQBFFCJWFKXSPKBGZA");
    msg.feature_type = 163U;
    msg.rgb_red = 70U;
    msg.rgb_green = 213U;
    msg.rgb_blue = 102U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.5107073658246477;
    tmp_msg_0.lon = 0.04213361987375097;
    tmp_msg_0.alt = 0.25080572547222524;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.7558467649783911);
    msg.setSource(54515U);
    msg.setSourceEntity(133U);
    msg.setDestination(7634U);
    msg.setDestinationEntity(190U);
    msg.id.assign("MNEJQAEKLSFXWNKFEWLYCVLZVJKULNRBZWNMEQRHCSWJHQQVUPKWMEQEDIPOPMZZVPRBXMFMLGTOXDWRJSYJ");
    msg.feature_type = 207U;
    msg.rgb_red = 32U;
    msg.rgb_green = 107U;
    msg.rgb_blue = 198U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.5942363268637129);
    msg.setSource(3704U);
    msg.setSourceEntity(245U);
    msg.setDestination(58609U);
    msg.setDestinationEntity(140U);
    msg.lat = 0.39850186933851117;
    msg.lon = 0.9590394494041603;
    msg.alt = 0.9012047698444698;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.16595188722073406);
    msg.setSource(52783U);
    msg.setSourceEntity(246U);
    msg.setDestination(22792U);
    msg.setDestinationEntity(189U);
    msg.lat = 0.9921233647499142;
    msg.lon = 0.7322959849390211;
    msg.alt = 0.4749040237228477;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.2597019115795828);
    msg.setSource(64234U);
    msg.setSourceEntity(56U);
    msg.setDestination(45379U);
    msg.setDestinationEntity(104U);
    msg.lat = 0.6480225255805614;
    msg.lon = 0.025584283189112322;
    msg.alt = 0.028399296479996505;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.950785254447408);
    msg.setSource(51377U);
    msg.setSourceEntity(52U);
    msg.setDestination(59489U);
    msg.setDestinationEntity(15U);
    msg.type = 68U;
    msg.id.assign("NCQMGVKUQAYCWS");
    IMC::CcuEvent tmp_msg_0;
    tmp_msg_0.type = 224U;
    tmp_msg_0.id.assign("CGLRNECBJZZKJNTWMGDFOTWCDQVXVSRCFQTAEDHJDCZHUNVSCKLXINAKOIMIFPPZKWQBBXFRHMYKEXYGGWDMDLLVVFICGAQRUIQFMOUCASZDTAUPUCOXKVAANQBPOZEJFUSQMQWYZLARHJGYVJPTBRPRTKDSYHOXHFEIDUIRHXLLYW");
    IMC::FormationEvaluation tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.type = 247U;
    tmp_tmp_msg_0_0.op = 216U;
    tmp_tmp_msg_0_0.err_mean = 0.95562339935218;
    tmp_tmp_msg_0_0.dist_min_abs = 0.3075216716221969;
    tmp_tmp_msg_0_0.dist_min_mean = 0.456160386763128;
    tmp_tmp_msg_0_0.roll_rate_mean = 0.774229897214024;
    tmp_tmp_msg_0_0.time = 0.12936817990240668;
    IMC::FormationControlParams tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.action = 74U;
    tmp_tmp_tmp_msg_0_0_0.lon_gain = 0.2642698013191509;
    tmp_tmp_tmp_msg_0_0_0.lat_gain = 0.2724818957490345;
    tmp_tmp_tmp_msg_0_0_0.bond_thick = 0.26910298931684995;
    tmp_tmp_tmp_msg_0_0_0.lead_gain = 0.6739674073513122;
    tmp_tmp_tmp_msg_0_0_0.deconfl_gain = 0.64021053873074;
    tmp_tmp_tmp_msg_0_0_0.accel_switch_gain = 0.014882303542871567;
    tmp_tmp_tmp_msg_0_0_0.safe_dist = 0.8597112685879061;
    tmp_tmp_tmp_msg_0_0_0.deconflict_offset = 0.7651436384805004;
    tmp_tmp_tmp_msg_0_0_0.accel_safe_margin = 0.8238485086760796;
    tmp_tmp_tmp_msg_0_0_0.accel_lim_x = 0.4524969095035146;
    tmp_tmp_msg_0_0.controlparams.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.arg.set(tmp_tmp_msg_0_0);
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.9352036205437815);
    msg.setSource(19265U);
    msg.setSourceEntity(173U);
    msg.setDestination(59375U);
    msg.setDestinationEntity(14U);
    msg.type = 199U;
    msg.id.assign("IJRGHEEIQNJTSSFNDQCNJPT");
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("QEPDELSTBVKYFDWHYKIHMNODSASZMFVDLILBTEVVRSKCYCIFGDUEJGJDQPZSXCYNBFFJMRZCZBMTBOPXXEVSSZHTRAUITMAEBPCTTATYQBKHBKFSAYHAKNONEZGHCWZUQHFYJVRULTIGR");
    IMC::CoverArea tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.16674133005027514;
    tmp_tmp_msg_0_0.lon = 0.013006809945264264;
    tmp_tmp_msg_0_0.z = 0.5137204199954202;
    tmp_tmp_msg_0_0.z_units = 97U;
    tmp_tmp_msg_0_0.speed = 0.9670359384912044;
    tmp_tmp_msg_0_0.speed_units = 122U;
    IMC::PolygonVertex tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.lat = 0.24352015840902486;
    tmp_tmp_tmp_msg_0_0_0.lon = 0.24418963011017103;
    tmp_tmp_msg_0_0.polygon.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.custom.assign("KKTNDFGYPXLIAQIHCVQWHHPXCCSWBGHQYZBKSRDGICUCBMTEJKBXKBPODZNCBQOMQKBPYLUGNUTYTXWGGGJHEEHOSFMFXERIKIAWRUOZMFSLJWFHMVLNFINYVWORJWGJCEIHYQZUMDZTCAAVKQADJFP");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::AcousticBackscatter tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.beam1 = 0.5084011597118436;
    tmp_tmp_msg_0_1.beam2 = 0.38411257165483037;
    tmp_tmp_msg_0_1.beam3 = 0.7649536206451395;
    tmp_tmp_msg_0_1.beam4 = 0.9643863291079685;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.2880755225812631);
    msg.setSource(14997U);
    msg.setSourceEntity(126U);
    msg.setDestination(37877U);
    msg.setDestinationEntity(148U);
    msg.type = 132U;
    msg.id.assign("PRJPECVPBZIFGOJIXUKKTKICXWHLVKYKBISRXFMFURMYBS");
    IMC::IdleManeuver tmp_msg_0;
    tmp_msg_0.duration = 3374U;
    tmp_msg_0.custom.assign("PVQUMPLESCTKGDHQZXQZGYNIRRBVPSYNWGQHYPAJSJYRDBSGLRCVLIQGGXNRSTRJLJEGAKGIJQAFECUMHXXWCBZITZHCVMAFLFERHTTPWPMEAYOBEBIQBJNFAESHIZDBMEIUNXCCTDCEDWXPXXMUSDTKQNUX");
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.0021247304779730136);
    msg.setSource(32983U);
    msg.setSourceEntity(115U);
    msg.setDestination(29382U);
    msg.setDestinationEntity(201U);
    msg.localname.assign("WLVDHIFJSOABOFMWECHOZUKOJXUPXIYXMKGNNRFQTBMTENVQGSBUEHZPZAQRIRGDTVMZSPTWKUJSEWNPSXJYHOMKPBCOLAYFGYGCQBCBMCKOSJLIQVQXYNAJWVNDKFKBGCYUGJFDXMHOEUVROEUZLYADHTJKLSHEWIAVSBAFUDBDXGKWRTOYSGUAQHMZIYPBPR");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("JVZJAMEBIPTPSDVNCINYPBQVPJGWHCHXNCOTUXOEQBSGSURAJKHRPACEACPLNRCUSVPKIWKUTEGLYZCSDZGIJVSXHVQYLLEXDNSTGFCUMRJBJEFBXFIBGODTQNWPMHHBASEYGBXKIIDTMDKPNWHXYIQADWLYVOVFMWWDYQPMYJBWIFHRYONZBXKQMALASOHJHFGWETF");
    tmp_msg_0.sys_type = 205U;
    tmp_msg_0.owner = 5044U;
    tmp_msg_0.lat = 0.46648044416925116;
    tmp_msg_0.lon = 0.9765062547729727;
    tmp_msg_0.height = 0.6750740457885477;
    tmp_msg_0.services.assign("AYCYFFOCUKEMKEKXESIMPDCWNLDY");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.8995631813166671);
    msg.setSource(48512U);
    msg.setSourceEntity(119U);
    msg.setDestination(24507U);
    msg.setDestinationEntity(91U);
    msg.localname.assign("NXFNQFVNCCVWKLONUCBARKNSHASMHFXDADAHLTVTZVBYZYSUYHWOMPSZBGEWLPOFIKNUMXLXGMXAPYIEKZBAAMNBAYRB");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("XLQJGNBCUNRWYQLUODSCFATLVUIEMWACYGEDKZEXSFHSGEPAQZJLCBYCOUVFMQGYBTEVEYTJAKXAPLAHHENLRIKOMWWHORZ");
    tmp_msg_0.sys_type = 143U;
    tmp_msg_0.owner = 29369U;
    tmp_msg_0.lat = 0.3438047541884579;
    tmp_msg_0.lon = 0.23761583067677894;
    tmp_msg_0.height = 0.5067107329779911;
    tmp_msg_0.services.assign("MESCHVRGUGUDOCXNTIVNJYTMWPLIWULMYWMFEOEHHXDBAQVNEFRMNYQZZSAYSLATVBELQKPDNRMRVTJAQVCWJDSEHZXEY");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.4426997099436051);
    msg.setSource(43414U);
    msg.setSourceEntity(1U);
    msg.setDestination(40143U);
    msg.setDestinationEntity(128U);
    msg.localname.assign("TWSLOBXTXSFBNUJVIUGUFLXZNLREDRQKCOZXQMCJKXOEGYWSTHDQJGQIRWNCRNEGVYXVWZMSXHLKGFFCPQVIOQCOGPKJBZMHOXTNNTUUEPHMJZPMXNWHTTPIGFWIMTVOBRJCFBSKBPFAJKYWEAKYEUOTDGOYAWMLZKPZJPSNRYENDRORGUDEUHIYNUHKJVYFLYDCBCBRMMACVSVIIAD");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("DAYFQRQCFGIWNZSICPOCXGTKRIJTARSFDCYUJILMUPWZT");
    tmp_msg_0.sys_type = 135U;
    tmp_msg_0.owner = 5533U;
    tmp_msg_0.lat = 0.8885779124575768;
    tmp_msg_0.lon = 0.6882026260580233;
    tmp_msg_0.height = 0.2963443127966694;
    tmp_msg_0.services.assign("YKSZLCCLUNMMRZOHFQ");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.6570243590047745);
    msg.setSource(48728U);
    msg.setSourceEntity(5U);
    msg.setDestination(6123U);
    msg.setDestinationEntity(192U);
    msg.timeline.assign("QKCPYBHQISZGFAYGQEQLOWXTKZGJKZQPNCQFHDVYIZVCWMARXVFMDVXOTBPBDBMJJZSWDPOKXHLNUPGXHMGFYVBHIZTVTUHRMSYRJBOALZWGOTLGAYJSLEMNYWUMGFDV");
    msg.predicate.assign("DDXTGOYAFJQWXEBXWRYKXHVIMJIXTDMXIUKHGCVMKGPYSIAPCFPHNTYRMXFPRIGVDPYLOJFZFSWKPIGVDBESZMZZGETENWJILVBAZDUAVVSOUKSEEUZKQEUSFORKPPATOONYMNNBSYRFYHJVDRHQTOKJQRDGAFSHCJGJDLTNMQZPYWWKCBEELYARVLQINIXAGAC");
    msg.attributes.assign("GGTWVZPJAFXXOOHQIYWJNQDXLURBOLUQRVPMSLGMAZOSUTBZNGTLVEAVOUTCZEXTYBQHZKWIVTQVTBHSXKMRJFBHPAOCBYAWAZYEFCCLOFQIQBWIAWRRMNBHZGXPOUURHDLFXPCWEVGEPDYCTNVSABZWDEUHRDRGIDPSQJGEEOJFIAJCZZM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.30811322916063344);
    msg.setSource(19681U);
    msg.setSourceEntity(153U);
    msg.setDestination(27078U);
    msg.setDestinationEntity(139U);
    msg.timeline.assign("QCYCQSHIXPUDDZEUKJZXNUKFCKMKOHGPFWYNMDPVIRTOREQBSSDACGLRLODKWTNZMYPKNKDPOCJTNKMGAYAQBZVSCWXUZVADVIRSCQMZFKBAJGSGYYIUANXHLWLZFCJHUIOUAOBFVUQVRALTPYJWDXEOIWGHPKXPRLQNFMQJJHFOJJWUXMNCGTRTFGRBWVPSTVEVGEQTBLSXWNNMFIZBS");
    msg.predicate.assign("NHZUUEQVJBRWNJVYARRTVSLZEVNMXINEFWWJ");
    msg.attributes.assign("DWOJGDJPXBPSZDMLMRZKGTUXLACSQW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.6150582388948622);
    msg.setSource(21818U);
    msg.setSourceEntity(156U);
    msg.setDestination(16576U);
    msg.setDestinationEntity(149U);
    msg.timeline.assign("NXYRDCADNQQBOPRSZIZELCQBJUAGEUWSRBJQEIBXGOXQMYRJLOGUFTIBVFTQZNKDWDFNNWVVSS");
    msg.predicate.assign("GBCVUQMDREPOFLRXCEXUAPLSZAKYSMYHLWGBIHFOWQBUBVWNPVYCGBOIMEGJWCJCGMNLRRSYNQMYIVLNAFQZNSEEOTQVHCKFXHDQJTHLRKDCSLNYTNTBOHZKBWKGHWUTWDQVJTFZEUGLZQPJMIKIHQIFOZXNMAAPLIXSUTKVXRIWFXFJAISJKDXTSP");
    msg.attributes.assign("YBXSEKWGIVWQDCQGPDDAPJOJHWBGVAQOFGOMRGRHPQDVW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.3825337736711908);
    msg.setSource(18829U);
    msg.setSourceEntity(174U);
    msg.setDestination(50209U);
    msg.setDestinationEntity(6U);
    msg.command = 250U;
    msg.goal_id.assign("KBWBQZAXKTIUYQQSXETVJYFOGTODTRTBHLGDTTZXZVAHBPFKWQINNPUHQTGLKBHLSVUQXHTMWPAHYUJYLEWJGFSLOXGJASPWPVSPMLMNXWDDRBDGBFVMPIZFSCARGRZOJCDBUQCSCIJOOVFCMZSXYRTKWERYZVZUXEBIYURIVNMFERXLWKJNAGIESYEHYLQNUDNMGLJQORCNIXFEWAZAQPIEIJOMHGAL");
    msg.goal_xml.assign("FMCJXMEWFKZELZLDLNPJRNRWRUBQGJTZHAHBAQIITLVOBDYGJMUGYXCESAVAYVBFLJNHTOKWKTNSZWHCEJKSSNPVLOOQNUZSXZUYULQOFHVYBZPZEYBQCGWEGTHSUUFLMGHRKWKQX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.4220651814857105);
    msg.setSource(56104U);
    msg.setSourceEntity(173U);
    msg.setDestination(53091U);
    msg.setDestinationEntity(101U);
    msg.command = 221U;
    msg.goal_id.assign("DJHRJYCOPGXCKOPZRYTQPIAQXZRTFMMMZNCRZDPCGFUMLQAXWEBKHQFHNCAVBNCJOUOLZWIRMQLAQXFVXIVMKLSPBDFWBIKTIMEXGKPVGMUJSSNTIDAPCJZWDTBAWWPJJQOTSAEMEGLLFYEEAUHUYGORNNFGYKSGCSENEXJIGZQPYQOWTJFWOOKIUZSTRRWIYMRVFHHOUDUKNSX");
    msg.goal_xml.assign("NIHVVTJSVXJWZKWBFKKOHYTSRJHMTKNURFLZOJPXUCKXNQGCGFZSERMRJMROQPIQCWTSXIBFBVJPNPEWBFMSPVWRIFVIXUOGAEEILLHRFZHQOXGDDYDEYMTQJZXSTHDYMQUZRSKPPQPZQQDDUJIFYNGWGESYABYZRGFGLCLKKGHXUSWWUENQNAKNTAACBOUUYOLCCEMUBLNDDBGHVOWCDEWTMBLMLAVCINPVSEXJL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.607056749909157);
    msg.setSource(19771U);
    msg.setSourceEntity(40U);
    msg.setDestination(5774U);
    msg.setDestinationEntity(7U);
    msg.command = 232U;
    msg.goal_id.assign("PYTQVGCJAUAXHSZCUQCOYELPPABMIUPQEBTCTRLZVCWSDHBKQWINHDBMNLJGJNZHFNDUGHUJKUBOWWVGOOXQPYCDJGQEGBVKOYFEIAKEPGKNMRKBWLCSDXSGSMIMKLMLJBOOPJDQQFTPUFEZQCAFICYQEATXWORAZYHWTRMLNTIXSRVXUZ");
    msg.goal_xml.assign("GNOWFFQNGHFTIZUZSRBIPEYITTAZFBUSLARWQBEAVSMVFBWGCGGBNFMPSBHEADKYLNKSSIDWGKJSACXZXCEWKELRIYZUQQURRJXUTPKLTXNMJCYOQJPBSLLBQUVQRDMOJZEMVRWDHYHYUAROLIZMXNPLAGPNSHNGXTLXFCFSCJXCIYDVJCQVHZGWLWOPOVKEIQVVWKXHOZYTMARYTDUHBEDUOHTUVHCYMAJOWRKNZPPEXTCBEI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.8582577243829589);
    msg.setSource(40443U);
    msg.setSourceEntity(136U);
    msg.setDestination(29309U);
    msg.setDestinationEntity(31U);
    msg.op = 7U;
    msg.goal_id.assign("OWWKFRZKBIDVXNUKOQTQZGRKUTSPZDXOZHBWPESOPTVBQARIXLJAMMRMQFAXRXFQJQBSECDHHTRLYMEWVXHWNOMJXYSDBHZEFKPCECAOJOLJSWINLALGETINSNUTKTPPNTGRYTAEHGVF");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("VSMDRGVIPZYCGLXHYBKZYCMYNPHZSDWJFUJJILBXXTMTIGRROJOCCLCVZJYQQMVRABPKNOHKHQOPDNBGQFNLEXUZORXDTEVUGEXTOHSGTHKFCREFIFBFFOYPMSXLTAS");
    tmp_msg_0.predicate.assign("DVEAFTRQGRPLDFIKOCOHPYKZLOQVULMTRQLZTYPHUVJAZEEWBRWTRTTETYLPIMTBAINVJUWLQWJLXQHICHGVXMWCYESZRRXJOZQYDGJSMUNNBKCTOEU");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("IDBRTVHJMQADPNQPJDGFOWMJADLPVJZ");
    tmp_tmp_msg_0_0.attr_type = 101U;
    tmp_tmp_msg_0_0.min.assign("DOVDSHVUEMOPZHPOURFVETCATNYGQDJIVAMKKXRMPEZEYDRLMVPLGHSYQWWPBJSATEIDDSYQNEKLATBPATOHJPUJLUYNSDVMFJNZFHXIGBCVCOELZCXWYZFRQQBITFRCLNBCAVNBFFUHUPJWQBRSWNFAXKUHSOZGWIT");
    tmp_tmp_msg_0_0.max.assign("ZCZRACHUURCXOSHULCQKHVVFEUEKWBPXVVTQFWMYOKGGYYIAVIPPSXNWDJPIZRUFSGSMNRXAKOZIHMKWXHCBNIEFHPJZTJEXHDDXTWBIBSZMRLRRJRYEDEKBJUNRGBQPNCDQKRLLZEWDNJYJXHAQNYNFEGOOPOQUTVJHLQAEZXQMFGXELWGYFSVGPUKZWYOYAMMBBBVFGIICCJDAMTBAIDMTOWTDTYT");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.5775993740572559);
    msg.setSource(17420U);
    msg.setSourceEntity(229U);
    msg.setDestination(58881U);
    msg.setDestinationEntity(222U);
    msg.op = 234U;
    msg.goal_id.assign("JORTLJLXTTNBRKQZOPTGTQPYIJFQWTVARZFISWQSIPWZOHLHEYUEYGOEDBBNTDDJULHKMMCXACLBSUJHFBHFRASGRTYXMAYLNUXJKPOKZNJVJSSTPQBCNNUDVPXZKMCBYKWEQEQIHKAID");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("ZIOLMJKLWRJPALXAZDWQFIXQZTHOIJMKUFFERQYFRWVDBCSPRXPYUANFMGRSBDZJAVNHYBBOBNSTAUCJPDXALSQDNXDEBGDGLSRQPKCJXEEVQDTHUNTNGVISSJPKRPKYZYJACZHNEWMZEXKBYCRFJIGNWZN");
    tmp_msg_0.predicate.assign("BEASZDXSQCAXSMEFLKMORXSUKUICRXMDKFBRDPVZIIZQNVWLZLHOSNFXEBDSYUSYXYAURVGWITNNLPNNQHPDYQQMPOLIKJCUHTTIYWFTQ");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("SEWLBWLVIIDVJXZANUSRORNBTVQXWRHCUGUBGDNIYTWMOWMSPOJQHEJRNGYFLFNFCKWKYRHMXLNPWSIEJGELAICOYVTAOJKAQRJTFSEEBCBDKJXWACZHQCGXDEMSZJCJSKCTAATGDONEUQFZVNPYXDVUKITHPUGKXEIPAQKRBDWIBTAXOMKFYMCNAYMMPUUSEFRPHRZVHIQDUOVPZBYLDSGDYFYGRGPZKLOLTXCWNZHXJH");
    tmp_tmp_msg_0_0.attr_type = 193U;
    tmp_tmp_msg_0_0.min.assign("AMVNZOWZRSFAGFMFEBAIY");
    tmp_tmp_msg_0_0.max.assign("VPPTOAGGOZCFWWIZVACQOGDNRSSYOJIKLBOFBWRNJMSVOTSONBWIZUDXXRAJREBGIDAIDMJVSRIXQBHWUEPXKSHJHKKGE");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.9551429169465211);
    msg.setSource(24546U);
    msg.setSourceEntity(4U);
    msg.setDestination(22210U);
    msg.setDestinationEntity(212U);
    msg.op = 240U;
    msg.goal_id.assign("RODARQMUNEPKZHEMUTVKPQPSHEIBHEDLUTAMTLBAANVGCZHUACQVWHHMJLIRZRBDJQAIOWOCHOVDYNCGFVQWWSGBGCNXEIVRCFWLEWDAMXPRBTKLOMTFVTKASKPZJJQNKFRFGPXNDIQOEPASMYLGZGVYOWVIBSJOHUWLJCHUSWWOZYBXVLYSFIMNRMTBUXIYUJDLQYAN");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("AKVRKJRNPTLUYIGMCDDUDCJWNIRON");
    tmp_msg_0.predicate.assign("CXETAKWGORFXDVLGSDBNCHNNECPLCTOJIDVEZNWDUTMSEJHAQHSYBBXQMDLITPKJJGBTZIUAGTQIYYRRFJLEFWXDWSNJUPIBAACSWHZEKAMGQUVOHZNJ");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.7356919157480039);
    msg.setSource(34410U);
    msg.setSourceEntity(21U);
    msg.setDestination(35506U);
    msg.setDestinationEntity(180U);
    msg.name.assign("GKCOFJLDHNAXJYATTMVKZHJZXWNOTFIVDOLBGZXEVGKRGEAJQMMM");
    msg.attr_type = 167U;
    msg.min.assign("HGSCEFTXFWBXGKPTIPUQVHCMANWTANWNHUDFDOULFYMLRYEEOTMHCEMLGCMYFNCBVNQBKARTBIJXRUACYEM");
    msg.max.assign("AXINBQVZVGUSCAUFJLDGKPIGYRWWQRNFAAPLNLAWBFIZOLTDQIHNSOHQZMVASHLOQMWSQDLFMRYNAOJCFMWQIVBTICUONSPKBICEJPSNYPJEMEJMOVZKEWGHWHGEUSFRBJOSQPPOLDXMCXRILDWREXZNTQKGXYKZRLRMVADEMFGUNKUKTYRHDCFJTPZNTKEBGVDVGAHIHKYBQBXCMYYFEZXXURDUCYWVTJECOJZLCYXWSTBIZJUKFPUH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.8999681993854008);
    msg.setSource(28301U);
    msg.setSourceEntity(34U);
    msg.setDestination(29409U);
    msg.setDestinationEntity(118U);
    msg.name.assign("GGPCGDKBHUHLNQROAALVDFWBIFPMMXLEZHCNRSUSTVRXEJAAJYKJACNTLQEMTYIGXBXYNOZQTQYCXZCHDVXROMUAOBJIZFWOUPWBUJCEVREZULFJPBOOGSWPVQJUFAPDTFZYOVKHFITLKIEWSAAIZDJBVMIWKPHBXBYBZMYNRLDSNNGQQKRHWPYPDDTVUDSUAQIHGOCNTF");
    msg.attr_type = 100U;
    msg.min.assign("SEUYWPMPHCRMYTLAZYRV");
    msg.max.assign("NWXXONCXSBRTMPDZKANWWCPJTCOGBMPCBFQIEIGQETGJDVBEHRZNOKUJLCUVNAUVLDLWUGQYRWUTMPOWALDYCOSTTMIJHIYGYSNZQDQOTIUSKEJQETMLUZSWAYHXNHIAJADIHFFZBGJFEOKKMLUACCSSPTGIGKCRCOWZDAMEPNDUBEMAXUPVMH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.12582611590937043);
    msg.setSource(44997U);
    msg.setSourceEntity(67U);
    msg.setDestination(51152U);
    msg.setDestinationEntity(5U);
    msg.name.assign("VMLLQDQOBONCCGLJGOSGAONKFFHMCQBTDHHYVCKQKQVXPHBJGDDBYCRFBOSVREYALWLGOTTBGVPXMQVTJYPSCXEAAXYPYMIOJUZTXULRAPZYADINA");
    msg.attr_type = 89U;
    msg.min.assign("GJVBLSUPCPAMSCVQFGQKCGCFYHRJSYFSSZWIZOELAAYVBBDVLLFTRUGDGHAJMDISGWOOPXAALTYWUGJZTBZNPUROJBVKOUEVLEBOKOZUQLVRJHDXIPLPYZYQCHMXEDSEJXQBBXRCOFKFMKJASXABNPCQZNYHEXHPZRTYKWEBQYCHTOXWZLR");
    msg.max.assign("XQJRHQUSUHQULHJBYZGADIHWJTWUERACOOCPKMLPDTUIAVSVEKBFDOKKPISFKERJAKYWVMGZFCGPYD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.960702147692925);
    msg.setSource(39917U);
    msg.setSourceEntity(129U);
    msg.setDestination(3369U);
    msg.setDestinationEntity(44U);
    msg.timeline.assign("EBYLGYQEOYPEXIOMZOKBZKJOSXROHBHYLYDTHENAIRUOPJNOCKRGVONSCGNULZLZJCYURVSKLQEQXMIZMWCJIFRBTXVGFVFSKLPFLUUCCJVQHWFNSJLBIDGRDGNUPKECYQBRKXMEPWAKEYXEANPIHBBMUCTDNRZMVWUFSQGWMMIZRFDINIGDHMZQHWOGSWPFVHNDAXTVUAWSAZAVJYCMQSQHPYTJA");
    msg.predicate.assign("AGBQBXLYVBGPLGKYUTLHAITFOKBCTOYSMXZMDDDEPNAUGOYJATOMJVGOHWYZPWRJTIQLYRLEFHJHUDLVIMLXQKWFXFXQVPDZKKECRVNEQWRPZUPECUNJXLEWYXDQIXEDBCOAITAFPKFCSOZSKCFHRNZBCNNCZLYA");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("HPMJHUCTHCWVAGURRLXXOJDMSXYEKUHBOHYWEHRUIMJZRTAGVQGEVNWWRMKYBASCM");
    tmp_msg_0.attr_type = 48U;
    tmp_msg_0.min.assign("JAVYRXSBMJDIYHNTUYIAWAWKPURUZODWSJSPOELKDDTFUMXYKZKFNYVNPSNUEHOGDFWUXOEXYUZTJJRBPFIGYVAQKXMHEDXWPXGFKNBWWVHKQCZQPRHIDQEFSOTLTJFDZRJABAXZCTSULKPVGILIHJCCFQERTBJOZMQZOXMDXDCSWCQLGLMPLOCIKBGHYBBKYOCGLEFONQSTNEANNHVIEPCHSQGBILVWTZASIUVZRRNPQVMEBAMCVMGULHRW");
    tmp_msg_0.max.assign("VXUFQALSQFJDOFFJMCYIMHZZKMTEKQJJQGEIKBRGSJGOZSDLJEKHXJNVUBVRQMAPGZYQNOCDWYHZOPMSPWZNOTRVYXAWIIAZUOAMDHWKCUGOXCVXRBNVXUEVMPOKLFMXMFJNRIEYLSDASTELDUTQTVESXLCVTBLSHLDWIFPJHAUITZEVEYGSPPIDTSFBRRUPUALOZNXNHQXCRBDRBPKETGW");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.8600551130876949);
    msg.setSource(18831U);
    msg.setSourceEntity(222U);
    msg.setDestination(61991U);
    msg.setDestinationEntity(110U);
    msg.timeline.assign("SGSELZMOMIVAVRYCOUUSCVKKKBYSDJIFXOUPZHTSILQGZTKNNFDJCFZSQQYTQTGKPMONIUBN");
    msg.predicate.assign("WTXEPYCCQVTLDBTIXDZXQAVVIMTJOYMVONGQSHHOCLFFINKZJGNIWBLOUANUMKRELRDFZFXIHSJDEJQEAEDUGEWFSZIWJIFBXNFJDTQPYTNGPNYTTBOMPHXRGWCAYEAGNRVQVKDSYBPZTLYHMBSXDASPMCWRWKNPCOKEYKRAIHEYOJFHDZFLPLBHNBRPUZZBJGQYKGEMVKXAZXJCTQVVUUBUCGUPLXULSROWMSISVWGHUKACMRZSAWRDJQILOM");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("ISVTVXBMVGDWFKESGAXFLLMQQPKFHO");
    tmp_msg_0.attr_type = 200U;
    tmp_msg_0.min.assign("VXBRDHOPVEMHUJCKPQLSKKVHMUYTWOWZEPHJDBPOWVZCJYWSNXVLUFTDVJMSZQDTNDKGQWTBTBQNFJHLPSVZUIQNORCOCSEUGGWLILFDMUJNACAZNGNGAMKZR");
    tmp_msg_0.max.assign("CTITOMRIBNKQIWGMPSVVZWYGJAMPAFSKYXACJADRARWMHUZPJBZRWAEETLGSTYSJMXQEQFMXLKPWUVKCZHOFF");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.01988380018224023);
    msg.setSource(5154U);
    msg.setSourceEntity(254U);
    msg.setDestination(26028U);
    msg.setDestinationEntity(15U);
    msg.timeline.assign("VQYMTQASSQLUQMEGIGVKVJSGSJUWGXCOHPYLDWBVDRKPEUZTUXEBTKXNPRLBFHCAKAPIDPQFNPOTBDZWATFEPKRWYOYTIFLFZONWACXEMVFMSYECGKNAMMZVJSQUXEYGOVJSIALNRCNOCMSHTHXIHATSRTGLRJCJZRXMHYDFKLXWUVUIMBDEFQWLHZPBKHYNUDJCOKNWABGQIDGJS");
    msg.predicate.assign("GOBLJQANVESUEYCJCRGKKKOFSNUFJYHBPVPZMDXZWPGDWGJROEUPZKCEVMFQDLPFHGQXMIHUIECNPEFQIJROYISWDBSLFVXVSIWZLUAGVZACVOOMVWYRRKRLQTTIODCEZYTKQATYWTXHSZLZDKJUAMR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.6982642837578116);
    msg.setSource(13933U);
    msg.setSourceEntity(233U);
    msg.setDestination(55179U);
    msg.setDestinationEntity(81U);
    msg.reactor.assign("ZVACBIFPETUBLPTGVAQEPDQJHAJSRKGJVLBOPCOSVBRCDAXSIUMFIALFIZKLJSHUBRMAGMYSOWZITHXMXFTUOYYQOWQRYRQBUBGOVZDXYSRAKPAKMHQIAHGDSTQSNZXOPCVQLFCUYYRNMPRKDUFIDHNXVJKTJEKCHHEAHSBNDEXCDHUWEGWNVJOKLBIEWCXBTRIPO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.7566342339698668);
    msg.setSource(30707U);
    msg.setSourceEntity(127U);
    msg.setDestination(2506U);
    msg.setDestinationEntity(213U);
    msg.reactor.assign("RZDBYAMQIYGYPJJFSRQDFZROZWETEPCXNMUCEKRGXRMLBFHDWIZAZXZXHITWWATMMRKDGZIKTNDKOGMXGPVUWKSDJVASNDUJICK");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("TFBRCQBBYAJLXXIMPEGKOBDEUPXKREBWIKICGEASGVNMRIYRSKTFJMHEVMLUTZGY");
    tmp_msg_0.predicate.assign("XNXGGTMYTLIPBKBUORFOFARIENYBYZX");
    msg.tokens.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.311982502354476);
    msg.setSource(26792U);
    msg.setSourceEntity(219U);
    msg.setDestination(54580U);
    msg.setDestinationEntity(149U);
    msg.reactor.assign("MYJRNJBXTSBNFBWIBQKPUFNKXIVRAOTFPHUHKNZEHAMYLDMQECFEQU");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("RAOOWVKOGZYIWYIVRTDLBBSBODMMRXTDCDOTJBTARIHUOCNFYCZHKBTKNUAQEXOVMWITGYXQUQKDPYIABHJDLDHVSDCPLBIEXGDJRLINJNFWMPEXPVZMTIVROZRAGZLEUGLCSFROCSPVXAELFNAWQGHPFNWSTZMIWFAZKQVSLRXPFCCXTJXOKPETMWNQHGEHEUNMKRUBYMVLBFJSFKDUCPSLQYEAZHNQYWFJHJYJHCKU");
    tmp_msg_0.predicate.assign("UEWMOSTSBQRLXYYZYSZGPTJEDPUHSASRECMQUNYSMKMJFMWZGCQJOMOLFO");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("WSPFGHIEVQHFTYJLFATYLIRTUXQXJUWRRPHQPRRETCKIMCWABVHFKFDMPQZUMUVAOXEAEGVKRYESVQNSZTONYBQCHLNLUBJMCJQZJOASVDRMIKKPQBEHFQCPEIWZSBWLGTTVNLAOOJCJWOVYDGRNFDQZXNUHYXMXLGCAONI");
    tmp_tmp_msg_0_0.attr_type = 183U;
    tmp_tmp_msg_0_0.min.assign("IUMJRYHCXDUSEBCXUNNJFSGKFENOZKHTEKZMK");
    tmp_tmp_msg_0_0.max.assign("HEMGNEBOQMREMUYPULPUSGBQKARXLURLIVICLOMWKOZMFIYGASVPNBAHDOKKYYGWIRBATOLTBJDGOSHCTXLIAKVSQFVYGEEVVNIKADZCTIZFXNWFIUPDDSTSKYXPHXHWJZZVXZJFSHRJDVJZWNRLVXCXYEDCGKGBJWXWRBPLPSBTUQWDHRDFMSCKQDWNLPTCQLUFBHNXOQEZNGYOMNMIQTPJEJTKZFUAMVQTCAHUJO");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.tokens.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.7749784207902066);
    msg.setSource(39101U);
    msg.setSourceEntity(132U);
    msg.setDestination(62749U);
    msg.setDestinationEntity(140U);
    msg.topic.assign("BFZKPJPWDOGUDHOYSKHKSJYAPOFDSTNQHCZJPPSNMPPUROUERLXQZYVWINWJFMILQXMFGALZOTKDMBEBLCRHAXJERXKJRAOBVMX");
    msg.data.assign("EOHHBZXZLQTBXLJJQQKJWTXAQGTECOVXXCEWRHRSTHANOCINBCVWVHPNAKYHGIQMZAXBFUFSHSMLPKRMYJJMLLDVOROMTSIGIHUELKUDUZBJBVFOEWCXHNVITCPENQDLFEYWNPVBKKVERXDJADISFKOUFFCGSGTFYQWRIHIJFZUWCMTASDMXRAZMIZGDZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.6573621573583367);
    msg.setSource(6127U);
    msg.setSourceEntity(89U);
    msg.setDestination(43149U);
    msg.setDestinationEntity(87U);
    msg.topic.assign("JCTXPWUKPEZYSACKOPPJUALLLVXYVEGOORIDHQYSZABGBJUXZTFFTBYADMJHOUALEMCEHNWEMFGHIDQRUCOCSBELRDUVDKOJLWXSPJLMWGVSAPXJUTKIVDLZQBWBQYSTHUJZWSTYRRMFNFDBESMXXZCIAQROZFGFNGFQVNEYWOYQZINJOVKIBTUFMMMHVNSLWAPTZYXKCCNCWKKBZIFCDEIWGGHV");
    msg.data.assign("BMZACGTKAVPVUAYCMRYXQEGAGUSLBOOSEHHITVHONVWQCMUOSCKWYMKRZNJWHPLPNXFYTNDAAJQELYIGSO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.34013994754198584);
    msg.setSource(58213U);
    msg.setSourceEntity(5U);
    msg.setDestination(53882U);
    msg.setDestinationEntity(132U);
    msg.topic.assign("UKWDEFGYYSHSIGOKMIDHBTOJWDDTOWOHJYLYJSTSWRLJHLQWJHMPLIWMQBABSDQVLKTHXZNTTIEIAGHXUKSYYXQRMLEXMWQXUBLAGUJQNKVZUNJYFXFSVEADNCFAEXUGFORVXATCONHRYIQICETINWCJNDCVBNSDGZCRFZYTLPZZJVPXUBBMNNKZQPVHK");
    msg.data.assign("HLLNPHKEOVPEPIIZSNCYJVHFDBQHFFWWTJGBVUAENYTRFGQFWNKTBZOUALMKYJPTPSRHMUODJDFXTUMTEKQWJYXEOJLRHXVNLGSZFEXGKPJAGKTKZVAGIHQWATXMAHPEWV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.3609349571969398);
    msg.setSource(43574U);
    msg.setSourceEntity(77U);
    msg.setDestination(58702U);
    msg.setDestinationEntity(192U);
    msg.frameid = 190U;
    const signed char tmp_msg_0[] = {101, -4, 9, -98, -54, -3, -4, -112, 119, -67, 51, 27, -107, 53, 52, -78, 109, 11, -110, 94, -12, 103, 49, 0, 124, -101, -60, -119, -95, 125, -45, 76, 105, 77, 103, -81, 121, 86, -50, -113, 93, 71, -89, 27, 17, 70, 63, 53, 124, 6, 36, -4, 77, 97, 109, -11, -86, -24, -52, 24, 9, -12, 85, 33, 7, 110, 110, -36, 116, -118, 101, -89, -79, -80, -22, 45, -88, 64, 123, -33, -87, -7, 58, 85, -84, 96, 19, 1, 55, 78, -38, -47, -117, 17, 110, -70, 31, 88, 56, 105, -83, -77, -79, -79, 113, -22, -53, -10};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.5757454237156641);
    msg.setSource(22731U);
    msg.setSourceEntity(137U);
    msg.setDestination(52741U);
    msg.setDestinationEntity(102U);
    msg.frameid = 237U;
    const signed char tmp_msg_0[] = {113, -59, 62, 29, 91, 76, 22, -89, -39, 22, 29, 69, -128, 80, 65, -25, -7, -102, -106, -46, 73, 89, 68, 111, 4, -17, -50, 125, -93, -70, -120, 50, -9, 37, 49, 109, -37, -108, -109, -34, -30, -76, 48, -124, 111, -113, 101, -31, -109, -84, -61, 108, -114, -8, -71, 90, 94, -60, -26, 103, 117, -55, 121, -48, 95, -14, -66, 60, -29, -26, 113, -96, -78, -103, -31, 102, 35, -51, 11, -17, -107, 2, -112, 20, 125, 52, 63, 16, 34, -63, -40, -75, -53, -60, -128, -107, 5, 45, -62, -96, 90, -112, -126, 92, 117, 23, -29, -79, -50, 77, 53, -10, -109, -124, -118};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.7028500924495128);
    msg.setSource(55068U);
    msg.setSourceEntity(37U);
    msg.setDestination(24607U);
    msg.setDestinationEntity(150U);
    msg.frameid = 184U;
    const signed char tmp_msg_0[] = {72, 103, 94, 63, -17, -58, 37, -115, 55, -26, 74, -110, 39, 57, 47, -33, -24, -51, 51, -52, 5, -107, -114, -86, -18, 38, 20, 45, -98, 32, -101, 113, 98, -54, 122, -63, -126, -72, -32, 12, 120, 69, 50, -5, 122, 60, -114, -18, -70, -68, 13, -100, 115, 122, -43, -96, 84, 39, 109, 82, 97, -90, -93, -2, 24, 62, -69, 43, 71, -92, 81, 48, -59, 14, 82, -58, 125, -71, 5, -116, 54, 83, -124, -65, -62, -122, 62, -75, 51, -82, -61, -16, 119, 120, -82, -93, -88, -19, 55, -41, -95, 41, -81, 64, 22, -41, 59, -89, 55, 28, -98, 71, 115, -117, 67, 77, -25, 24, -45, -96, -92, 22, 34, 77, 92, 43, -28, -106, -16, -84, -97, 4, 12};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.6260168030825448);
    msg.setSource(48160U);
    msg.setSourceEntity(63U);
    msg.setDestination(45693U);
    msg.setDestinationEntity(181U);
    msg.fps = 226U;
    msg.quality = 170U;
    msg.reps = 51U;
    msg.tsize = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.5374001951754565);
    msg.setSource(19399U);
    msg.setSourceEntity(142U);
    msg.setDestination(29528U);
    msg.setDestinationEntity(143U);
    msg.fps = 40U;
    msg.quality = 200U;
    msg.reps = 60U;
    msg.tsize = 247U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.869672093375819);
    msg.setSource(44486U);
    msg.setSourceEntity(176U);
    msg.setDestination(57940U);
    msg.setDestinationEntity(160U);
    msg.fps = 6U;
    msg.quality = 25U;
    msg.reps = 18U;
    msg.tsize = 138U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.5605170757986455);
    msg.setSource(11173U);
    msg.setSourceEntity(248U);
    msg.setDestination(10931U);
    msg.setDestinationEntity(143U);
    msg.lat = 0.07446906652356922;
    msg.lon = 0.5863037559419437;
    msg.depth = 170U;
    msg.speed = 0.5300886158906877;
    msg.psi = 0.07565501693547227;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.48313935588216705);
    msg.setSource(9667U);
    msg.setSourceEntity(120U);
    msg.setDestination(13372U);
    msg.setDestinationEntity(38U);
    msg.lat = 0.17544456624667504;
    msg.lon = 0.3935834813817375;
    msg.depth = 141U;
    msg.speed = 0.7044046956283891;
    msg.psi = 0.5692108932562843;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.7537376445826943);
    msg.setSource(24536U);
    msg.setSourceEntity(34U);
    msg.setDestination(25845U);
    msg.setDestinationEntity(172U);
    msg.lat = 0.8038069096294137;
    msg.lon = 0.16084499845193534;
    msg.depth = 123U;
    msg.speed = 0.16250290022668712;
    msg.psi = 0.4199862787429788;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.38019319833183707);
    msg.setSource(16715U);
    msg.setSourceEntity(109U);
    msg.setDestination(53542U);
    msg.setDestinationEntity(229U);
    msg.label.assign("XZYPRHEPGMZVNOUAODJQDZCSFXPTMICOATCPJFUXOYZQYBVXTHVDYIIAWQVNPJEDMDFKAQRZKPFDCRZELWOCGCGRPXOZDNYMTHLNFVKRCQKKJAGBMVSJNXJDRLSTKWWMNNXOEIMPKHZLIQHICYGJAQILCSMJFQKZBUXFDHNAQBGALEYGTWERPLNIKYRWROBWVOEAB");
    msg.lat = 0.6024320350227897;
    msg.lon = 0.836035009726177;
    msg.z = 0.853275860929692;
    msg.z_units = 232U;
    msg.cog = 0.958568006435626;
    msg.sog = 0.6847562166458488;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.6619513813241541);
    msg.setSource(15767U);
    msg.setSourceEntity(226U);
    msg.setDestination(39474U);
    msg.setDestinationEntity(49U);
    msg.label.assign("GIFFQCBAIUNXOOQVECCHRKPUSODQHJGALKLGESXGRVQMWWUABYCEEPAGEBPJLVYVAZDUPEEOWCNNCLFFLGAZFQZZDTZFDUIMTNZCPBMWRXSXXHSQNIOYPULYYRYKZWVZVJHPZSEESJMOXGSMILHNKCPWFHTWWKUMRDKTCQSFBLBXTGKBRZAHBXXRYDOMTCNWARG");
    msg.lat = 0.06844872300024296;
    msg.lon = 0.6339631645378008;
    msg.z = 0.4047401253151791;
    msg.z_units = 109U;
    msg.cog = 0.968570942614982;
    msg.sog = 0.23380645856745808;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.3253547087501508);
    msg.setSource(56694U);
    msg.setSourceEntity(26U);
    msg.setDestination(28886U);
    msg.setDestinationEntity(0U);
    msg.label.assign("PXDSVODXWKKOFHYEGWBLPVVQNFBIUPLAWUMGOBHAFDFHCTJDKMJBBGGJOVZATIXRFYLPCRJDSCEKDIKUKNAMYQMVUNISCSWZGRXCTSUQMGONEEPSCWBZNHVHOOBMNRILGNZEQAJTTUMNWXWGHJEMVTVWAZDEFRPYQEBDFJ");
    msg.lat = 0.7813079348790721;
    msg.lon = 0.5481252875885895;
    msg.z = 0.909937416515393;
    msg.z_units = 218U;
    msg.cog = 0.7798580339977976;
    msg.sog = 0.05768637033310198;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.7600444574043737);
    msg.setSource(49845U);
    msg.setSourceEntity(43U);
    msg.setDestination(44341U);
    msg.setDestinationEntity(45U);
    msg.name.assign("GSOPGRYPCTRXERHLFXWVSCWRYJXARVCAUZUKDGLQMINBBHRPAHUTXJTNQKDHUEYICMMOPRLZQBCCYFDBGTTDFQDPZSOGKWXHSIUCIEIBJNNPBWOLREAWBYEKZJJKYOAGQDFQYAHNJIFNBFRUZGANPSOWTZI");
    msg.value.assign("LGPPMZVBNJFPNNYKKFXLTUMAKZLRISKIOYMCBTQIKFWRFBCPLPDJMLLEBRWSKHJZCVDZNHNCDMDHVJEXJZKBUASUCSJLZWBYXXWCWENSSBMNGGWEMWDIHUDGMQZAPIGNVIRDOQQIRFHTFJVAIVOTIOCBRYWHPKOHRWUQFUZZENGQYYLHHUGIXEVPYARTTEWOXOSXVVAASQKDMJUFGLYVCXFRBPDGNLDAXTYSTK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.043988738941505234);
    msg.setSource(794U);
    msg.setSourceEntity(184U);
    msg.setDestination(37761U);
    msg.setDestinationEntity(249U);
    msg.name.assign("FTYIOKJBOGYNBQFBRJDBXEZFGWHMTCVCARJDAUEONNVYMMLKPUAESZHPZESPZZEEQAZWVSSONHLMMZBPO");
    msg.value.assign("SPNIDJOOGUWIHNHZUCCBYAHWJZPFNCRSWGFMOVPDZLCLXFDDMTQQUCTKGMEXQYVOHVJAEZEQXMLNSYADHEWMFVLIONTCNKKFRFXXPJWSXTVGBZBBSHRGINHYZJTBOPKANFVYGRCUWULWBYKMQAIEZHSSALRRMJBFHTLKDRVSPBCCUFAUUAUIBKPARIKQYOKTGIELQQLGPXPZMCEEDYTENAWGYDDUWV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.8222346321490076);
    msg.setSource(16412U);
    msg.setSourceEntity(114U);
    msg.setDestination(55796U);
    msg.setDestinationEntity(195U);
    msg.name.assign("URTYXUKVOLWWUPCWXQDMLMVGECEFQNICYQUBFDEUFMTKRFYNYZNOSHBYHGXQBSMRCYJAJBUFBTNVVIJSCPFOBBQGHXHNALZMHIGVJLRKHAVGIPSZZTE");
    msg.value.assign("AFRIINSWTZOVRKXLYYVNFAYOQUMIHPHESXDPNLLFLXGJPZMJABHXWRAAKOGDLQBMAFHLKGULJKPVWBCKUTOBSIHEZBWANNEDMFMJHKJCCRVCIZUYIBRGTTAYCEYECEIJDFEWZZISDKXBSRQMQOPZJEWYOVONATRHMCUXFNTSBVTEISKRXMBUTKHZDNOTZRY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.8648527624018925);
    msg.setSource(6629U);
    msg.setSourceEntity(101U);
    msg.setDestination(60141U);
    msg.setDestinationEntity(5U);
    msg.name.assign("GECXIYVYYQSOULYGTBWXRLRKHTEFVXJPGMKZFKIVDOLUDLULAGCCIMIEPYNGBALQUUZPUYAHJRCWWNACKEWPQWXXAUDKEXBCQUZIB");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("DBPPZNCJRKSWGRSQGWSNVHQGAUEXGJYBHWRILMKIJASUOL");
    tmp_msg_0.value.assign("WOBTNGIDWLNRBIPLPBZKCPADZWEZDVMHUHDHCOUGAGXBGQWWMVOOEMTTQNGHUOFYKVELZKULIMYOVAXYFODGSMPDNGDPKHVINUHIBWIZJEUAHZTZEFBRLJIRKWEFYTPAQQMWQRRUCKZGXEFGTJJCBXRGSSFLXATHXNSJVRQKARKLIVXKMYXQBAFQMOORSFRCFCUASBYLXBTXDNLHJVWYNPSUSSLDZYFOEJPIHK");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.41667498590100294);
    msg.setSource(34010U);
    msg.setSourceEntity(93U);
    msg.setDestination(20923U);
    msg.setDestinationEntity(234U);
    msg.name.assign("IZIWMPKMZWYAIBFMEHDDTLINVAZKLMVNCWKEJFODJISQUJQUHKOBCKERZNRBSFNVUQXLAGWUNPIZKYASADIUXJWCDFHXLBUFQTJYGVPLBQB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.290982958217732);
    msg.setSource(60651U);
    msg.setSourceEntity(214U);
    msg.setDestination(23606U);
    msg.setDestinationEntity(78U);
    msg.name.assign("GMBPTLMMCZQGWIGYMYDJQFTHSFRVQUXXEWFNPJIWPPDSKWPQBTZVWDCAEINUUUEHENTGRNOLQCMTROKSJFGBGSEAQIZBLZPDFQHKIJRTZCETGXVAOYHVSXAHWPOOKFLYYRQLYKPHRNLIUIVDHQXLOVESWIUYKKACCUIBB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.12944351953935507);
    msg.setSource(43647U);
    msg.setSourceEntity(64U);
    msg.setDestination(1976U);
    msg.setDestinationEntity(115U);
    msg.name.assign("LMTJKVDPFLEWHZCHHECAFZOAAYNYKECQSJSLLSGFWMKSBMBWACOTKWHAXRYYFSGVPPWZESGQQWJ");
    msg.visibility.assign("FURZFCSQWIMYWHUQNSBWWYPWGKHRIAXJAHFALULOGORVEOHTMKRNJGPGPIHKJBBXNOIWTHOPDRQBDHIRVMYNLGJZVWOBXVRSPBVUVZDXOXZDSLEKKHJQYAOZGQNHVUGUXIDXRUCMZLLAMTWKFZZMIBDJLYKRXWHNEQSRFTZTUKUPNLKGGOPJCYLABQCTASCSAJACEN");
    msg.scope.assign("LSUKBUIQPL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.7851894613925077);
    msg.setSource(26230U);
    msg.setSourceEntity(22U);
    msg.setDestination(57490U);
    msg.setDestinationEntity(238U);
    msg.name.assign("KQNBMZXFLLNPKSYHHBRHKKGHQFNEBJHJGDVQMEZQNJGTQKOTPIRANFIQKYOEGAWICRQKNUMUZIRYVVWXMTXXWPSGBQDTUUDLAYIYWSTWXFFSMSPSCBXLJZJYLQRXHLAGRKEWTHPEEAZABUCVIPXOMYNOTRPTRCLAFSCOSCKOYBSFZUNHQLVTHEEJIG");
    msg.visibility.assign("YQAHTYZRKUCEZQOESQONFYWYQECJBJILDGQGFLQTRJZETGLKVVVMJXITOUAKZBUPDWHNXNVICNJTRWNNUZC");
    msg.scope.assign("IKDEVFALGQFTUFCQXHDRSWWMDOMRHXADJQCRLKZRCIRIGPXGAKBKDZUUUMOJHPFTEPBYICWOXNXWLUIIHCABFPOJDMWYKCVQQQHBFNOLYZJOXGLOGAVCXRPSEBUXDASNOKT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.9317789908132472);
    msg.setSource(21181U);
    msg.setSourceEntity(132U);
    msg.setDestination(24117U);
    msg.setDestinationEntity(1U);
    msg.name.assign("WHCWIFKCTHVIMIPUINRVPEOGSRZGLNFQIBANBMHRAOYEUXYCFUSDP");
    msg.visibility.assign("LBIINGXDQNERJAWJMBVUQSOTUBEPNMUBDRKXSJYLOQFCAIHWZMRUDQSDRBEALLFIDEWDRCBVKVCMULKJPBPJVPNYCVERHQPMWWVGJMAPTJNZGJSXLCZHCHXKDDZURASKKO");
    msg.scope.assign("OCFYGIGGOSJRWFGFPKXULTJQAOAYNREQXFJRMORJNAQPNIXBOGKFYIREKUYYADUUW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.5166025392821977);
    msg.setSource(27476U);
    msg.setSourceEntity(186U);
    msg.setDestination(41037U);
    msg.setDestinationEntity(133U);
    msg.name.assign("SYPQVINHAQKJCREARIIZOLSYIDQYAEPWDNTFGWDBRCFCMMVHZUXQIPQNCZNLBQDNFTOZMOFVEXSVUUNVAPSBSZLJVDMIETVNKTYFGEJJKWPUCVZLVZGAYWFOUUSPDHMIRBYJOLXRMSCABOZWGNPXNAHKEQPYKJHQPSUBZLHXOXIAEGCCKDCWLITBMSFDYJ");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("FJAXCNHCJJMQSHEMXXKFIGFRZZAEZNUWCFUTENDVLPBTGDUCICPDHDFGDGJOKQUSRNRZELXTKKBEOVWEWOLITDIRYMMLRSVZXQVPWRZKZNDWATHJBGCFXLOGDPPCITHAHOHMEOBMYYQXZUMAFOPVKBOLAQHCLWSYJBHBRNYKRP");
    tmp_msg_0.value.assign("VZRFEVLAEGAKHSRYSZFBZBECEBHUXWAMRRBXDQXIMDOMXIRMJCKDLBIKQYQKPJCGSAWTJOVENUZWCZRUGLXIPMVGSFRDXXNLNDFVELOYAPDTFFDOUNQWUOJMSYJDZTNVQEOCHTFNBLAJWMEDKGWLRWJHIZNUQBCOYQYFAVATYBSXZIHNQQTUCELSPJNGQHMRVYPLIHHPZFYXNUWGCLMXHKTRKIPAYTCBTFUZKBAGCOIP");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.9954189784722453);
    msg.setSource(4262U);
    msg.setSourceEntity(120U);
    msg.setDestination(15796U);
    msg.setDestinationEntity(166U);
    msg.name.assign("YARHSXXWKZMPWQMVLVFQPZPOVEUEVPKYGDOHLYODXDUGHMACTACJRKYUMBFIUKOBLIHFZTMQLTGNWZJYGWVPSNSJSIQTYJJCOGHLATXEZBXKWBULIPPFMBXRMRDQMAIDKVONPIEEWUENGVPRRACHNEXJFGUVODYTBFWGDONNSJKAIJBRYQXQQFXSOLZCGBENJLEFHAFHAWPSRHEFJKYHVQGSNCLRLOKSIM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.43108041712050993);
    msg.setSource(137U);
    msg.setSourceEntity(17U);
    msg.setDestination(2793U);
    msg.setDestinationEntity(248U);
    msg.name.assign("ZQUUGVMBQVYIJKQTSXMYDVDDTFNHAOYPZJXGAHZSLXIWHEIACFCDGNWVMWNWJGPPXFZJVKRULHSUYAKWZPIAYVESRREVLCWUYLOCVKYOUQSKBDIEJMISCJGPKQGKODRVQTBZOUEWLFZXFHZPOCGSRLLWNMNOBXODNTCDJBARITCHRAUNMGSOWTPMXZHHQLWFMERVGABNBCRTTHDSJFEDXYAIPQUIFPB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.20483539135040885);
    msg.setSource(52255U);
    msg.setSourceEntity(186U);
    msg.setDestination(45580U);
    msg.setDestinationEntity(219U);
    msg.name.assign("URJTTESQAMZLAXHGQVGWIBZIUMSTUOXUTGJGBXSNKPHKNMBGLIOCARFCOFPJVUSIWTGVOMQRGLNRCWENFVBNZFNXHUOLYCBMGOSARBMYLAZOBSHHEWBDRXDNSAZTJDDHWCJHVXYKIUPPVLCQYCAVCQOKQLVP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.08044493637191763);
    msg.setSource(19848U);
    msg.setSourceEntity(225U);
    msg.setDestination(43073U);
    msg.setDestinationEntity(157U);
    msg.name.assign("KOZSTCYOAALVHUKCWNYLTLTCIVORFDPBUAYJBZZVZQVJHMVJAUHXWJRDAOKGHBQSWGQMRXMZD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.34864286159014424);
    msg.setSource(24157U);
    msg.setSourceEntity(49U);
    msg.setDestination(28338U);
    msg.setDestinationEntity(173U);
    msg.name.assign("VWLICXDZQVNULJIOZHALSATOBZLXJVWZCVNMMPKSIYEFMDNMQVEENMGKZIRIEQJDLROEVGAYVCFCPQYFPOMMFGUXRGFVHKFDEPRNOAPBGSBGDTSIRKKPHATSNIFAZJYEWMDKXFW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.1868306054672214);
    msg.setSource(19730U);
    msg.setSourceEntity(54U);
    msg.setDestination(62307U);
    msg.setDestinationEntity(78U);
    msg.timeout = 1939514176U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.0896595672497057);
    msg.setSource(121U);
    msg.setSourceEntity(106U);
    msg.setDestination(5478U);
    msg.setDestinationEntity(187U);
    msg.timeout = 163984827U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.65429707214475);
    msg.setSource(26569U);
    msg.setSourceEntity(139U);
    msg.setDestination(60888U);
    msg.setDestinationEntity(62U);
    msg.timeout = 2008530739U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.3036746657652202);
    msg.setSource(20645U);
    msg.setSourceEntity(133U);
    msg.setDestination(6121U);
    msg.setDestinationEntity(144U);
    msg.sessid = 1448804777U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.18346635022305413);
    msg.setSource(33182U);
    msg.setSourceEntity(226U);
    msg.setDestination(34588U);
    msg.setDestinationEntity(134U);
    msg.sessid = 2195653708U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.7188745206917242);
    msg.setSource(40674U);
    msg.setSourceEntity(199U);
    msg.setDestination(27981U);
    msg.setDestinationEntity(50U);
    msg.sessid = 1642028361U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.46942607543236625);
    msg.setSource(24008U);
    msg.setSourceEntity(187U);
    msg.setDestination(20986U);
    msg.setDestinationEntity(66U);
    msg.sessid = 1707458663U;
    msg.messages.assign("TTTTKXWFGROYOZKNEVQIEUTWGSPLTHZEFXCODAQAYLCKDZFJVRUMRHNAR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.7614468530890159);
    msg.setSource(42927U);
    msg.setSourceEntity(65U);
    msg.setDestination(36996U);
    msg.setDestinationEntity(24U);
    msg.sessid = 1625916571U;
    msg.messages.assign("ULEADOOYRSYKGIEXABZZRJTPUXGQVIUWLXNRHKPALXBIZZPIUEMBTGGTGQWWESCJINABJOPQREMXSXJCRXTKUTVDSGSWDOLLFOZDMPULRAYBQYDZPJZVJERBWQCZCBSKVQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.5334931245910232);
    msg.setSource(1064U);
    msg.setSourceEntity(52U);
    msg.setDestination(13432U);
    msg.setDestinationEntity(191U);
    msg.sessid = 395879320U;
    msg.messages.assign("QWECJNHZIJERELQUKOJIARDAZCLAYRSGHPLMIJIFPCOBGIUUYNOMXKSCEPZKRYFPTKCWASMCTMKSXDCMWHDLKTBIFEALHZQNVPWGDGDCLBMZKCESJGJQOVNG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.20139446520023319);
    msg.setSource(40434U);
    msg.setSourceEntity(216U);
    msg.setDestination(11071U);
    msg.setDestinationEntity(168U);
    msg.sessid = 2223928720U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.1722681030373191);
    msg.setSource(3135U);
    msg.setSourceEntity(66U);
    msg.setDestination(49049U);
    msg.setDestinationEntity(0U);
    msg.sessid = 4109510873U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.6349983285711024);
    msg.setSource(56562U);
    msg.setSourceEntity(75U);
    msg.setDestination(42858U);
    msg.setDestinationEntity(64U);
    msg.sessid = 1568141143U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.28056752150581676);
    msg.setSource(40963U);
    msg.setSourceEntity(165U);
    msg.setDestination(14897U);
    msg.setDestinationEntity(115U);
    msg.sessid = 3202424353U;
    msg.status = 44U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.23646441017901187);
    msg.setSource(60492U);
    msg.setSourceEntity(58U);
    msg.setDestination(58706U);
    msg.setDestinationEntity(226U);
    msg.sessid = 4255829642U;
    msg.status = 204U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.12753404294696236);
    msg.setSource(45387U);
    msg.setSourceEntity(54U);
    msg.setDestination(26244U);
    msg.setDestinationEntity(216U);
    msg.sessid = 2155737356U;
    msg.status = 176U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.5935596218381831);
    msg.setSource(23001U);
    msg.setSourceEntity(33U);
    msg.setDestination(52482U);
    msg.setDestinationEntity(28U);
    msg.name.assign("HFPXLGPDXNIRKDFKDSKYOXYQEMTCPELSLJKVFSVHCBYEBCVJIIFOQYNTJPXUSWCJJVGCPSIHHIZGRMBIHJJOWCPRQWZULOIHXOXEYUKSASFQQUBYZRELSMKJNJYGICW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.814949357210597);
    msg.setSource(7968U);
    msg.setSourceEntity(29U);
    msg.setDestination(43665U);
    msg.setDestinationEntity(85U);
    msg.name.assign("PBBDTZOPUTSWKJTGMZIZUDACVGOMRETPGKGZXASOWDLEFQCJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.2620273816720381);
    msg.setSource(14857U);
    msg.setSourceEntity(250U);
    msg.setDestination(6793U);
    msg.setDestinationEntity(49U);
    msg.name.assign("NLTFBLBKZYXHNDWNMVLPFMGWYPAIRINEEWMRVXNOPJRXCQBSHMHODGYMLYOQOBDAPVJQXURWBJOOBYGIESIGPTZCLPDWTVIOZKAFGDDDAJSJWMGSRFYNSRQVXKXUQTVNTFLCSHKCHQJBXGYNUJOZHHEELYTC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.3469267914681936);
    msg.setSource(22008U);
    msg.setSourceEntity(182U);
    msg.setDestination(28314U);
    msg.setDestinationEntity(77U);
    msg.name.assign("OZGQAEWZWUPBRBXWT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.8504830310055194);
    msg.setSource(34921U);
    msg.setSourceEntity(241U);
    msg.setDestination(65089U);
    msg.setDestinationEntity(96U);
    msg.name.assign("CZWYOLARFZCOMCFIVZIVSESLGRMPDUZKWHJYUDQJERYLEIBUEBABPHLXRTEOKOFFRGSLKHIIZLIDBRAVVQDZXDCJJUNHTXPAJGWQTNYYSFRSENUWOXXAEBSNXPGMBUCVLPCHIJBJTWOJMGACPVNTQAOKROZSUMCPVNWDFNNSULKTJGEXWDXGIXY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.804230187793789);
    msg.setSource(52683U);
    msg.setSourceEntity(196U);
    msg.setDestination(61879U);
    msg.setDestinationEntity(163U);
    msg.name.assign("WMZQSRDPOIYMJOADMDWVVZJNNSILNMYMLYVAWYVCZKJRYEISUAILQBCNZAQILKCAAKTRYFEQWSDMCHBKHFVLVGGYPSXNWNRTRJTUJOAUUHPPVBESFOWGQKWVMFHQNZT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.829438379440739);
    msg.setSource(20343U);
    msg.setSourceEntity(79U);
    msg.setDestination(17608U);
    msg.setDestinationEntity(193U);
    msg.type = 97U;
    msg.error.assign("KCAYEYAMIPCZDOQGLXHNNIVNDMLVXVWQJBEWGRKYSHNDZQOJZBIADUVPCMVRQWSAYFFAAGLRHHZATE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.32136258194050915);
    msg.setSource(63168U);
    msg.setSourceEntity(43U);
    msg.setDestination(33315U);
    msg.setDestinationEntity(59U);
    msg.type = 253U;
    msg.error.assign("WXBHNQCUZJCFZKUYKFCRACFKFKLLTVXURIMKWDIOKHBWQIAIZSUPLQPQNDXJRAIXAGAEHNWYQORHBHYGGYUFIUVKQEVGDNWWPBRSWDVRTSSNMFMOZOWSPJRTGJLXZZEICYNJECMUYKCWALHWKPODSMVPSQBBNEPXNOYGAFBMZT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.9778443290958555);
    msg.setSource(19384U);
    msg.setSourceEntity(204U);
    msg.setDestination(34174U);
    msg.setDestinationEntity(20U);
    msg.type = 103U;
    msg.error.assign("LBVFFYPNUXNAJSBSMZIQRLTNGYEFLRQFXBIOVDFPLHMKXJHREDMVEMELRLHWNXHIJNFWEYQOSSIBZFZTVCMXKNCZWUPDDRHWBTAJXLCQUZILQBNKREXWTDVOGKOMKYTDWHUTEFSVPUZJBVCCYOYPI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.19934447744267336);
    msg.setSource(13795U);
    msg.setSourceEntity(104U);
    msg.setDestination(14823U);
    msg.setDestinationEntity(7U);
    msg.seq = 31633U;
    msg.sys_dst.assign("UCPXQWWOEVXYOHIPMXIAKALHMWXSFFGEXHADKYBUYURMWUEFZKNIZJMVNNFMDWFWTZTQEZOZICREHFRYXCSONSOVJGGFNAZRRGMLBVEXJOPSHZOAVAYVBQWNLMGVZYOQRQGSWGNJIGXPCCCVOKJCSLLUNDPVDKCDTTBLGIUBZHJDNFYPSPJJPCKQESBJDUCAEIMLBQKRUQJA");
    msg.flags = 79U;
    const signed char tmp_msg_0[] = {-83, 58, 86, -112, 56, -25, -117, -61, 116, -101, 119, -6, 121, -121, 76, -69, -44, 39, -77, 44, -50, 40, 94, -30, 114, -99, -55, 98, -105, -78, -2, 1, -7, 124, 116, -102, 15, -18, 39, -77, -19, -19, -22, -79, -118, 61, 100, -97, 66, 58, -13, -124, -122, -115, 78, 42, 18, -118, 45, -56, 50, -111, -16, -55, -39, 84, 105, 108, 38, -91, -87, -114, 37, -16, -75, 97, 56, -97, 79, -117, 126, -56, 27, -31, -20, -49, 121, 117, -35, -50, 14, -105, 34, -118, -82, -8, 22, 18, -23, -15, -59, 104, -62, 39, -51, -80, 84, -119, 61, 83, 43, 44, 7, 73, -95, -2, 62, 21, -68, -103, 105, -8, -5, -41, -4, -75, -107, -112, -39, 16, -7, 51, -99, 40, 56, 101, -35, -83, 45, 4, -66, -36, 118, -116, -1, -65, 5, 27, 63, -58, -87, -34, 90, 24, -113, 41, 42, -46, 56, -9, -4, 100, -21, -6, 40, -124, -86, -11, -58, -31, 2, 16, -76, 43, 108, 12, -52};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.8837150910708177);
    msg.setSource(34037U);
    msg.setSourceEntity(224U);
    msg.setDestination(40489U);
    msg.setDestinationEntity(129U);
    msg.seq = 4883U;
    msg.sys_dst.assign("YKJLEQSTVRHWZQXSLLOVTYKPIMMKLUSPGAAZPHYVJDGJKNSFGPRFCGVQNSHZNMSVCEBAKPIXGCWKNJHQCDSLVGTWJMBFUPUQRRTYUODZEOHPTWQDI");
    msg.flags = 197U;
    const signed char tmp_msg_0[] = {-42, 82, -115, 39, 99, -10, -115, 17, 101, 3, 71, -13, 83, -52, -90, 44, -14, 66, 44, -74, 46, -128, -102, -89, -3, -23, -78, 34, 124, -105, -58, 114, -79, 92, 87, 72, -86, 67, -72, -51, 105, -33, -7, -26, 120, -79, 51, 116, 23, 2, 9, -77, -19, 31, -102, 117, 111, -43, -33, -57, 1, 0, 45, -63, -102, -29, -113, 22, -10};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.5469122012469954);
    msg.setSource(53368U);
    msg.setSourceEntity(83U);
    msg.setDestination(47650U);
    msg.setDestinationEntity(131U);
    msg.seq = 55655U;
    msg.sys_dst.assign("ZTFZOANSKDEMXZWAVNEOSXYDFXNLYYLVXMLPNCZCLQRETWRZBNEDBDBBZ");
    msg.flags = 78U;
    const signed char tmp_msg_0[] = {-96, -46, 20, 118, 87, 104, -91, -18, -34, -123, 8, 101, -99, 43, 66, 92, 99, -58, 111, 66, -77, 32, 97, -77, 67, 25, -123, 105, -33, 12, 125, -48, 39, 91, -36, -122, -6, 62, -7, -57, 55, 83, 28, -76, 82};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.26893673358155723);
    msg.setSource(57495U);
    msg.setSourceEntity(228U);
    msg.setDestination(64368U);
    msg.setDestinationEntity(190U);
    msg.sys_src.assign("NYICNTDBFBSYKDNWFJVQWQHRODVGRRYCAMJCGNJZJKBGTJZWFNIXTYHLHKSJGHLAUNMIZTQBBVEPPTOXRDRLICKLFUPACAEEPRATWOFWGXKWANLGXIUFMJKFYKHUEZXNGQDYXAMDPSERVYUDVQCOQVVSIYAXBRUKIOMFWQMUTPVWZBODVXCXNPHHDORSOZOMHATPBZIQDCLKLXYZQNBIHVZEERQSIGGTAUPMGPJLFESTUKYSLLFSO");
    msg.sys_dst.assign("VVJUWYPZYGIBCGUNSWUXXDNASTAZIKJKPPRQSWPKXCUTSANYYNXTGUBZJRAWMIDJSRJXOKBFZLOJSCMULBNFRIMERTGSNXMHPWHNAFKFCPRUIYKVRGFYLSQATVOLBCLRAZTXLYJKZQQXLGQNBHAESMQDWHOIMNSGJFTVQAPFRGWOKMEVIPQGBMHZCFBJBEQVOHTDELPOUY");
    msg.flags = 111U;
    const signed char tmp_msg_0[] = {-117, -38, 50, 69, -124, 53, -35, 28, 91, 39, -6, 38, 105, 38, -69, -70, -39, 67, -126, 106, 79, 73, -120, 90, 37, 17, 15, -114, -35, -13, -80, 95, -3, -111, 9, 108, 45, 26, 24, 82, -68, -49, -8, -23, 68, -117, -15, 89, -59, -95, -58, -78, 53, 78, 90, -3, 0, -86, -108, 37, 104, -48, -124, 13, -119, -6, -17, 111, -28, -30, -15, -21, 115, 28, -79, -17, 67, -47, 29, -31, -101, -20, 60, 70, 114, 95, -51, 95, 73, -43, -59, -25, -26, -17, -30, 76, 67, -45, -49, -105, 11, 45, 99, 19, -16, -49, -28, 110, -48, 20, -61, -71, -7, -60, -49, 3, 107, 64, -76, -110, 8, 98, -52, -85, -31, 108, 113, 20, -63, 67, 90, -106, -7, 92, -51, 100, -93, 117, 33, -85, -48, -96, -68, -59, -65, 102, -83, 87, 114, -9, -37, 1, -110, 78, -29, 51, -23, 65, -104, -50, 26, 121, -124, -120, -97, -81, -117, -33, -4, -60, -114, 53, 21, 119, -60, 29, 35, -7, 102, 111, 112, -15, 100, -101, 105, -123, -77, -113, -1, -120, 118, -1, -111, 101, -34, -56, 77, 89, 86, -107, -54, -92, -84, 37, 116, -33, -86, 119, -86, 10, -122, 80, -38, 111, 42, 91, 112, -84};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.2351864331575897);
    msg.setSource(5804U);
    msg.setSourceEntity(147U);
    msg.setDestination(24056U);
    msg.setDestinationEntity(107U);
    msg.sys_src.assign("ENHENJSVYAPMTIVUZGWRPQZPCCPXMWZAQIVFYEOUAVDSWIGUKXBONQYOLXICPLTWWNDEMXSJIRHUQTBKGJGXGYMAVCBZNMSQLZEJGHHPILCFODLKBJXZPUSCYXUVAEOSGFVRQFCJSQMKZRXDAIFDHKTBFAEBWGEWJHFVE");
    msg.sys_dst.assign("NMDZGSSRTJCGQJUWMNHQBLCBXGOBCCFEUIBKWRHGAEPJCGVRKMUVTELXWVTHMHOUAYWSOINHXMBUBFNAMTTLARUVBDNBQDX");
    msg.flags = 176U;
    const signed char tmp_msg_0[] = {110, -31, 24, 34, 111, -11, -128, 14, 22, -18};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.8174456281876155);
    msg.setSource(14377U);
    msg.setSourceEntity(136U);
    msg.setDestination(44505U);
    msg.setDestinationEntity(131U);
    msg.sys_src.assign("TSIPVVKNAUELTAGOHUWEHDUPFMXNCEEKZMCADENNOILYGPGGTCXTDVWZEHOOXTSQWCLLURKXRVVKQSDKONIMCJAWDAGXARBCKFDHYZOPPBVEEUHRBNZPOGFXCKVTRZJJYSKDQNTFSMNPAUAIBZCWMPXMMZQDSLVRYAOFSKGLZWJSTHVTMRJLFIEJORPIBOSFJGQIYBWJYHLYBJJX");
    msg.sys_dst.assign("FUHLHHSTNPYAGUBJYWYOZTOHTZVJLQGXJMHGBXJFQWELZABJFFELFVJSLVJIBRWROXXUDQUSZZLDMLRKYUNTFAKKMQIGAIUYAUNOGZAHICYOANXPDFVOZWKSZPREKYPRSXPCNUDMPEBWOMWYUNCKQB");
    msg.flags = 118U;
    const signed char tmp_msg_0[] = {0, 81, -18, 53, -58, 110, -118, -19, 121, -9, -39, 109, 19, 115, 30, -78, -82, 82, -90, 40, 32, -104, 40, -40, -26, 71, -108, 15, -59, -6, 93, -23, -102, 31, 1, 111, 20, -103, -88, 81, -81, -89, 88, 90, 67, -70, 5, -41, 17, -8, 88, 86, -82, 61, -18, -42, 18, -63, -101, 68, -90, -64, -106, -77, -120, -120, 94, -52, 87, -26, 108, 99, -117, -29, 69, -35, 21, -64, 120, -30, 38, -67, 109, 2, -128, -81, -113, -66, 84, -83, 124, 82, 95, -49, 58, 58, -92, -85, -118, 11, -106, 114, -35, -2, -77, 98, 22, 45, -56, 92, -11, -16, -45, 1, -57, 66, -51, 103, -57, 30, -87, -18, 3, 113, 22, 23, -104, 71, 17, -119, 96, 87, -101, 83, -123, 34, -11, 63, -10, -66, -71, 115, -56, 104, -8, -126, -111, 62, 29, -72, 74, 39, 59, -94, -7, 90, -31, -10, 23, 116, 65, 70, -78, 31, -102, 106, -54, -69, 38, -32, -34, 96, -125, -4, 113, 69, 61, 14, -71, -96, 35, 45, 78, 8, -73, -69, -67, -77, -117, 89, 68, 54, 36, 53, 73, 28, -69, -97, -6, 72, 75, 28, 12, -82, -16, 18, -82, -86, -94, 54, -77, 18, 27, 27, -28, -58, -107, -16, 37, 26, 116, 5, 3, 97, 105, 126, 111, -84, 103, -69, 90, 70, -41, -115, 21, 51, -23, -20, 65, -103, -57, 35, -53, 52, 11, -126, -45, -109, -2, -16, -108, -112, -8};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.8029081861178476);
    msg.setSource(16138U);
    msg.setSourceEntity(3U);
    msg.setDestination(22665U);
    msg.setDestinationEntity(30U);
    msg.seq = 22808U;
    msg.value = 253U;
    msg.error.assign("QVPYMGJMNXVEQVNYRQZFYFNYPBWDIZERLEYINLAYMFFCAUVSOWBZAKINSTGVFPKIMGZQHYCX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.6146247421629568);
    msg.setSource(30450U);
    msg.setSourceEntity(139U);
    msg.setDestination(21138U);
    msg.setDestinationEntity(250U);
    msg.seq = 24248U;
    msg.value = 15U;
    msg.error.assign("LRTUTQECWGPSEJFYWCO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.16460767318665204);
    msg.setSource(23838U);
    msg.setSourceEntity(250U);
    msg.setDestination(29680U);
    msg.setDestinationEntity(229U);
    msg.seq = 51381U;
    msg.value = 229U;
    msg.error.assign("ROGVQDDSPAIXTLINIYFZY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.6329572840083294);
    msg.setSource(29590U);
    msg.setSourceEntity(228U);
    msg.setDestination(19066U);
    msg.setDestinationEntity(60U);
    msg.seq = 49276U;
    msg.sys.assign("FIPYLQOQVQOUKDUFDMTOBEAILQTGIBVUGYBTJMHADKVNFOJZVEPFKHICCPWEXTGQPFRWJLTMWHIYCOIRCWTBKKSFDSUNNELBHRCRLWOIZFJDGZQCMAOKOADYNAVQUGZZXBERMHRKHX");
    msg.value = 0.7513814291730542;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.671359113208004);
    msg.setSource(31882U);
    msg.setSourceEntity(207U);
    msg.setDestination(19500U);
    msg.setDestinationEntity(106U);
    msg.seq = 31306U;
    msg.sys.assign("APBZXMMJMPMMRAEFLWXOHCOEMDEELJXCBPRZLAKXEJAGCARQYNKFPSLYDRQJDNCNYLQIVHVFQZDVUQUSOCSVIBMEXPZAHW");
    msg.value = 0.2355726154728467;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.7220929947347349);
    msg.setSource(993U);
    msg.setSourceEntity(128U);
    msg.setDestination(62835U);
    msg.setDestinationEntity(71U);
    msg.seq = 32881U;
    msg.sys.assign("TIQKPEVECZSQUJVQSIINAPWGUJXMPHJNHRMXUPXTWNIAGORSWXDENBVVHQMYVAADICHRZMLKTEVBUOFDLPNNZGETMYDOHYSIBTQWKAJFGLBDSJPCTYSQNOFNOZXWHFPZQZFOERVVNDAJGOUPDBBJIRVSXHZRZKMBYTXTULZLWULEFLRAWGXRBVQMNYCBJSEU");
    msg.value = 0.33502916121368753;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.6707279407774661);
    msg.setSource(10450U);
    msg.setSourceEntity(132U);
    msg.setDestination(14445U);
    msg.setDestinationEntity(215U);
    msg.seq = 58470U;
    msg.sys_dst.assign("FZHPNLFECQUAXBSTDHKLRPLHEWOBKXZTYENUWP");
    msg.timeout = 0.2352401692163526;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.37478269124992303);
    msg.setSource(31604U);
    msg.setSourceEntity(175U);
    msg.setDestination(47693U);
    msg.setDestinationEntity(28U);
    msg.seq = 6463U;
    msg.sys_dst.assign("QFVPDMMGHGQOGSYPFFACVZCEYRSKSYSPVXDUAXTMYBEEDRQOEBBOFHFNPUVNCFFVQAAJZAIOHSICFGSADXWZRMC");
    msg.timeout = 0.10744256067588576;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.5293757483018681);
    msg.setSource(50526U);
    msg.setSourceEntity(46U);
    msg.setDestination(61262U);
    msg.setDestinationEntity(66U);
    msg.seq = 55865U;
    msg.sys_dst.assign("XUQPSQFOHRYICXOGHOXRBAGLNFKFKYMUZZHGMMJPZBZHEDCAVBVYLQZTOXOJNVRAIAJUUMOWXONWIBSIDDJCQPZTGWBOKKQKFAUXGEFLUUFNLHEVDPERDX");
    msg.timeout = 0.025380846569041826;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.17503005758475754);
    msg.setSource(28890U);
    msg.setSourceEntity(39U);
    msg.setDestination(46739U);
    msg.setDestinationEntity(227U);
    msg.action = 224U;
    msg.longain = 0.630012863788691;
    msg.latgain = 0.9995422604546356;
    msg.bondthick = 1684134716U;
    msg.leadgain = 0.7072913001048674;
    msg.deconflgain = 0.678859524179054;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.48961830749168245);
    msg.setSource(28084U);
    msg.setSourceEntity(219U);
    msg.setDestination(47091U);
    msg.setDestinationEntity(228U);
    msg.action = 191U;
    msg.longain = 0.4111622614312571;
    msg.latgain = 0.6304723472924674;
    msg.bondthick = 1396270961U;
    msg.leadgain = 0.07206130039488967;
    msg.deconflgain = 0.8518196809934726;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.957660421862117);
    msg.setSource(20455U);
    msg.setSourceEntity(205U);
    msg.setDestination(29797U);
    msg.setDestinationEntity(242U);
    msg.action = 244U;
    msg.longain = 0.9859135527989342;
    msg.latgain = 0.7563761814493724;
    msg.bondthick = 1871905942U;
    msg.leadgain = 0.6890646608906262;
    msg.deconflgain = 0.9958686448704533;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.5139321322288347);
    msg.setSource(1784U);
    msg.setSourceEntity(113U);
    msg.setDestination(48938U);
    msg.setDestinationEntity(199U);
    msg.err_mean = 0.6330193113106798;
    msg.dist_min_abs = 0.7457159029250484;
    msg.dist_min_mean = 0.6642891211883715;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.1798180888652201);
    msg.setSource(54667U);
    msg.setSourceEntity(250U);
    msg.setDestination(24549U);
    msg.setDestinationEntity(111U);
    msg.err_mean = 0.24848227250080346;
    msg.dist_min_abs = 0.8553309618975224;
    msg.dist_min_mean = 0.43457957567449945;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.8301555391829258);
    msg.setSource(9638U);
    msg.setSourceEntity(142U);
    msg.setDestination(30001U);
    msg.setDestinationEntity(143U);
    msg.err_mean = 0.8222565314550657;
    msg.dist_min_abs = 0.6566621432617881;
    msg.dist_min_mean = 0.6982606948515161;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.14426010540610523);
    msg.setSource(38606U);
    msg.setSourceEntity(42U);
    msg.setDestination(18428U);
    msg.setDestinationEntity(236U);
    msg.action = 22U;
    msg.lon_gain = 0.07089630015895543;
    msg.lat_gain = 0.7233680648807008;
    msg.bond_thick = 0.9357666706949659;
    msg.lead_gain = 0.44625831583196907;
    msg.deconfl_gain = 0.7476783914343306;
    msg.accel_switch_gain = 0.4437309759689635;
    msg.safe_dist = 0.5575248665591356;
    msg.deconflict_offset = 0.8695254226533343;
    msg.accel_safe_margin = 0.06411754789171586;
    msg.accel_lim_x = 0.5481870184259123;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.4871418238295401);
    msg.setSource(59947U);
    msg.setSourceEntity(109U);
    msg.setDestination(24579U);
    msg.setDestinationEntity(70U);
    msg.action = 248U;
    msg.lon_gain = 0.8322481654747366;
    msg.lat_gain = 0.17190942839416534;
    msg.bond_thick = 0.1351420429580209;
    msg.lead_gain = 0.5970164377064509;
    msg.deconfl_gain = 0.030960606233198185;
    msg.accel_switch_gain = 0.4601125804383879;
    msg.safe_dist = 0.6629222997500908;
    msg.deconflict_offset = 0.9505910194930608;
    msg.accel_safe_margin = 0.33666824187190747;
    msg.accel_lim_x = 0.9213937421897777;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.5846480730905458);
    msg.setSource(35546U);
    msg.setSourceEntity(22U);
    msg.setDestination(3697U);
    msg.setDestinationEntity(165U);
    msg.action = 22U;
    msg.lon_gain = 0.9315177228215693;
    msg.lat_gain = 0.9792135675163405;
    msg.bond_thick = 0.6898318995919863;
    msg.lead_gain = 0.09663088879133042;
    msg.deconfl_gain = 0.03811821329851761;
    msg.accel_switch_gain = 0.31674874152481935;
    msg.safe_dist = 0.4352038972440666;
    msg.deconflict_offset = 0.2844370649147565;
    msg.accel_safe_margin = 0.8868335449939215;
    msg.accel_lim_x = 0.9278387469706334;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.13224081546526745);
    msg.setSource(6320U);
    msg.setSourceEntity(186U);
    msg.setDestination(36117U);
    msg.setDestinationEntity(211U);
    msg.type = 111U;
    msg.op = 85U;
    msg.err_mean = 0.5198859169392026;
    msg.dist_min_abs = 0.8464349255629094;
    msg.dist_min_mean = 0.332702739158816;
    msg.roll_rate_mean = 0.13449488001524268;
    msg.time = 0.17284993689224248;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 13U;
    tmp_msg_0.lon_gain = 0.715702590044995;
    tmp_msg_0.lat_gain = 0.1826453834698385;
    tmp_msg_0.bond_thick = 0.16160505932010905;
    tmp_msg_0.lead_gain = 0.431760078194943;
    tmp_msg_0.deconfl_gain = 0.8293349101924108;
    tmp_msg_0.accel_switch_gain = 0.7208259761281413;
    tmp_msg_0.safe_dist = 0.3420510253496487;
    tmp_msg_0.deconflict_offset = 0.09462665099440781;
    tmp_msg_0.accel_safe_margin = 0.8704047193288288;
    tmp_msg_0.accel_lim_x = 0.5918307254675514;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.18444935022536546);
    msg.setSource(22772U);
    msg.setSourceEntity(38U);
    msg.setDestination(49712U);
    msg.setDestinationEntity(84U);
    msg.type = 96U;
    msg.op = 138U;
    msg.err_mean = 0.5144555087322027;
    msg.dist_min_abs = 0.6241840234311352;
    msg.dist_min_mean = 0.7480770435967526;
    msg.roll_rate_mean = 0.7611957087314926;
    msg.time = 0.054747178868060686;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 58U;
    tmp_msg_0.lon_gain = 0.43980421915858914;
    tmp_msg_0.lat_gain = 0.788504269776223;
    tmp_msg_0.bond_thick = 0.055088892901881015;
    tmp_msg_0.lead_gain = 0.6613990508049129;
    tmp_msg_0.deconfl_gain = 0.05570006479415868;
    tmp_msg_0.accel_switch_gain = 0.2991925764213591;
    tmp_msg_0.safe_dist = 0.28512122910651416;
    tmp_msg_0.deconflict_offset = 0.5268789737033412;
    tmp_msg_0.accel_safe_margin = 0.16297453521005378;
    tmp_msg_0.accel_lim_x = 0.8515561620268091;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.15496591408280402);
    msg.setSource(11453U);
    msg.setSourceEntity(219U);
    msg.setDestination(20102U);
    msg.setDestinationEntity(71U);
    msg.type = 248U;
    msg.op = 32U;
    msg.err_mean = 0.8599569300422338;
    msg.dist_min_abs = 0.11834119875747284;
    msg.dist_min_mean = 0.5698459708915715;
    msg.roll_rate_mean = 0.5305699988475491;
    msg.time = 0.47629950475580174;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 193U;
    tmp_msg_0.lon_gain = 0.5970433320928753;
    tmp_msg_0.lat_gain = 0.9885332792729652;
    tmp_msg_0.bond_thick = 0.47410106175077504;
    tmp_msg_0.lead_gain = 0.10685417677339382;
    tmp_msg_0.deconfl_gain = 0.21805086119043737;
    tmp_msg_0.accel_switch_gain = 0.2273862315774685;
    tmp_msg_0.safe_dist = 0.746437395946656;
    tmp_msg_0.deconflict_offset = 0.012237065419741677;
    tmp_msg_0.accel_safe_margin = 0.4122095620744528;
    tmp_msg_0.accel_lim_x = 0.2712223349616413;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.508587459318138);
    msg.setSource(32091U);
    msg.setSourceEntity(50U);
    msg.setDestination(15277U);
    msg.setDestinationEntity(211U);
    msg.lat = 0.3517215094645526;
    msg.lon = 0.05494039045218291;
    msg.eta = 1019578071U;
    msg.duration = 25745U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.5375058297230476);
    msg.setSource(41474U);
    msg.setSourceEntity(96U);
    msg.setDestination(26168U);
    msg.setDestinationEntity(30U);
    msg.lat = 0.33818398541076167;
    msg.lon = 0.2926314230267114;
    msg.eta = 1811038238U;
    msg.duration = 2551U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.6703503965905132);
    msg.setSource(18542U);
    msg.setSourceEntity(53U);
    msg.setDestination(3232U);
    msg.setDestinationEntity(115U);
    msg.lat = 0.9478428954787664;
    msg.lon = 0.0007962594277413082;
    msg.eta = 1018553028U;
    msg.duration = 59055U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.04410629156956547);
    msg.setSource(18546U);
    msg.setSourceEntity(189U);
    msg.setDestination(26007U);
    msg.setDestinationEntity(68U);
    msg.plan_id = 31682U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.7899786866977255;
    tmp_msg_0.lon = 0.8043592727383968;
    tmp_msg_0.eta = 1195152687U;
    tmp_msg_0.duration = 49448U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.4865903918443909);
    msg.setSource(57151U);
    msg.setSourceEntity(103U);
    msg.setDestination(20926U);
    msg.setDestinationEntity(212U);
    msg.plan_id = 3365U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.19633017064940061;
    tmp_msg_0.lon = 0.844522448410725;
    tmp_msg_0.eta = 790857839U;
    tmp_msg_0.duration = 550U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.9270440610530679);
    msg.setSource(61271U);
    msg.setSourceEntity(213U);
    msg.setDestination(39211U);
    msg.setDestinationEntity(128U);
    msg.plan_id = 19619U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.34590691637092374;
    tmp_msg_0.lon = 0.7502317236798548;
    tmp_msg_0.eta = 3836656878U;
    tmp_msg_0.duration = 22169U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.42604043067805863);
    msg.setSource(9794U);
    msg.setSourceEntity(30U);
    msg.setDestination(26888U);
    msg.setDestinationEntity(189U);
    msg.type = 170U;
    msg.command = 200U;
    msg.settings.assign("LRHJWAYCVNBXZIRGSDURHRSPCIPSZMWMZTASNQOYVNYQNKFBWETCMAGOLVPJEOOUPLNDLLYPWWIYL");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 1733U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.262655885110616;
    tmp_tmp_msg_0_0.lon = 0.606014601449718;
    tmp_tmp_msg_0_0.eta = 557975615U;
    tmp_tmp_msg_0_0.duration = 15823U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("OHPXIIGJJSTTVLWFAHBUJMQMSGKVHQNYEVBDSZCLSFUZCMUYICPWRKMTUDUBVQOWEAJULBATENN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.633440347558383);
    msg.setSource(42046U);
    msg.setSourceEntity(99U);
    msg.setDestination(10161U);
    msg.setDestinationEntity(172U);
    msg.type = 236U;
    msg.command = 25U;
    msg.settings.assign("IRKRXEODEVKMKWSOTLPOYYBKWVHUIQAPCNUFDVHXNAGNIUFPHQWDMEHCSFNEQHUYMYMQDADUJAMZZLGDUOQYYTCMZIYNOFSNZHNXWUAERSRZRCGGSSCMDQXTEBBBADALFJJCIIPXTYYJVVZTQXUVNJRFKVBZORXPKBIWLFCBHQGLFJSLJTGRLMSBSKPKTWENUKIAACTGMKHVI");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 6161U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("FTTQYTAZFGNWZYUMRCWMHXSPDZHORJHQOTVHFSAMVAKCXXIKRGLSVKPUEJYUDEPDAXNDUIIJTJQXEWTTVQGGFWCNZASLVTBZAPKNWRHFQGELVJQJJFLWQXCANECGLMSNOEIRQOZPHBMNZJOVCVHDWZRUISYIZSIFVCOBFLBNQCOHPUD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.45938150735030914);
    msg.setSource(25117U);
    msg.setSourceEntity(198U);
    msg.setDestination(18330U);
    msg.setDestinationEntity(153U);
    msg.type = 94U;
    msg.command = 0U;
    msg.settings.assign("BGYWHSIYWZUCAZZCGENNHVCJUYRLDHJIQQ");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 25661U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("AUNZPIKBQOYGZXOUBADHLUDXKGIXKGBGAELHIPOTNBRXQYUAQGMERFVIOTVHNUWHALSZOLWIDYHHPFPZSPNFGLPLHKDICRQFKZXFDSJJEPYZKZEXANLJJTVUABCTGDSXXEGJWBENRYVTZCTDKQIVBHMHMVUNJJFSQOMFMEGY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.8159631092823192);
    msg.setSource(10539U);
    msg.setSourceEntity(41U);
    msg.setDestination(43320U);
    msg.setDestinationEntity(190U);
    msg.state = 238U;
    msg.plan_id = 12204U;
    msg.wpt_id = 62U;
    msg.settings_chk = 11739U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.11139331127897167);
    msg.setSource(63776U);
    msg.setSourceEntity(56U);
    msg.setDestination(49233U);
    msg.setDestinationEntity(96U);
    msg.state = 14U;
    msg.plan_id = 26370U;
    msg.wpt_id = 99U;
    msg.settings_chk = 26228U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.0804045291461376);
    msg.setSource(14504U);
    msg.setSourceEntity(193U);
    msg.setDestination(21126U);
    msg.setDestinationEntity(66U);
    msg.state = 190U;
    msg.plan_id = 54818U;
    msg.wpt_id = 94U;
    msg.settings_chk = 20143U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.32016770905157865);
    msg.setSource(12889U);
    msg.setSourceEntity(144U);
    msg.setDestination(30812U);
    msg.setDestinationEntity(231U);
    msg.uid = 70U;
    msg.frag_number = 254U;
    msg.num_frags = 43U;
    const signed char tmp_msg_0[] = {3, -124, 41, -115, 39, 21, 13, -118, -31, -4, -20, -72, -6, 28, 41, -11, -17, 99, 110, -81, -75, -55, 80, -34, 123, 0, 26, 80, -49, 120, -2, 11, 55, 110, 4, 71, 88, 87, -103, -89, -47, -49, -53, 101, -25, 34, -107, 84, 116, -87, 2, 107, 110, -86, 86, 75, 72, 4, 62, -69, 59, -39, 48, 113, -109, 70, -89, 89, -128, -15, 68, 76, -86, -29, -6, -56, 98, 83, 9, -47, -81, -114, 27, 106, -39, -81, 113, -36, 53, -121, 95, -50, 64, 5, 43, -74, -19, -9, -26, -26, 90, 101, -62, -121, 22, -118, 2, -3, -90, -92, -35, 107, 114, -63, 25, 71, 1, -80, -89, -24, -94, 64, 47, 125, -117, -29, -81, -114, 82, 50, 26, 5, 8, -93, 17, -58, 63, -53, 28, -63, -102, -7, -78, 74, -73, 41, -41, -70, 5, 26, 40, -81, 16, 54, -76, 42, -81, -89, -120, 2, -53, 103, 62, 86, 0, -80, 105, 98, 67, -15, 126, -16, 24, 92, -46, 18, -89, 75, -74, 117, -26, -78, -100, 50, 83, -80, 125, -81, 11, 116, -88, -73, 114, 11, -21, -87, 25, 2, -60, -46, 11, -35, -81, -72, -80, 36, -22, -7, 28, -124, -83, 41, -85, 68, 51, -49, 14, 97, -47, -76, 66, 21, -37, 16, -122, 70, 75, -79, -120, -60, -99, -104, 64, 34, 21, 38, -41, -103, 122, 74, 38, 102, 89, -19, 96, 46, 2, 43, 9, 98, -100, -14, -29, 35};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.5671064748908136);
    msg.setSource(1480U);
    msg.setSourceEntity(143U);
    msg.setDestination(26070U);
    msg.setDestinationEntity(82U);
    msg.uid = 203U;
    msg.frag_number = 176U;
    msg.num_frags = 9U;
    const signed char tmp_msg_0[] = {-78, 7, 26, 98, -29, 93, 37, -67, -37, 77, -1, -8, 1, -95, 58, -41, -12, 9, -21, 1, 92, 111, -11, -117, -36, 79, 40, 64, 121, -105, 22, -96, -103, -85, -82, -10, -48, -62, 108, 89, 54, -128, 103, 26, 76, -67, 107, 45, 14, -37, -125, -76, 43, -104, -25, 123, -46, -11, -48, -18, -50, -13, -71, -27, 20, -50, 44, 76, 88, -128, 63, -31, 20, -77, 91, 84, 4, -90, -31, -8, -69, 107, -127, -73, 49, -25, 65, 78, -104, 108, -18, -22, 110, -28, 71, 113, -45, 53, -37, 44, 75, -116, 83, 49, 46, 61, -76, 41, -83, 4, -99, -103, -9, -115, 25, -48, 121, 79, -48, 80, 37, 49, 58, 44, 18, 111, 2, 21, -24, -56, 84, -111, -38, 61, 106, -120, 52, -127, 32, -128, 35, -33, -112, 125, 45, 90, 86, -43, -56, 32, -128, 96, -127, 14, -127, -54, -93, 32, -10, 25, -41, 75, -28, -69, 62, -24, -7, -2, -26, 54, -36, 59, 95, 76, -66, 110, 15, -87, -42, -63, 38, -41, -32, 105, 112, -60, 52, 29, 98, 126, -55, -123, 98};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.2689373154870125);
    msg.setSource(19552U);
    msg.setSourceEntity(167U);
    msg.setDestination(31977U);
    msg.setDestinationEntity(75U);
    msg.uid = 85U;
    msg.frag_number = 215U;
    msg.num_frags = 87U;
    const signed char tmp_msg_0[] = {-46, 99, -77, 98, -63, 74, -50, 83, 123, 69, 20, -54, 38, 99, 6, 8, -52, 63, -9, -119, 4, 65, 13, 58, 42, 87, 62, 49, 108, 119, 120, -79, -119, 64, 20, -74, 111, -39, 25, 103, -29, 116, -85, -19, -89, 69, 94, -35, -70, -89, 41, -97, -17, 45, -21, 68, 82, 94, 119, -20, 83, 119, 121, -92, 94, -8, -94, 14, 115, -95, -116, 114, 124, -64, 25, -41, -18, 103, -128, -51, -115, -13, -47, 79, -85, 70, -17, 24, -80, 115, 73, 42, 119, 74, -29, -29, -71, -114, -41, 16, 91, -110, 111, -107, 51, -76, -111};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.5572236834390649);
    msg.setSource(53763U);
    msg.setSourceEntity(86U);
    msg.setDestination(41870U);
    msg.setDestinationEntity(171U);
    msg.content_type.assign("DUFLPFPMRWTPEQWBQWGYIYADAFFKVIKFJLPUJOPNRICXAVWLKIGZECHOSHZWSMYQYSSYITHWBRGIFUEFNIKBKXZIQVK");
    const signed char tmp_msg_0[] = {-92, -91, -77, 115, -4, -89, -23, -123, 96, -68, 14, 3, -116, 97, 122, 22, 95, -51, -88, -14, 15, -116, -46, -120, -70, 116, 100, 22, -91, -51, -53, 108, -10, -38, -21, -128, -125, -53, 28, 80, -55, -44, -30, 102, -4, 7, 118, -29, 24, -94, -126, 37, 24, 119, 103, -82, 60, 111, 53, -3, -54, 27, -44, -91, 29, 6, 65, -19, -112, 91, 33, 8, -2, 92, -124, -63, -95, -102, 96, 102, -24, -114, 63, 105, 63, 125, -1, -58, -97, 45, -80, 12};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.36141789797725);
    msg.setSource(30940U);
    msg.setSourceEntity(94U);
    msg.setDestination(64716U);
    msg.setDestinationEntity(84U);
    msg.content_type.assign("NLOIQKEZLAUCTIDWNGJLCFWXXTSNHOZLHMRJPBFEGQTQSDYAJWZQPVDTJWMSGHLSYRHTKBHVNVZRSFTEEBKUEBHPMQQNLPOZBBGLOXUDBCPIVCUCERCCKKHPAOYVIANYTUYRXNLSGFMYMWKWXIIBXXRFDU");
    const signed char tmp_msg_0[] = {-88, -33, -51, 121, 98, -66, -64, -72, 40, -127, 113, 122, -14, 56, -66, 101, -43, -55, 106, 126, 92, -44, -45, 80, 43, 49, 6, -24, -38, 106, 111, 122, 106, -51, -76, -4, -86};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.4632505245880796);
    msg.setSource(43432U);
    msg.setSourceEntity(122U);
    msg.setDestination(2471U);
    msg.setDestinationEntity(1U);
    msg.content_type.assign("HMWUJTXSTBZFKUATSIGOQPNGGACEJBCAAVZCSIRAEVYVTIWFJZTRBZFUDKMIPKRCYGJDIQABMIKJLYVNLZDKJEWQPYLMEPFOFXENKSGYOUGHCXQKMOHYNALTEDBTPYAMDKERKQXUDSUQNUFXZZWRRBUXOOGYRXQHWVNHSSXHQOJL");
    const signed char tmp_msg_0[] = {-42, 9, 51, -48, 47, -98, 25, -126, -80, -10, 19, -57, -87, 120, 6, 54, -121, 81, -5, -24, -14, 56, 61, 11, -71, 77, -38, -113, -68, -11, -64, -107, -103, -97, 98, 68, -119, -124, 98, 29, 70, -34, 121, -29, -26, -22, -83, -30, 39, -16, 62, -117, -76, -60, 61, -86, 91, -1, -78, 6, -39, 69, 83, 3, -89, -2, 56, 74, 68, -17, -21, 115, 88, -125, 45, -47, 52, -67, 55, -37, -29, -16, 98, 116, -127, -65, -30, 20, 49, 57, 103, 13, -15, 20, 115, 72, -64, 42, -30, 47, -1, 101, 28, 10, 105, 48, 25, 70, -57, 88, 30, 70};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.4018212305872113);
    msg.setSource(53923U);
    msg.setSourceEntity(29U);
    msg.setDestination(52377U);
    msg.setDestinationEntity(115U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.6417871894576196);
    msg.setSource(10068U);
    msg.setSourceEntity(56U);
    msg.setDestination(26751U);
    msg.setDestinationEntity(97U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.8345411114431619);
    msg.setSource(56287U);
    msg.setSourceEntity(44U);
    msg.setDestination(18892U);
    msg.setDestinationEntity(109U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.45193725793905515);
    msg.setSource(28516U);
    msg.setSourceEntity(107U);
    msg.setDestination(42076U);
    msg.setDestinationEntity(166U);
    msg.target = 1443U;
    msg.bearing = 0.4401171096276917;
    msg.elevation = 0.5705696137209104;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.6501784666763273);
    msg.setSource(6864U);
    msg.setSourceEntity(79U);
    msg.setDestination(25389U);
    msg.setDestinationEntity(7U);
    msg.target = 43271U;
    msg.bearing = 0.6460558575607173;
    msg.elevation = 0.24021695245519248;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.6065277199953748);
    msg.setSource(25665U);
    msg.setSourceEntity(107U);
    msg.setDestination(25553U);
    msg.setDestinationEntity(225U);
    msg.target = 10098U;
    msg.bearing = 0.5645494173564021;
    msg.elevation = 0.13271452378092197;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.10599816964636011);
    msg.setSource(51675U);
    msg.setSourceEntity(132U);
    msg.setDestination(59764U);
    msg.setDestinationEntity(53U);
    msg.target = 57486U;
    msg.x = 0.3335942149057486;
    msg.y = 0.04132993287251385;
    msg.z = 0.3221295107734632;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.6964090362117876);
    msg.setSource(56482U);
    msg.setSourceEntity(71U);
    msg.setDestination(23521U);
    msg.setDestinationEntity(245U);
    msg.target = 14096U;
    msg.x = 0.3895918875116672;
    msg.y = 0.5513608222314772;
    msg.z = 0.06653523082211465;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.08293930357340784);
    msg.setSource(17858U);
    msg.setSourceEntity(116U);
    msg.setDestination(44566U);
    msg.setDestinationEntity(185U);
    msg.target = 36035U;
    msg.x = 0.9101759458621264;
    msg.y = 0.34695580567847184;
    msg.z = 0.8847245979184115;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.5135665762949895);
    msg.setSource(20278U);
    msg.setSourceEntity(127U);
    msg.setDestination(27864U);
    msg.setDestinationEntity(68U);
    msg.target = 25902U;
    msg.lat = 0.6971625927985858;
    msg.lon = 0.8310325572980619;
    msg.z_units = 114U;
    msg.z = 0.456023232978649;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.7304334775339436);
    msg.setSource(40079U);
    msg.setSourceEntity(58U);
    msg.setDestination(57016U);
    msg.setDestinationEntity(70U);
    msg.target = 26859U;
    msg.lat = 0.4570260409787055;
    msg.lon = 0.7099235681679037;
    msg.z_units = 43U;
    msg.z = 0.16561121946555124;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.33350789952027027);
    msg.setSource(32962U);
    msg.setSourceEntity(156U);
    msg.setDestination(33729U);
    msg.setDestinationEntity(229U);
    msg.target = 29341U;
    msg.lat = 0.23994260331525297;
    msg.lon = 0.17105911429114484;
    msg.z_units = 140U;
    msg.z = 0.7439593842873597;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.08161889405120804);
    msg.setSource(26968U);
    msg.setSourceEntity(212U);
    msg.setDestination(38004U);
    msg.setDestinationEntity(142U);
    msg.locale.assign("TTYDWIZMETUHCQZGHQUWBVJQUGNNIWMEOMHJYTAYRXCBKZCKTNPBKKCZOVEFMYWFUSIXNTSWVDVZDMGFUBBEUSVXAAVFDYEJTWDRQQHBYQCMBUHGTTJQPESRJCCAXSACUWANFAYSNPMCPNEMJRVZIOEJMHPBRFRIDKOOGSGLA");
    const signed char tmp_msg_0[] = {22, -118, 68, -29, 23, 5, 64, -20, -24, 103, -67, -65, -8, -20, 112, -53, -8, 5, -41, -52, 25, -72, 29, 103, 85, -126, -96, 50, 13, -118, 68, 2, -27, -53, -95, 99, 46, 54, -49, -70, -23, -15, 73, -96, -52, -24, -64, 58, 123, -19, -79, -5, 12, -107, 69, -94, -50, 34, -71, -89, 11, 112, 109, 7, 38, -27, -92, -4, 26, -32, 72, 66, -105, -37, -18, 121, -11, -60, -78, 93, -35, 106, -50, 8, 22, 97, 86, 49, -114, 47, -96, 86, -25, 44, -44, 42, 34, 110};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.8542046106987791);
    msg.setSource(61304U);
    msg.setSourceEntity(111U);
    msg.setDestination(60715U);
    msg.setDestinationEntity(114U);
    msg.locale.assign("CHQAHHIKYCXRBVKJVQQGXXPFTWHZSLOPJZRCBNQYRSMKUYMVLJUMOESWLQAXUSMOKCPYTNTIBNPKV");
    const signed char tmp_msg_0[] = {76, -111, 18, -10, 106, 17, 104, -45, -48, -20, -34, 80, 94, 103, 0, -119, 48, 111, 84, -59, 76, -47, -5, -93, -17, 45, -70, 46, -80, 87, -7, 53, 62, 11, 61, 52, 2, 52, -39, -10, -71, -115, 96, 73, 18, 92, -63, -65, 53, -3, -110, 17, 71, 47, -111, -33, -111, 39, 40, -103, -111, -11, 106, 30, -35, -22, 73, -38, -50, -110, -78, 36, -54, 27, -128, -7, 4, -9, -117, 114, 0, 28, -47, 111, -75, -54, -55, -65, 60, 6, -52, -80, -117, -32, -30, -63, -23, 93, -39, 115, -55, -11, 71, -31, 34, -83, -114, -94, 58, -120, -26, -83, -32, 1, 56, 102, -34, -77, -4, 52, 64, -41, -22, 61, -76, 15, -56, 97, 105, -11, 52, 18, 3, 70, -40, 30, -38, 98, 108, -117, 24, 71, 100, -118, -110, 3, 102, -10, 47, 123, 124, 107, 29, 102, 123, -24, -47, 97, -9, -92, 20, -76, 32, -78, -44, -95, 62, -92, 25, 7, -91, 29, 72, -29, 100, 8, 110, -58, 12, 35, 41, -71, 63, 95, 118, 77, -75, 116, 76, 53, -30, 7, 80, 13, -62, -79, 43, -81, 93, -84, -128, 38, 36, -113, -33, -116, 18, -47, 94, -28, -97, -87, 122, 82, -104, 24, -15, -83, -34};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.47924996953989607);
    msg.setSource(3559U);
    msg.setSourceEntity(235U);
    msg.setDestination(46770U);
    msg.setDestinationEntity(54U);
    msg.locale.assign("FQVCJASGPDHUOVVZPVVAIIBASAKULVIMQTDAEWEOGWWIMWGYNAJYMQXRTCBQPOZUSBWRNMYIHMUWTXZZCJIFWIVOVZNTQLWCEOPUSJCPGNDNXCGTFUBRYTTGXSEXFXMCHJKSLCCLLULKEPLFLKHYRNVACEEURGJWNQEOXODZDPPIOKZZXSAORMTPBFBQNNFKDQDJBQYYGDOSEFTZJQWSHRKAVUDGFRMLEBXHRDKYAGYYHUHKBHMIHF");
    const signed char tmp_msg_0[] = {-70, -65, -42, -97, 113, -7, 8, 90, 95, 27, -119, -66, -55, 99, -51, 68, -57, -75, -95, -87, -9, -65, 2, 28, 12, -82, 43, 53, -123, -117, -96, -61, -115, -128, 98, -89, 14, -94, 26, -54, 53, 114, 82, 34, 65, 81, 118, -120, 21, 32, 53, -125, -71, 60, -48, 65, 58, 124, 106, -82, 99, 14, -9, -78, -19, 4, 17, 104, 23, -94, -25, 43, -107, -67, 44, -89, -80, -29, -57, -106, -23, -100, -38, -88, 82, -117, -13, 84, 36, -115, 44, 92, -56, -27, 7, 110, 72, 93, 61, -94, 10, -128, 88, 51, -16, 70, -121, 63, -56, -55, -53, -72, -10, -6, -89, 73, 55, 96, -59, -42, 97, 94, -109, 100, -86, -120, -23, -87, 83, 117, -25, 60, -118, 30, -94, 14, 72, -69, 7, -118, -72, 74, 99, 7, 50, -115, 45, 82, -56, 36, 19, -116, 69, 6, 87, 119, -25, -37, 29, 12, 126, 103, 9, 84, -12, -66, -86, -1, 66, 37, 57, -28, -101, -127, 4, -121, 20, 49, -19, -46, -8, -120, 24, 20, -74, 116, 126, -80, -47, 36, -12, 125, 112, -112, -46, 122, -84, -97, -85, 126, 43, -100, -51, 119, 43, -91, 45, -56, -81, 110, 60, -122, 24, 86, -122, 72, -65, -34, 50, -77, 17, -67, -50, 83, 116, -128};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.36698648729204963);
    msg.setSource(18392U);
    msg.setSourceEntity(103U);
    msg.setDestination(52510U);
    msg.setDestinationEntity(206U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.4168974331164855);
    msg.setSource(35173U);
    msg.setSourceEntity(131U);
    msg.setDestination(23567U);
    msg.setDestinationEntity(34U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.456757373776407);
    msg.setSource(38950U);
    msg.setSourceEntity(76U);
    msg.setDestination(45662U);
    msg.setDestinationEntity(79U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.5352285654806972);
    msg.setSource(51516U);
    msg.setSourceEntity(13U);
    msg.setDestination(37087U);
    msg.setDestinationEntity(27U);
    msg.camid = 101U;
    msg.x = 47649U;
    msg.y = 31306U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.4867747119525785);
    msg.setSource(2366U);
    msg.setSourceEntity(219U);
    msg.setDestination(36615U);
    msg.setDestinationEntity(249U);
    msg.camid = 86U;
    msg.x = 2616U;
    msg.y = 52592U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.16917102673214302);
    msg.setSource(41613U);
    msg.setSourceEntity(222U);
    msg.setDestination(7755U);
    msg.setDestinationEntity(155U);
    msg.camid = 36U;
    msg.x = 51157U;
    msg.y = 21437U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.4485983082529169);
    msg.setSource(34557U);
    msg.setSourceEntity(147U);
    msg.setDestination(40105U);
    msg.setDestinationEntity(6U);
    msg.camid = 95U;
    msg.x = 60867U;
    msg.y = 22483U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.4929767847457114);
    msg.setSource(61461U);
    msg.setSourceEntity(12U);
    msg.setDestination(4548U);
    msg.setDestinationEntity(251U);
    msg.camid = 87U;
    msg.x = 62477U;
    msg.y = 41123U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.5337179833386191);
    msg.setSource(49752U);
    msg.setSourceEntity(81U);
    msg.setDestination(53727U);
    msg.setDestinationEntity(110U);
    msg.camid = 156U;
    msg.x = 62301U;
    msg.y = 21460U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.4380732915559221);
    msg.setSource(39142U);
    msg.setSourceEntity(86U);
    msg.setDestination(38628U);
    msg.setDestinationEntity(185U);
    msg.tracking = 52U;
    msg.lat = 0.6778404967136467;
    msg.lon = 0.4575282539959076;
    msg.x = 0.9523659694442034;
    msg.y = 0.088738078260585;
    msg.z = 0.5333643638824517;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.22898847443476456);
    msg.setSource(7564U);
    msg.setSourceEntity(109U);
    msg.setDestination(42634U);
    msg.setDestinationEntity(164U);
    msg.tracking = 185U;
    msg.lat = 0.7806511890016006;
    msg.lon = 0.44544661089334403;
    msg.x = 0.6837762642581744;
    msg.y = 0.8972574068261542;
    msg.z = 0.0036175332796165582;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.6787340015488973);
    msg.setSource(10017U);
    msg.setSourceEntity(147U);
    msg.setDestination(44046U);
    msg.setDestinationEntity(114U);
    msg.tracking = 43U;
    msg.lat = 0.5969245717484432;
    msg.lon = 0.14475804629588773;
    msg.x = 0.792966663560807;
    msg.y = 0.041271087026656494;
    msg.z = 0.12389875827233454;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.8584832577748114);
    msg.setSource(15448U);
    msg.setSourceEntity(222U);
    msg.setDestination(20695U);
    msg.setDestinationEntity(148U);
    msg.target.assign("RKQIMLAJDYQEFHUFYWJWIFVYTNNVOTFNAESORMALUEGA");
    msg.lbearing = 0.332652942561396;
    msg.lelevation = 0.9632329535905167;
    msg.bearing = 0.26584119864139444;
    msg.elevation = 0.4463102995324133;
    msg.phi = 0.10464806248715364;
    msg.theta = 0.6313593925730336;
    msg.psi = 0.4630729078188871;
    msg.accuracy = 0.248723422149714;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.9196150821067625);
    msg.setSource(49537U);
    msg.setSourceEntity(140U);
    msg.setDestination(2533U);
    msg.setDestinationEntity(206U);
    msg.target.assign("OHTRIGYLCJEZPEETUOKAURPSEQDKJIBIIJPQZRFARNDLKNQBUUSPZCYUDSIQPHNVTFQLXVZLMSZKYYFZGIYMCXICOOKNCHGRHS");
    msg.lbearing = 0.06187156935091065;
    msg.lelevation = 0.8395449903389179;
    msg.bearing = 0.07928016996225828;
    msg.elevation = 0.40805096184263845;
    msg.phi = 0.27471876635784187;
    msg.theta = 0.9665641577233203;
    msg.psi = 0.8769502981218558;
    msg.accuracy = 0.8961673987363037;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.43210333887006747);
    msg.setSource(38583U);
    msg.setSourceEntity(118U);
    msg.setDestination(33151U);
    msg.setDestinationEntity(172U);
    msg.target.assign("QBECYHQWDPKIUJNFEZFIUFMOEEFYDNDKVOYXLTJGXZHALDFKHTCXZAANROZWMASZHICLRVEWZTGKDUSMGXFEHAJPOBSXOYLDSGPIBYPPOVFVCQMSHWZNBFBXMCMVJWLERCCZWVLSJRVPHKYCKJXLTEYU");
    msg.lbearing = 0.04230866291832813;
    msg.lelevation = 0.8535826287096928;
    msg.bearing = 0.11757042230598758;
    msg.elevation = 0.034854072945118775;
    msg.phi = 0.8072154056064326;
    msg.theta = 0.7991000978540169;
    msg.psi = 0.2272195616852002;
    msg.accuracy = 0.2829976244965997;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.08853534885455283);
    msg.setSource(45510U);
    msg.setSourceEntity(36U);
    msg.setDestination(44968U);
    msg.setDestinationEntity(104U);
    msg.target.assign("JZNHYHJDYPKLAQMVGZJDVAGKQOYZOJOFULANDMDUYSMHAVSKPRDWNPMSNFLPKLUMOCIITDBQVCTONOAGONXYKHRETXGJNUIDCCCHMHTURTIUHXUZYMGYSNPHQECOFGEYVZWAVWZNDIWEKGBPZSLMFVGAEFTWXCJUFXHWTCLIZUCXLBZWQTCTIIESQQVRPBIDESEJOQBASMSZFXTPBWGAWLX");
    msg.x = 0.9658318365564958;
    msg.y = 0.6409029068068819;
    msg.z = 0.5859690152867514;
    msg.n = 0.5221471548078553;
    msg.e = 0.9102746581912454;
    msg.d = 0.25733202264032173;
    msg.phi = 0.2664961207801878;
    msg.theta = 0.9688792449395682;
    msg.psi = 0.6385450516113214;
    msg.accuracy = 0.3062579119659986;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.9469381370385507);
    msg.setSource(23294U);
    msg.setSourceEntity(13U);
    msg.setDestination(39140U);
    msg.setDestinationEntity(209U);
    msg.target.assign("PIUCLZTEDUCUQWCXPZCFXTZRVHGGZYTPFNSAMKTYHJCKIXIMVGYYHQTAAMCFOOMJBBWNBLJGQZEOXIKZWNMKMJOHKPKUQSHSFDFEASLEHA");
    msg.x = 0.2929645093510852;
    msg.y = 0.2865928289489469;
    msg.z = 0.6033252434775986;
    msg.n = 0.6836362720474585;
    msg.e = 0.90326189631025;
    msg.d = 0.5881044742253169;
    msg.phi = 0.14491996950967712;
    msg.theta = 0.13350304960761672;
    msg.psi = 0.7222979754220479;
    msg.accuracy = 0.6767697885891812;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.5595407557816295);
    msg.setSource(54726U);
    msg.setSourceEntity(71U);
    msg.setDestination(56188U);
    msg.setDestinationEntity(232U);
    msg.target.assign("APKVWYMNWWYOWQHRNMFQZKATAWLFWOOQP");
    msg.x = 0.5989452345916684;
    msg.y = 0.31986996514231003;
    msg.z = 0.23545670843036282;
    msg.n = 0.20772274238897015;
    msg.e = 0.7409839950367136;
    msg.d = 0.9282034115393832;
    msg.phi = 0.6825694339159928;
    msg.theta = 0.8518121773495781;
    msg.psi = 0.0193163568149064;
    msg.accuracy = 0.572577520626014;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.3763271553140476);
    msg.setSource(27664U);
    msg.setSourceEntity(198U);
    msg.setDestination(36255U);
    msg.setDestinationEntity(116U);
    msg.target.assign("KWTPMZYTSEUALQBBMWOQFHSRIHJKGDKBWL");
    msg.lat = 0.11975879465678596;
    msg.lon = 0.14295197998383535;
    msg.z_units = 4U;
    msg.z = 0.3387173384833295;
    msg.accuracy = 0.784589813529372;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.4116823905549799);
    msg.setSource(25567U);
    msg.setSourceEntity(187U);
    msg.setDestination(32297U);
    msg.setDestinationEntity(58U);
    msg.target.assign("TFWXTEERSXNZPARKVOLZPJQPKHFTXCUTCVUBKCFOXNREFWPESNGSRMUJOBVFRXRGGRIHMVWSUDLSCWPJHVJJKLVVHUCDLPRYAQMDERGNHNKYEGBEFYTNIZBFSDHCNLFFPTWQ");
    msg.lat = 0.20867197585998798;
    msg.lon = 0.09577455977514615;
    msg.z_units = 11U;
    msg.z = 0.5437304794885479;
    msg.accuracy = 0.7238924333164282;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.4461797148614435);
    msg.setSource(19466U);
    msg.setSourceEntity(185U);
    msg.setDestination(11255U);
    msg.setDestinationEntity(246U);
    msg.target.assign("VFIQRGTMBIMJTCAOTRWVQYOIGADEJXYSZQWUGYQEHNKCXAUDUKENGOIBDPIXZNFGEZHLOEQLYYPQXEYLVHRGDWUFQARLNPCHXKQJBHGPNLYUZDM");
    msg.lat = 0.9889775857311098;
    msg.lon = 0.4310062354406038;
    msg.z_units = 82U;
    msg.z = 0.4484676865522186;
    msg.accuracy = 0.6099012566739894;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.11719491295402895);
    msg.setSource(61971U);
    msg.setSourceEntity(52U);
    msg.setDestination(15395U);
    msg.setDestinationEntity(80U);
    msg.name.assign("TUJVJKBPWZARMOKIJBRTLOMNYLWOXUGESEZZMG");
    msg.lat = 0.9406572894775987;
    msg.lon = 0.6365271983040651;
    msg.z = 0.7139592825413907;
    msg.z_units = 160U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.6135634400184085);
    msg.setSource(60547U);
    msg.setSourceEntity(234U);
    msg.setDestination(62317U);
    msg.setDestinationEntity(27U);
    msg.name.assign("CTVQNWQUIRTXCHDRZRWUWOHWPKDSXONCVMWORWGMNSHKIZIFDPLELHQTLYTZQIMXQHRDCZNSTPYPEKQOKCWJJUDQHAXBUUAUEBBBFDAAKESE");
    msg.lat = 0.09978269232133818;
    msg.lon = 0.7943960363743221;
    msg.z = 0.2300801120164362;
    msg.z_units = 111U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.8376385727522934);
    msg.setSource(41460U);
    msg.setSourceEntity(185U);
    msg.setDestination(22544U);
    msg.setDestinationEntity(217U);
    msg.name.assign("SBPJFYYDCVSHTWUJAXBLVSAWTAPCCDARZHPCQJCDTOFWHWWPXTKXGCNADRKOYVOKYGRNYZZSRMAJEUQPQIMNIRIUMEBRSWDBDKKVIHEJRHSUZLKLJEKODMFLZAIGFQOQDLBAVGVTMGGDWAKXYUCOEQLTJXFZIBSNTISXBXZGNXUNLKZRJYLASBFMPFCRRMPEZNHOWHVXNTFFILKCECBNOUDPEPQVWTFMTGSBVPYVGWLQNJZX");
    msg.lat = 0.5251261600332092;
    msg.lon = 0.31672372334362686;
    msg.z = 0.031295609055568385;
    msg.z_units = 238U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.8485715071250122);
    msg.setSource(60929U);
    msg.setSourceEntity(88U);
    msg.setDestination(10796U);
    msg.setDestinationEntity(139U);
    msg.op = 41U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.618722779628921);
    msg.setSource(44991U);
    msg.setSourceEntity(125U);
    msg.setDestination(56345U);
    msg.setDestinationEntity(66U);
    msg.op = 226U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.494324839182398);
    msg.setSource(49667U);
    msg.setSourceEntity(98U);
    msg.setDestination(48648U);
    msg.setDestinationEntity(10U);
    msg.op = 15U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("PUXNRHZYARYJVWOXNTMKDQWYUEOWEERUOAIHFMLSREGYKIMXLXYPAIAKIWFQHDXC");
    tmp_msg_0.lat = 0.9655376354381047;
    tmp_msg_0.lon = 0.011189002653016367;
    tmp_msg_0.z = 0.05214947392503255;
    tmp_msg_0.z_units = 12U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.7118085379213961);
    msg.setSource(51780U);
    msg.setSourceEntity(86U);
    msg.setDestination(41972U);
    msg.setDestinationEntity(245U);
    msg.value = 0.5090757854186714;
    msg.type = 10U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.42049126697264727);
    msg.setSource(49139U);
    msg.setSourceEntity(202U);
    msg.setDestination(22973U);
    msg.setDestinationEntity(168U);
    msg.value = 0.908113200109208;
    msg.type = 189U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.4134143841768855);
    msg.setSource(10630U);
    msg.setSourceEntity(66U);
    msg.setDestination(51079U);
    msg.setDestinationEntity(179U);
    msg.value = 0.40764987588641377;
    msg.type = 63U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.6391548399920124);
    msg.setSource(63360U);
    msg.setSourceEntity(118U);
    msg.setDestination(60365U);
    msg.setDestinationEntity(109U);
    msg.value = 0.7219093535177274;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.6810669838117879);
    msg.setSource(22451U);
    msg.setSourceEntity(12U);
    msg.setDestination(61266U);
    msg.setDestinationEntity(82U);
    msg.value = 0.07695159824757014;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.39313262091797796);
    msg.setSource(41374U);
    msg.setSourceEntity(205U);
    msg.setDestination(1032U);
    msg.setDestinationEntity(87U);
    msg.value = 0.4028665655378404;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.8033038241180834);
    msg.setSource(64069U);
    msg.setSourceEntity(62U);
    msg.setDestination(26749U);
    msg.setDestinationEntity(198U);
    msg.timestamp_last_service = 0.7688400817757791;
    msg.time_next_service = 0.26096595376663356;
    msg.time_motor_next_service = 0.7601942986567835;
    msg.time_idle_ground = 0.37351059112795715;
    msg.time_idle_air = 0.15355706794264545;
    msg.time_idle_water = 0.3293787743964136;
    msg.time_idle_underwater = 0.13858759378000562;
    msg.time_idle_unknown = 0.3391520400929723;
    msg.time_motor_ground = 0.7822778096417047;
    msg.time_motor_air = 0.10177821324925962;
    msg.time_motor_water = 0.34547646129588994;
    msg.time_motor_underwater = 0.17381332775748004;
    msg.time_motor_unknown = 0.06230271328861625;
    msg.rpm_min = 12423;
    msg.rpm_max = 12340;
    msg.depth_max = 0.29289759499820633;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.026137532203687974);
    msg.setSource(33953U);
    msg.setSourceEntity(167U);
    msg.setDestination(29371U);
    msg.setDestinationEntity(208U);
    msg.timestamp_last_service = 0.8061266191891846;
    msg.time_next_service = 0.47271447564809355;
    msg.time_motor_next_service = 0.7795022529638969;
    msg.time_idle_ground = 0.1265781562706655;
    msg.time_idle_air = 0.8870549771502525;
    msg.time_idle_water = 0.662850929064679;
    msg.time_idle_underwater = 0.315587781924934;
    msg.time_idle_unknown = 0.8463772949231719;
    msg.time_motor_ground = 0.495029327842306;
    msg.time_motor_air = 0.049780321994810084;
    msg.time_motor_water = 0.5298063468734819;
    msg.time_motor_underwater = 0.7393566564118569;
    msg.time_motor_unknown = 0.8893115969713469;
    msg.rpm_min = 5911;
    msg.rpm_max = 498;
    msg.depth_max = 0.45439543601554455;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.49962930296033536);
    msg.setSource(915U);
    msg.setSourceEntity(123U);
    msg.setDestination(28393U);
    msg.setDestinationEntity(47U);
    msg.timestamp_last_service = 0.2516697910328217;
    msg.time_next_service = 0.4251304333571434;
    msg.time_motor_next_service = 0.21149939632077197;
    msg.time_idle_ground = 0.10395649046559563;
    msg.time_idle_air = 0.047895200436569474;
    msg.time_idle_water = 0.10269605688884642;
    msg.time_idle_underwater = 0.20859064432421726;
    msg.time_idle_unknown = 0.7879048489259802;
    msg.time_motor_ground = 0.7634005865547077;
    msg.time_motor_air = 0.6108987082135511;
    msg.time_motor_water = 0.8423541998736692;
    msg.time_motor_underwater = 0.23208594287777895;
    msg.time_motor_unknown = 0.8501543479699094;
    msg.rpm_min = -13324;
    msg.rpm_max = -25512;
    msg.depth_max = 0.2911469578100888;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.8667345917195527);
    msg.setSource(18472U);
    msg.setSourceEntity(212U);
    msg.setDestination(64958U);
    msg.setDestinationEntity(97U);
    msg.severity = 97U;
    msg.text.assign("AJVVYTZOUSMLSNWPZSOTJPYILGTIGDKWHFDPBNFYWWOLQLURGKQCSFYGFRBDVRAUXQRASJNVVFUQYLSIPAZMCXDUBIQGFWXJQPFAGCQCPHNTYIDNZHIYMKVWOJRHXAZCEUPJTHKRKJPITEADDXQOCSUHKNLCFXFEBKOFBNBUEUMEJOBWNEVVRPLJJACTHI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.09560822447279149);
    msg.setSource(10709U);
    msg.setSourceEntity(189U);
    msg.setDestination(56083U);
    msg.setDestinationEntity(225U);
    msg.severity = 244U;
    msg.text.assign("TLQLZCVORQFJNKTXDMRZUEYCEDVBYXOVGSDWIYWPLVTJLIPSBIIIESCABVTJXLPAURGNZCKANKHFRCUKKIHHOIMHKNLAXAVDJAZPIHWLEYXRNSNFPQPFJQCZXYEHJIVGUUKTUMVPERBNGDPQSLEGVQXZUMKSJEZWEYTFXGFHKZQDJRWOZSOHMBJGWWTXEHPSBTONADALSPXNWGCDY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.4634369295085027);
    msg.setSource(11892U);
    msg.setSourceEntity(200U);
    msg.setDestination(58516U);
    msg.setDestinationEntity(138U);
    msg.severity = 64U;
    msg.text.assign("UQNTAQOTKADSKKRYNPBAJEEZLMYWDJESECIQVGDUQLLXESBRBXAZCVWTJGOETCOYKRPGGWQLCBJMGLBCTHILFRDKPFANXVUDWMOUOQOVRPMHWRQVSLFVBZIFHSCOSZOIZGGHDOJTMZVPPQPKUZFUZBCXKRTJJYMQYJFWYPFRAFFHYSUAAHMCFJWVZWYPAALHEDRYKEPNMI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.6208660380636835);
    msg.setSource(45741U);
    msg.setSourceEntity(199U);
    msg.setDestination(53746U);
    msg.setDestinationEntity(13U);
    msg.channel = 17;
    msg.value = 2031128315;
    msg.gain = 31U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.7355540970230738);
    msg.setSource(4817U);
    msg.setSourceEntity(33U);
    msg.setDestination(34896U);
    msg.setDestinationEntity(248U);
    msg.channel = -124;
    msg.value = -74406013;
    msg.gain = 39U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.5022936634065394);
    msg.setSource(12976U);
    msg.setSourceEntity(212U);
    msg.setDestination(59547U);
    msg.setDestinationEntity(248U);
    msg.channel = 43;
    msg.value = 651026887;
    msg.gain = 50U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.7062804484565882);
    msg.setSource(22687U);
    msg.setSourceEntity(161U);
    msg.setDestination(32594U);
    msg.setDestinationEntity(118U);
    msg.ch01 = 0.7370084581084956;
    msg.ch02 = 0.2853852226513802;
    msg.ch03 = 0.5392765564905561;
    msg.ch04 = 0.80678187345251;
    msg.ch05 = 0.853183451008093;
    msg.ch06 = 0.4576988873052116;
    msg.ch07 = 0.46063283010785583;
    msg.ch08 = 0.5713348510680765;
    msg.ch09 = 0.19729863694322325;
    msg.ch10 = 0.13505994987459202;
    msg.ch11 = 0.4059773123547802;
    msg.ch12 = 0.39387687327355825;
    msg.ch13 = 0.5891733052443463;
    msg.ch14 = 0.17555390503206203;
    msg.ch15 = 0.9423700873914205;
    msg.ch16 = 0.4421909800354197;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.01615697686522699);
    msg.setSource(50791U);
    msg.setSourceEntity(220U);
    msg.setDestination(18691U);
    msg.setDestinationEntity(49U);
    msg.ch01 = 0.43264870466970917;
    msg.ch02 = 0.43466863746442197;
    msg.ch03 = 0.09004910180047998;
    msg.ch04 = 0.8793368954916406;
    msg.ch05 = 0.6879533341190388;
    msg.ch06 = 0.6254258773076146;
    msg.ch07 = 0.3432978442510859;
    msg.ch08 = 0.17622620833581404;
    msg.ch09 = 0.5009894634159308;
    msg.ch10 = 0.9876709077331746;
    msg.ch11 = 0.2297885810055903;
    msg.ch12 = 0.2793170900619415;
    msg.ch13 = 0.2518455748619103;
    msg.ch14 = 0.026242360691068778;
    msg.ch15 = 0.7379496233299825;
    msg.ch16 = 0.9778304621144716;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.42882569474471066);
    msg.setSource(27228U);
    msg.setSourceEntity(83U);
    msg.setDestination(59567U);
    msg.setDestinationEntity(148U);
    msg.ch01 = 0.2894005040269947;
    msg.ch02 = 0.46748103004742736;
    msg.ch03 = 0.6092695653040381;
    msg.ch04 = 0.5140965140621714;
    msg.ch05 = 0.3826985789286911;
    msg.ch06 = 0.3200334964179219;
    msg.ch07 = 0.8457770573742339;
    msg.ch08 = 0.5259178757268136;
    msg.ch09 = 0.6028989708703633;
    msg.ch10 = 0.12107417703169521;
    msg.ch11 = 0.27319093533841543;
    msg.ch12 = 0.5069653746329129;
    msg.ch13 = 0.019707911359644004;
    msg.ch14 = 0.7876160473861852;
    msg.ch15 = 0.6682695554217035;
    msg.ch16 = 0.507806371482403;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.12605363469258068);
    msg.setSource(46852U);
    msg.setSourceEntity(56U);
    msg.setDestination(49325U);
    msg.setDestinationEntity(187U);
    msg.op = 76U;
    msg.lat = 0.725755159366986;
    msg.lon = 0.20594242172976474;
    msg.height = 0.06954023515848051;
    msg.depth = 0.5221468892401642;
    msg.alt = 0.39070793067682785;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.03896747880141682);
    msg.setSource(39331U);
    msg.setSourceEntity(216U);
    msg.setDestination(22174U);
    msg.setDestinationEntity(235U);
    msg.op = 145U;
    msg.lat = 0.2534459662133355;
    msg.lon = 0.2316686894330744;
    msg.height = 0.7125641412167657;
    msg.depth = 0.44728639672231363;
    msg.alt = 0.10262274318018161;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.08453365968245252);
    msg.setSource(38447U);
    msg.setSourceEntity(233U);
    msg.setDestination(35300U);
    msg.setDestinationEntity(209U);
    msg.op = 69U;
    msg.lat = 0.7942539953235033;
    msg.lon = 0.34186885127444744;
    msg.height = 0.3913147373625986;
    msg.depth = 0.6031432777280262;
    msg.alt = 0.014530782073147064;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.7060466427163226);
    msg.setSource(18777U);
    msg.setSourceEntity(155U);
    msg.setDestination(46700U);
    msg.setDestinationEntity(87U);
    msg.name.assign("AFUYULKZHNHUZJYCKVIVJYIOEVKMOEOXCBSXAWAOODYZGEDAQCSYIKNAFBXHWLOMMNWIWLKLOMQRCHSOYQHJKS");
    msg.value = 232U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.607044850352753);
    msg.setSource(53965U);
    msg.setSourceEntity(137U);
    msg.setDestination(43776U);
    msg.setDestinationEntity(130U);
    msg.name.assign("POPCTRTGFIRHRFDJXXJXVAKTQONTCPQWWHIBMMTOOHFTJSXZCBSJALBUVFASEPDQEFWQCNDEQHDMZLOBSUGSLEYHJWMDZVUOBIBSWUHXJPQHRGZCKXNJADKKDDOEAKQGZLWTLQAYHELKNNKRASTPTELDGZVCACXYFWIFFRVZRKVFLGCPK");
    msg.value = 163U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.8954531563295729);
    msg.setSource(14337U);
    msg.setSourceEntity(196U);
    msg.setDestination(45542U);
    msg.setDestinationEntity(187U);
    msg.name.assign("HCCITMORYINPPXTKKNQNHUZLNTIFXIBSWQRYHJQUWMUYKFVWELBLMOJABIEPPOKKNRCOCSGGBIESHDFMVKCAZEKJFNGPKJX");
    msg.value = 63U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.1313778560903558);
    msg.setSource(9873U);
    msg.setSourceEntity(218U);
    msg.setDestination(23177U);
    msg.setDestinationEntity(141U);
    msg.name.assign("RZMWDNJSPVXUMMNGTVILXOCJBUJTWLJGCHRFICXXAPQBOLPYTCGMHHUFEEBIYJNBAAUPCKHDXEHTETYBIWOSLQCEXDACTHJBHAVYSDQVJUUIILIIWNXVGJRYGQRBQEKFTVDEZOVGNQHUNBUVFOCZZYDAKEFOWQYWNLRJAMWCFRERKSPZSKUDMRFGDGMYWSSWBLQBTN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.8773048603574359);
    msg.setSource(22588U);
    msg.setSourceEntity(241U);
    msg.setDestination(41563U);
    msg.setDestinationEntity(163U);
    msg.name.assign("OVJTYITCUGNWVBZWXUZCEAYEMILQHTAVYBWLPDPKHPKNXFLJQVZNKDJCJFUUCESPQXIPQRSBXHKCYVTIENPDHHQMCMANRGFRWEGMYZVTRYVAZRFSVMFBHHWNUULCOQVDYRPMXOTYGBJJDGWQXKSLAFGBT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.32709753679379006);
    msg.setSource(41144U);
    msg.setSourceEntity(153U);
    msg.setDestination(8667U);
    msg.setDestinationEntity(55U);
    msg.name.assign("LTBXFHUGLYLZZZQJVSBRMMVCLIXRBJXYAKUDRMHNHXVEPRNYPGABJEWYCEJWSMYUGSPFYATOJTODPDD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.6929918928983265);
    msg.setSource(49129U);
    msg.setSourceEntity(189U);
    msg.setDestination(38575U);
    msg.setDestinationEntity(237U);
    msg.name.assign("OJDSEUABCJWEWZGZAJSOZYNLYFNCHNCTAIBGCPPNKAYGPREZWNSWJARKKJKZEPQKRYXBFUIXXAVCXVUOWVJZKGKVFHQWPCTEYEQLLLJRZRTHUBCGRIFXPAGTRYDFMHSHDOVXILMDEHQUWHFXQIEWDYNQFBVBQYINFOPLSOVDKZNMTARMWQUODLEYX");
    msg.value = 49U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.07358883166928254);
    msg.setSource(43146U);
    msg.setSourceEntity(23U);
    msg.setDestination(46313U);
    msg.setDestinationEntity(64U);
    msg.name.assign("CMUPTLZQUOKRLBUFNNXOFZQCBGQAMOHPKZX");
    msg.value = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.8218763108155482);
    msg.setSource(35334U);
    msg.setSourceEntity(10U);
    msg.setDestination(10623U);
    msg.setDestinationEntity(97U);
    msg.name.assign("PUWSRCCGDKMKMLFVQOMYUPNSAFLGQVLKVRDKDVZTWYFDVGHYWHUXNHZAQJLRHPSQMCWNBAOLYTCBGZBKGDANZZDAEMVQLTPZWGSEKP");
    msg.value = 208U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.44151830940455883);
    msg.setSource(62846U);
    msg.setSourceEntity(181U);
    msg.setDestination(34365U);
    msg.setDestinationEntity(253U);
    msg.value = 0.22955220108952346;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.6322419471069668);
    msg.setSource(43306U);
    msg.setSourceEntity(159U);
    msg.setDestination(14485U);
    msg.setDestinationEntity(140U);
    msg.value = 0.287954187131217;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.8391076308766942);
    msg.setSource(14519U);
    msg.setSourceEntity(122U);
    msg.setDestination(19231U);
    msg.setDestinationEntity(106U);
    msg.value = 0.39045699891492835;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.22510623370068428);
    msg.setSource(1226U);
    msg.setSourceEntity(143U);
    msg.setDestination(44447U);
    msg.setDestinationEntity(95U);
    msg.value = 0.004858005677839006;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.935873144757261);
    msg.setSource(56223U);
    msg.setSourceEntity(87U);
    msg.setDestination(57406U);
    msg.setDestinationEntity(225U);
    msg.value = 0.8946667089339828;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.08502495945730482);
    msg.setSource(40045U);
    msg.setSourceEntity(143U);
    msg.setDestination(40412U);
    msg.setDestinationEntity(114U);
    msg.value = 0.3978221052572468;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.4728570539574316);
    msg.setSource(27585U);
    msg.setSourceEntity(132U);
    msg.setDestination(38919U);
    msg.setDestinationEntity(234U);
    msg.ampl = 0.35283729205451053;
    msg.dir = 0.9525551945393538;
    msg.freq = 0.32903028607487816;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.7387668624951256);
    msg.setSource(22680U);
    msg.setSourceEntity(250U);
    msg.setDestination(42718U);
    msg.setDestinationEntity(161U);
    msg.ampl = 0.3760965790091688;
    msg.dir = 0.40540241339789573;
    msg.freq = 0.43115674177431607;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.6939721625593518);
    msg.setSource(57120U);
    msg.setSourceEntity(166U);
    msg.setDestination(44456U);
    msg.setDestinationEntity(226U);
    msg.ampl = 0.4143509679823184;
    msg.dir = 0.66369668937151;
    msg.freq = 0.29105723714024434;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.8439209101360838);
    msg.setSource(19771U);
    msg.setSourceEntity(244U);
    msg.setDestination(61549U);
    msg.setDestinationEntity(99U);
    msg.value = 0.8258905942960433;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.021782474895959858);
    msg.setSource(32649U);
    msg.setSourceEntity(166U);
    msg.setDestination(28957U);
    msg.setDestinationEntity(72U);
    msg.value = 0.8606916538570579;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.2640076770865406);
    msg.setSource(1607U);
    msg.setSourceEntity(203U);
    msg.setDestination(34320U);
    msg.setDestinationEntity(151U);
    msg.value = 0.5525961901169721;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.3285226091357494);
    msg.setSource(49346U);
    msg.setSourceEntity(22U);
    msg.setDestination(34966U);
    msg.setDestinationEntity(49U);
    msg.value = 0.13583772084161994;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.1854271187104919);
    msg.setSource(43403U);
    msg.setSourceEntity(117U);
    msg.setDestination(4205U);
    msg.setDestinationEntity(184U);
    msg.value = 0.6787285132545391;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.1794870534416);
    msg.setSource(8889U);
    msg.setSourceEntity(209U);
    msg.setDestination(17134U);
    msg.setDestinationEntity(220U);
    msg.value = 0.806738452399562;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.35307512666488816);
    msg.setSource(12514U);
    msg.setSourceEntity(252U);
    msg.setDestination(27917U);
    msg.setDestinationEntity(202U);
    msg.value = 0.8992999340827728;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.5394510805178652);
    msg.setSource(51072U);
    msg.setSourceEntity(192U);
    msg.setDestination(24361U);
    msg.setDestinationEntity(89U);
    msg.value = 0.6245116948478229;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.8674118974970674);
    msg.setSource(42534U);
    msg.setSourceEntity(235U);
    msg.setDestination(22273U);
    msg.setDestinationEntity(40U);
    msg.value = 0.3153517553199574;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.918231022140602);
    msg.setSource(2971U);
    msg.setSourceEntity(215U);
    msg.setDestination(58754U);
    msg.setDestinationEntity(116U);
    msg.id = 43;
    msg.state = 39;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.050836667889772924);
    msg.setSource(38966U);
    msg.setSourceEntity(28U);
    msg.setDestination(16001U);
    msg.setDestinationEntity(153U);
    msg.id = -108;
    msg.state = -10;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.43793261758799185);
    msg.setSource(13018U);
    msg.setSourceEntity(250U);
    msg.setDestination(23732U);
    msg.setDestinationEntity(4U);
    msg.id = -110;
    msg.state = -45;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.199326744419709);
    msg.setSource(13834U);
    msg.setSourceEntity(182U);
    msg.setDestination(50684U);
    msg.setDestinationEntity(70U);
    msg.angle = 0.5842827045987358;
    msg.speed = 0.04016408100766489;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.3604465567012166);
    msg.setSource(6588U);
    msg.setSourceEntity(43U);
    msg.setDestination(37231U);
    msg.setDestinationEntity(25U);
    msg.angle = 0.3637211389017665;
    msg.speed = 0.7500465202865861;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.6012001118997484);
    msg.setSource(48413U);
    msg.setSourceEntity(190U);
    msg.setDestination(13205U);
    msg.setDestinationEntity(123U);
    msg.angle = 0.6303457502278137;
    msg.speed = 0.1756102508579236;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.016103983670267552);
    msg.setSource(5264U);
    msg.setSourceEntity(74U);
    msg.setDestination(7976U);
    msg.setDestinationEntity(189U);
    msg.dir = 0.0949240702112707;
    msg.speed = 0.8120659090531726;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.16229279227749382);
    msg.setSource(62616U);
    msg.setSourceEntity(11U);
    msg.setDestination(13931U);
    msg.setDestinationEntity(148U);
    msg.dir = 0.8277614862966014;
    msg.speed = 0.5741809732915325;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.5782395603838719);
    msg.setSource(3470U);
    msg.setSourceEntity(127U);
    msg.setDestination(4627U);
    msg.setDestinationEntity(119U);
    msg.dir = 0.11456005687926873;
    msg.speed = 0.5111399781295942;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.015963210209584466);
    msg.setSource(81U);
    msg.setSourceEntity(45U);
    msg.setDestination(10878U);
    msg.setDestinationEntity(31U);
    msg.x = 0.9256671047094339;
    msg.y = 0.5533718794149715;
    msg.z1 = 0.6936013027403821;
    msg.z2 = 0.5183956426717784;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.43559571394378493);
    msg.setSource(32296U);
    msg.setSourceEntity(135U);
    msg.setDestination(36752U);
    msg.setDestinationEntity(243U);
    msg.x = 0.7737861453060972;
    msg.y = 0.35062594872299757;
    msg.z1 = 0.8519205295697021;
    msg.z2 = 0.5168821212449837;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.11388403708492811);
    msg.setSource(23166U);
    msg.setSourceEntity(243U);
    msg.setDestination(8718U);
    msg.setDestinationEntity(204U);
    msg.x = 0.9385504154051184;
    msg.y = 0.08471687756634494;
    msg.z1 = 0.3022197797509215;
    msg.z2 = 0.15253815431865314;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.829391218987051);
    msg.setSource(57205U);
    msg.setSourceEntity(131U);
    msg.setDestination(25952U);
    msg.setDestinationEntity(187U);
    msg.mmsi.assign("TQGDMIITHBAHNRSDGJETWNFXZJSXGCUSPAULHWOSBRXPFEPIBTQBTZXWGUVXOMQHPHBOCPDQFWFGYEECDITYVWLXUVZKQNPDTIURZXUNNLOSSGHCUSVCCAGCFPERFUCRJKRVAEJAAYWIIAMGGBJKQTMMQIZVASLVLWNOUEZDLEJKYDLTYNKOVJLSBPKNFHMMYKZAPVOIFZKCWYXHNJZDWQDMNJBXZLPOHRQDGYQKAYMVBMEECUOFYWBIXLSH");
    msg.lat = 0.43991138755859194;
    msg.lon = 0.09636625244392993;
    msg.x = 0.2198610852963242;
    msg.y = 0.7145018450477432;
    msg.speed = 0.7720440223422869;
    msg.course = 0.9530008387473553;
    msg.dist = 0.7782107662899379;
    msg.length = 0.46412929253928026;
    msg.width = 0.3005614679882247;
    msg.o_vect = 0.35394117888529264;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.9919093862706189);
    msg.setSource(13558U);
    msg.setSourceEntity(180U);
    msg.setDestination(63172U);
    msg.setDestinationEntity(151U);
    msg.mmsi.assign("YYKEXZAQSZHNJQPJORBCOIFXUPGMMJUWPKGICDOHBEYRVKEUQDNSEZIFTZALMVLFZUAUMBUASXTOSTYIBCLWWSCVQBTPGGVYDIX");
    msg.lat = 0.5611534898884457;
    msg.lon = 0.9365596786504601;
    msg.x = 0.8859145990293288;
    msg.y = 0.6868548490845331;
    msg.speed = 0.7653669557302609;
    msg.course = 0.25843310734121827;
    msg.dist = 0.44642132539549884;
    msg.length = 0.3406709194352643;
    msg.width = 0.11021227084725593;
    msg.o_vect = 0.8168953130288756;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.7688251585112675);
    msg.setSource(59680U);
    msg.setSourceEntity(242U);
    msg.setDestination(3825U);
    msg.setDestinationEntity(230U);
    msg.mmsi.assign("ERTCSOKKNWQNVBOXRBZDSHOGEZZSSTCLYHFFTPYXABCFVRBUKVILPMDHDRSNLNXSQQGJMTFGZVLXGMPNPGQWQWZXEDDPUZWUABMCIRIDBWCWLKNOFYEDJT");
    msg.lat = 0.06025031058426211;
    msg.lon = 0.2093103520314087;
    msg.x = 0.8812011972903223;
    msg.y = 0.37894267822515226;
    msg.speed = 0.20489804523811028;
    msg.course = 0.3378304193960525;
    msg.dist = 0.10963353303801804;
    msg.length = 0.4425782635269584;
    msg.width = 0.8376035491044099;
    msg.o_vect = 0.21957940914126084;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.7463651358201127);
    msg.setSource(21286U);
    msg.setSourceEntity(196U);
    msg.setDestination(64565U);
    msg.setDestinationEntity(83U);
    msg.depth_at_loc.assign("BRQKXIKVMFISLWIUYTGIIDWJSFJAHFESWMEHHACSNKPPZYDGUIDIRHNMXCNNVFKAHAADBUTGCHEWFSKXHBGYUEQXXPTOTCTQUZMPLEYVJSAUGZ");
    msg.danger.assign("SXKQKFQJEUHBNOPJUDBHBZANSUTPYOXNHLKGCWKXWLFHHDVWQPUQZMQWINUVIYOKWWACFIMQZKMLDSGZVCV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.46026963444221614);
    msg.setSource(28117U);
    msg.setSourceEntity(101U);
    msg.setDestination(33955U);
    msg.setDestinationEntity(133U);
    msg.depth_at_loc.assign("KRRZJIFMQOURTPUJEHMPVNHFEUAXNJGZVOYBFKDUMVUQPHNMESBICOIYLXTJWGLGWBDTATHAUCWAXMOXYYYCDSLZFCZINAVXQGRGSVPIFSWJESPJSRBTWYAPKKZWLEPLRTRTWYUZPDQWAJIBHLQNAASDOYUJFBUDCGVRHFRKNGXBKTXVSCKNYMNFHKHTEEZIDICV");
    msg.danger.assign("HIIVUKPHMLFRGVVLKSNGYUWMEQUGDEPJAEDOWJHXDLRRSKXBIXAQAOWYOCTMKR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.42343605728932177);
    msg.setSource(49148U);
    msg.setSourceEntity(31U);
    msg.setDestination(62458U);
    msg.setDestinationEntity(234U);
    msg.depth_at_loc.assign("XHQGBNOOHKEUJMEUZTGCFDLKGCQFAFZJGKJTDLVLLAJXAKGWOMUYJTAGYSFIPEHKPODZWLZDHUPCIMUHIUSVORDSEMP");
    msg.danger.assign("XUOJSQXHLLQWVELSBUHAHSICJZMDSDKCOYICPNBDWPEBPQELZQDZBSHOXXWPMVAGQLBMT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.31748866117468966);
    msg.setSource(60741U);
    msg.setSourceEntity(152U);
    msg.setDestination(23483U);
    msg.setDestinationEntity(82U);
    msg.value = 0.40862546373653674;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.47091590010925866);
    msg.setSource(8163U);
    msg.setSourceEntity(78U);
    msg.setDestination(48530U);
    msg.setDestinationEntity(145U);
    msg.value = 0.15146133086622027;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.8701297850219263);
    msg.setSource(64249U);
    msg.setSourceEntity(80U);
    msg.setDestination(58173U);
    msg.setDestinationEntity(194U);
    msg.value = 0.9229061999837306;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.9331695687855827);
    msg.setSource(31003U);
    msg.setSourceEntity(135U);
    msg.setDestination(30457U);
    msg.setDestinationEntity(18U);
    msg.beam1 = 0.5782402321997187;
    msg.beam2 = 0.16854469910473935;
    msg.beam3 = 0.8289651096064448;
    msg.beam4 = 0.3139715768821323;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.25456345750125187);
    msg.setSource(35271U);
    msg.setSourceEntity(43U);
    msg.setDestination(17322U);
    msg.setDestinationEntity(220U);
    msg.beam1 = 0.8564554137192072;
    msg.beam2 = 0.7570818773087639;
    msg.beam3 = 0.8775676008007759;
    msg.beam4 = 0.14967279238965936;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.6437466469696251);
    msg.setSource(16578U);
    msg.setSourceEntity(205U);
    msg.setDestination(41384U);
    msg.setDestinationEntity(0U);
    msg.beam1 = 0.21820361406712485;
    msg.beam2 = 0.4765664740417178;
    msg.beam3 = 0.24966387311044358;
    msg.beam4 = 0.3769544304908644;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.6882251728676512);
    msg.setSource(10006U);
    msg.setSourceEntity(43U);
    msg.setDestination(31370U);
    msg.setDestinationEntity(82U);
    msg.beam1 = 254U;
    msg.beam2 = 190U;
    msg.beam3 = 193U;
    msg.beam4 = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.5793985295271407);
    msg.setSource(25685U);
    msg.setSourceEntity(226U);
    msg.setDestination(58391U);
    msg.setDestinationEntity(111U);
    msg.beam1 = 219U;
    msg.beam2 = 209U;
    msg.beam3 = 74U;
    msg.beam4 = 123U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.15383772356359326);
    msg.setSource(50086U);
    msg.setSourceEntity(235U);
    msg.setDestination(50238U);
    msg.setDestinationEntity(195U);
    msg.beam1 = 113U;
    msg.beam2 = 144U;
    msg.beam3 = 182U;
    msg.beam4 = 75U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.573682527393847);
    msg.setSource(25445U);
    msg.setSourceEntity(158U);
    msg.setDestination(4424U);
    msg.setDestinationEntity(168U);
    msg.pos = 0.8989241204407026;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.20239013223761582);
    msg.setSource(41130U);
    msg.setSourceEntity(115U);
    msg.setDestination(31203U);
    msg.setDestinationEntity(99U);
    msg.pos = 0.7307417331961069;
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.817714476954325;
    tmp_msg_0.amp = 0.7320476077958895;
    tmp_msg_0.cor = 81U;
    msg.beams.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.15553030322884875);
    msg.setSource(30400U);
    msg.setSourceEntity(192U);
    msg.setDestination(41650U);
    msg.setDestinationEntity(125U);
    msg.pos = 0.42718917279792223;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.9800283525434808);
    msg.setSource(51816U);
    msg.setSourceEntity(136U);
    msg.setDestination(13792U);
    msg.setDestinationEntity(187U);
    msg.beams = 254U;
    msg.cells = 46U;
    msg.coord_sys = 37U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.2882463086626349;
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.5546280457255602);
    msg.setSource(1960U);
    msg.setSourceEntity(153U);
    msg.setDestination(53155U);
    msg.setDestinationEntity(63U);
    msg.beams = 219U;
    msg.cells = 213U;
    msg.coord_sys = 48U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.6495065579055701;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.8126840442658785;
    tmp_tmp_msg_0_0.amp = 0.066257220843432;
    tmp_tmp_msg_0_0.cor = 227U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.6251277398435966);
    msg.setSource(43956U);
    msg.setSourceEntity(1U);
    msg.setDestination(56067U);
    msg.setDestinationEntity(73U);
    msg.beams = 129U;
    msg.cells = 41U;
    msg.coord_sys = 57U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.3120517800905501;
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.9888501466852763);
    msg.setSource(606U);
    msg.setSourceEntity(173U);
    msg.setDestination(33548U);
    msg.setDestinationEntity(91U);
    msg.vel = 0.6223565606411167;
    msg.amp = 0.2561030452361448;
    msg.cor = 222U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.2808650615361966);
    msg.setSource(26015U);
    msg.setSourceEntity(200U);
    msg.setDestination(60864U);
    msg.setDestinationEntity(236U);
    msg.vel = 0.9554810688471941;
    msg.amp = 0.13274406318867837;
    msg.cor = 242U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.6210329293816086);
    msg.setSource(14546U);
    msg.setSourceEntity(156U);
    msg.setDestination(26732U);
    msg.setDestinationEntity(75U);
    msg.vel = 0.8990220547161095;
    msg.amp = 0.6775823732267111;
    msg.cor = 112U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.4798108134525758);
    msg.setSource(12693U);
    msg.setSourceEntity(136U);
    msg.setDestination(34684U);
    msg.setDestinationEntity(170U);
    msg.serial_no = 1583144373U;
    msg.unix_timestamp = 3609604596U;
    msg.millis = 53792U;
    msg.trans_protocol = 127U;
    msg.trans_id = 3748778623U;
    msg.trans_data = 36323U;
    msg.snr = 212U;
    msg.trans_freq = 156U;
    msg.recv_mem_addr = 17938U;
    msg.lat = 0.81883966938287;
    msg.lon = 0.9742770553605765;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.896774644388457);
    msg.setSource(47647U);
    msg.setSourceEntity(72U);
    msg.setDestination(19977U);
    msg.setDestinationEntity(151U);
    msg.serial_no = 2968904392U;
    msg.unix_timestamp = 2144019664U;
    msg.millis = 51506U;
    msg.trans_protocol = 233U;
    msg.trans_id = 3325601507U;
    msg.trans_data = 36646U;
    msg.snr = 183U;
    msg.trans_freq = 177U;
    msg.recv_mem_addr = 9930U;
    msg.lat = 0.934505306718315;
    msg.lon = 0.4349828985374825;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.9522246633608723);
    msg.setSource(1237U);
    msg.setSourceEntity(81U);
    msg.setDestination(36196U);
    msg.setDestinationEntity(228U);
    msg.serial_no = 1027202663U;
    msg.unix_timestamp = 1997653274U;
    msg.millis = 37907U;
    msg.trans_protocol = 118U;
    msg.trans_id = 1791358523U;
    msg.trans_data = 8412U;
    msg.snr = 4U;
    msg.trans_freq = 7U;
    msg.recv_mem_addr = 60345U;
    msg.lat = 0.41093080137641047;
    msg.lon = 0.3701579375811005;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.35560245491297227);
    msg.setSource(12594U);
    msg.setSourceEntity(192U);
    msg.setDestination(14393U);
    msg.setDestinationEntity(123U);
    msg.serial_no = 1743162596U;
    msg.unix_timestamp = 4194945455U;
    msg.temperature = 0.8362968842377191;
    msg.avg_noise_level = 140U;
    msg.peak_noise_level = 242U;
    msg.recv_listen_freq = 86U;
    msg.recv_mem_addr = 51600U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.22799641378334623);
    msg.setSource(52878U);
    msg.setSourceEntity(149U);
    msg.setDestination(36134U);
    msg.setDestinationEntity(134U);
    msg.serial_no = 1147108944U;
    msg.unix_timestamp = 3564479615U;
    msg.temperature = 0.3813081829533239;
    msg.avg_noise_level = 200U;
    msg.peak_noise_level = 226U;
    msg.recv_listen_freq = 243U;
    msg.recv_mem_addr = 45954U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.28380404029907147);
    msg.setSource(7827U);
    msg.setSourceEntity(223U);
    msg.setDestination(7677U);
    msg.setDestinationEntity(232U);
    msg.serial_no = 1721723734U;
    msg.unix_timestamp = 129403833U;
    msg.temperature = 0.2708646513845032;
    msg.avg_noise_level = 216U;
    msg.peak_noise_level = 42U;
    msg.recv_listen_freq = 8U;
    msg.recv_mem_addr = 13671U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.8363574642756815);
    msg.setSource(23750U);
    msg.setSourceEntity(92U);
    msg.setDestination(31982U);
    msg.setDestinationEntity(188U);
    msg.frequency = 2619711749U;
    msg.info.assign("PPESUWOHEKFYUZAWFRUGDEJNSRSBXOOIRXNITGYAVAIQDPYTIMKPGCIINPSTQUKHYNHVMKCEXABZCAPGYCVNOTZJNTBWHBFDTXHMUOSCYPJCTSWNZHQVRDNOEURAKFQHDXLQIZHBDHMNFYLJMQOIVGLAAYHZJRRDNTREALTCGFTSEQQJSOEVLFMLKRXWXVCGODOBWWEJDMAGFXEWDLLCBS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.12369941512682425);
    msg.setSource(49877U);
    msg.setSourceEntity(195U);
    msg.setDestination(28603U);
    msg.setDestinationEntity(237U);
    msg.frequency = 612606731U;
    msg.info.assign("FKWTAJPDGFQRBUAORWCISXQBJGUFNWEQDXJEDLYWCAXBYEMRLJZRPZZZYXISRZZCLPUNTBRYVCVWFTVIFSSZBFUSOHYNVZQLGXKTCQJGMMQHWJSUMWRXAVOKNHERNSGLDMH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.11956453428670799);
    msg.setSource(16704U);
    msg.setSourceEntity(6U);
    msg.setDestination(23987U);
    msg.setDestinationEntity(161U);
    msg.frequency = 676450134U;
    msg.info.assign("MBAGLNVRJXLWFQWKTLEITLMJKOSHEVEGPOLWZETNCQFLWVHPBAZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.03184156119643511);
    msg.setSource(48033U);
    msg.setSourceEntity(75U);
    msg.setDestination(6408U);
    msg.setDestinationEntity(5U);
    msg.restriction = 22U;
    msg.reason.assign("OGPDEBKDBXZBHGJJGPTMZRSJASSWHIQIBVMRPHUDPCKWUL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.7426659541149854);
    msg.setSource(855U);
    msg.setSourceEntity(133U);
    msg.setDestination(49510U);
    msg.setDestinationEntity(76U);
    msg.restriction = 10U;
    msg.reason.assign("WCRRXIMGYIUXBLDKRLHOVTJAHDWRYUSHEXRKGATOJPJJCVSHTNTFMBVSGJCSBFIEWJYBAIEOBHKGISLBHESHAUAXGQUIPDTRSKVXKZQKCJPVTNWECZMXFDUAUIJOQQWCQSRWAWLDDEFQHFIXEKPNWLKLFDTGNEPGGBYRKXUHBZCNYAZUOLUNNQNPI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.8608301641060029);
    msg.setSource(64427U);
    msg.setSourceEntity(207U);
    msg.setDestination(53537U);
    msg.setDestinationEntity(244U);
    msg.restriction = 33U;
    msg.reason.assign("PQLSMKWZJPEFNZDPDHOQECMEXVYIFHRBUGHTXEPRCOVWJNWECQSNDFGJWIYVOEVHKWRUBXTAMWHBZSKTATUAURJLELURACIXKBYVDHKDYKASVOJIVENAIMYOUGO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.9781699176918248);
    msg.setSource(55496U);
    msg.setSourceEntity(249U);
    msg.setDestination(35075U);
    msg.setDestinationEntity(224U);
    msg.adcp = -78;
    msg.adcp_dur = 3668514141U;
    msg.adcp_fr = 3634532756U;
    msg.ctd = -47;
    msg.ctd_dur = 4189450974U;
    msg.ctd_fr = 1748084508U;
    msg.opt = -124;
    msg.opt_dur = 3743714034U;
    msg.opt_fr = 3638217838U;
    msg.tbl = 123;
    msg.tbl_dur = 2227992413U;
    msg.tbl_fr = 2877488521U;
    msg.eco = 26;
    msg.eco_dur = 238748426U;
    msg.eco_fr = 1741646681U;
    msg.par = 72;
    msg.par_dur = 2235453184U;
    msg.par_fr = 308157871U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.47595074373841306);
    msg.setSource(58120U);
    msg.setSourceEntity(72U);
    msg.setDestination(12582U);
    msg.setDestinationEntity(84U);
    msg.adcp = -111;
    msg.adcp_dur = 4035527086U;
    msg.adcp_fr = 2389610413U;
    msg.ctd = 36;
    msg.ctd_dur = 396799655U;
    msg.ctd_fr = 383576519U;
    msg.opt = -7;
    msg.opt_dur = 3459164006U;
    msg.opt_fr = 3725225426U;
    msg.tbl = -57;
    msg.tbl_dur = 1695076349U;
    msg.tbl_fr = 3654228132U;
    msg.eco = 68;
    msg.eco_dur = 107172951U;
    msg.eco_fr = 1100198339U;
    msg.par = -128;
    msg.par_dur = 913747574U;
    msg.par_fr = 4253805760U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.12340182161316449);
    msg.setSource(44101U);
    msg.setSourceEntity(210U);
    msg.setDestination(45645U);
    msg.setDestinationEntity(169U);
    msg.adcp = 6;
    msg.adcp_dur = 1605327338U;
    msg.adcp_fr = 2513741229U;
    msg.ctd = -10;
    msg.ctd_dur = 478759784U;
    msg.ctd_fr = 199535391U;
    msg.opt = -24;
    msg.opt_dur = 4197248614U;
    msg.opt_fr = 3308145487U;
    msg.tbl = 75;
    msg.tbl_dur = 2555871990U;
    msg.tbl_fr = 2943953404U;
    msg.eco = 58;
    msg.eco_dur = 63052842U;
    msg.eco_fr = 2378412209U;
    msg.par = -105;
    msg.par_dur = 1370548855U;
    msg.par_fr = 2123034860U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.4267162374940223);
    msg.setSource(44429U);
    msg.setSourceEntity(206U);
    msg.setDestination(17862U);
    msg.setDestinationEntity(133U);
    msg.adcp = 111;
    msg.adcp_dur = 3708876767U;
    msg.adcp_fr = 3482982958U;
    msg.ctd = -105;
    msg.ctd_dur = 1624726391U;
    msg.ctd_fr = 2619404257U;
    msg.opt = 42;
    msg.opt_dur = 1033856662U;
    msg.opt_fr = 3520723135U;
    msg.tbl = 76;
    msg.tbl_dur = 1263332252U;
    msg.tbl_fr = 4224207250U;
    msg.eco = 40;
    msg.eco_dur = 1205447030U;
    msg.eco_fr = 368481686U;
    msg.par = -114;
    msg.par_dur = 538851694U;
    msg.par_fr = 1163338777U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.4441025208651942);
    msg.setSource(53543U);
    msg.setSourceEntity(215U);
    msg.setDestination(35247U);
    msg.setDestinationEntity(66U);
    msg.adcp = -79;
    msg.adcp_dur = 1692670181U;
    msg.adcp_fr = 397827467U;
    msg.ctd = 92;
    msg.ctd_dur = 1631915646U;
    msg.ctd_fr = 734972342U;
    msg.opt = -87;
    msg.opt_dur = 1348042243U;
    msg.opt_fr = 3921221272U;
    msg.tbl = -112;
    msg.tbl_dur = 3051813808U;
    msg.tbl_fr = 839353754U;
    msg.eco = 7;
    msg.eco_dur = 2110244468U;
    msg.eco_fr = 316910450U;
    msg.par = 23;
    msg.par_dur = 4196976014U;
    msg.par_fr = 3004871918U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.3743772779532841);
    msg.setSource(40530U);
    msg.setSourceEntity(124U);
    msg.setDestination(62355U);
    msg.setDestinationEntity(152U);
    msg.adcp = -32;
    msg.adcp_dur = 2850030110U;
    msg.adcp_fr = 2524310203U;
    msg.ctd = -108;
    msg.ctd_dur = 327305527U;
    msg.ctd_fr = 1891761913U;
    msg.opt = -80;
    msg.opt_dur = 234124709U;
    msg.opt_fr = 2209985077U;
    msg.tbl = 88;
    msg.tbl_dur = 2478860342U;
    msg.tbl_fr = 1089424561U;
    msg.eco = -58;
    msg.eco_dur = 3129039285U;
    msg.eco_fr = 1616485371U;
    msg.par = 27;
    msg.par_dur = 563301575U;
    msg.par_fr = 407837596U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.19070553299245885);
    msg.setSource(42227U);
    msg.setSourceEntity(56U);
    msg.setDestination(44858U);
    msg.setDestinationEntity(2U);
    msg.value = 0.3282377940988066;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.8269474058319954);
    msg.setSource(29061U);
    msg.setSourceEntity(181U);
    msg.setDestination(60207U);
    msg.setDestinationEntity(56U);
    msg.value = 0.20465831093761389;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.9859888985015808);
    msg.setSource(33509U);
    msg.setSourceEntity(83U);
    msg.setDestination(49080U);
    msg.setDestinationEntity(183U);
    msg.value = 0.2383152556538093;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.5046611420202192);
    msg.setSource(2414U);
    msg.setSourceEntity(34U);
    msg.setDestination(5118U);
    msg.setDestinationEntity(110U);
    msg.lat = 0.1595282871582051;
    msg.lon = 0.628456760771855;
    msg.depth.assign("XPHIXGPKPWPFROLQIKTIMTEHZDAATOZLVVRQGMCXCHGJMGHOZYJSTKDPOXSSZUBRHQWFHKYSBTSQLBPTLTWDMNKHKOAZSVBZQCYEIVJGAHGXVWJUEYEQIIROYJWDNKQFQBLAFFD");
    msg.vel.assign("LVZDJJUBCRKWIPHTAFZJPJDKFRZRINKTIDLESUJIFVDSXLPDGYGWJGSOTIFKHBCUUZBMGRGKCVBMPDRTZKONSPNTTEWQNERLADCQJXIOJFICAWAYWCOXJKZHXMQWLGZEDNCBUWNVQQEXKFDEDCQAHHBPRPMZUUA");
    msg.dir.assign("TYLILXIDZSSSCVHOGMTMZCJUAQOXSFTDEJHEWDITXLXYVPZAROOANJZSAOUJQPNYJAEBGG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.31529474582941697);
    msg.setSource(60460U);
    msg.setSourceEntity(125U);
    msg.setDestination(36162U);
    msg.setDestinationEntity(5U);
    msg.lat = 0.822162898240808;
    msg.lon = 0.6751946776585043;
    msg.depth.assign("LJZKSMHSTVGYLBMABZGEBRSNUQEFBYMVSYFAFIIGHMEOZCNYNGTECSZWTSJXRFVEGIEXUFJLRJOCIADHWSEWOBMEWNVCUYANCOBVKBLSQCZZOPKXIUGYCKMRVKNOHYDDRKJRXDUUQDRWL");
    msg.vel.assign("XAHKBPHKVJPGROWCTAAYWCKSHBCIPEKPTSVJYHUQFZXQCXNFIDLZRDWPGQLG");
    msg.dir.assign("SRLWJMYPDGRVKVVKKHONUSVZKAVEWLWMLXTOIIFJJRCWTGTEYLCUJBEAKUZHBTXDUNNNTSNEOFHRRPAUFVDTJAFFVJEMBFGQDUS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.9868063787069844);
    msg.setSource(55135U);
    msg.setSourceEntity(66U);
    msg.setDestination(52978U);
    msg.setDestinationEntity(221U);
    msg.lat = 0.41541737461679606;
    msg.lon = 0.2613155166132629;
    msg.depth.assign("GSDNGBSVOFCQEXRFRWFTHEIGUZKJHQZHYRQUEVBUECBYFYBZDIZTWRRPDZHYZARIFBBWPJXUFJCTCJXVDHSFDVPXBPIEBTGANAKNQEFICEVDCFVOLGOKNMSOTANIMHCNDVSXJMTMREIMIPYJKNSYUOTDVOLULHWSRK");
    msg.vel.assign("MHEYVEURTZCCPLZXCSSRBFDTHBDYEOIDBCWTZAWSIIJMWNDZJMNXVEGMXGXJEXCWGKPXLFUPWGDCVPSMAWKJTNSLGPQYUWNEXAXKLVRHITQQUNS");
    msg.dir.assign("WHPJTGBTZPLMYWOTYVWPDISNYTCGBWZRXXW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.7253927696997251);
    msg.setSource(33631U);
    msg.setSourceEntity(232U);
    msg.setDestination(10563U);
    msg.setDestinationEntity(249U);
    msg.source.assign("LNTAYQCDJCHPULFOCJVAIFDMKESKRBHFNILKARYFRWZGUBQNEYRXXXUYDVGOHEIOIAPLCEMDFIKOHYTMJJPCETDHGQYMVKSQEZMXHRDPOGLPVVNEEHJTBWQGKCWBHVIO");
    msg.lat = 0.44616965463120806;
    msg.lon = 0.7508864911985493;
    msg.sog = 0.9293134395645345;
    msg.uc = 0.03807835714375141;
    msg.depth = 0.9461855694353947;
    msg.value = 0.1464206292273572;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.8525671400121023);
    msg.setSource(64170U);
    msg.setSourceEntity(135U);
    msg.setDestination(61253U);
    msg.setDestinationEntity(70U);
    msg.source.assign("KZUVMASRSEWYZEXWUCTFBZMNOWWCTDMGBCKHMIZQNFNMQBNVRNKYUQONSYKGQEYCDXVICIHJLDDJXXPQLFADRUJLQTDQXKGZGFMOXDORHRLIDOWHHCZBMBM");
    msg.lat = 0.5097753947064283;
    msg.lon = 0.20629300976120601;
    msg.sog = 0.8461897328522646;
    msg.uc = 0.35593665273175046;
    msg.depth = 0.7899943749260631;
    msg.value = 0.3774274337241367;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.30779820130655355);
    msg.setSource(45769U);
    msg.setSourceEntity(228U);
    msg.setDestination(1942U);
    msg.setDestinationEntity(233U);
    msg.source.assign("KVKEJEZNHPBBIPMQRPNLRHVMQYVJFSFUUYZDGIFORHDBAKYKQYQHIHJVYUFIJSXNZCBRWXSNBRYPXUERRVLYMOIATSXNZ");
    msg.lat = 0.3032552344366244;
    msg.lon = 0.492347207187508;
    msg.sog = 0.6782749859016761;
    msg.uc = 0.2819230206598836;
    msg.depth = 0.366936025714783;
    msg.value = 0.10864632299393917;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.2965640670874661);
    msg.setSource(61109U);
    msg.setSourceEntity(169U);
    msg.setDestination(61025U);
    msg.setDestinationEntity(153U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.30783680845036243;
    tmp_msg_0.x = 0.9656129311675757;
    tmp_msg_0.y = 0.899184740014032;
    tmp_msg_0.z = 0.22505964010523793;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.41484283166029934;
    tmp_msg_1.x = 0.580708352207744;
    tmp_msg_1.y = 0.7550565636675886;
    tmp_msg_1.z = 0.985433999654359;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.6681520269031508;
    tmp_msg_2.value = 0.48233196240832155;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.035968886356493646);
    msg.setSource(8967U);
    msg.setSourceEntity(186U);
    msg.setDestination(31558U);
    msg.setDestinationEntity(28U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.23645809576930477;
    tmp_msg_0.x = 0.022512805908985856;
    tmp_msg_0.y = 0.005009940486772946;
    tmp_msg_0.z = 0.07897598913589254;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.3512881666848904;
    tmp_msg_1.x = 0.02124936740027017;
    tmp_msg_1.y = 0.6960723831101294;
    tmp_msg_1.z = 0.38241375310873504;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.6502133262016355;
    tmp_msg_2.value = 0.04199306843924033;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.1877827825658438);
    msg.setSource(38301U);
    msg.setSourceEntity(180U);
    msg.setDestination(12769U);
    msg.setDestinationEntity(175U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.5227779317273428;
    tmp_msg_0.x = 0.31422324661526035;
    tmp_msg_0.y = 0.8752124766230668;
    tmp_msg_0.z = 0.7228119147772729;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.06508444810598657;
    tmp_msg_1.x = 0.11943003532467578;
    tmp_msg_1.y = 0.7141582526844878;
    tmp_msg_1.z = 0.08857393875211339;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.2920292418739504;
    tmp_msg_2.value = 0.07769742934360868;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.9378860538429907);
    msg.setSource(21942U);
    msg.setSourceEntity(137U);
    msg.setDestination(60360U);
    msg.setDestinationEntity(103U);
    msg.gdop = 0.9599906415744317;
    msg.pdop = 0.48742672673770626;
    msg.tdop = 0.6398432157104933;
    msg.vdop = 0.21673766700121688;
    msg.hdop = 0.6807291241029176;
    msg.ndop = 0.5600138018463194;
    msg.edop = 0.5729483045227048;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.01549983605713201);
    msg.setSource(29878U);
    msg.setSourceEntity(160U);
    msg.setDestination(16836U);
    msg.setDestinationEntity(182U);
    msg.gdop = 0.3662167129409508;
    msg.pdop = 0.9761202738092946;
    msg.tdop = 0.46177385409648886;
    msg.vdop = 0.1686702011981931;
    msg.hdop = 0.9870920025832577;
    msg.ndop = 0.08822829183273895;
    msg.edop = 0.09447432117825427;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.5679165179768525);
    msg.setSource(39015U);
    msg.setSourceEntity(35U);
    msg.setDestination(4133U);
    msg.setDestinationEntity(189U);
    msg.gdop = 0.22118813974238027;
    msg.pdop = 0.8074673591202222;
    msg.tdop = 0.6806017585144131;
    msg.vdop = 0.5679787265832733;
    msg.hdop = 0.21549238939143234;
    msg.ndop = 0.9378284791631778;
    msg.edop = 0.8975795071372736;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.9292997028694698);
    msg.setSource(47952U);
    msg.setSourceEntity(141U);
    msg.setDestination(40995U);
    msg.setDestinationEntity(22U);
    msg.meanx = 0.6872424489230189;
    msg.meany = 0.6096824841128742;
    msg.meanz = 0.5368270036236259;
    msg.dur = 2755455802U;
    msg.meanacc = 0.37073213013954875;
    msg.obs = 3685608574U;
    msg.valid = 147U;
    msg.active = 85U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.5377979233767628);
    msg.setSource(8771U);
    msg.setSourceEntity(202U);
    msg.setDestination(29145U);
    msg.setDestinationEntity(245U);
    msg.meanx = 0.4447372480683044;
    msg.meany = 0.12560137809909344;
    msg.meanz = 0.09928141264671153;
    msg.dur = 618791964U;
    msg.meanacc = 0.26993173099723045;
    msg.obs = 4076565312U;
    msg.valid = 17U;
    msg.active = 65U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.12578539107633413);
    msg.setSource(44674U);
    msg.setSourceEntity(5U);
    msg.setDestination(1537U);
    msg.setDestinationEntity(42U);
    msg.meanx = 0.8096228404898937;
    msg.meany = 0.9503215655358032;
    msg.meanz = 0.2968050548565857;
    msg.dur = 4127670368U;
    msg.meanacc = 0.45265637871692366;
    msg.obs = 3944882203U;
    msg.valid = 173U;
    msg.active = 225U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.43425369145272175);
    msg.setSource(55316U);
    msg.setSourceEntity(243U);
    msg.setDestination(50198U);
    msg.setDestinationEntity(197U);
    msg.gpsfixtype = 166U;
    msg.flags = 48U;
    msg.diffcorr = 192U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.14970095733478728);
    msg.setSource(48208U);
    msg.setSourceEntity(91U);
    msg.setDestination(29216U);
    msg.setDestinationEntity(179U);
    msg.gpsfixtype = 40U;
    msg.flags = 123U;
    msg.diffcorr = 252U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.9976951111312772);
    msg.setSource(8498U);
    msg.setSourceEntity(30U);
    msg.setDestination(53403U);
    msg.setDestinationEntity(223U);
    msg.gpsfixtype = 145U;
    msg.flags = 82U;
    msg.diffcorr = 195U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.4156558601543874);
    msg.setSource(53972U);
    msg.setSourceEntity(188U);
    msg.setDestination(54058U);
    msg.setDestinationEntity(140U);
    msg.gnssid = 227U;
    msg.svid = 17U;
    msg.sigid = 15U;
    msg.freqid = 65U;
    msg.prres = 0.16165114901343514;
    msg.cno = 89U;
    msg.qualityind = 157U;
    msg.corrsource = 140U;
    msg.ionomodel = 162U;
    msg.health = 69U;
    msg.sigflags = 176U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.4998339923027906);
    msg.setSource(58980U);
    msg.setSourceEntity(57U);
    msg.setDestination(4651U);
    msg.setDestinationEntity(113U);
    msg.gnssid = 75U;
    msg.svid = 219U;
    msg.sigid = 44U;
    msg.freqid = 55U;
    msg.prres = 0.15116594645276482;
    msg.cno = 156U;
    msg.qualityind = 59U;
    msg.corrsource = 160U;
    msg.ionomodel = 107U;
    msg.health = 161U;
    msg.sigflags = 242U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.7180769709814345);
    msg.setSource(56735U);
    msg.setSourceEntity(37U);
    msg.setDestination(14963U);
    msg.setDestinationEntity(152U);
    msg.gnssid = 80U;
    msg.svid = 50U;
    msg.sigid = 253U;
    msg.freqid = 113U;
    msg.prres = 0.7941437189369065;
    msg.cno = 220U;
    msg.qualityind = 190U;
    msg.corrsource = 99U;
    msg.ionomodel = 89U;
    msg.health = 73U;
    msg.sigflags = 26U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.3656518303304799);
    msg.setSource(60066U);
    msg.setSourceEntity(102U);
    msg.setDestination(31251U);
    msg.setDestinationEntity(137U);
    msg.numsigs = 3U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 63U;
    tmp_msg_0.svid = 101U;
    tmp_msg_0.sigid = 159U;
    tmp_msg_0.freqid = 244U;
    tmp_msg_0.prres = 0.29581791663023094;
    tmp_msg_0.cno = 127U;
    tmp_msg_0.qualityind = 181U;
    tmp_msg_0.corrsource = 227U;
    tmp_msg_0.ionomodel = 135U;
    tmp_msg_0.health = 75U;
    tmp_msg_0.sigflags = 15U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.8877989419444161);
    msg.setSource(5441U);
    msg.setSourceEntity(254U);
    msg.setDestination(10771U);
    msg.setDestinationEntity(92U);
    msg.numsigs = 238U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.5413727970614485);
    msg.setSource(38469U);
    msg.setSourceEntity(213U);
    msg.setDestination(50005U);
    msg.setDestinationEntity(244U);
    msg.numsigs = 98U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 156U;
    tmp_msg_0.svid = 199U;
    tmp_msg_0.sigid = 155U;
    tmp_msg_0.freqid = 195U;
    tmp_msg_0.prres = 0.4634659941490319;
    tmp_msg_0.cno = 240U;
    tmp_msg_0.qualityind = 54U;
    tmp_msg_0.corrsource = 0U;
    tmp_msg_0.ionomodel = 61U;
    tmp_msg_0.health = 67U;
    tmp_msg_0.sigflags = 4U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.559446379808255);
    msg.setSource(59691U);
    msg.setSourceEntity(0U);
    msg.setDestination(18844U);
    msg.setDestinationEntity(245U);
    msg.gnssid = 239U;
    msg.svid = 31U;
    msg.elev = 0.6151043976336659;
    msg.azim = 0.31144274902322955;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.029297928568708054);
    msg.setSource(30521U);
    msg.setSourceEntity(2U);
    msg.setDestination(5933U);
    msg.setDestinationEntity(20U);
    msg.gnssid = 66U;
    msg.svid = 111U;
    msg.elev = 0.5312253195398239;
    msg.azim = 0.26576485508279024;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.05072076463123287);
    msg.setSource(48543U);
    msg.setSourceEntity(95U);
    msg.setDestination(12685U);
    msg.setDestinationEntity(40U);
    msg.gnssid = 156U;
    msg.svid = 148U;
    msg.elev = 0.05733153066216201;
    msg.azim = 0.9143088343922299;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.2629469734392236);
    msg.setSource(46783U);
    msg.setSourceEntity(128U);
    msg.setDestination(61692U);
    msg.setDestinationEntity(169U);
    msg.numsvs = 108U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 182U;
    tmp_msg_0.svid = 14U;
    tmp_msg_0.elev = 0.2765168312016849;
    tmp_msg_0.azim = 0.7213536163362159;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.12076497800547581);
    msg.setSource(33600U);
    msg.setSourceEntity(60U);
    msg.setDestination(20723U);
    msg.setDestinationEntity(251U);
    msg.numsvs = 113U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 135U;
    tmp_msg_0.svid = 241U;
    tmp_msg_0.elev = 0.5808100202692317;
    tmp_msg_0.azim = 0.4564395375448742;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.5354177137154127);
    msg.setSource(12399U);
    msg.setSourceEntity(188U);
    msg.setDestination(6834U);
    msg.setDestinationEntity(66U);
    msg.numsvs = 62U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.08740102512220715);
    msg.setSource(49240U);
    msg.setSourceEntity(5U);
    msg.setDestination(54604U);
    msg.setDestinationEntity(157U);
    msg.refstationid = 51240U;
    msg.itow = 2267623964U;
    msg.relposn = 0.36957247041674646;
    msg.relpose = 0.27496730601405617;
    msg.relposd = 0.3110475200651277;
    msg.relposlength = 0.7733986446541833;
    msg.relposheading = 0.9565010132526468;
    msg.accn = 0.5276301126809607;
    msg.acce = 0.020136763463264096;
    msg.accd = 0.772862787581824;
    msg.acclength = 0.8300740094934309;
    msg.accheading = 0.4897736693116861;
    msg.gnssfixok = 160U;
    msg.diffsoln = 100U;
    msg.relposvalid = 97U;
    msg.ismoving = 129U;
    msg.refposmiss = 65U;
    msg.refobsmiss = 65U;
    msg.relposheadingvalid = 187U;
    msg.carrsoln = 15U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.2966131938672212);
    msg.setSource(44934U);
    msg.setSourceEntity(86U);
    msg.setDestination(1031U);
    msg.setDestinationEntity(78U);
    msg.refstationid = 42304U;
    msg.itow = 4004980023U;
    msg.relposn = 0.8108701937882103;
    msg.relpose = 0.6177103110583583;
    msg.relposd = 0.4933656695216241;
    msg.relposlength = 0.1903800142922285;
    msg.relposheading = 0.8606149486001659;
    msg.accn = 0.8473749888815875;
    msg.acce = 0.6185762546103005;
    msg.accd = 0.569956103007809;
    msg.acclength = 0.17464514913144658;
    msg.accheading = 0.6450709122919697;
    msg.gnssfixok = 137U;
    msg.diffsoln = 105U;
    msg.relposvalid = 144U;
    msg.ismoving = 74U;
    msg.refposmiss = 127U;
    msg.refobsmiss = 59U;
    msg.relposheadingvalid = 162U;
    msg.carrsoln = 148U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.2208913131353678);
    msg.setSource(30626U);
    msg.setSourceEntity(49U);
    msg.setDestination(57307U);
    msg.setDestinationEntity(55U);
    msg.refstationid = 7380U;
    msg.itow = 1810515899U;
    msg.relposn = 0.39248854867966865;
    msg.relpose = 0.885285925451332;
    msg.relposd = 0.3737605496861669;
    msg.relposlength = 0.8339482200671693;
    msg.relposheading = 0.6227784793660135;
    msg.accn = 0.7813172287855147;
    msg.acce = 0.7718979077661933;
    msg.accd = 0.540040109985837;
    msg.acclength = 0.29705341753126324;
    msg.accheading = 0.8455463568954024;
    msg.gnssfixok = 52U;
    msg.diffsoln = 166U;
    msg.relposvalid = 58U;
    msg.ismoving = 50U;
    msg.refposmiss = 82U;
    msg.refobsmiss = 206U;
    msg.relposheadingvalid = 187U;
    msg.carrsoln = 198U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.22196295200088068);
    msg.setSource(3714U);
    msg.setSourceEntity(180U);
    msg.setDestination(34078U);
    msg.setDestinationEntity(125U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.9163093489697995);
    msg.setSource(52032U);
    msg.setSourceEntity(168U);
    msg.setDestination(50351U);
    msg.setDestinationEntity(70U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.9519192132734858);
    msg.setSource(39362U);
    msg.setSourceEntity(156U);
    msg.setDestination(7490U);
    msg.setDestinationEntity(224U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.6041428527364721);
    msg.setSource(25814U);
    msg.setSourceEntity(222U);
    msg.setDestination(62213U);
    msg.setDestinationEntity(243U);
    msg.mmsi.assign("AKARSIMUNSMQNXTWWCJEMBNZJGSFPMLEXQFYYEPYDGQYHVXHAOPSKATVIULILCYPFUNIXBGKSZDDTOSBVNDYNEQOIJVVVIARLWCJVWXTORVMSQGHZKALEHUXCLCDRZFVHYDOUPXYPQMPXXPRAGOQZSOSBRQHWUJFCJHRRAKYNPPDZGJNJCJBWIIGQXMMZKUWBMWOZLCUKTCFWVBOBUTDJRNATZLGEIEUES");
    msg.cog_int = 0.9373682433884273;
    msg.sog_int = 0.9601802888600093;
    msg.state.assign("IGPHQXDBLAKBXPBBISZBYAQPACCTUJMGODDRVBPCMEJAWYINGJOQNWKUNWBMUVZEHYAYSXLVXUAEKS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.4584738568237592);
    msg.setSource(36014U);
    msg.setSourceEntity(92U);
    msg.setDestination(32449U);
    msg.setDestinationEntity(194U);
    msg.mmsi.assign("OBTZOWRPNUKCBEYVZLJTMZWGOVDFHVRXSHNAIUAGNXRFHJTLQVMVSHNUWBDEJQBQQHVNOUEFYLPMZAKTZOIKLBOHBTJFKYIWRWDMBHPZOJNKGLIYDYWVFXRXWIOHVTGQQASDUJPZODWSYKMTGGMFDEWTEKZKAJJAHUPIUFSGPXSQSCZDCREYUXMLBKFHBCWSQAFLRUPALG");
    msg.cog_int = 0.41040007057305283;
    msg.sog_int = 0.23477480580236287;
    msg.state.assign("PGIJMVUATWNULAMJWXKGZGKXAMVKPMCILQUYTPIYRERZFDOCKZVCPWEFYHJGDJVQOVDVNHXIZLTIEF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.3027799954344592);
    msg.setSource(42500U);
    msg.setSourceEntity(94U);
    msg.setDestination(21767U);
    msg.setDestinationEntity(34U);
    msg.mmsi.assign("ZTBKRMZREQOMBIXGTRWHINQTDXASCUVHBJNYVFJTHGTSJEOTFWHSQCZKYHKKXGHBIDHWXADIJUYCSPFXYCVYNNFGNDMNIPBHTUZUCYWRJICYEMXVQSIPWLOMFYDVZNGLHLCRBLWKDEJOGEZABWMOPERSGCQQSZNSLYNAQUXFALOCNIKTXJHFMFCBGOMAUVXVULLKQZUDROIORVX");
    msg.cog_int = 0.21059262242753585;
    msg.sog_int = 0.5848298384787288;
    msg.state.assign("PPUIDXGJRQARCUBMBWCHZIBYLPSDBMNXXESHFRFVBTGGOZGOOQJUIZALLINQYUEVMUILFPSBSKIGPBASCHXIJCMDFTRJOADFOIEWXPTQGYZQMMXGORTSUKVERPMMAWKVVVHPBWRAUCYBZWFLZGKDNDTNWMFLJHTQKLQJTNZCCYJHQHRMLKQDVPYCJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  return test.getReturnValue();
}
