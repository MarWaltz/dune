//***************************************************************************
// Copyright 2007-2023 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Ricardo Martins                                                  *
//***************************************************************************
// Automatically generated.                                                 *
//***************************************************************************
// IMC XML MD5: 587c2e61a3ec9d831b6e15c41b745d88                            *
//***************************************************************************

// DUNE headers.
#include <DUNE/DUNE.hpp>

using DUNE_NAMESPACES;

#include "Test.hpp"

int
main(void)
{
  Test test("IMC Serialization/Deserialization");

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.4459760566448585);
    msg.setSource(58442U);
    msg.setSourceEntity(11U);
    msg.setDestination(62718U);
    msg.setDestinationEntity(155U);
    msg.state = 133U;
    msg.flags = 155U;
    msg.description.assign("ESRWIQWXMODKREPCIDISPDIUOXXDGKKFDRIJJSYLQEHYABCSHJSJGQMVUTVKYNLVODHZUSZWXJOEFZWHORCLRWWTPBACTNPVUWLSCRSYTZYGCLCVTEDTXIHRQFIOBAFHQAAKGOBKHBETAONAMFMWKPZEYAQZQQCHZNVZJJUKMOWHIESBXNP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.8771510305974201);
    msg.setSource(64848U);
    msg.setSourceEntity(79U);
    msg.setDestination(15700U);
    msg.setDestinationEntity(239U);
    msg.state = 65U;
    msg.flags = 117U;
    msg.description.assign("DGUMSNEOWDDVDENIUORVSPXJOKPALYCFRJHQYHEEFCFETOIKPLCWEGGRIZDWTQMBVASHLBYBXUOUIUBPQYOSYRWYWPMPYVRZVMSFWNZJCFHLPKCAHBIIKVZMPRGXGACZDBLWRTLVBASR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.1130926474872741);
    msg.setSource(52449U);
    msg.setSourceEntity(82U);
    msg.setDestination(54382U);
    msg.setDestinationEntity(58U);
    msg.state = 122U;
    msg.flags = 45U;
    msg.description.assign("FSUJOKVICLMBRAJNLCWKAFIYODVAZSDBYTEKXQBFFMIVOQBDZENDLQWTFONIEZCWKZNXETDKPVBXRLWGBQNCGADUUOKCUYGLHKEHHOHRXZTPGJKGWCNWAXDUTPMHDTQREZTSDAELPFHMWQWUXCVHPXOTA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.38099870901928456);
    msg.setSource(39594U);
    msg.setSourceEntity(135U);
    msg.setDestination(26623U);
    msg.setDestinationEntity(87U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.41328458979639304);
    msg.setSource(24363U);
    msg.setSourceEntity(125U);
    msg.setDestination(17414U);
    msg.setDestinationEntity(72U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.7991648146898348);
    msg.setSource(13980U);
    msg.setSourceEntity(109U);
    msg.setDestination(24575U);
    msg.setDestinationEntity(208U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.5224591138309118);
    msg.setSource(52942U);
    msg.setSourceEntity(96U);
    msg.setDestination(5646U);
    msg.setDestinationEntity(155U);
    msg.id = 90U;
    msg.label.assign("QNZWIFLBOFLLWABSONVSTJCHJAJBAMDGTSZMIKDRUYEPCLEJUXPVRQNTFDMYEUTBQTONEFCZTRKKBRGXODSVOGCZOD");
    msg.component.assign("TFOJHSFBNLUYGSWWCMQAKTLWIYYVLOWVFBVFENJAIIOOROKUTWCMRRDPRPTLMOMPXEWIWSTUIBKEFMVDWDILRTXIIXUKPNHGPKLXREQXSUMCCJDSQSDWHZBNQSGZJYZNAXFHZGNXKEGHEHIZMAVSSRZEDGTM");
    msg.act_time = 38869U;
    msg.deact_time = 56397U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.48920832824724125);
    msg.setSource(28945U);
    msg.setSourceEntity(24U);
    msg.setDestination(59217U);
    msg.setDestinationEntity(37U);
    msg.id = 91U;
    msg.label.assign("PQVEZEBOSSDDLLMZXRFXFYDXVDCZKPAFZGRUJITWHHLCLAQEVERUGNQBFYKJZEKTYNLBAXLCGOUOPKGIBUGVTZRRIRCSCVYPKWLXACMSVVAWMCJFVUMTY");
    msg.component.assign("VKKLHJYOQWIEMKNRTXANEAZZTXWRHHFHEVCGIBPAVBVQSFTFGGDAODICCZQCURUVMBUXFKZIQFEAOMTSKFPEJPQYJVGPHYIQTNJONSAFDMRUXXUDZLBSYXZRDVZHNWKHWPRDLYUMVMDBHTFUQYTDWCHEGSC");
    msg.act_time = 4327U;
    msg.deact_time = 63365U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.8021748512787747);
    msg.setSource(55313U);
    msg.setSourceEntity(163U);
    msg.setDestination(31925U);
    msg.setDestinationEntity(137U);
    msg.id = 194U;
    msg.label.assign("UONOKBLPSFXBGXFRNOVSAABPUQTHKEKPBIWICMBZHMMRTW");
    msg.component.assign("LJEFQQIKHFWPEXCGDXSTAUEKAFQJDJLHXBALGGDUSEPOQTFWJCCNOXXWZWWOGZNRKROPUNQOIVJIUUMNANKUIBDMSXROBOZVIFZMIBANNLNSGRBYMTICQLNFKFRDCKWSHQWLZRRJXQCMZWYGUVTTXYPQIJLRZCAWTVCDTUESRTXVDPXKSMCOPMPGVDYJNYLEZGEIAAVMMYOY");
    msg.act_time = 53227U;
    msg.deact_time = 46024U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.1359058674462471);
    msg.setSource(6802U);
    msg.setSourceEntity(152U);
    msg.setDestination(25213U);
    msg.setDestinationEntity(68U);
    msg.id = 233U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.742041830392905);
    msg.setSource(14948U);
    msg.setSourceEntity(91U);
    msg.setDestination(64536U);
    msg.setDestinationEntity(143U);
    msg.id = 207U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.3057842752240191);
    msg.setSource(32633U);
    msg.setSourceEntity(25U);
    msg.setDestination(3793U);
    msg.setDestinationEntity(31U);
    msg.id = 35U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.03385137007426531);
    msg.setSource(43756U);
    msg.setSourceEntity(217U);
    msg.setDestination(2263U);
    msg.setDestinationEntity(253U);
    msg.op = 60U;
    msg.list.assign("EXRHEUMJDLSGOUGSABFUIZZKLUVAQYDJSIPVLBFZPWJRZMNAJSCYTKDICMXFKYTOYLGTRAZEHLRJLOTVN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.8568227511174342);
    msg.setSource(5056U);
    msg.setSourceEntity(126U);
    msg.setDestination(46877U);
    msg.setDestinationEntity(14U);
    msg.op = 28U;
    msg.list.assign("DYGLDRTGUUZQKNBBWAGKSFQRWRSMJOQQEQHCBKAPNQRXVNPUMAHDYLFEYTMGVWCQAAZPUYXDGHVPOFBTOSCITOOLFOBLYIGUNXIZEQU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.9224753028721109);
    msg.setSource(2783U);
    msg.setSourceEntity(2U);
    msg.setDestination(51623U);
    msg.setDestinationEntity(130U);
    msg.op = 251U;
    msg.list.assign("OAELGKWFDHNBWCDHXOIJPMTGTYQAVIKBMSPGXEPVDZJNSLHVFNUOAWCXSWUTCNJMBWULAUFFREMDIGXZYLUQVBXIKQMNGPEGZD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.5860180493049199);
    msg.setSource(12398U);
    msg.setSourceEntity(22U);
    msg.setDestination(33655U);
    msg.setDestinationEntity(159U);
    msg.value = 16U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.7143051552741526);
    msg.setSource(57119U);
    msg.setSourceEntity(92U);
    msg.setDestination(5786U);
    msg.setDestinationEntity(233U);
    msg.value = 177U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.8003755967372116);
    msg.setSource(2620U);
    msg.setSourceEntity(13U);
    msg.setDestination(47586U);
    msg.setDestinationEntity(119U);
    msg.value = 42U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.3700971326394721);
    msg.setSource(33778U);
    msg.setSourceEntity(98U);
    msg.setDestination(13840U);
    msg.setDestinationEntity(145U);
    msg.consumer.assign("DACNHJOUUMLIDYFKULYLJPNQPARSFVQVJXKYTKHAJRWLZTUUBLVXWJMOHDSCVGUREXTYVEOPAQDVMQGVXRKNCBODBBFCAIZQNVYJMBZKFABNJCZNGFTWQFGYMYEETQITOGHCXWJUXSRADSEMXK");
    msg.message_id = 39850U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.25418655372443766);
    msg.setSource(30169U);
    msg.setSourceEntity(126U);
    msg.setDestination(3309U);
    msg.setDestinationEntity(213U);
    msg.consumer.assign("FZQXLHGWCFXEXIMHVGNKQPHYSUUVPXYOKQRRKTDTROSJLOZEZZVIOZGWIFHEJKSEPVMUCSQDTTMBTIVMGWDYEJSEFXCBKPMGRMBYGYOGJVFMDWHSRJAFGWLBTJHFAUCVRELPBOKBXTAIQLSUSNVLAUQYYHHCGQZYCZAEEICMZFBXWJUXJUNMWW");
    msg.message_id = 48810U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.2600036110227646);
    msg.setSource(49147U);
    msg.setSourceEntity(127U);
    msg.setDestination(35187U);
    msg.setDestinationEntity(254U);
    msg.consumer.assign("ASKGVDQDQOHBXYYCTXKQLMIHXLZSSCQYPQ");
    msg.message_id = 35196U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.09768746659898153);
    msg.setSource(60356U);
    msg.setSourceEntity(112U);
    msg.setDestination(36704U);
    msg.setDestinationEntity(4U);
    msg.type = 18U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.022821189352439375);
    msg.setSource(32674U);
    msg.setSourceEntity(189U);
    msg.setDestination(54557U);
    msg.setDestinationEntity(137U);
    msg.type = 138U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.2989810382501833);
    msg.setSource(25208U);
    msg.setSourceEntity(34U);
    msg.setDestination(57103U);
    msg.setDestinationEntity(234U);
    msg.type = 179U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.35374321430846356);
    msg.setSource(1294U);
    msg.setSourceEntity(32U);
    msg.setDestination(33079U);
    msg.setDestinationEntity(131U);
    msg.op = 207U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.10185913061604734);
    msg.setSource(42602U);
    msg.setSourceEntity(143U);
    msg.setDestination(38123U);
    msg.setDestinationEntity(5U);
    msg.op = 57U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.8890190331503878);
    msg.setSource(59736U);
    msg.setSourceEntity(28U);
    msg.setDestination(48971U);
    msg.setDestinationEntity(52U);
    msg.op = 161U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.18300424278165583);
    msg.setSource(30353U);
    msg.setSourceEntity(136U);
    msg.setDestination(8550U);
    msg.setDestinationEntity(73U);
    msg.total_steps = 223U;
    msg.step_number = 228U;
    msg.step.assign("JXBRADNYYIVRWNDVFMULXSKFHTNREOHOYXABYUPFWIQFJBYGGNJGDWSUVNDUWKOTYASKCXNZLFIOWAFMSQRQSLQQNOOTEJZKMCBCZKXIFSLCLE");
    msg.flags = 107U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.40512130043592975);
    msg.setSource(60783U);
    msg.setSourceEntity(72U);
    msg.setDestination(1378U);
    msg.setDestinationEntity(45U);
    msg.total_steps = 157U;
    msg.step_number = 117U;
    msg.step.assign("EWHIMTNFOYGYMIPKWGLLNMTANCFIAPYBJOAKGHKTCWSHFVGNLDQHZJUDRUXJLILMBPBVMZKJZMDNPGKBXOREYTQO");
    msg.flags = 215U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.8611461082288213);
    msg.setSource(27656U);
    msg.setSourceEntity(155U);
    msg.setDestination(25233U);
    msg.setDestinationEntity(159U);
    msg.total_steps = 150U;
    msg.step_number = 205U;
    msg.step.assign("KPGRBWRDEVKLOLEBUOGJDYAKGMNPXIBDACUDNAWMQKRIUHJWLNFQDLYPCJBWWBVXIJITBTUXVTTGFEAHRKOPWDSAYFQFXYNRLGJFFDJHSNRL");
    msg.flags = 64U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.19029866708204635);
    msg.setSource(22238U);
    msg.setSourceEntity(225U);
    msg.setDestination(59692U);
    msg.setDestinationEntity(3U);
    msg.state = 247U;
    msg.error.assign("WXWPOGDNRBCGUJLMVCDKZTLZKJYLJSZAKALYKLRZTNSSFNIYMFMAHZIHBXXXPVVRVWUFDFLIGTPFGIRMOWEOPWNVVWPDJUSZSBARPYCVIMXZVROYTEYTNBAGMIOFGVTQYHMNDKPYNDQZRDRQSHTWGSJBQBCJWITHSAFKUAEBDOCQFWCPQVHJRDHBMPMLJKUANIUJEKEOCOHQUEBHAQXGEZNX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.024498436666279044);
    msg.setSource(55569U);
    msg.setSourceEntity(213U);
    msg.setDestination(47440U);
    msg.setDestinationEntity(116U);
    msg.state = 198U;
    msg.error.assign("QDBVVSWOZUINLHCIDYHWEXPIOWUJKEGCPMMYJQBLDEXMGLYXOFFJBSBJBKSSNSZOOJRKHHKDVTDOHYWTAHQWRFRZKQLACNAHJDXFGQKTTMGIKVDLJWMWNFMOBSBAOEVABVQABDJZEPUVOFPHECWGNTWUPPIRZKVFUGZQRFSMMRNNRGAZMPMHXZZYXTTYYCQPALSOYJTXCCXSVECCGAYYGEQKRIXKNDEHBQPZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.3692497089215617);
    msg.setSource(4138U);
    msg.setSourceEntity(221U);
    msg.setDestination(1321U);
    msg.setDestinationEntity(61U);
    msg.state = 93U;
    msg.error.assign("EGTAMZGJMNWFEYPUKYSOHJPPXVBOIAJDTJKKIOQFAKFUSLTLPNEAYODGMCWREMXAJASNDFESMXBNHHDGKXEULKQTOONYDAUWVTNIXPZQUDDSXRCKZTPMVRZOQRZVQQVCHLVCRTOGNSYJQBAKIHIMMZNTHI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.12908556839951335);
    msg.setSource(62651U);
    msg.setSourceEntity(64U);
    msg.setDestination(62822U);
    msg.setDestinationEntity(141U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.8226727909153355);
    msg.setSource(33002U);
    msg.setSourceEntity(241U);
    msg.setDestination(58570U);
    msg.setDestinationEntity(11U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.10473614229305461);
    msg.setSource(28299U);
    msg.setSourceEntity(67U);
    msg.setDestination(3549U);
    msg.setDestinationEntity(63U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.1303117619439529);
    msg.setSource(55116U);
    msg.setSourceEntity(66U);
    msg.setDestination(55927U);
    msg.setDestinationEntity(197U);
    msg.op = 150U;
    msg.speed_min = 0.4767595222971225;
    msg.speed_max = 0.40732729355365604;
    msg.long_accel = 0.13656583372084996;
    msg.alt_max_msl = 0.31699820386362454;
    msg.dive_fraction_max = 0.3201740249841155;
    msg.climb_fraction_max = 0.36086577423511956;
    msg.bank_max = 0.31320662963453316;
    msg.p_max = 0.23075539618918806;
    msg.pitch_min = 0.6406722004616622;
    msg.pitch_max = 0.8226538864086091;
    msg.q_max = 0.16660031151867538;
    msg.g_min = 0.04046986281229681;
    msg.g_max = 0.7636390830327352;
    msg.g_lat_max = 0.7633095978910034;
    msg.rpm_min = 0.13608110154379072;
    msg.rpm_max = 0.6759303375679772;
    msg.rpm_rate_max = 0.4592852545136261;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.6100881331392505);
    msg.setSource(56102U);
    msg.setSourceEntity(219U);
    msg.setDestination(8110U);
    msg.setDestinationEntity(91U);
    msg.op = 96U;
    msg.speed_min = 0.21546011410778798;
    msg.speed_max = 0.509095705833242;
    msg.long_accel = 0.43915766276961077;
    msg.alt_max_msl = 0.10002885082334667;
    msg.dive_fraction_max = 0.7577528526289604;
    msg.climb_fraction_max = 0.32915002712096997;
    msg.bank_max = 0.07524768262913595;
    msg.p_max = 0.8865851064820818;
    msg.pitch_min = 0.4565258895734233;
    msg.pitch_max = 0.17944053326184806;
    msg.q_max = 0.7472003849060731;
    msg.g_min = 0.8258803833589867;
    msg.g_max = 0.14384028883028688;
    msg.g_lat_max = 0.5504347328153724;
    msg.rpm_min = 0.01782757536492474;
    msg.rpm_max = 0.41321261028649914;
    msg.rpm_rate_max = 0.9871189476842499;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.12988614113309493);
    msg.setSource(48054U);
    msg.setSourceEntity(73U);
    msg.setDestination(61546U);
    msg.setDestinationEntity(125U);
    msg.op = 83U;
    msg.speed_min = 0.6220358038624993;
    msg.speed_max = 0.6946748133052792;
    msg.long_accel = 0.05657911976016394;
    msg.alt_max_msl = 0.03851097503495027;
    msg.dive_fraction_max = 0.7320126216754699;
    msg.climb_fraction_max = 0.658409466470539;
    msg.bank_max = 0.6913344057411333;
    msg.p_max = 0.6586624944940405;
    msg.pitch_min = 0.20006149451149913;
    msg.pitch_max = 0.7241328076893064;
    msg.q_max = 0.9425362198521383;
    msg.g_min = 0.8061172636200309;
    msg.g_max = 0.8483238154516642;
    msg.g_lat_max = 0.004081476769442927;
    msg.rpm_min = 0.3304841569255972;
    msg.rpm_max = 0.4267004246967312;
    msg.rpm_rate_max = 0.06805726997907635;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.6266581158088302);
    msg.setSource(18699U);
    msg.setSourceEntity(128U);
    msg.setDestination(65173U);
    msg.setDestinationEntity(188U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.1517529405114746);
    msg.setSource(55644U);
    msg.setSourceEntity(85U);
    msg.setDestination(26399U);
    msg.setDestinationEntity(223U);
    IMC::LblRangeAcceptance tmp_msg_0;
    tmp_msg_0.id = 193U;
    tmp_msg_0.range = 0.6031702317281106;
    tmp_msg_0.acceptance = 54U;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.950520520639113);
    msg.setSource(35118U);
    msg.setSourceEntity(181U);
    msg.setDestination(56523U);
    msg.setDestinationEntity(55U);
    IMC::UamTxFrame tmp_msg_0;
    tmp_msg_0.seq = 9483U;
    tmp_msg_0.sys_dst.assign("XIDEHFIXTMRUQAQSJBEKSNFJKPWPSIUZGTBQKORTUONRJKOFADGKWVZZPRYQMNOMTXYHGPOAKQMLAAMGCVBSOIHAWEZCGDOWFZHPFXDRVHRQJ");
    tmp_msg_0.flags = 95U;
    const signed char tmp_tmp_msg_0_0[] = {86, 30, 26, 108, -57, 41, 81, -47, -100, -122, 69, -62, 36, -109, -40, 28, -115, -2, 45, 0, -74, 27, -35, -58, -111, 126, -85, -57, -65, 30, 103, 58, 25, 63, -98, -116, 24, -83, 105, 10, -88, 56, -20, -76, 20, 107, -28, 19, 63, 32, 125, -126, -12, 13, 55, 74, 27, 0, 117, -80, 108, 11, 43, 60, 76, -35, 82, -21, -14, 48, -122, 44, 29, -91, -94, -106, 58, 117, 108, -14, 40, -49, -10, -14, 122, 2, -100, 107, -95, -66, -119, 72, 108, -78, 99, -57, 60, -10, 92, -99, -23, -58, -61, -34, -63, 43, -23, 63, -20, -73, -84, 89, 78, 121, -6, -94, 28, -128, 3, 62, 51, -71, 73, 16, 58, -104, 59, 90, -52, 75, -94, 114, -113, 52, 12, 33, -57, -93, -114, 25, -38, 109, 4, -44, 70};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.059290450831672614);
    msg.setSource(62526U);
    msg.setSourceEntity(210U);
    msg.setDestination(25107U);
    msg.setDestinationEntity(223U);
    msg.lat = 0.558651172657722;
    msg.lon = 0.7895125085006693;
    msg.height = 0.023406862783170945;
    msg.x = 0.014882819043322004;
    msg.y = 0.023769976419911965;
    msg.z = 0.23856235549934013;
    msg.phi = 0.12426374772256943;
    msg.theta = 0.8097882984037055;
    msg.psi = 0.646703233279025;
    msg.u = 0.8585295018823944;
    msg.v = 0.29261582376442574;
    msg.w = 0.5679201259145734;
    msg.p = 0.8997152934811427;
    msg.q = 0.5433844013594208;
    msg.r = 0.8438478894287899;
    msg.svx = 0.8320483864569417;
    msg.svy = 0.08583968930883512;
    msg.svz = 0.7552110893862365;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.8040712409923852);
    msg.setSource(30890U);
    msg.setSourceEntity(82U);
    msg.setDestination(24355U);
    msg.setDestinationEntity(60U);
    msg.lat = 0.5912380942405226;
    msg.lon = 0.6324805642682094;
    msg.height = 0.452963722079766;
    msg.x = 0.1276358628850781;
    msg.y = 0.2758686814493716;
    msg.z = 0.47731964070701993;
    msg.phi = 0.955497845883585;
    msg.theta = 0.4418540315177957;
    msg.psi = 0.013121414230881756;
    msg.u = 0.7685257314406914;
    msg.v = 0.8775843559688148;
    msg.w = 0.19403551265368868;
    msg.p = 0.575196747384706;
    msg.q = 0.15728198945029015;
    msg.r = 0.7296211960263536;
    msg.svx = 0.9594213760996247;
    msg.svy = 0.9305776484748773;
    msg.svz = 0.7766665626396548;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.5726129274474501);
    msg.setSource(23208U);
    msg.setSourceEntity(5U);
    msg.setDestination(41195U);
    msg.setDestinationEntity(218U);
    msg.lat = 0.587477276885989;
    msg.lon = 0.03550549290930316;
    msg.height = 0.5381094102129479;
    msg.x = 0.08763833234753071;
    msg.y = 0.0391579427272144;
    msg.z = 0.45929051164389323;
    msg.phi = 0.3284094488437178;
    msg.theta = 0.38741504440964325;
    msg.psi = 0.2117669789108596;
    msg.u = 0.20891865316574942;
    msg.v = 0.5014528845949489;
    msg.w = 0.23939257117077428;
    msg.p = 0.9725273918149887;
    msg.q = 0.94576554540097;
    msg.r = 0.1272202558600508;
    msg.svx = 0.6958485342678009;
    msg.svy = 0.06159798280996709;
    msg.svz = 0.24520820917115738;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.8777157402138386);
    msg.setSource(26142U);
    msg.setSourceEntity(79U);
    msg.setDestination(3683U);
    msg.setDestinationEntity(49U);
    msg.op = 80U;
    msg.entities.assign("LRATGYRWMZBUNFFDODPMQHPUSBUNXILJAITSCFQXUXXWPH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.2518633383523642);
    msg.setSource(58488U);
    msg.setSourceEntity(230U);
    msg.setDestination(4863U);
    msg.setDestinationEntity(40U);
    msg.op = 162U;
    msg.entities.assign("MEBAOCGXOXKQTILGYUJCJPEMFDVABQXEZYLKCRWANGRNHIXYVJWBXXNFMLPSJBSTQDEBSAE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.7264235138080312);
    msg.setSource(36428U);
    msg.setSourceEntity(145U);
    msg.setDestination(52492U);
    msg.setDestinationEntity(114U);
    msg.op = 36U;
    msg.entities.assign("NXRDBSENDITULVZMWAJKCQKMRXNEZEDVYKASTPBGVEFRXFRDSXCQAGUUAXGGQGIONZCUJZQTSRNHPVOXLPWQEZOSMHXMGGYHKWQIAWIMUTOVXOMPFNLYYBLDNHICGNVZEBJSJXLMDQBIZZEOVYRJWOFCAALJPBWUCMREKDO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.46240416748136826);
    msg.setSource(22391U);
    msg.setSourceEntity(221U);
    msg.setDestination(25361U);
    msg.setDestinationEntity(180U);
    msg.type = 147U;
    msg.speed = 22839U;
    const signed char tmp_msg_0[] = {36, -116, 62, -35, 95, -24, 21, -82, 55, -71, -82, 79, 14, -95, -120, 1, -71, -92, 111, -104, -109, -16, 45, -54, -114, -5, -75, 14, -106, -81, 113, 7, -34, -126, -94, 37, -122, -91, 59, 36, 10, 35, -67, -31, -32, -91, -85, 27, -69, 57, 44, 54, -29, 106, 80, -74, 20, -128, 112, -105, -36, -14, -7, 110, 39, 72, -67, 96, 13, -96, 76, -34, -73, -31, 97, -5, 117, -106, 86, -94, -85, -83, -82, -128, -91, -58, 109, 33, -75, 24, 76, -74, 95, 91, -81, -37, -105, -63, 93, -9, 101, 110, -58};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.6997013724113935);
    msg.setSource(8871U);
    msg.setSourceEntity(131U);
    msg.setDestination(10716U);
    msg.setDestinationEntity(99U);
    msg.type = 174U;
    msg.speed = 31946U;
    const signed char tmp_msg_0[] = {63, 27, -123, -47, -16, 37, -82, 81, -120, -76, 2, 23, 119, -36, -89, -74, -33, 7, 96, -63, 125, 49, 8, -106, -25, 41, -35, 53, 81, -102, 125, -103, -2, 2, -85, -28, -61, -87, -101, -69, 77, -51, -27, -83, -22, 88, 52, -53, 54, 116, -113, -125, 51, -64, -26, 45, -114, -100, -45, 63, 24, 58, -54, -42, -63, -63, -23, 116, -59, -78, -52, -60, -25, -4, -87, 32, 18, -13, -83, 92, 2, 71, 61, 65, -6, 107, 36, -109, -100, -83, 78, -43, -87, 14, -79, 62, 81, 92, -30, -68, 72, -123, 83, 96, 66, -86, 80};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.3186191869869398);
    msg.setSource(30226U);
    msg.setSourceEntity(159U);
    msg.setDestination(64967U);
    msg.setDestinationEntity(198U);
    msg.type = 194U;
    msg.speed = 44660U;
    const signed char tmp_msg_0[] = {70, 55, 118, 54, 108, 118, -74, -10, 21, 68, -14, 0, -25, -17, 104, 28, -71, -27, -36, -122, -89, -60, -118, -14, 104, -111, 49, 52, 37, -103, -67, -23, -84, 73, -11, -1, -52, -45, -106, 121, -65, -12, 79, -53, -5, -120, 2, 70, 105, -119, -78, 46, -83, -113, 85, -27, 68, -49, 25, -47, 84, 96, 117, -76, -122, 90, -84, 100, -70, -106, -71, -71, -27, 72, 28, -103, -89, 98, 72, 75, -119, 48, 71, -87, -105, 14, -78, -108, 92, -11, 23, -112, 29, -52, -52, -72, 87, 126, -90, 12, -75, 69, 88, 56, -14, -111, 96, -41, -67, -126, 92, 66, 65, -89, 0, -116, -38, 97, -124, -121, 2, -84, -35, -11, -118, 24, 14, 34, -65, -87, -20, -24, -125, -42, -114, -58, -52, 112, 38, -76, 7, 84, -30, 39, 82, -68, -24, -122, 20, -91, 121, -34, -76, 122, -61, 33, -128, -107, -127, -41, 46, 47, 19, 96, 105, 101, -70, 3, 120, 45, -29, 64, 40, 32, 52, 33, -39, 18, -99, 33, 126, 37, -54, -111, -2, -28, 121, -34, -65, -71, 12, -22, 78, 34, 30, -27, -115, 27, 115, -32, 50, -111, 78, 114, 57, -28, 112, -97, 26, 78, -88, -42, -83, -84, 72, 23, -12, 61, 123, 120};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.36317186014026837);
    msg.setSource(6001U);
    msg.setSourceEntity(205U);
    msg.setDestination(29163U);
    msg.setDestinationEntity(96U);
    msg.op = 242U;
    msg.tas2acc_pgain = 0.12433129310958335;
    msg.bank2p_pgain = 0.2956904587766179;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.8772347855620494);
    msg.setSource(9397U);
    msg.setSourceEntity(142U);
    msg.setDestination(17975U);
    msg.setDestinationEntity(46U);
    msg.op = 38U;
    msg.tas2acc_pgain = 0.44618586103498425;
    msg.bank2p_pgain = 0.8235519866313131;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.746017958667212);
    msg.setSource(38264U);
    msg.setSourceEntity(238U);
    msg.setDestination(7213U);
    msg.setDestinationEntity(160U);
    msg.op = 76U;
    msg.tas2acc_pgain = 0.2577399794220161;
    msg.bank2p_pgain = 0.10159078350563444;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.8759783543381271);
    msg.setSource(1170U);
    msg.setSourceEntity(194U);
    msg.setDestination(5368U);
    msg.setDestinationEntity(9U);
    msg.available = 513992380U;
    msg.value = 138U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.16190017802601508);
    msg.setSource(15505U);
    msg.setSourceEntity(202U);
    msg.setDestination(30486U);
    msg.setDestinationEntity(208U);
    msg.available = 1103741113U;
    msg.value = 93U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.4423002733556407);
    msg.setSource(29113U);
    msg.setSourceEntity(193U);
    msg.setDestination(43393U);
    msg.setDestinationEntity(191U);
    msg.available = 3310306423U;
    msg.value = 196U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.5066982615114255);
    msg.setSource(4471U);
    msg.setSourceEntity(176U);
    msg.setDestination(55711U);
    msg.setDestinationEntity(43U);
    msg.op = 113U;
    msg.snapshot.assign("BAJHZZXSUHZBWVEQMKIPVUQGFVYTTWMWMRJLPKTMBNIVUOJJKCIHGRUCMLBRWEVHUODXHETEFCTGMBYHGUJNSKCCZWELGRFXDJILVHFJSNVAROGBYNTZQIBHOFCDYRGAXSYWDTADDYEPCOAGXGZPKTPMXRCR");
    IMC::AnnounceService tmp_msg_0;
    tmp_msg_0.service.assign("JLFZYJFAQLDVOMDRFZZGJDWEXGLHIQCWBYUWYXDNKOFMXNLFAYKCVCCEECIWLEXDYQIUUMUTITWELPMXGFHRSXQACJKWWKAGGKQKOFECHQCSXTRTJZRNAIWBUMPHNIZPGTOHPWKBVPRSHRDHPJROKNU");
    tmp_msg_0.service_type = 117U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.4031640315646162);
    msg.setSource(35442U);
    msg.setSourceEntity(74U);
    msg.setDestination(55027U);
    msg.setDestinationEntity(26U);
    msg.op = 120U;
    msg.snapshot.assign("YDBUKQJVUIGUXGPEJNAZTPHWTXBULSAZLMHRRNZJBYWYBJCLBDAINWSUHQLXQPSIENDHRLKRIFGERSZNMUYDBIYKGNKHOVO");
    IMC::SmsTx tmp_msg_0;
    tmp_msg_0.seq = 4152427326U;
    tmp_msg_0.destination.assign("PKSJINRMOYDXZ");
    tmp_msg_0.timeout = 17359U;
    const signed char tmp_tmp_msg_0_0[] = {37, -34, 21, -104, 102, 68, 21, 29, -90, -124, -67, -12, -65, -111, -113, 59, -17, -77, -50, -12, 73, 41, 34, -105, -8, 91, -34, 96, 107, -32, 84, 40, 66, 85, -112, -32, -67, -17, -91, 115, 23, -117, -84, 29, 63, 4, -31, -45, 41, 91, 62, 71, 121, -117, -89, -12, 5, -86, 14, 21, 24, -45, 8, -89, -117, -52, 97, -98, 77, 104, 91, 31, 21, 3, 40, 117, -52, -95, -18, -102, 9, 12, 65, 111, -70, 4, 16, -33, -98, 71, -121, 63, 113, -125, -112, 53, -46, 105, -93, -22, -57, -96, -46, -102, 89, -71, -45, -53, -38, 31, 49, -61, 9, -106, -64, 0, -64, 116, -16, 70, -52, -19, 108, -34, -54, -117, 20, -12, 0, 39, 43, 116, -41, 115, -53, 103, 98, -102, 46, 93, 49, -82, 26, 93, 0, 21, 121, -15, -95, 96, -28, -98, -56, 95, 85, 22, -107, -54, 103, -74, 100, -111, 11, -8, -128, 51, -78, 105, -110, 53, -57, 48, 59, -115, -72, -40, -11, -30, 75, -19, 37, -61, -73, 25, 124, 17, -43, 54, 112, 114, 75, 70, -73, -21, -90, 31, 11, 51, -107, 95, 111, -14, -49, 112, -121, 49, 23, 28, -1, 80, -74};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.8605916739344713);
    msg.setSource(32821U);
    msg.setSourceEntity(74U);
    msg.setDestination(45178U);
    msg.setDestinationEntity(133U);
    msg.op = 131U;
    msg.snapshot.assign("WRPSBKNJJAWLXVQLCEJXGAWBXAYMPOOUIHRMKRNEXMSDSKUMQMPBVTTYMSYEEZFSGNJLRWXQTGLGUQJMBNMFFBXXUOSOPRFXEKIDZBFBWZDCXUCAJVXSTEOYTNVLCDGCLDANKFWIITRZAFWZ");
    IMC::StationKeeping tmp_msg_0;
    tmp_msg_0.lat = 0.088828669188733;
    tmp_msg_0.lon = 0.5304186754412841;
    tmp_msg_0.z = 0.2743490388747625;
    tmp_msg_0.z_units = 101U;
    tmp_msg_0.radius = 0.6477418072686676;
    tmp_msg_0.duration = 1157U;
    tmp_msg_0.speed = 0.8884222047319911;
    tmp_msg_0.speed_units = 52U;
    tmp_msg_0.custom.assign("UOBZIFGOHPMDTNGEIVCQJLPPHCCCBXWHKJHSLFLXDWRCAWAWTBAVWGGPQLNEIIZRJSAGXMVYQUWNGPSOBWDIDOMRSUONVEQYFYOVKNZHEYRRTAAKMJSTWYOVASYUJOTMRUDILFDXHZZMDMETPFDQLYJIJFVOZPGYKURFUTZRCMSAOBXHBLWUWIEHEKYNEIHUNAXVQZFTQHJPNLRSJXMKZLS");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.7930883608919286);
    msg.setSource(65133U);
    msg.setSourceEntity(178U);
    msg.setDestination(24394U);
    msg.setDestinationEntity(168U);
    msg.op = 78U;
    msg.name.assign("KVFDQPLEAJQGXCEFZYYYXNDNOSSMIPCFURJHXPMMOQOZNAIZWWLQKDKHSSERPTGUAYMHUWOAJJKONKLCDYLSEDVKFPXHGXKTBIYXYWLCS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.972862551071369);
    msg.setSource(41019U);
    msg.setSourceEntity(196U);
    msg.setDestination(25897U);
    msg.setDestinationEntity(171U);
    msg.op = 136U;
    msg.name.assign("UCEJUTWNMLUJXSCTFTGYGQSNSRODHHZCFYOBRBXJJA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.8947300507628517);
    msg.setSource(1763U);
    msg.setSourceEntity(186U);
    msg.setDestination(16307U);
    msg.setDestinationEntity(200U);
    msg.op = 103U;
    msg.name.assign("IHCIHBYSILIITZUQXUPQRMAGGCIETQITMHDFACHXOGSACLGNEPKXSYHJJQBODMKFBZLEVTDQBXWWCXGINOTSHENERNBMJOZYZTUZHXJNFSNDMJVWPMEDXLQGPBTXWLWAOPCMRDHSOORKEBWRPVZGZPWFSYHYDRQCVSUVGDZANLXKKHKWYYCZLZMKJRVFVFIUGTQQOYWBRAEUAGSIMLTKUDYKLJCNBFNRUFLAUKSPTFEBDNPXOCRJEWPVF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.43650309254907793);
    msg.setSource(35469U);
    msg.setSourceEntity(252U);
    msg.setDestination(10238U);
    msg.setDestinationEntity(9U);
    msg.type = 91U;
    msg.htime = 0.6158448874069744;
    msg.context.assign("KWRRIILMYZKVTLHPGDYDBRUOHFIDBJAMRXGNNSOOBXJJTUSJEWECYAHSUCNZJVNJISYWULQINXKHCNAVXODALPLSQBYRDDZOAFHSSPFDEF");
    msg.text.assign("MJYJQSOXLXDKTFPJYBHPUDOSTPMTICLZBWIVHWACYUVYHAOKKYSMMQQTNLZQNHISBTBYDHKXDDGRRMVMFVGNHJZMBKQWKQYGQCDRUUATSILNOIKAPEVRKYXSLRTSCHUUECNEOVEIEBOHKCZJWCZAZGQDLOPWHLNMMTJXGRJKCETEFLWSIPVALXYIXPJRVFBNRXZDZEGOYAHLQIFUFTWGFPDECNUPGBSXWIRZEVWAFJXNFBGW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.46237060587489676);
    msg.setSource(38906U);
    msg.setSourceEntity(79U);
    msg.setDestination(47306U);
    msg.setDestinationEntity(43U);
    msg.type = 133U;
    msg.htime = 0.20520962035148416;
    msg.context.assign("MILVAMOEXQSWBCXWNVTDADJFGMOPXPTWSFKPMTZHGJNZSFUKCWLKUCRXSQIOKWHQNABECILXEINDCSAEO");
    msg.text.assign("SICKHBYBPUNUGGJLELVKXMWHUYSIBSQQGXQFMFYTEESLTXKCKTLFPNTDPCZERBHDFINGWOIJZCMNRSCNMDUYPSJHDPAYLFRVGIQPMHSHZNWNRQXKDFBILKRQOXSPXOEROTATXWUBKAEZTVOYRCUICDLQFNLHBCGGLZHSTAVBHVRAQEAWECDZMDEBWQOSCIOJVPWYIKUXYVOMJMADJKWZMJIAJTNZMHFBPGRZU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.712706527614434);
    msg.setSource(40626U);
    msg.setSourceEntity(152U);
    msg.setDestination(22797U);
    msg.setDestinationEntity(51U);
    msg.type = 190U;
    msg.htime = 0.22610153125479515;
    msg.context.assign("FRJCMOJHCNBZINXTQHKORQDOBXNKNICZFYTPIDCZVJYIMZTJMLATCJXNHFEAAEGTOWVNSPPTZXLOMKIUHDPHGBKAZHMXQODGWEPUNQQRROAKINFVBJGNLYWLTRBOVMYDBZSBBLMECAGJJLFGVKXUEFMUFKZSJIW");
    msg.text.assign("MIYJYOVAXAJMHZKHHKXLTIQLEEVAJWTQUZENUGCFXXWFHPZBKRZNPRFGEYCFADKYGZLEJNYZNISADKLBATBNRDWUFXOHBXBRDMSESIMPEDCHJNZNVERILXQTJQRFRWQDYOWMDZOEGTKLBNHDJXVVKPUPPWYVRILCSQWOURUAUISTCWLVCVTQOKCZMGNOSHEATQDFVDCJMNBWIPQGCLGUSROPGAL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.8205299311940235);
    msg.setSource(18665U);
    msg.setSourceEntity(209U);
    msg.setDestination(57543U);
    msg.setDestinationEntity(42U);
    msg.command = 169U;
    msg.htime = 0.7475200118133281;
    IMC::LogBookEntry tmp_msg_0;
    tmp_msg_0.type = 75U;
    tmp_msg_0.htime = 0.3332704154639289;
    tmp_msg_0.context.assign("OOMZZHBZUSXNTUXJCRXWAVPVCYVRPTCTDMLHMCYPHKFHDMLWRVBVIBLAOZQTRQWYNTROILRPDKNZVNJMCMAUVILUPKBSEEWYSRICOKHJXWUGWBJMYTADAZAKAKJXUFTCSF");
    tmp_msg_0.text.assign("NAYFLXGFMNKLREDXOXYMFJHLHIPT");
    msg.msg.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.9790174392334398);
    msg.setSource(12958U);
    msg.setSourceEntity(189U);
    msg.setDestination(58538U);
    msg.setDestinationEntity(175U);
    msg.command = 99U;
    msg.htime = 0.31828601958892455;
    IMC::LogBookEntry tmp_msg_0;
    tmp_msg_0.type = 160U;
    tmp_msg_0.htime = 0.9530857803271765;
    tmp_msg_0.context.assign("JKSRFFMABBDYUQRNICPRALAPJDWMSVOTUJUXEEYOUWJDFXALVLWHMGHUFOLUEZBSSPYXINWA");
    tmp_msg_0.text.assign("EJQLRMECFRZUUOWYUVZDSPFOIHOIDDWLCNBDFETBZJRGWNBDZYSCKPLLUKBPZVICYSAQAEWXRATDTGQXPLAEKLGVNPVRYMK");
    msg.msg.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.9781762779953371);
    msg.setSource(43133U);
    msg.setSourceEntity(197U);
    msg.setDestination(53271U);
    msg.setDestinationEntity(77U);
    msg.command = 234U;
    msg.htime = 0.7065604696451374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.0017588848204471708);
    msg.setSource(6061U);
    msg.setSourceEntity(86U);
    msg.setDestination(6674U);
    msg.setDestinationEntity(118U);
    msg.op = 49U;
    msg.file.assign("WUVOCKHHYLHAUDNWKBQBUCSNRFZERMXHSJMKXAXDODGMWGGTLLXPEYUAZBLRTRACQUEOJSIKDLHTIOZFFXQEGQTYQWNKTWYMMFPYPVPUAIRFJTSDXZHGBBIJHKWIFAPVREULOKCVGOGPQNWMYMSYBXJSCXDKBIZJTWQTBJTEZCOWVCMPORZSBEVAIVVDJSWBLDXDRAYEZVCPGC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.38627138078468115);
    msg.setSource(31210U);
    msg.setSourceEntity(233U);
    msg.setDestination(33370U);
    msg.setDestinationEntity(0U);
    msg.op = 32U;
    msg.file.assign("EGPBSBMUIQMPMOVHDBWYGQFUVXLDZXPZBUHAFMCBIDNDQNQJAWPYNLRHLZOKYGRJLEKWXSFCTWCHNTWTUNRMBRJGRKCJULYARAMTFCMPXKDSZVGLWSDYVLFLWFFIUPROBEWIQVKECODEZSYZNHUNGENBMJOXCQSYIEZHEWSKZVYMCAXZTTSAZJGAALTUPKKXRHIVTGNGTHTKUOOMDOQAIOFXIPSCCPALJRFYSBFV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.6526108106698655);
    msg.setSource(58760U);
    msg.setSourceEntity(66U);
    msg.setDestination(329U);
    msg.setDestinationEntity(204U);
    msg.op = 229U;
    msg.file.assign("FCJDMKGOGASPHVBDANGRJLQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.7637556523746013);
    msg.setSource(60447U);
    msg.setSourceEntity(150U);
    msg.setDestination(46434U);
    msg.setDestinationEntity(250U);
    msg.op = 62U;
    msg.clock = 0.2714449669730843;
    msg.tz = -30;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.4286381974967277);
    msg.setSource(53523U);
    msg.setSourceEntity(7U);
    msg.setDestination(16089U);
    msg.setDestinationEntity(107U);
    msg.op = 209U;
    msg.clock = 0.8774487681174198;
    msg.tz = 45;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.18025750160606502);
    msg.setSource(60299U);
    msg.setSourceEntity(108U);
    msg.setDestination(13465U);
    msg.setDestinationEntity(38U);
    msg.op = 129U;
    msg.clock = 0.16973907909216301;
    msg.tz = -66;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.5732740175361573);
    msg.setSource(41764U);
    msg.setSourceEntity(37U);
    msg.setDestination(60060U);
    msg.setDestinationEntity(82U);
    msg.conductivity = 0.6227152816653121;
    msg.temperature = 0.9699481771115193;
    msg.depth = 0.7184998777586432;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.8024545545852352);
    msg.setSource(61178U);
    msg.setSourceEntity(182U);
    msg.setDestination(18347U);
    msg.setDestinationEntity(252U);
    msg.conductivity = 0.33449279474921556;
    msg.temperature = 0.7543922821291535;
    msg.depth = 0.6472513533133093;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.13325357639675495);
    msg.setSource(9552U);
    msg.setSourceEntity(69U);
    msg.setDestination(43789U);
    msg.setDestinationEntity(168U);
    msg.conductivity = 0.42171519463083795;
    msg.temperature = 0.5456455882455371;
    msg.depth = 0.932685990084312;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.5052360320552906);
    msg.setSource(58622U);
    msg.setSourceEntity(18U);
    msg.setDestination(55226U);
    msg.setDestinationEntity(129U);
    msg.altitude = 0.6995707608759419;
    msg.roll = 26914U;
    msg.pitch = 48679U;
    msg.yaw = 4444U;
    msg.speed = 18968;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.15453329343111744);
    msg.setSource(64624U);
    msg.setSourceEntity(38U);
    msg.setDestination(18994U);
    msg.setDestinationEntity(174U);
    msg.altitude = 0.02494011063696866;
    msg.roll = 30781U;
    msg.pitch = 57850U;
    msg.yaw = 12623U;
    msg.speed = -18604;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.26424514700350266);
    msg.setSource(24012U);
    msg.setSourceEntity(201U);
    msg.setDestination(37696U);
    msg.setDestinationEntity(92U);
    msg.altitude = 0.8506472361502773;
    msg.roll = 56747U;
    msg.pitch = 15288U;
    msg.yaw = 19850U;
    msg.speed = 31090;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.20249477836795593);
    msg.setSource(37725U);
    msg.setSourceEntity(109U);
    msg.setDestination(15543U);
    msg.setDestinationEntity(204U);
    msg.altitude = 0.34700209840295293;
    msg.width = 0.5796668921790904;
    msg.length = 0.7371762355699231;
    msg.bearing = 0.40322818086850276;
    msg.pxl = -5792;
    msg.encoding = 36U;
    const signed char tmp_msg_0[] = {24, -112, 1, 11, -63, -103, 58, 89, 9, -21, -100, -8, 76, 36, -65, -36, 117, 51, -48, 64, -35, -55, 8, -83, -99, 10, 53, 79, -47, 48, -96, 62, 114, 115, -108, 51, -93, -61, 46, -112, 78, 21, 116, -67, -89, -51, 9, 10, 9, -115, 2, -82, -112, -63, -56, -39, 91, 96, 79, -32, -102, -81, -50, -44, 7, -70, -2, -121, 21, 45, -111, 59, -4, -97, -75, 98, -38, 10, 87, 117, -13, 11, 3, -2, 15, -94, 53, 14, 39, -8, -62, 34, 118, -91, -124, 88, 81, -91, -58, 125, -103, 18, -86, -123, 112, -17, -44, 106, -83, -29, -112, 0, -82, -12, 65, 92, 82, -42, 79, 78, 53, -85, -37, 64, 1, -54, 101, 107, -77, 57, -124, -21, -34, -128, -96, 28, -21, 94, 81, -115, 16, 73, -4, 73, -112, 63, -100, 79, 32, -111, -96, -68, -100, -10, 90, 77, -57, 29, 6, -10, 89, 10, 34, 109, -65, -41, 67, 73, 114, 101, -53, -37, -43};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.6791725224770213);
    msg.setSource(48751U);
    msg.setSourceEntity(128U);
    msg.setDestination(48041U);
    msg.setDestinationEntity(33U);
    msg.altitude = 0.0725468235688751;
    msg.width = 0.982424090832801;
    msg.length = 0.4392373186207559;
    msg.bearing = 0.08051400028208389;
    msg.pxl = 21787;
    msg.encoding = 156U;
    const signed char tmp_msg_0[] = {-8, 24, 20, 5, -112, -95, -124, 62, 92, -21, -55, -83, 71, 122, 27, -114, 90, -21, 82, 69, -12, -70, 18, -60, -111, 98, 49, 101, -57, -81, 31, -110, -19, 119, -1, -36, -126, 42, -38, 83, 112, -17, 91, 86, 29, -110, 13, -48, 96, -5, 32, -55, -54, -54, -73, -43, -26, -55, -4, -55, -92, -121, -106, 81, -68, 64, 111, -126, -75, -42, -55, 33, 67, 74, -92, -92, -108, -106, -119, 39, 94, 38, 3, 71, -33, -78, 84, 58, -103, -14, 111, -6, -10, -36, 51, -34, -74, 38, 55, -83, -117, 68, -84, -98, -109, -117, -93, -112, -62, 105, 108, 30, -118, 23, 113, 6, -41, -8, -43, 47, 9, -29, -56, -66, 51, -123, -35, 92, 126, -105, 85, -12, -123, 124, -16, -90, 17, 75, 61, 47, 105, 75, 116, -11, 19, -19, -21, 120, -94, 41, -2, 38, 99, -24, 45, -55, 3, 5, -31, -95, 76, 89, -106, -108, -113, 110, -124, -91, 85, -15, 112, 82, 70, 117, -43, -30, -17, -18, -43, -14, 48, -3, -101, -68, -63, 84, -40, -12, -23, 98, 120, 61, -83, 80, -60, 74, 6, -59, -68, -16, 126, 28, -16, -86, 18, -76, -93, -29, 27, 104, 113, 61, 41, -19, -57, -76, -103, -47, 92, -28, -116};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.010603896357611498);
    msg.setSource(48092U);
    msg.setSourceEntity(44U);
    msg.setDestination(15432U);
    msg.setDestinationEntity(150U);
    msg.altitude = 0.6571009019450459;
    msg.width = 0.4597538411658201;
    msg.length = 0.8000701875373782;
    msg.bearing = 0.48848917566589267;
    msg.pxl = 13387;
    msg.encoding = 59U;
    const signed char tmp_msg_0[] = {-81, -95, 7, 42, 99, -113, -75, 4, -18, -65, -32, 113, -94, -127, -19, -71, -121, -127, -122, -87, 98, -99, 116, -72, 20, -91, 108, -107, 17, 47, -65, -58, 109, -5, 76, -53, 89, 14, -62, 103, -96, -92, 93, -95, 111, 112, 20, -90, 86, -11, -79, -52, 16, 110, 3, 123, -123, -101, -101, -104, 116, 62, -96, 114, -1, 125, -21, -90, 71, 65, -31, 112, -77, -118, -13, 79, 89, 81, 77, 3, 20, -58, 62, 43, -48, -78, -80, 104, 67, 122, -94, -16, -16, -25, 79, 77, 24, -29, 50, -96, 42, -17, -124, -102, 80, 95, -34, 52};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.8814254836867548);
    msg.setSource(54675U);
    msg.setSourceEntity(124U);
    msg.setDestination(20779U);
    msg.setDestinationEntity(0U);
    msg.text.assign("WHVBLUFTKXICQVQIEVPUFHJTPQOYLNHUNNREYELMZSXSPMPIBJQSVVKWJKJMHECHQZKFNHFENGMXEZSMDORPMOWWJWSZR");
    msg.type = 248U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.7546609803964038);
    msg.setSource(7494U);
    msg.setSourceEntity(195U);
    msg.setDestination(54964U);
    msg.setDestinationEntity(154U);
    msg.text.assign("CJOHRMCEGWSDKYOFRIJBUVYVPEUZJKZKMMYOGAKMTTSXSXNLSIPWBAKKKNLRPFJILWCQKPBZQQOAHZSUWVTEVVXPLWCHASCPRKZUEHQNZXLPDJHAGXVBMIGRXATHRMVRUPJNSTBXIEGQFSDZCGOFKI");
    msg.type = 104U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.6021853572847982);
    msg.setSource(42898U);
    msg.setSourceEntity(217U);
    msg.setDestination(57917U);
    msg.setDestinationEntity(132U);
    msg.text.assign("ATNCNTSZDCWGVQLUCMDNSBSWEYKSMSIQKKFUMURQFMQCOKJAUTMIXZAZXZHFURKWREXICJJDFFWJTCAPEVXIQZZWZMOGLXJUITRVPCIATYNVULKHWCOJKRSOOVOHDFUWZEMXEQPGMRSZVSYLPKNKVBWBBACVBPNMANBGGBQRVGPXYYASDYOTNOJGEBLJAAQEDOXOTGTPEKIDQEPGJHTXNWRYNIHVLBGPDLHYYRMFLCEHXIHFIZDLFFB");
    msg.type = 151U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.4486727257191655);
    msg.setSource(42375U);
    msg.setSourceEntity(22U);
    msg.setDestination(7505U);
    msg.setDestinationEntity(210U);
    msg.parameter = 227U;
    msg.numsamples = 181U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 12156U;
    tmp_msg_0.avg = 0.7145606212067857;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.25462103303672856;
    msg.lon = 0.2894556477868272;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.6199978073545817);
    msg.setSource(4430U);
    msg.setSourceEntity(196U);
    msg.setDestination(36082U);
    msg.setDestinationEntity(84U);
    msg.parameter = 60U;
    msg.numsamples = 25U;
    msg.lat = 0.3578308988490565;
    msg.lon = 0.8695650187618569;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.5323403095385586);
    msg.setSource(63105U);
    msg.setSourceEntity(191U);
    msg.setDestination(48918U);
    msg.setDestinationEntity(9U);
    msg.parameter = 242U;
    msg.numsamples = 119U;
    IMC::ProfileSample tmp_msg_0;
    tmp_msg_0.depth = 23329U;
    tmp_msg_0.avg = 0.40569872279430474;
    msg.samples.push_back(tmp_msg_0);
    msg.lat = 0.46771345943646736;
    msg.lon = 0.18857721448958298;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.8481673657572157);
    msg.setSource(12833U);
    msg.setSourceEntity(32U);
    msg.setDestination(47431U);
    msg.setDestinationEntity(48U);
    msg.depth = 53584U;
    msg.avg = 0.4072456529473705;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.4883806250895243);
    msg.setSource(58139U);
    msg.setSourceEntity(116U);
    msg.setDestination(11864U);
    msg.setDestinationEntity(245U);
    msg.depth = 51001U;
    msg.avg = 0.4623129197798721;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.45964806026071103);
    msg.setSource(37230U);
    msg.setSourceEntity(175U);
    msg.setDestination(42015U);
    msg.setDestinationEntity(210U);
    msg.depth = 47650U;
    msg.avg = 0.19311819972912847;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.2507811375124497);
    msg.setSource(57097U);
    msg.setSourceEntity(127U);
    msg.setDestination(47842U);
    msg.setDestinationEntity(72U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.280429400512739);
    msg.setSource(27887U);
    msg.setSourceEntity(177U);
    msg.setDestination(63247U);
    msg.setDestinationEntity(73U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.8407001336296821);
    msg.setSource(6715U);
    msg.setSourceEntity(251U);
    msg.setDestination(8922U);
    msg.setDestinationEntity(24U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.9015048172130424);
    msg.setSource(48759U);
    msg.setSourceEntity(230U);
    msg.setDestination(25414U);
    msg.setDestinationEntity(168U);
    msg.sys_name.assign("COOLXLGQNNVDMSYANWTOVHZQWBLEVUFLYEDZTTUGGMYJENIATKOIVNFHZKRFQJTKQCSZVCFSOZVQKPEEEBWHTMCYSZVGLHFRQRWPJUHRNXYABNACIYSXVSZGWEXZSJJYLBNARJDCWRMYDXPTKPOGAIOWDBDRYUODAZBDJKCQPPGQLPQP");
    msg.sys_type = 157U;
    msg.owner = 59433U;
    msg.lat = 0.7958477830735124;
    msg.lon = 0.7860135754759259;
    msg.height = 0.4687890142300307;
    msg.services.assign("IYPMBAIALWLZIUQZBEJICENNRJIWVGAPWFKDJZXFOJOUOLUGFEVMVMLLAGQGMWSFVQIBEMZBAMTYJXHXLIRTNWQFRNDDCGAZOEHNMVGAWEOQXDIGYSIKOHBPGKYRTFNWKLPYZKDJVMSDWYSNXXKCSXFUKOTLCFCKZRZDSXROSUSVQBWVXCQQBPESMEUVRTBRLW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.12430399599520692);
    msg.setSource(51889U);
    msg.setSourceEntity(251U);
    msg.setDestination(26234U);
    msg.setDestinationEntity(235U);
    msg.sys_name.assign("EDAAMTXYUHKBSJPGTOSFQRVHJFKYOOCZSAMUNTWHBDSVKBMJMQHPIEFJPLCKERRSBANFFZHXDPEICQLBGONIEJTSEUUUODVGMAKGCLRALYDPKCVATGECGCLVMWLQAELHBXOWFFJHTNWFNETUPYEXRDRQZWJHZOICQIYXJWZBLSGKBQFLZAHTPMUHNTROIOZA");
    msg.sys_type = 27U;
    msg.owner = 29886U;
    msg.lat = 0.9258718964109943;
    msg.lon = 0.6382301626293563;
    msg.height = 0.2353272224362013;
    msg.services.assign("NZKPWJLJQEYGUNXDODGFEHBMTDOYAQRKGSQRWCUSKEBGUSHWPLMGSTOHTRHJQPMLCEZJEFHBDSELXTYUANIUVUJZMVXDWQPPCYVGNBU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.2627485839311);
    msg.setSource(35186U);
    msg.setSourceEntity(108U);
    msg.setDestination(40125U);
    msg.setDestinationEntity(198U);
    msg.sys_name.assign("WOYNNNWEEXCXHUSSAPXCVIKJAHIINLWYPGIUJLXSTLFOWMSSDDCRGQUCKFSJOTCZTOWLQSRYZLFCBVUQXTTHPYIZKKQOXOESBDADRXZYLRBPMJMIDHNMAZGNJKLOFZDZDEOFYNBTUBVUVHGAP");
    msg.sys_type = 165U;
    msg.owner = 23420U;
    msg.lat = 0.3330587952630826;
    msg.lon = 0.6281851409436099;
    msg.height = 0.2981246632357457;
    msg.services.assign("TCJDSOZQLXWDSTPNMNVWYOERYZAKGJNMBKXBEQKWTAJWRSIUSANGFIZBNHPBNLRJMQGDXEQJVROPYFKTAXXPLIHUTCLQGHPLQRZNIESIKKZHAHYTEAMFHHKRUVOROXTNYDYGV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.14273935400747184);
    msg.setSource(2258U);
    msg.setSourceEntity(85U);
    msg.setDestination(62332U);
    msg.setDestinationEntity(49U);
    msg.service.assign("NGEIUWBZLBGPPHUSCYCDRVRDRSEVKMYHZDTLNCQZWOWTAJKXWFIKNCZTOISOCGXEGDSJYVQOILVVQWFYTAJTJPYKVRVTOQTPLAOOHFOOCXHKEVADFDBFPZCUBSXWCSABSGYZTFPGQDEGDKXMMLZYJZVSIUKPXJJUGNWDHQUNBEELJIJI");
    msg.service_type = 221U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.8050803575086217);
    msg.setSource(16897U);
    msg.setSourceEntity(114U);
    msg.setDestination(37556U);
    msg.setDestinationEntity(137U);
    msg.service.assign("PPUQWTRXVPRFZJAYGSCCYMEPQUOMZDLBLSRDNXOMRIXLEOTIJAHBARSTGRXGKNYIBAGDFAIPTJRXUNLUJDEDAAYJEDORTPPHFICUSBNMURMGKUXYVPJBSKEANMBJSBDWVMWVZGLOHTWVFUUCHASGBAILWJOWWOQUFKFEKLTZZWHLEWQQGFXYCHMDQNMBVINCKYHZNPIKSNSCGQRZQIZXCQVLQHLOY");
    msg.service_type = 67U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.22355453445211038);
    msg.setSource(12860U);
    msg.setSourceEntity(246U);
    msg.setDestination(14388U);
    msg.setDestinationEntity(194U);
    msg.service.assign("YSNWLDKCFUQRVPHEPRNHLIIXGTFSVRDSTZQAPYDCWAXOXIFQLMUTAXETMUZICVYNWFNMOJEFOAWVONWBQVNAQHCCNBIRUFVZZWLTLWTCJ");
    msg.service_type = 136U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.2998540291461891);
    msg.setSource(15792U);
    msg.setSourceEntity(65U);
    msg.setDestination(30310U);
    msg.setDestinationEntity(42U);
    msg.value = 0.2656086026666805;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.49952756487705374);
    msg.setSource(4070U);
    msg.setSourceEntity(66U);
    msg.setDestination(42430U);
    msg.setDestinationEntity(50U);
    msg.value = 0.22365579824929738;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.23967064312761954);
    msg.setSource(7392U);
    msg.setSourceEntity(204U);
    msg.setDestination(15944U);
    msg.setDestinationEntity(92U);
    msg.value = 0.16306318850233836;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.25800979029858784);
    msg.setSource(56379U);
    msg.setSourceEntity(96U);
    msg.setDestination(60227U);
    msg.setDestinationEntity(254U);
    msg.value = 0.981193153456509;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.2923453095020405);
    msg.setSource(40953U);
    msg.setSourceEntity(118U);
    msg.setDestination(62915U);
    msg.setDestinationEntity(154U);
    msg.value = 0.09910755888102096;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.6899536334840807);
    msg.setSource(61375U);
    msg.setSourceEntity(155U);
    msg.setDestination(36887U);
    msg.setDestinationEntity(113U);
    msg.value = 0.3155587883299884;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.8969334400092344);
    msg.setSource(9579U);
    msg.setSourceEntity(211U);
    msg.setDestination(36535U);
    msg.setDestinationEntity(157U);
    msg.value = 0.30668837476690003;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.006035940187317901);
    msg.setSource(39808U);
    msg.setSourceEntity(230U);
    msg.setDestination(65281U);
    msg.setDestinationEntity(21U);
    msg.value = 0.615942551296313;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.705452225759271);
    msg.setSource(17953U);
    msg.setSourceEntity(74U);
    msg.setDestination(58087U);
    msg.setDestinationEntity(80U);
    msg.value = 0.10453968744089281;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.7426600067277627);
    msg.setSource(44U);
    msg.setSourceEntity(57U);
    msg.setDestination(39993U);
    msg.setDestinationEntity(184U);
    msg.number.assign("ISVWBBXTGPAXGOTIIIQIWJXLQYCSVNGZWKTXMTOYOAMNGB");
    msg.timeout = 5720U;
    msg.contents.assign("VLCPIAOBDKEHLNKWLSARQNTYYMNXOCOXOHZSNZESOLIIBQLNPKRGFEFWI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.6158301931364729);
    msg.setSource(41619U);
    msg.setSourceEntity(86U);
    msg.setDestination(44037U);
    msg.setDestinationEntity(148U);
    msg.number.assign("HSBYLNTKSUGRDBUQGEQFUSKLYTXPEDRYPEZYWAZYLUPMEEOTCUKFDDBOXQXPEQIWAEPBEOVNAYAQOXXIIMPSHKDQLIKBJLUWXZGTGKVLGNHSKOLIZUHWMVPUJFXFHIFCVMSFGTRUYVWZAGLNMMRTKRWZHNTHXJCBAHONTCPRZXWMMORPVOJADWAGLWCFTJEYJVVJYTCDFHUPJCNBMQWOBNKSDERJSBVHBARQYVSQSGZFNQXJIZNRCK");
    msg.timeout = 52554U;
    msg.contents.assign("QURLKTUTMNVMXMXWPREWLQUFARDXQOQIUIPDYMSWDJTXZDSTQUCFWBOHCCGGQWNVKPIRPANONCRAJFQXMOKSGMVJCAYKVJBCPGNNBUGQEZAYEBYTDFTWNBEGCREHUIMOXZVSDHHQSGHRPLZETPTDLGIIGBTJONBRSXEYMIOYUJOFOYPXVELKZHISVJZCLZKYQIWACDZELC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.17171926719421804);
    msg.setSource(30445U);
    msg.setSourceEntity(22U);
    msg.setDestination(48169U);
    msg.setDestinationEntity(34U);
    msg.number.assign("KCXUXXFCFYQBHISQKCJBWYUAVQUENDAPEUEAROMDWNDNMWBWUJLIJVYWVPGBWHXORVDJHJSMZBYGMNGAOARGVZDLDZPBBOFUPRTVGRSERKTUHNSHXIMYOTFI");
    msg.timeout = 31833U;
    msg.contents.assign("QTFNDJTOYUNKOOWSPXLOSIWJMDKPONKBGXKRNGJSPQJCYHSJKKDZCCQHFFMMICUTVFMTLOZSQSRHRFKUBHPQWCDDLTSNXTVREBGNSVXHLUOTLWUDJAJVRUGTKLABLOLFJRHIBWVNKGNZAMPICYGQYSMMREYFAAGIPBTQEVYBXZDDCBEVDVJKZBBWEMIIRXOHWAQZWFUILSGAWHQNAECMFAYCPDHRPZUFM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.43087419419956663);
    msg.setSource(35091U);
    msg.setSourceEntity(200U);
    msg.setDestination(46220U);
    msg.setDestinationEntity(72U);
    msg.seq = 2742755300U;
    msg.destination.assign("YLXEYYKADTCNBPDYAGODUQZAWTWLCGQWWEUWFIOYPDFSTPIVEINFEUALHTKXYLZEMGNKJFBGQYMQOPFKRDRS");
    msg.timeout = 55198U;
    const signed char tmp_msg_0[] = {-53, -2, -107, 113, -91, 81, 12, 18, -52, 64, -91, -36, 87, 73, 10, 33, 109, 123, -60, 109, 89, 114, -56, -7, 81, -65, 9, -100, -36, 26, -95, -111, 93, -128, 126, -5, -29, -105, -9, 124, -81, 30, -12, -114, -82, 93, -70, 5, 115, 23, 98, -59, -25, 88, 121, 98, -95, -60, -4, 66, 110, -75, 101, -17, 73, -28, -41, 96, 40, 101, 73, -54, -112, -116, 71, -52, 121, -52, 59, -6, -41, -48, 14, 87, 93, 67, 92, -16, 79, -85, -59, -77, -110, -103, -18, -97, 27, -42, -45, 59, 123, -99, -77, -31, 11, -24, -57, 36, 24, 40, -109, -35, -127, 100, 78, -123, -3, -107, 42, -1, 91, 116, 68, -4, 6, -124, 117, -23, 64, -61, 33, 79, 68, -70, -104, -13, 37, 18, -97, -83, -58, 29, -98, -75, -19, -29, -117, 101, -87, 52, -74, 121, -28, 25, -60, 10, -28, -33, -38, -28, -127, -118, -18, 108, 39, 124, 22, -125, 74, -73, -72, 110, -108, 58, -118, -15, -11, 6, -113, -41, 77, 119, -27, 79, -122, 39, 6, 5, 52, 67, 32, -40, 68, 89, -107, -113, -72, 4, 91, 49, 114, -51, -50, -95, -53, -10, 74, 118, 27, -77, 125, -79, 10, 0, -3, -57};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.011898783785236011);
    msg.setSource(39962U);
    msg.setSourceEntity(210U);
    msg.setDestination(43268U);
    msg.setDestinationEntity(17U);
    msg.seq = 4049712425U;
    msg.destination.assign("LIAHRRFSVFGPWYHCZYXBVPGCAAHXEOCTXVWDATNFSUXMPQYNT");
    msg.timeout = 36807U;
    const signed char tmp_msg_0[] = {98, 5, -127, -42, 3, 116, -13, -47, -49, 57, -36, 79, -84, -15, -60, 44, -102, 20, 3, 42, -41, -30, -60, 52, 24, -109, 30, -78, -20, 66, -33, -87, -122, -104, -1, 126, -94, -42, -64, 62, -113, -44, 83, -96, 33, -78, 123, 25, 24, 122, 87, 111, -84, -106, 40, 108, -52, 56, -110, 112, 59, -7, -7, -49, 13, 95, 58, 105, 45, 47, 0, 46, 29, 76, -36, -106, 99, 121, 110, -28, 66, -63, -76, 28, 96, -127, -97, 56, -68, 91, 33, -92, 38, 122, -123, -114, 112, -65, 50, 20, -124, -41, 23, -9, 3, -56, 125, -44, 52, 47, 0, 43, -66, -102, -86, 39, -54, 126, 108, 88, 124, 46, 3, -65, -6, 69, -82, 96, -48, 50, -90, -25, -47, -97, 3, 69, -5, 28, -55, -93, 115, 66, -93, 112, 72, 125, 6, 60, -73, -35, 31, -78, -101, 36, 115, 66, -76, 42, 33, -94, -26, -55, -9, 9, -100, 36, 23, 37, -9, 41, 113, -47, -100, 47, -51, -41, -68, 71, -15, -86, -8, -33, -81, -32, 34, 126, -93, -115, -112, -122, 51, -58, 34, 83, 109, -86, -121, -57, -31, 120, -42, -12, -73, -94, -39, -123, 12, 62, -11, -32, 12, 18, -61, -4, -87, -126, -35, -37, -107, -1, 25, -106, 30, 94, 72, 110, 125, -29, -94, 114, 60, 120, 31, 52, -95, 125, 115, 106, -54};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.645291051253933);
    msg.setSource(3667U);
    msg.setSourceEntity(252U);
    msg.setDestination(10236U);
    msg.setDestinationEntity(181U);
    msg.seq = 4164416630U;
    msg.destination.assign("TSZHTPOUKQFNCTRLHQMSVTKWFWWZRATJEYVOIEZCZQPIEZSWEAJYCJYZRJIJQBOCKYPBMVUODWAANKFOANBCIBCRXUCWSKYGDGFYGRJXP");
    msg.timeout = 33203U;
    const signed char tmp_msg_0[] = {112, 17, 126, -29, 114, -67, -64, 28, 63, 14, 36, 36, 70, -16, -20, 121, 19, 55, 77, -20, -1, -117, 122, -56, 15, -78, -94, -29, 47, -16, 79, -53, 82, 104, 90, -20, 54, 110, -70, -53, 109, 109, 92, -54, 72, 33, 64, -49, 88, -22, 45, 124, 77, -60, 120, -12, 68, -63, -13, 86, 11, -76, -96, 27, 114, -121, 99, 104, 21, 75, 81, -68, 75, 69, 97, -80, 74, -113, 15, -77, -7, -120, 36, 84, -85, -105, 116, 59, 68, 103, -6, 15, 19, 53, -51, -87, 30, -83, 54, -84, 42, 40, -100, -85, -8, 61, 126, 109, -6, 57, 64, 48, -76, 2, 70, -77, -36, -15, -77, 8, 92, 69, 74, 57, -72, 71, 4, -128, 118, -107, -54, -80, 16, 66, 22, -32, 58, -46, 111, 82, 29, -68, 81, 20, 110, 112, -126, 83, -98, -23, 45, 38, -118, -65, -41, 94, -42, 93, 34, 63, 112, 25, 98, 95, 70, 92, 110, -22, -75, 80, 40, -123, -118, 1, -5, 86, 115, -117, 88, 51, 91, 107, -47, -15, -56, 32, 126, 13, 107, 52, -84, 52, -10, -41, -10, -97, -7, 22, -124, 113, 89, -110, -40, -8, 18, 109, -36, -15, 80, 68, 80, 68, -83, -103, -103, 57, -20, 60, -121, 17, 31, -39, 62, 12, 52, 12, 78};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.27650389167332945);
    msg.setSource(32959U);
    msg.setSourceEntity(131U);
    msg.setDestination(58026U);
    msg.setDestinationEntity(32U);
    msg.source.assign("FCQTHGICZDBFUHCNIFABCIXTJBUNZXPCDLEPVGPGKZTTQUVZSFMEKJZMVAOKLWLABIENURWDZLJOCKYTCLGIIENAISUPXHIAVOOWEQUDJDKOOQRSRBYPGNMZEXLFJD");
    const signed char tmp_msg_0[] = {73, 30, 46, 74, 20, -102, -11, -117, -25, -88, 106, -40, 37, 62, -77, 39, 59, 55, 30, 42, -73, 107, -94, 78, -96, 73, 56, -72, -65, 16, 119, 72, 7, 55, -31, -5, 92, 59, 11, 4, 86, -5, -48, 22, -84, -116, -71, 94, 82, -66, 114, -80, 54, -91, 26, -123, -116, 71, -72, -96, 50, 53, -127, -41, -104, 69, -69, 116, -69, -127, 45, 21, 13, -71, -8, -79, 121, 35, -114, -105, -61, 74, 4, -17, -116, 17, -120, 46, -88, -119, -5, 15, -127, 63, -13, -127, -126, 31, -19, -77, 73, 45, 94, -88, -62, -75, -2, -5, -6, -101, 67, 107, -7, -102, 113, -13, -2, -17, -112, 109, -60, -71, -78};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.5346983260808462);
    msg.setSource(47231U);
    msg.setSourceEntity(147U);
    msg.setDestination(25747U);
    msg.setDestinationEntity(68U);
    msg.source.assign("CVXUFOSCJQTGEUMVFVVOHIVJPUCNPSGAWJZELIKHWHJNMRTLZNXBXINCFTLZKSENGRYZMMOQB");
    const signed char tmp_msg_0[] = {116, 38, -109, 13, 81, 108, 38, 34, 118, 109, 119, -29, -17, -43, -16, -105, 10, 58, 80, 91, -123, 84, 49, 40, 6, -80, -68, -73, 62, 97, 35, -51, 41, -12, -69, -20, 101, 74, -48, 105, 69, 111, -114, 113, 121, 101, -54, 89, 120, -120, -64, -63, -61, 96, -74, 29, 44, 85, -109};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.09329860786740163);
    msg.setSource(57453U);
    msg.setSourceEntity(186U);
    msg.setDestination(40822U);
    msg.setDestinationEntity(171U);
    msg.source.assign("PTVABXFEJNFTBOEFGDMEUZNMNFXCQBLCXVUKKADSPISHLDIOMQYAKJZYDACTRGBKVPXOCCTSRRHVCSYYVZORHPTUM");
    const signed char tmp_msg_0[] = {-90, -55, 47, 51, 78, -110, 29, -105, -7, 17, 98, 84, 92, 38, -15, -26, 47, -62, 24, 46, 8, -27, -4, 76, -11, 34, 62, 36, -51, -56, -26, 93, -90, 75, -82, 26, -12, 83, -58, -30, 117, 78, 66, -36, -31, 60, -40, 16};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.7961331219759484);
    msg.setSource(24917U);
    msg.setSourceEntity(170U);
    msg.setDestination(2626U);
    msg.setDestinationEntity(46U);
    msg.seq = 1865862251U;
    msg.state = 84U;
    msg.error.assign("LVWYDNBPJRGXFWDYAUZXUYZVGHNZWFWPSYEMTEBODFEOWFELFTCNXHSCVDYDNLPJXSRQHOYIIVTVZQTSATMJKDZARQB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.8663397203760222);
    msg.setSource(58957U);
    msg.setSourceEntity(138U);
    msg.setDestination(11485U);
    msg.setDestinationEntity(227U);
    msg.seq = 2069439812U;
    msg.state = 3U;
    msg.error.assign("WYXYCOIGOSADSOMLVFWTNCJDJEHEWKZHFUNDZYXQXCZWFPLHQLKNKHTHISGGHWDJMHEXIIGTARLJDLQTLGVGZRAGEQPIKRZMJNBJZXSZTCTSIAURYOPECYB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.4999012358839331);
    msg.setSource(27978U);
    msg.setSourceEntity(26U);
    msg.setDestination(13548U);
    msg.setDestinationEntity(86U);
    msg.seq = 429812693U;
    msg.state = 216U;
    msg.error.assign("ONJYRNICMJZNHSKILXBAZUGRXYJLCSYYUHUWYLFAGSFYPDUDTTKQBHQJXCEJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.4540867531857724);
    msg.setSource(50485U);
    msg.setSourceEntity(110U);
    msg.setDestination(44431U);
    msg.setDestinationEntity(110U);
    msg.origin.assign("FAWLBAQKMYZVJXWCNNNLUXQETYSZWDXCFAJYEPNOXJJBEVUVTLHOZYMEOPOQIGDWTBHVCTIYMUNRIMZPGUDCOXSWQELBTNWZYYMIAGVSTSRHJGEBDHFPRIDXTDZIPGFUBFZQLBXKPITANCCSGQFFBHHRJPCKWZWHONVSKAQNVSILMXKWAEKJMAUREAESZGLOZ");
    msg.text.assign("CLYQUGDYJKVGONTMARGBERJXESTCIVRGWDRVBKEPWXFGDRBWEMEWBLIZBSATSVPXRTVILQDTQRHNUKCBTHOKKMLRIURZLFUPXNNPLJBGDQOSHMHDPQNAYNKGCSVKOYEFFFMMJHPAXFYFXHAIUPVOTYMZJOHGEYXVLLBXQYCOGASDHZKLETXNFDZSTJWBOQNYZUWUVMOVAACQXIWISZUHWPCEZRAFSMNUHBDNGKZLDCJPSWJWIYJQCATIMQF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.7881883978314883);
    msg.setSource(55870U);
    msg.setSourceEntity(93U);
    msg.setDestination(23971U);
    msg.setDestinationEntity(178U);
    msg.origin.assign("IHMNTPLYVAPLDOWQCGJLOYNVNNBHWZAOYVMAXDJSYEXYOUPJCPBAXAOMACTFUMBFZGBWWIRXUZEYODWKCAEULEJLDIULSIDMLZDRVNHJKKCBRUNRMEVJZGNXHLHTQNIGFHWPWTIBXBOEFXORWPMIYGTVQPNTILIJQSFWFSVZQGPBTRGEFHRZTYX");
    msg.text.assign("VHUMKVQOSKDEIILXPWKLMPSFLPBBJECGNVAFKSYUIDCNFEXPRUKQOFIMZYFYVVTXFMAUGWNJBZCQGTSIAFRBRQL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.4743111333661899);
    msg.setSource(18504U);
    msg.setSourceEntity(198U);
    msg.setDestination(29191U);
    msg.setDestinationEntity(31U);
    msg.origin.assign("XHQLQUTQFDPFEUCCVCPOEHRROAOVTVZYDFEGRILQQZIHPLEYOBETGPLYDJSWXPDFWXAYRAOKKRFRDCICIMVEMJZDLNQFCFDYZUPIMGUXBIWTXLNGLDQAXCGHSAGVNNGHSLXMAZPMXOESTOSMJKNVZXHJZUDZOWHTMJTWUGTKKWQZKSFOIBWJJIUPBBMABYJNFQXJWVBLZNVHDEMAHYMKPSNY");
    msg.text.assign("TKPXMOKRIAUGPQYZMGLSWPIOYEPHVPTETOAPOEODDITCFUISRROAWYKNJOUGFJDCVIUNLXQKHNHUMZYZZCILHAXNKFZBZGWGBCABRDQSQAQMZCDEEXBOKFDCNWUIJBHSRLUDDBBWJIITBZJPFWHXUSVRSQHJRYPKWWHVYVGEBTELRCTFAUQXLIMKBQKJNUNMNGYESMCOSVVGLSNMFCMKNDJFAVTRJFQTXZVTGWYPQOXZGAVH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.12233707155021356);
    msg.setSource(38891U);
    msg.setSourceEntity(168U);
    msg.setDestination(50460U);
    msg.setDestinationEntity(104U);
    msg.origin.assign("UNLHMCYCPXIKDXGNDTDZJZRWGOVUILYYLSXSFIAEMWWKBMVFERPQQODOAOWRUGWDTYWVQARYTINXGCKJJFVICEKNAFURJCHJBNTIZNZHHXQRPDLLFRMHSSZQFXTTKSJEXWTHBDLPVXECTCJKKGUYSQVGZISHMAGAEQBPQOILVEDPQFVFOOOBBCHMNPUY");
    msg.htime = 0.667258008437619;
    msg.lat = 0.7275739851242325;
    msg.lon = 0.028855642629680323;
    const signed char tmp_msg_0[] = {98, -48, -122, -104, -69, -21, -24, 107, -91, 36, 1, 0, 3, -128, -63, 36, 82, -33, 77, 65, 23, 97, -105, -102, 116, 94, -47, -127, -118, 10, -109, 73, 26, -56, 43, 100, -53, -32, 44, -101, 126, -110, 64, -49, -90, -92, 84, -38, -94, 9, -109, -100, 112, 56, -52, 64, 58, 106, -59, 34, -68, -34, -91, -15, -30, -124, 51, 31, 76, -113, 116, 89, 28, 45, -40, 117, 48, -59, -44, 123, -44, 86, -19, 4, 76, -119, 21, -36, -64, -91, 126, 102, -10, -68, 16, 106, -8, 20, -102, 12, 65, 58, -94, 14, 24, 80, 51, 115, -118, -112, 15, 32, -10, 33, -38, 41, -30, 52, -93, -82, 52, -27, -92, -124, 75, -30, 59, 117};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.27995113888340484);
    msg.setSource(49169U);
    msg.setSourceEntity(44U);
    msg.setDestination(26183U);
    msg.setDestinationEntity(222U);
    msg.origin.assign("ZWNRDTXCVVVQMSEHKYHAWMPKITYYLBRYRYDEIJZSTUMRPEHHXZOJOTQYAXDJBEQWVWODLXIWFJGYLZXRQMBHLFGAKMIJM");
    msg.htime = 0.6590944036379385;
    msg.lat = 0.14738939116434102;
    msg.lon = 0.46717838848125204;
    const signed char tmp_msg_0[] = {22, -32, -83, -125, -40, 12, -38, -100, 20, 93, 31, 67, 114, -70, 124, -24, 94, 125, 116, -106, 30, 28, 86, -116, 48, -21, 3, -114, -75, -37, -85, 37, 106, -70, 75, -1, -125, -109, -62, -20, -66, -68, 55, -11, -89, 57, -42, -85, -68, 26, 14, -65, -112, 125, -15, 75, -78, 4, 79, 33, -15, -77, 16, -128, 124, 33, 92, 72, -122, 75, 46, -94, -73, -47, 75, 117, 29, -114, -108, 9, 29, -60, 53, -90, -81, -115, 118, -10, -93, -56, 1, 5, 76, 28, 113, 58, -69, 49, -124, 31, -79, 7, 79, -25, 58, -57, 88, 23, 114, 58, 47, 49, 99, 18, -21, 61, -22, 64, 115, 3};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.8199176053854977);
    msg.setSource(11284U);
    msg.setSourceEntity(235U);
    msg.setDestination(34271U);
    msg.setDestinationEntity(63U);
    msg.origin.assign("EDIPRXDVTSYNPFWJAHHBTRWHEMFXHNGMHUCXKIZYZNLVGJOWCRIIDCORECEJBIFRUWIUDJHRKYJECGVTRNHJKQZMZDXRQUSQOHXMASGCXFMZZFFQVNBADJTLKPIFOFSVPBKCMNEVKVUJYLNWGXPSSDUXPDINOCMDRYEZJFGKFEEWWOCLYTYUPYYUDATVGTOLSMRIQLXGBJQGKLUASLIAEAABKVPUNQWSTPBGOHBWQBTVSTQZXMZM");
    msg.htime = 0.027701807526422928;
    msg.lat = 0.7875991654163167;
    msg.lon = 0.3984818792824256;
    const signed char tmp_msg_0[] = {-9, -22, 82, 62, 42, 110, -16, 115, 43, 8, -62, -84, -73, 34, 99, 54, -2, -29, 69};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.3779124599075874);
    msg.setSource(47421U);
    msg.setSourceEntity(224U);
    msg.setDestination(55797U);
    msg.setDestinationEntity(208U);
    msg.req_id = 4132U;
    msg.ttl = 10631U;
    msg.destination.assign("HRJCPVKDRJWERMVSVEP");
    const signed char tmp_msg_0[] = {94, -38, 20, 28, 48, -121, -32, -81, 5, 26, 24, -76, -77, 117, 94};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.6025283228437442);
    msg.setSource(34268U);
    msg.setSourceEntity(112U);
    msg.setDestination(46151U);
    msg.setDestinationEntity(59U);
    msg.req_id = 24323U;
    msg.ttl = 6086U;
    msg.destination.assign("NPLLCBESOSGHUSYYOUDOOPZDNHWICJYHNLUTIIRWHADSAZDKNRSXWPKAWRBGLFWAIHCRBUNCEZMVVAJHXZKTNVQMEZSWQNYLMULFGGFAQZEJFJOOQPNLPXRRBEYKDQSVIIXMCEFJEUSATGQDYKAXULYANPBHDVGMWAOVIOXQNZCMGUWYFWTWPZKVHVTHTDVQKTME");
    const signed char tmp_msg_0[] = {-2, 113, -93, -127, 99, 39, -67, -60, -117, 37, -96, -8, 12, 111, 82, 37, 51, 71, -74, 115, 68, 71, 8, 98, -84, 44, 100, -128, -110, -120, 7, -96, -128, 54, -110, -10, 84, -96, -125, -9, -109, -18, 93, -60, 53, 70, 78, 61, 99, -43, -117, 109, 29, -112, -40, 4, -57, 48, 31, 84, 67, 120, -20, -38, 70, -92, 23, -38, -103, -24, -50, -5, -81, -71, 82, -33, 19, -102, 22, -101, 58, -65, 7, -9, 4, -115, -128, -40, -96, 62, -75, -47, 23, 57, 54, 91, 91, 79, -31, 81, 63, -29, -106, -23, -87, -115, -36, 54, 8, 15, -9, -124, -94, -4, -70, -82, 54, 124, 3, 46, 5, 5, -23, -25, -126, 80, -108, -73, -18, -24, 67, -97, 103, 102, -96, 51, -124, 24, 51, 28, -106, 121, 93, -14, -100, 104, -122, 46, 55, -72, 87, -25, -73, -118, -110, -103, 45, 110, 106, 67, 21, 111, 29, 43, 48, 41, -29, 105, 66, 58, 17, 10, 22, -95, -121, -57, -53, 38};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.6653683632627154);
    msg.setSource(13897U);
    msg.setSourceEntity(136U);
    msg.setDestination(3551U);
    msg.setDestinationEntity(237U);
    msg.req_id = 6647U;
    msg.ttl = 3526U;
    msg.destination.assign("DVMISKYYQCHXMXICHAUANQXTXPHYRIPNXOPSSYMCRXULQJZTCWRFPTODVFITFQESQRVUOADDIKUZAVERONHMTC");
    const signed char tmp_msg_0[] = {-88, 96, -30, 31, 60, 100, -121, -24, -7, -2, 50, 66, 34, -89, 53, 54, -120, 66, 42, 28, -66, -28, 119, -69, 92, 61, 74, 34, 66, 24, -81, 21, 55, 17, 52, 15, 60, -58, -101, 124, -123, 24, 126, -79, -44, -24, 107, -59, -25, -84, 124, -95, -9, -67, -58, -108, 15, 90, 104, 63, -105, -17, 76, -64, 71, -36, -48, 90, 1, 32, 64, -94, -50, 124, 8, -69, -90, 96, -105, 76, 4, 9, -56, 86};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.5465724660943052);
    msg.setSource(12242U);
    msg.setSourceEntity(220U);
    msg.setDestination(6204U);
    msg.setDestinationEntity(202U);
    msg.req_id = 54267U;
    msg.status = 53U;
    msg.text.assign("VYJEALLISGASMYQZVBSTJXMFJVQZZTSJYAOZBNFTOERQVLVLMLHIUIGSHEIMHBFRABQKLYHXVDNJOKRGCOYSSZDKECFLHGKYWGQZOFRAEMBRODKTJINPBWUAPUXUFMFCQAPXILVVIOPACMJCMCOWLJKWCESXGUUZNDPTLWHMC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.3626059125971185);
    msg.setSource(49175U);
    msg.setSourceEntity(86U);
    msg.setDestination(46955U);
    msg.setDestinationEntity(80U);
    msg.req_id = 4649U;
    msg.status = 216U;
    msg.text.assign("TLFCFMADQPOJJUMCEOSPJHCVLNCZZYFTGOYGTKHQURLIKHZERARGLBUFSZCEJKCQQTCKXRBUYFRDDMWYQDSRXFMBQGFZEWAXVUEBZXNWNXLOHIRDDEOBUVPRZZSKEUNSPLDYQBYATRIIFQQHVBTUOUPNDSHKGXWTWIOVDJVSCXSGZMIFBCLYCLYZLLRJNTVPPMWAJAOSEKHJXTNEUEMFPTBWGIXADMWIGOAGYJKWVWX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.8294748877726406);
    msg.setSource(38141U);
    msg.setSourceEntity(174U);
    msg.setDestination(6608U);
    msg.setDestinationEntity(219U);
    msg.req_id = 40286U;
    msg.status = 55U;
    msg.text.assign("BBKTPVUYXBBZCIFYPWZGVWMUUBTUHLRDVMDYNWRKZMAZWRBEOPDPGHQTOKGJHXQUTKPALAFLYCHLISNXTEBEEEWXBAPDYENHSQRRZNEQKQYZOUOCAMOZLRVFUHUVDKIXQCFEJXBXLGQWODFXNCDAAOPSTWSFSN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.5895434442065344);
    msg.setSource(27462U);
    msg.setSourceEntity(146U);
    msg.setDestination(33182U);
    msg.setDestinationEntity(143U);
    msg.group_name.assign("SXGHJKOGWFMQWLXHQUQXTZHFIZBZJCXVTY");
    msg.links = 3091726472U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.9691522789696069);
    msg.setSource(26028U);
    msg.setSourceEntity(50U);
    msg.setDestination(42202U);
    msg.setDestinationEntity(73U);
    msg.group_name.assign("OENMVTYMGSPBDSNDCVUKFRKHAOKVLKWZUJEFHNPLQNPBWHFTKWIFUJGABYJEKNTDLKBRVHJXMUFAMEWXHZGFTZNHYMXRFJTMISIXEOQLDAHXYIFLPXLESHQGXJPPTCFCPVOEYT");
    msg.links = 335603253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.08861462851546964);
    msg.setSource(1752U);
    msg.setSourceEntity(31U);
    msg.setDestination(3670U);
    msg.setDestinationEntity(178U);
    msg.group_name.assign("GHQYSRCLHBQZEJRQGNRJNRXX");
    msg.links = 1841939181U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.29829388230890563);
    msg.setSource(56379U);
    msg.setSourceEntity(132U);
    msg.setDestination(8656U);
    msg.setDestinationEntity(231U);
    msg.groupname.assign("WHTIVVSYJXEJPRYQAAWKCRBRRSGTQOLDACNBGJYNFTLXJLSOAUDUMYKLPBXEFMDIXQBFGFQMMIEMPTNAAJHIPNHEBJDMHAVSKFPFYQWYVDQUCSJQZJRJOUGTZXDCFRLOICGXGRGNWVYYNKKWZEDCVZNFWNCCRBQOBLSSRUTWZBTTMLYBEHDRWYNHKMMENXGIOHLFZJVCAKPP");
    msg.action = 194U;
    msg.grouplist.assign("LVRWTJIMCTHZRCQZTKVCJXQTSOUDWULLIVMOBQLCSLDNCQJSKRTVSWABSEYEJHPGSKVAQUVEFPTCENOYKWTNDOOJFEQIVRVRYMMYNAKQZZQYSDFDGYIMOYJMPLSJWGMNSAXINDWVGUUR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.478302500599442);
    msg.setSource(61986U);
    msg.setSourceEntity(220U);
    msg.setDestination(59531U);
    msg.setDestinationEntity(206U);
    msg.groupname.assign("ZPAUFHRAVVNXKHEWILJPPCYCMREITYXASNVQJRNDLRWWSCEMAQVEETBVPEPMGBHYZFCFDXUBDUHQLWUKIKXCLDSJYZNBLZIQDGGLLDOVZXVVDYYRTZOFFNKWOWNMIRGOBZRUWIHXPHAFDVNQNBIGMKRJXYHFHKTOVANAZJMFPMTCXZNKGCTTYGUUTJCHQUBKBKIMWZMAGCUBISSULCWQYJELOGEOPJ");
    msg.action = 76U;
    msg.grouplist.assign("HIDPKVRCLQRBTSOLM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.11844421007866535);
    msg.setSource(29817U);
    msg.setSourceEntity(168U);
    msg.setDestination(28380U);
    msg.setDestinationEntity(195U);
    msg.groupname.assign("FGVKOVEGOPJCCKEPUDDPQEPLUHUQXMWQPMYTCLHUZTROSCAZQKPNVSACNAAVYLZLRITDJHHAJWHYMZSGZBU");
    msg.action = 65U;
    msg.grouplist.assign("RSPEHCJZVPUNPYFMILUJJGFPSIXMWKGCLKRYKVUYQCFYQDBATTVBNSLOTOKADECFFQZCEJXSMGLWHTNOGVOQNXYPJSWKLBYDVRNZARGUJJFLBLDXQFXJXWHZXIDDUHHAZQJRKVBTLABWOCSMUHWYIGNVFINTWWMSIUEAVZAHPESHRNKTARMBGSQRTDPIEFMDOITSPPCVXEMNNBUOUZTZVLGIWE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.1259095387588327);
    msg.setSource(35433U);
    msg.setSourceEntity(106U);
    msg.setDestination(1632U);
    msg.setDestinationEntity(16U);
    msg.value = 0.23888828647621585;
    msg.sys_src = 13971U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.6621842835591699);
    msg.setSource(43594U);
    msg.setSourceEntity(185U);
    msg.setDestination(38270U);
    msg.setDestinationEntity(204U);
    msg.value = 0.716823754585877;
    msg.sys_src = 47094U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.1603833557245845);
    msg.setSource(14545U);
    msg.setSourceEntity(138U);
    msg.setDestination(12377U);
    msg.setDestinationEntity(151U);
    msg.value = 0.7146955769243825;
    msg.sys_src = 28710U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.8299123250187718);
    msg.setSource(45007U);
    msg.setSourceEntity(75U);
    msg.setDestination(45699U);
    msg.setDestinationEntity(181U);
    msg.value = 0.03072644389324053;
    msg.units = 98U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.82106434244621);
    msg.setSource(47914U);
    msg.setSourceEntity(159U);
    msg.setDestination(64409U);
    msg.setDestinationEntity(106U);
    msg.value = 0.16590921978307172;
    msg.units = 27U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.38928661181976065);
    msg.setSource(54559U);
    msg.setSourceEntity(236U);
    msg.setDestination(13464U);
    msg.setDestinationEntity(59U);
    msg.value = 0.3203345785933406;
    msg.units = 69U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.28796180720779385);
    msg.setSource(58106U);
    msg.setSourceEntity(105U);
    msg.setDestination(5371U);
    msg.setDestinationEntity(144U);
    msg.base_lat = 0.17239164406603358;
    msg.base_lon = 0.4124313673828145;
    msg.base_time = 0.45082535605505425;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.1157038265822069);
    msg.setSource(36175U);
    msg.setSourceEntity(92U);
    msg.setDestination(41023U);
    msg.setDestinationEntity(243U);
    msg.base_lat = 0.9274668798918869;
    msg.base_lon = 0.4518547158971903;
    msg.base_time = 0.43849648743222325;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.6437024161633672);
    msg.setSource(17372U);
    msg.setSourceEntity(156U);
    msg.setDestination(39933U);
    msg.setDestinationEntity(11U);
    msg.base_lat = 0.1359303793022103;
    msg.base_lon = 0.39976124161204474;
    msg.base_time = 0.14904152618963873;
    IMC::HistoricSample tmp_msg_0;
    tmp_msg_0.sys_id = 50134U;
    tmp_msg_0.priority = -126;
    tmp_msg_0.x = 31160;
    tmp_msg_0.y = -6817;
    tmp_msg_0.z = -13455;
    tmp_msg_0.t = -22592;
    IMC::AbsoluteWind tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.dir = 0.8743675719798579;
    tmp_tmp_msg_0_0.speed = 0.2017314350469952;
    tmp_msg_0.sample.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.7721854391551758);
    msg.setSource(39818U);
    msg.setSourceEntity(229U);
    msg.setDestination(54449U);
    msg.setDestinationEntity(196U);
    msg.base_lat = 0.8414463905158183;
    msg.base_lon = 0.5273447685352028;
    msg.base_time = 0.273503189585672;
    const signed char tmp_msg_0[] = {121, 97, 124, -89, -78, -2, -30, -39, 110, 32, -61, -77, 116, -58, 120, -117, 80};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.0008748449984089524);
    msg.setSource(47386U);
    msg.setSourceEntity(24U);
    msg.setDestination(2831U);
    msg.setDestinationEntity(236U);
    msg.base_lat = 0.4246690449441146;
    msg.base_lon = 0.16958302672466996;
    msg.base_time = 0.4181528028977133;
    const signed char tmp_msg_0[] = {-51, -82, -110, 76, -37, 26, -117, -27, -58, 25, -48, -49, 38, -40, 66, 17, 87, -101, -100, -59, 108, 72, 84, -40, -61, 59, 16, -107, -99, 55, 20, 56, -78, 3, 58, -83, -126, 103, 36, 111, -1, -122, 83, -62, -37, 63, -87, -47, -24, 61, -43, 118, 2, -70, -72, -97, 57, -8, -113, 53, -96, -66, -111, -2, -103, -8, 113, -44, -73, 47, 107, 39, 34, 7, 9, 6, 105, -94, 62, 76, -67, -82, -50, -35, -71, 104, -32, -117, -98, -47, 9, 115, 57, -109, -127, 38, 97, 96, 65, 48, -113, -4, -40, -46, -42, -41, -116, -122, 91, -126, -68, -103, -30, 50, 105, 78, 105, -50, 109, 43, -102, -92, -111, -45, 55, 82, -92, 88, 112, -120, -74, -36, 18, -10, 106, -109, 36, -35, -87, 40, 36, -81, -29, 20, -18, -89, 87, 78, -92, 114, 27, 70, 20, 19, 52, 54, -128, 47, -62, 86, -120, 68, 22, 23, -30, 63, 1, 58, -110, -79, 107, 55, -54, -25, 63, -23, 90, 22, -13, 64, 108, -29, 126, -21, -118, -9, 11, -108, 45, -92, 70, 30, -98, -126, -17, 68, 40, 23, -56, -104, -34, 32, 86, 90, 36, 100, 55, 110, 97, 105, 16, 67, -78, -90, 61, 67, 68, -22, 7, -54, 7, 73, -101, -79, -111, 55, -112, 38, 60, 16, -21, 2, -128, -23, 18, -43, -27, 25, 11, -99, -37, -9, -3, -24, 36, -93, -62, 14, -55, -72, -124, 112, 34, -79};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.1805147156389042);
    msg.setSource(3098U);
    msg.setSourceEntity(75U);
    msg.setDestination(56469U);
    msg.setDestinationEntity(72U);
    msg.base_lat = 0.32898990527140504;
    msg.base_lon = 0.6263196698041684;
    msg.base_time = 0.3985700196058407;
    const signed char tmp_msg_0[] = {-53, -127, 89, 51, 106, -86, -90, 67, -94, -81, 109, -46, 32, -69, -112, -121, -121, -70, -43, 31, -85, -99, -23, -16, 47, -3, 70, -97, 73, 0, 31, -64, -101, 95, 72, 117, 11, 76, -6, 36, 59, 44, 106, -121, 25, -26, 75, 90, -71, 23, -71, 28, 110, -31, -44, -64, -15, 50, 3, -121, -64, 6, -115, 63, -10, 16, 68, 81, -90, 33, -5, -13, 110, 10, -18, 84, -46, 52, -66, 102, -76, 124, 72, -37, 2, -111, -118, -63, 33, 87, -96, 66, -64, -58, 59, 89, -123, -105, 13, -106, -42, -57, 81, -42, 21, 16, 26, -2, 103, 13, 34, 79, 48, 45, -33, 109, -101};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.4291798471434204);
    msg.setSource(27370U);
    msg.setSourceEntity(69U);
    msg.setDestination(65187U);
    msg.setDestinationEntity(200U);
    msg.sys_id = 56604U;
    msg.priority = 68;
    msg.x = -10332;
    msg.y = 161;
    msg.z = 19182;
    msg.t = -23457;
    IMC::LblEstimate tmp_msg_0;
    IMC::LblBeacon tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.beacon.assign("NEIPFDICIXSJTBSHPBAYNIUJMLQNFYTSCBUQOMRSXAUGAIQTGUVDZCOYSKJIRYMKGVOMZFJQBZPXMVWUTRBVHHZNTQYROLLQVOKJQAMKSCCVASOYFWWYXKHKVMLEGJHXBXWPJQMNGHFZEXWNDCXLDMBKPBIISPKCDWRDPFXPYUOFALAGWNODGIFLNGGKETEUOPZBHEBPTSZUZY");
    tmp_tmp_msg_0_0.lat = 0.7216213954942934;
    tmp_tmp_msg_0_0.lon = 0.9262693999017237;
    tmp_tmp_msg_0_0.depth = 0.06719629865467824;
    tmp_tmp_msg_0_0.query_channel = 108U;
    tmp_tmp_msg_0_0.reply_channel = 47U;
    tmp_tmp_msg_0_0.transponder_delay = 159U;
    tmp_msg_0.beacon.set(tmp_tmp_msg_0_0);
    tmp_msg_0.x = 0.5088575633479366;
    tmp_msg_0.y = 0.93635656793242;
    tmp_msg_0.var_x = 0.9541231255355379;
    tmp_msg_0.var_y = 0.9750329516435818;
    tmp_msg_0.distance = 0.1108881438284608;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.36052609505452726);
    msg.setSource(10135U);
    msg.setSourceEntity(96U);
    msg.setDestination(59645U);
    msg.setDestinationEntity(172U);
    msg.sys_id = 12076U;
    msg.priority = 4;
    msg.x = -23010;
    msg.y = 27039;
    msg.z = -5623;
    msg.t = -10778;
    IMC::Collision tmp_msg_0;
    tmp_msg_0.value = 0.0057045249495484285;
    tmp_msg_0.type = 15U;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.6392558842239582);
    msg.setSource(25149U);
    msg.setSourceEntity(98U);
    msg.setDestination(9860U);
    msg.setDestinationEntity(187U);
    msg.sys_id = 41575U;
    msg.priority = -57;
    msg.x = -30707;
    msg.y = 22699;
    msg.z = 336;
    msg.t = 32224;
    IMC::HistoricTelemetry tmp_msg_0;
    tmp_msg_0.altitude = 0.06479031618688103;
    tmp_msg_0.roll = 5642U;
    tmp_msg_0.pitch = 2575U;
    tmp_msg_0.yaw = 20359U;
    tmp_msg_0.speed = -16117;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.001972528371132709);
    msg.setSource(22295U);
    msg.setSourceEntity(167U);
    msg.setDestination(7273U);
    msg.setDestinationEntity(174U);
    msg.req_id = 52683U;
    msg.type = 247U;
    msg.max_size = 30470U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.5045015948318093;
    tmp_msg_0.base_lon = 0.5003060432870268;
    tmp_msg_0.base_time = 0.9502160376419536;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.35925501354672673);
    msg.setSource(41578U);
    msg.setSourceEntity(241U);
    msg.setDestination(61294U);
    msg.setDestinationEntity(32U);
    msg.req_id = 20926U;
    msg.type = 155U;
    msg.max_size = 56893U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.3338232290319384;
    tmp_msg_0.base_lon = 0.9491971556265945;
    tmp_msg_0.base_time = 0.7843473002286289;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.24127108754226645);
    msg.setSource(35599U);
    msg.setSourceEntity(69U);
    msg.setDestination(23613U);
    msg.setDestinationEntity(28U);
    msg.req_id = 37876U;
    msg.type = 183U;
    msg.max_size = 28480U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.6194809974328418;
    tmp_msg_0.base_lon = 0.8418675902049264;
    tmp_msg_0.base_time = 0.7001926911623766;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.8033825444791599);
    msg.setSource(17478U);
    msg.setSourceEntity(74U);
    msg.setDestination(52397U);
    msg.setDestinationEntity(165U);
    msg.original_source = 42102U;
    msg.destination = 27587U;
    msg.timeout = 0.9395615902221678;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.09385230363958097;
    tmp_msg_0.y = 0.6842861510648424;
    tmp_msg_0.z = 0.29147544911865864;
    tmp_msg_0.t = 0.5085834100063954;
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.3837815385686524);
    msg.setSource(29624U);
    msg.setSourceEntity(118U);
    msg.setDestination(44462U);
    msg.setDestinationEntity(49U);
    msg.original_source = 11862U;
    msg.destination = 41628U;
    msg.timeout = 0.43190605881159694;
    IMC::RemoteActions tmp_msg_0;
    tmp_msg_0.actions.assign("BULJHPFEMAZDUCAQTAINBLJXJGSJFZBYOPAYRXZVXDGTCZAMJYXZYPUHBGWZEFQKFWVPRZDPBWOSGHKHAMIYNRKUQWOFRBKGLDLNZLSRQYTUVCMGGIISDKMAPXTXFNEVDNSVHMISISUKOIIAOOHAJIYCEKNMCTHNUWTAQWCPQXTFEQRESWBDKGFXTEEFMEXZQCRCWTNFJBVCOUOMDKJVPIGNQVVJSRRDYJOLPLEBLKM");
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.15970490977895402);
    msg.setSource(22023U);
    msg.setSourceEntity(145U);
    msg.setDestination(62525U);
    msg.setDestinationEntity(86U);
    msg.original_source = 35756U;
    msg.destination = 4945U;
    msg.timeout = 0.5594550189865088;
    IMC::IridiumReport tmp_msg_0;
    tmp_msg_0.frequency = 1021967108U;
    tmp_msg_0.info.assign("XUCYKTYQADGJNXSMCGPAPTVUGSLVRMXRQQZADYGHJCYSXDNIEDREFSYOKBLEDWANEXEQSOCDQIUMWDCAAHCZFDUNHCONYMHUKZIBJAWPHVGGUPBZZHVYVEFPFVMJRBQCLBQSGLSXZJGWUJTFREGWBJHKJYF");
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.5349646934640101);
    msg.setSource(1936U);
    msg.setSourceEntity(119U);
    msg.setDestination(62515U);
    msg.setDestinationEntity(14U);
    msg.type = 58U;
    msg.comm_interface = 25329U;
    msg.model = 30385U;
    msg.list.assign("NWUDBDZCIGRPTPCOLIEXKELCOGNRGYHJBTVCGNSZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.7194988024075262);
    msg.setSource(5262U);
    msg.setSourceEntity(84U);
    msg.setDestination(37653U);
    msg.setDestinationEntity(239U);
    msg.type = 62U;
    msg.comm_interface = 41966U;
    msg.model = 62798U;
    msg.list.assign("PVYHVFWWCXRCJEEVFTOISGFLXXWRIXYPZKAXBBJDYTPZMCXHJIGMSXLPHFHGAEUETHDJZCJSZWXUOVLLFWWREVDIIEOUJBRAWWSZGRUKKRIZCJUHERAQBTDFUOYKQUBKCNGLADCDJYHELTWMOSZNBPYTHVPWDYQAUMZNNGKMZOQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.38659093414321644);
    msg.setSource(47314U);
    msg.setSourceEntity(101U);
    msg.setDestination(6020U);
    msg.setDestinationEntity(252U);
    msg.type = 155U;
    msg.comm_interface = 21724U;
    msg.model = 19088U;
    msg.list.assign("PEHTIVPAVKZNLBBNPYVRTSVSFJMQXVYMXRMRUWKSCDVXRYKBGQILFWYDSJHNZNRKPLAXAFQFLDBWAOOXZYNGMQJHUBGQKBZVOEHBHUKDPSGI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.998846696704803);
    msg.setSource(43524U);
    msg.setSourceEntity(50U);
    msg.setDestination(45955U);
    msg.setDestinationEntity(7U);
    msg.type = 166U;
    msg.req_id = 1140220855U;
    msg.ttl = 50480U;
    msg.code = 203U;
    msg.destination.assign("QFAOOCOQOUITDUVGRPLWKNWHBXWVVKDJMXJQXRRLESDMOCYENPVOZCXHGDWUNVSYTRSRASZGHATJRTJQSXQHXSZJIIAVHRHKHHCINYJDSGAGCBEJULLAVLGPKCOUVFJEZUKHWWLFBMKZEGNBSNYMMPEVWDBWPUIQEVAETYDBXGNFEPGCIMDANTOPFXTSZQXBMYBKKLFPCBWZFBIRFMUNMRNTZFTYACYMYZQZJLJKSATCG");
    msg.source.assign("TKDGGMBPVRYQGZJCQSMACYCYOPOX");
    msg.acknowledge = 145U;
    msg.status = 123U;
    const signed char tmp_msg_0[] = {42, 41, 102, 61, 34, 40, -34, 25, 33, 72, 95, 90, -69, -86, 80, -79, 115, 85, 37, -34, 44, 104, 71, -29, 110, -91, 76, 70, 42, 68, -36, -38, 110, -62, 62, 19, 100, -18, -121, -31, 84, -28, -107, -127, 34, -110, 113, 88, -33, 82, -30, 84, -75, -53, -125, 16, -12, -9, -112, -23, 57, 52, 103, 42, 56, 45, -55, -45, 9, 74, -72, 52, 105, 43, 26, -11, -31, -48, -102, -36, -20, 73, -51, -29, 84, 121, -87, -40, 115, -96, -50, -127, 54, -95, -60, -102, -53, -31, 58, -25, -82, 71, 85, 91, 78, -60, -111, 21, 39, 13, 119, 40};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.7238457315013979);
    msg.setSource(47591U);
    msg.setSourceEntity(250U);
    msg.setDestination(28272U);
    msg.setDestinationEntity(210U);
    msg.type = 43U;
    msg.req_id = 478409802U;
    msg.ttl = 31216U;
    msg.code = 103U;
    msg.destination.assign("YXSTTACSDIBE");
    msg.source.assign("NMROYUXYWDXTBSDDELWGDHWHHTOFJMKJOHTITVJVFAMDKSSHITXMOWQARBVOCZRCIYUWUPSCSNGXFKGKIFWHZADOVCSXVWUODJLMZKRWVOBLOHMIDPQKYANJBRUGJYLABHLYNWCGZMIZQGQELFTAFOBEQPYZNVURABQNIHVCYZYFEEXPQSLEDCDKZQISRRJGHPLICUKLETMTMRYPUBPAGGBTVNFMXFFSEQJENXUPIPNCXB");
    msg.acknowledge = 130U;
    msg.status = 0U;
    const signed char tmp_msg_0[] = {30, 4, -50, -99, -80, -88, -34, -30, -56, 109, -64, 41, 121, -17, -55, 108, -5, 54, 71, -33, -118, 12, -122, 109, -9, -56, -86, -28, 106, 47, -3, 51, 16, -113, -18};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.2770816477715372);
    msg.setSource(8630U);
    msg.setSourceEntity(43U);
    msg.setDestination(17654U);
    msg.setDestinationEntity(126U);
    msg.type = 49U;
    msg.req_id = 327774204U;
    msg.ttl = 29167U;
    msg.code = 158U;
    msg.destination.assign("IFDCHBEPSGWPQKBAUQFOMEMXPYHELAEQYOQBVDJLQBUMBVZXRZHPSECXFKYJKEZSXCQFOHLGLJVDAGUBGWILGCTXMMKSWPUCVNKRWPVERPTRGARRDKMNSSLHFUNBCOJKAJFDDORDZJPLIRNFIRXMTDTFKSPVIYAOEBSYTCLONZCKEUHMVHHGVHAA");
    msg.source.assign("OMXHMNURJBCTXIKBZDNIBPBEHEOZXKMRGVVAYMZWTKLGCSXUQWCQVPWNFVYKKINXR");
    msg.acknowledge = 27U;
    msg.status = 139U;
    const signed char tmp_msg_0[] = {98, -67, -99, 18, 28, -110, -28, -90, -103, -39, -48, 60, 78, -9, -95, -11, 10, -41, -8, 81, 6, -2, 19, 20, 79, -77, -11, -25, 90, 112, -29, 22, -40, 93, 105, -120, 112, -62, 108, -70, -73, 75, -89, -64, 46, 0, 50, -27, -86, 66, 121, 123, 38, -110, 39, -41, -66, 23, 19, -110, -34, -100, 84, -63, -29, -23, -4, 8, -27, 58, -18, -57, -73, -74, 124, 7, -35, -113, 85, -111, -25, 65, -91, 109, -74, -50, 73, -12, 15, -59, 110, 91, -23, -78, 113, 90, 46, -76, 28, 99, -16, -29, 6, 32, -45, 27, -87, -74, -121, 90, -104, 49, -55, 89, 94, -2, 15, -7, -3, -116, 87, -9, 99, 15, -93, -92, -56, 92, -75, 85, 11, 78, 92, -37, 32, 114, -47, 3, -69, 69, -117, 84, -94, 113, -31, -92, 35, -106, -41, 24, 115, 95, -48, -92, 27, 45, -16, -4, -55, 14, -104, -29, 87, -71, 77, 72, -33, -13, 3, 125, -25, -77, -102, -18, 10, 45, -126, 85, 45, 18, -94, 55, -46, -11, 95, -113, 46, 34, 7, -8, 14};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.3730284884138093);
    msg.setSource(44927U);
    msg.setSourceEntity(77U);
    msg.setDestination(20077U);
    msg.setDestinationEntity(195U);
    msg.id = 187U;
    msg.range = 0.008157413793604129;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.9539209878322896);
    msg.setSource(1154U);
    msg.setSourceEntity(155U);
    msg.setDestination(39577U);
    msg.setDestinationEntity(202U);
    msg.id = 174U;
    msg.range = 0.022979452765687913;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.18773652118096185);
    msg.setSource(35855U);
    msg.setSourceEntity(80U);
    msg.setDestination(13686U);
    msg.setDestinationEntity(90U);
    msg.id = 245U;
    msg.range = 0.19717627425626771;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.26984338091331184);
    msg.setSource(27241U);
    msg.setSourceEntity(100U);
    msg.setDestination(11437U);
    msg.setDestinationEntity(176U);
    msg.beacon.assign("MCASEEKJTBYGINIOZKWYRUODUIEJRJUVYAFUGHLGYQTHQXIKVRQHASVBCNGRFEPCOGHHVXNPCGPWNXZXMBWDLWHYGISZWCCUOPJVZQKSRSNQTEQCLBTMULFLKGBZKBWMXBRDKMWEACVQOTEZIPTLJZAYOSUORLNTVNEHGXYJTSYEQQEIOLJDPNLWTNNARIADDGWVKMFSXDDUHSHZFUFMVYPZIACUPCORXBKARBFZFBPFXMIXJSKJAWHQDOT");
    msg.lat = 0.5987552347837102;
    msg.lon = 0.38397582357766447;
    msg.depth = 0.1501860218507336;
    msg.query_channel = 226U;
    msg.reply_channel = 183U;
    msg.transponder_delay = 164U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.5536385531746264);
    msg.setSource(62838U);
    msg.setSourceEntity(237U);
    msg.setDestination(27156U);
    msg.setDestinationEntity(96U);
    msg.beacon.assign("ONLQDFGEDAFLAWWSTHSLELRTKHQJIGEXKWWYEJAHTBTMCMLNMNIIBXMCZSSHPEEBVQPRXKHOFRYPYVLJKQIDZHTRTFVQDNDQKPXEKSDNOEMQZVMGHHLWVFRCDUQMPAOSGPGLWSJ");
    msg.lat = 0.9816401974776069;
    msg.lon = 0.6592788281419233;
    msg.depth = 0.13223226305254454;
    msg.query_channel = 136U;
    msg.reply_channel = 130U;
    msg.transponder_delay = 233U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.8343610705460903);
    msg.setSource(22384U);
    msg.setSourceEntity(238U);
    msg.setDestination(62628U);
    msg.setDestinationEntity(242U);
    msg.beacon.assign("UINILJGTUUQPEKZQBIHNAFMEDDWUWPINCRLXJFLSEUKCOLDODTWSXKQTFKTCYJEEBLYPVOGTOROELJGRZVTECGXKWOMJOSTAOQKMRXNSIAFVJSYLNAPAHBHQIHHPXHBUXLKMCVRZDTUJWLQGFHOGBHVUYCAPVIAXCWSJZVRBEHZNIYIFUMPCSBCPWMYZGNYOQTJQRWNFDKTMVNYVAGWEBHPSSMDDWXLKR");
    msg.lat = 0.8111634277271387;
    msg.lon = 0.8409965975261069;
    msg.depth = 0.0668632736987187;
    msg.query_channel = 210U;
    msg.reply_channel = 19U;
    msg.transponder_delay = 99U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.7430331715262245);
    msg.setSource(40040U);
    msg.setSourceEntity(95U);
    msg.setDestination(32613U);
    msg.setDestinationEntity(0U);
    msg.op = 242U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.8917327899453205);
    msg.setSource(37157U);
    msg.setSourceEntity(132U);
    msg.setDestination(20858U);
    msg.setDestinationEntity(173U);
    msg.op = 19U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.983300900150598);
    msg.setSource(20664U);
    msg.setSourceEntity(71U);
    msg.setDestination(53320U);
    msg.setDestinationEntity(52U);
    msg.op = 222U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.021011948505489708);
    msg.setSource(63434U);
    msg.setSourceEntity(208U);
    msg.setDestination(29694U);
    msg.setDestinationEntity(211U);
    IMC::OperationalLimits tmp_msg_0;
    tmp_msg_0.mask = 249U;
    tmp_msg_0.max_depth = 0.2730193153826702;
    tmp_msg_0.min_altitude = 0.34571056096931585;
    tmp_msg_0.max_altitude = 0.015384847239118593;
    tmp_msg_0.min_speed = 0.9956340781746141;
    tmp_msg_0.max_speed = 0.2088394774138458;
    tmp_msg_0.max_vrate = 0.35528579410197625;
    tmp_msg_0.lat = 0.3585706802475638;
    tmp_msg_0.lon = 0.8491781931523031;
    tmp_msg_0.orientation = 0.5333477606341246;
    tmp_msg_0.width = 0.3053468563397812;
    tmp_msg_0.length = 0.681369249518763;
    IMC::PolygonVertex tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.7737515686794447;
    tmp_tmp_msg_0_0.lon = 0.6190830857165279;
    tmp_msg_0.vertices.push_back(tmp_tmp_msg_0_0);
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.32248954782390593);
    msg.setSource(28997U);
    msg.setSourceEntity(205U);
    msg.setDestination(64801U);
    msg.setDestinationEntity(108U);
    IMC::ManeuverDone tmp_msg_0;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.9689833879176609);
    msg.setSource(29153U);
    msg.setSourceEntity(80U);
    msg.setDestination(24713U);
    msg.setDestinationEntity(207U);
    IMC::VehicleFormation tmp_msg_0;
    tmp_msg_0.lat = 0.9951703260116521;
    tmp_msg_0.lon = 0.30720278093042697;
    tmp_msg_0.z = 0.5896093105517206;
    tmp_msg_0.z_units = 122U;
    tmp_msg_0.speed = 0.5954004264591971;
    tmp_msg_0.speed_units = 204U;
    IMC::VehicleFormationParticipant tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vid = 33767U;
    tmp_tmp_msg_0_0.off_x = 0.3005939724062441;
    tmp_tmp_msg_0_0.off_y = 0.8230571319963745;
    tmp_tmp_msg_0_0.off_z = 0.20032467587040637;
    tmp_msg_0.participants.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_time = 0.7723796422568504;
    tmp_msg_0.custom.assign("IYUMBPKXMRFSZKYGHTRGYLGVYQTIOCCJKAMIYITNJKMWQHWNKRUOOSEULVVJO");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.11157380551463592);
    msg.setSource(50967U);
    msg.setSourceEntity(179U);
    msg.setDestination(32226U);
    msg.setDestinationEntity(108U);
    msg.lat = 0.9490270123074042;
    msg.lon = 0.9982307483308779;
    msg.depth = 0.5385306554490488;
    msg.sentence.assign("JGNVMUALTZUWYCBFIDVKMHILIIGWJQMDBDVVPEKIQBSMBNLFETETZCMZENHBWOOLOSXRLNFYOVARNPSRTPUZRSHYYGUPY");
    msg.txtime = 0.845356482603359;
    msg.modem_type.assign("ISQEYNWMLKFZWBUXICQXIKNHCAUKNXQTGIAJUSWCFIDLTUUKGZTLBNMQPZSHMJMRZLRIVOGEWWYPYFJOMFRHWQMNEHBDEFSHWBYAPZXCWDQIBBXKKTOFEERTUDYAEAOKUUZMXDVJXVFYSLPJNITGBPTCDDBCEYADVVCORPAOWHLLGDKSVPV");
    msg.sys_src.assign("TPDIXYSUHBPKBJTUVIEMVMWFUYIQAKFKKGDESCYLPEMWRGSULZIUZCLIKFPBRGFFKLLGUVVXTMFJSEKYECOYNRUQVBJHVPEQNXORQZJOSZFCAKXQQTTUBDCQBLHOXLSDOMMZXEDAEGSFOYCAAPZAJPUXGENGVEYJFDTJVIVYDDAXPBIZOLCSGWZROIJQWHNRNXGPCXUTHHARRSOKKNCNOMT");
    msg.seq = 18134U;
    msg.sys_dst.assign("BHIXOHKUMPPJRHNYIDZITKGPKQGLLXRTWBYLFEVDSITMMKIDXTYYMAOOWZMAPEMNBQQAHKURUJWEJUFZNLAYNC");
    msg.flags = 127U;
    const signed char tmp_msg_0[] = {-114, 53, -46, -21, -16, 125, -28, -79, 104, -56, -55, 109, 74, -81, 111, 42, -63, 125, 114, -10, 109, 105, -88, 45, -60, 86, 108, -33, -36, 54, 62, 64, -58, -67, -82, -77, 87, 57, -30, -79, -114, 31, 55, -117, -31, -26, -91, 105, 26, 111, -50, -26, 43, -87, -29, -68, -126, -72, 28, 61, -22, -22, -86, 65, -56, -86, -39, -90, -60, -6, -5, 99, 74, -104, 83, -106, -77, 88, -55, 22, -113, -27, -19, 24, -31, -127, 74, -12, -7, 51, -67, 65, -65, -119, -82, 59, -111, -38, -58, 90, -40, -113, 125, 24, -124, -98, 24, -87, -61, 2, -55, 113, 24, 81, 79, -111, -99, 50, 126, 88, 108, 45, 79, -13, 64, -81, -27, -24, 111, -24, 25, 47, -13, -22, -106, -4, -83, -65, -81, -10, -92, -118, -59, 65, -14, -34, -96, -56, -64, -3, -8, -28, -91, 8, 105, -16, -62, -50, 73, 38, 112, 122, -119, 35, 88, -126, -102, -50, 39, 68, 39, -30, 93, 65, 55, -62, -127, 93, -78, 51, -39, 122, 30, 15, -58, 62, 33, 103, -7, 26, 34, -126, -8, -66, 89, 85, 77, -69, 94, -9, 82, -124, 50, -8, 123, -95, 98, 28, 85, -52, 59, -118, 23, 107, 98, -4, -119, 47, -73, 117};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.5584256255459593);
    msg.setSource(56077U);
    msg.setSourceEntity(179U);
    msg.setDestination(47840U);
    msg.setDestinationEntity(197U);
    msg.lat = 0.07602021327391295;
    msg.lon = 0.12804652023926621;
    msg.depth = 0.5721317250759612;
    msg.sentence.assign("GJGODDVDOJAKPBOFCHPBOSEBRATJICRFBNWIHDAHQCTGFMFSZBUZZXZVLQEMXXVPHW");
    msg.txtime = 0.7469286015305;
    msg.modem_type.assign("CPNJYUZPQXMPPBHZXJJBKSINGMAJVBLYRENDTKRKGSHTFJQDWUHQCKYBHLIGEDPKSMMCQTKZFVVRLNANMEYNFXTQRTOVCTHSISECWQRIENUN");
    msg.sys_src.assign("XXNDKPEFZKXQJRLMLUIYBVEAULYPIOCPEIDVCTBPVOYKFXFXFTEBQDBSJTPANWMJCLXAGJSNHNHGLUUCQFXGGSWKHHFWJGAIBWVXEUVBIMZOKMNOLZESNRRVJBHRBTBVZQWGZIWKSFMQKUCGVUAXJZCTDRHHYKMSZDTFIQLJKMARPNHZSOOSJWTLQDYPNOTFZUHNVGRSIZLCCEQGCY");
    msg.seq = 57802U;
    msg.sys_dst.assign("SXXQRTPGERONQKUZDTMYZBBVIXHSIOIVXECCORHMTIEDJZCGVUGSEJPOPAUMUQNMTDLZNZMULWOBQGPYAUAMUVHDDGLHSKMXPLMXSLVPIWRSPKWIAGKVNESNMBFPHFHRQFOYNXZYSZHGFCEFORCKYVISZGXLAACCWCHNLBAJDBACFYLWRFNWKTPIVIFGKNWQOTJVKDROYJKDTDJU");
    msg.flags = 50U;
    const signed char tmp_msg_0[] = {63, -119, 84, -98, -105, -51, -64, 13, 124, 77, 64, 33, -16, -29, 63, -33, -54, -125, 96, -66, -35, 121, 1, -14, 43, -4, -77, -30, -91, -122, -72, -102, 63, 11, 39, 3, -84, 82, 114, 54, -28, -87, 22, 52, 65, -90, 103, 38, 88, -47, 34, 58, -14, -121, -101, 118, 35, 94, -32, -35, -51, -99, -37, 124, 25, -40, 34, 64, -40, -60, 96, -50, 4, 124, -6, 54, -87, 107, 15, -11, -96, -27};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.17157218263306506);
    msg.setSource(22042U);
    msg.setSourceEntity(219U);
    msg.setDestination(19076U);
    msg.setDestinationEntity(77U);
    msg.lat = 0.48625965348786393;
    msg.lon = 0.9932266918268732;
    msg.depth = 0.24737467675484215;
    msg.sentence.assign("PCWNQYNICJWEUBKCWWENWHTKAZKKSOCQDBGUMHYXVITRUMGZWXOSWGMJQCUKGHAKNQRJXPOADMQEJTTBLGROPHXCVWELZRXVYKZOYAMXVGBUHFLLIIPOLOZMSPBJZFVMIRADAGSEENQEJMKXRFJJHIHFXWTGFTLMSLFBRYLNPBTZOHNXIDGDQBZTIRSVAKPVILWVTDPY");
    msg.txtime = 0.9511094632699675;
    msg.modem_type.assign("IGBYMXUMZRJCWEKQYHBBWBIAWYQKNDIUMOKWLAFJWLDNCNODYKYEPRDSC");
    msg.sys_src.assign("HMDBWNKDTDDZRQGATSDSCEECPMBFTPFWMYGLIDLRUIARNZWYEAHJYTHGWVMFKCAEWALIFRGOYLZKWSZJXSHYXRDNGKHRSCABMJESVNDBTBRMPTUFUMARLXGQVHVNNIZTLAJFUXBZEIJLLZCEJEGOQPXOQHIZWYSWOHUJVMFUEBPGZHXYISJPVITFQYIBPOWDXNKNBOFVPXMKRKL");
    msg.seq = 42030U;
    msg.sys_dst.assign("HHCLBIFAMNBHCNQOJOMGMWDIHKGD");
    msg.flags = 215U;
    const signed char tmp_msg_0[] = {31, 5, 21, 121, -95, -119, 28, -123, 16, -5, -24};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.8723240531525471);
    msg.setSource(36463U);
    msg.setSourceEntity(19U);
    msg.setDestination(37054U);
    msg.setDestinationEntity(109U);
    msg.op = 60U;
    msg.system.assign("DCAYZHFTNWNLEOLDMWGGNVOZEBFJPJLPBVEQYCVNAXCKZRCJGUTVRXUSXJTQMXRIJKINCKNOFTDJACTIWXEOLFPPTZDPJJKDUNGTGFSSLXQEUQBMRROUOSHBFFWGLVXNQBYPPWPSIOYVJKUHBWIYGMMOSTETLOYBZYCAHBK");
    msg.range = 0.5146360136438929;
    IMC::Elevator tmp_msg_0;
    tmp_msg_0.timeout = 15897U;
    tmp_msg_0.flags = 17U;
    tmp_msg_0.lat = 0.47869697838257697;
    tmp_msg_0.lon = 0.20339620654122492;
    tmp_msg_0.start_z = 0.6852927837765187;
    tmp_msg_0.start_z_units = 249U;
    tmp_msg_0.end_z = 0.7468922308638215;
    tmp_msg_0.end_z_units = 206U;
    tmp_msg_0.radius = 0.82672144643566;
    tmp_msg_0.speed = 0.5916023846615915;
    tmp_msg_0.speed_units = 117U;
    tmp_msg_0.custom.assign("CQSUPLPRBLDNJXWKYIWBSJPKEBPAFBSOCODPTMLBKAAHTAXFDNMULMGUCYGIOHCZHJHYZGKUUNABZICVMEONQXTSRHOIVSSEDXUGZHZMRVDLZQVPTEWFKCMGEXGDVBCATFPUMJLSIWHLNRKKIAQBIFRLBVPVFCJWAQJYAPEOIVQOKNRTQCENZYDYXXOLZMYYGQWSXQFFWHTWPXVHFXRGJYMAEEJODSZLVWEGCDNSTRHJINDYTUFBMR");
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.9795032683970293);
    msg.setSource(8526U);
    msg.setSourceEntity(211U);
    msg.setDestination(7842U);
    msg.setDestinationEntity(221U);
    msg.op = 117U;
    msg.system.assign("LMKUCVAGTAGIYFVYSYOEBL");
    msg.range = 0.5867973859140027;
    IMC::AutonomousSection tmp_msg_0;
    tmp_msg_0.lat = 0.029326005433139013;
    tmp_msg_0.lon = 0.45098537461964927;
    tmp_msg_0.speed = 0.6664541044956187;
    tmp_msg_0.speed_units = 39U;
    tmp_msg_0.limits = 115U;
    tmp_msg_0.max_depth = 0.499735578798974;
    tmp_msg_0.min_alt = 0.4354223357141358;
    tmp_msg_0.time_limit = 0.8506431327093408;
    tmp_msg_0.controller.assign("HYMNHNUWTLUOQVLYHXUODPKJVLHESXXGAEVMIGIAIPNZOGQGHVPZBBFMZSMCUNCNFFKRRSQANXECVYWIDQWQYRIQUFFXDTCFCUBBRORSQCYWBINGB");
    tmp_msg_0.custom.assign("QWBMQLFYIDRZPOLSSPRPZAKXALTBFURUBNGPWQMXGRJSAIXJPNERFGVSYDTPHRNMTCELMLCRYLPCDJAZAVKDPZLVKSEKMKVTIFDRJGHZHADPVYFUZMQCHTUGUQWWZJHGTLUKBYNWJXEYVMJNOEFZWOZXJAJUIWODFCWBYJDAO");
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.4629275593309732);
    msg.setSource(61776U);
    msg.setSourceEntity(168U);
    msg.setDestination(54330U);
    msg.setDestinationEntity(88U);
    msg.op = 99U;
    msg.system.assign("WWKFRRABQMAASYXRKTUDPEUIENQIVIOTVZXEGTXMBCFSBHWIGPDVPDHNORUWS");
    msg.range = 0.7644550741727766;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.19028902828941474;
    tmp_msg_0.y = 0.5814985965117186;
    tmp_msg_0.z = 0.3191077149731403;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.5596946699963753);
    msg.setSource(58823U);
    msg.setSourceEntity(132U);
    msg.setDestination(4384U);
    msg.setDestinationEntity(182U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.08471249198389563);
    msg.setSource(24445U);
    msg.setSourceEntity(34U);
    msg.setDestination(36891U);
    msg.setDestinationEntity(166U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.6330713147228708);
    msg.setSource(5637U);
    msg.setSourceEntity(39U);
    msg.setDestination(53406U);
    msg.setDestinationEntity(249U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.30105091908381176);
    msg.setSource(27271U);
    msg.setSourceEntity(10U);
    msg.setDestination(54425U);
    msg.setDestinationEntity(97U);
    msg.list.assign("MKTPPPFFUVQADZCRUYQXBCNNGBSWKYOVZPLDWTSKJZUNSTGJYYIMUKSTQZBRNZJXIHUGOTDVXBVSHKJINBWUCADYSFHBOTAURGQILEQVPGMCROMNJAGVJZFBIRYFHTMXUONFRNWVARILGMEHESEPOPCKAXLTZATHDIENRCDDGEYAZQOGJIPUMRFMFVLSEQTWYWOBYBAHSVXILHPCSZNGJHLOXELEHWPWJQCIFVDFEDJDKXWWBOM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.20254157829829567);
    msg.setSource(47337U);
    msg.setSourceEntity(159U);
    msg.setDestination(37423U);
    msg.setDestinationEntity(149U);
    msg.list.assign("QILWXRXMHYRQKBQQMVTQDOFCNPLYCABPECFKUZXFGQJHJGTZVPHSEAEOTIAOIDCBVVPHZEURKAMRUSSCDULOYVA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.32475401467530707);
    msg.setSource(33796U);
    msg.setSourceEntity(82U);
    msg.setDestination(56761U);
    msg.setDestinationEntity(251U);
    msg.list.assign("UMUDROOZUXEQJXQOEIRMPBXUYKXNOWFVXHTEW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.003303714631186838);
    msg.setSource(12597U);
    msg.setSourceEntity(241U);
    msg.setDestination(48227U);
    msg.setDestinationEntity(121U);
    msg.peer.assign("TGJDPULHXWLSHMVKNKBDFZMPRNJRDEUYIQIHSTAFHVAKGQSNDGYWDQKGRYOIXPKTNDOKFRFBOBAVCWCCYVJMUZEDGCVNJQAYSDJQQOUAJIIBVTFEPFCCATGHLJIEBLGLLODPAVMIXQXESMYKHBSUP");
    msg.rssi = 0.713122355617153;
    msg.integrity = 62912U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.9229496694240035);
    msg.setSource(52604U);
    msg.setSourceEntity(227U);
    msg.setDestination(15829U);
    msg.setDestinationEntity(177U);
    msg.peer.assign("BZYACOQTAXJHGLPHOSQUFRPJPQWLJLNBSVLZUBTNCJTNMVQTZQUPKENKOHBSEJOUZGZIWXVAHRDEIJZW");
    msg.rssi = 0.4549233003317583;
    msg.integrity = 40092U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.6553821846962069);
    msg.setSource(31605U);
    msg.setSourceEntity(103U);
    msg.setDestination(37146U);
    msg.setDestinationEntity(201U);
    msg.peer.assign("HEIPYURKAXYHZDVYGKSJMJJTYZOLIDBATKAUGNUROIOVDXDDPRKUPOOTNZMZUBEXEWNGCAKLETDPVZFBCNREKYNGSFPKAJCNGAHBFRRMSSPIMJTVXMRBEUASQYSWYMDTPOCFHNVQMWDXLFGARWTNHXPEVETYETWHQDCCBQFJVMJBIGQBOVTILHPAQPC");
    msg.rssi = 0.6844852633178296;
    msg.integrity = 2765U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.33190788332131904);
    msg.setSource(24481U);
    msg.setSourceEntity(121U);
    msg.setDestination(3705U);
    msg.setDestinationEntity(161U);
    msg.req_id = 54864U;
    msg.destination.assign("HKNFBDXXLSFIYEBBYGDSGSJETKIAVNLVTTRQEJQYGVABJTAKYQJLGEUHKBAHWVDZZRICXBHXKPIMPLCSZNZYBWRSDQVANPMVOUAPUT");
    msg.timeout = 0.3799637889910398;
    msg.range = 0.46942756270552743;
    msg.type = 226U;
    IMC::CacheControl tmp_msg_0;
    tmp_msg_0.op = 220U;
    tmp_msg_0.snapshot.assign("GWJEBMQMAKVFATNMXXJNVUQAATJRFPLOTKEUIZFXLHF");
    IMC::TransmissionRequest tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.req_id = 51773U;
    tmp_tmp_msg_0_0.comm_mean = 111U;
    tmp_tmp_msg_0_0.destination.assign("THZDPLEHYLWCNPSJUXUQOPZZLZTDEDZGXJJHCJTTIMXSKKMUBPANYMNOKVTGIUPIZYQBVPDWSXVIIYWOPYOSCXEJWCVGZLSCBBOGZAYJYAMHBCKBSLDUWRNFWEHHGXTVUOGK");
    tmp_tmp_msg_0_0.deadline = 0.5058744844225201;
    tmp_tmp_msg_0_0.range = 0.47590833977628266;
    tmp_tmp_msg_0_0.data_mode = 81U;
    IMC::UsblPositionExtended tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.target.assign("ICWRBNTVKGYVVMBILYKWUZZUEKLEEPAWVGPBYLGLHPAEAXCFYFFUQTNKCZXYEQGNCKWCSOTFFWU");
    tmp_tmp_tmp_msg_0_0_0.x = 0.6174381504378745;
    tmp_tmp_tmp_msg_0_0_0.y = 0.9425228318076143;
    tmp_tmp_tmp_msg_0_0_0.z = 0.8766311102859832;
    tmp_tmp_tmp_msg_0_0_0.n = 0.8276264842357877;
    tmp_tmp_tmp_msg_0_0_0.e = 0.9137577162879706;
    tmp_tmp_tmp_msg_0_0_0.d = 0.26813757589586784;
    tmp_tmp_tmp_msg_0_0_0.phi = 0.6048938776519043;
    tmp_tmp_tmp_msg_0_0_0.theta = 0.943267487620991;
    tmp_tmp_tmp_msg_0_0_0.psi = 0.39549753733105864;
    tmp_tmp_tmp_msg_0_0_0.accuracy = 0.6192312518946478;
    tmp_tmp_msg_0_0.msg_data.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.txt_data.assign("IUVCFYEDGYZOKBDLZZNWQXQQJIYYROCFOMAZCUSGVLTDFTJDPIFLKDSEFWAMONRQMOVUWWANYNDIVWDURVPBQISWYKCSMKJIJDBIHUOQAQYEXWFRZSXPXRQTFXNUGEJHHRPBFHHQEYSJTKLEZKCPZNVNJTADUCGOBLGRMKBAPVZVRZWAXPMSZPHXBIFGCUVCLBGGWWJMUPBXDLHTTOVESO");
    const signed char tmp_tmp_tmp_msg_0_0_1[] = {-95, 48, -86, 15, -21, -7, 112, 81, 44, 30, 96, -39, -121, 61, -123, 50, -120, 18, 96, 87, 73, 72};
    tmp_tmp_msg_0_0.raw_data.assign(tmp_tmp_tmp_msg_0_0_1, tmp_tmp_tmp_msg_0_0_1 + sizeof(tmp_tmp_tmp_msg_0_0_1));
    tmp_msg_0.message.set(tmp_tmp_msg_0_0);
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.5097264505447705);
    msg.setSource(53654U);
    msg.setSourceEntity(238U);
    msg.setDestination(56106U);
    msg.setDestinationEntity(221U);
    msg.req_id = 23776U;
    msg.destination.assign("QBRPGXPQOAYGSBHQKMMLZEZNXAMLTNKNSBLZQKIVGGYLTTCOCNRJFVTUIHXRWKODTSEBBYEHNXKDWZJCRDCMFYWXMTJZNLGUPHGWSRTIXVOWTNFKSFSVVWUGQDCOMXWBVSUCKJXKRRUZSIEULPOPYJDOAUEXVTDFIUAECOKIARDCGDAMBQPSFNEZHEBHHIJNKMDGLVJWEAMYZFJF");
    msg.timeout = 0.7167446860613405;
    msg.range = 0.9999998012916342;
    msg.type = 177U;
    IMC::FuelLevel tmp_msg_0;
    tmp_msg_0.value = 0.16912036648096374;
    tmp_msg_0.confidence = 0.8376925226699208;
    tmp_msg_0.opmodes.assign("TIWFHNTZRFZYZKJCMFDJUQZITCGYXTMILDPQRWSFJQIKRDABDNSPFUGJGFMUYKBCSRXRBEQOSPHAYHSLOVSGPJUYHLQVDKEVGKBVHUKASEEVQNMZFPWAWXREDKBPXNHKVCOEDXCOMZFRUNJRJKJGLYFCEOATFRABXHMEBLHGGMOOSAWCUYBVAQANVGVZOTSUIMKMTTOQDLAXWQLDIRYPNUPHEIXLDICZXTWNLI");
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.5058202228576842);
    msg.setSource(50287U);
    msg.setSourceEntity(48U);
    msg.setDestination(156U);
    msg.setDestinationEntity(197U);
    msg.req_id = 52439U;
    msg.destination.assign("WRTMORERJUIPSMIVPPESBYFMPWDQMXWWKVP");
    msg.timeout = 0.19012487411304357;
    msg.range = 0.3688800698995901;
    msg.type = 25U;
    IMC::Redox tmp_msg_0;
    tmp_msg_0.value = 0.4229709814296587;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.8859645610939022);
    msg.setSource(31061U);
    msg.setSourceEntity(164U);
    msg.setDestination(45748U);
    msg.setDestinationEntity(10U);
    msg.req_id = 823U;
    msg.type = 212U;
    msg.status = 95U;
    msg.info.assign("OKQIGPCUPEHQFWQOORNZKVBNVAZXMLLEEBWYNSSZXBJRGTMZMJGOTLDNFEFHVUSITOGAEKROJVGDTRCHIQZWFQWRDCWHQCSNKWFOKTAXKGXYOWUKVKATPXBKBYUAGDMEYNLGFMTBRWMYGYMPGBHXBBEVCNAHHDSJNXJPIQURICCDYFVLCLJQXYSEHVCILKUAXALNQIZASUJEZLAXZVUMVSLPDJF");
    msg.range = 0.048289806650909206;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.8197723088220449);
    msg.setSource(18323U);
    msg.setSourceEntity(198U);
    msg.setDestination(21261U);
    msg.setDestinationEntity(211U);
    msg.req_id = 3802U;
    msg.type = 239U;
    msg.status = 20U;
    msg.info.assign("KWKUHGXJWEOAPVMMYPGDBQDXFNLVJUSWTFITYACDNOUQUFCHGEIFVBXPTTSRDRXSWMB");
    msg.range = 0.49691320232822445;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.1305352455252221);
    msg.setSource(41833U);
    msg.setSourceEntity(14U);
    msg.setDestination(4513U);
    msg.setDestinationEntity(159U);
    msg.req_id = 32404U;
    msg.type = 56U;
    msg.status = 165U;
    msg.info.assign("PKQDZBEZMOLLOBJSSFEBQMAIKJCURTPDBDLWSHTXVRTQXXLNU");
    msg.range = 0.8581567863819229;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.4754339974337449);
    msg.setSource(45855U);
    msg.setSourceEntity(247U);
    msg.setDestination(56643U);
    msg.setDestinationEntity(223U);
    msg.system.assign("UVQOJXJRJRDVKOIWVTFQVTDDBCIDFOMEOCAXXIQOGIYQRIWSETOFAGCVKTWKZJYBLNKSPMYDIANPFGPINLJGPMLQBZELCKTWMKCKSUBZAFZHYUUMUMWNZTYAYENPJRORCXOGUGQJZPTLEKHSBQPGACAUWMPHTVPHEHBNSSWXWIGBIITVFLMVYOGHSZEVRESNC");
    msg.op = 128U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.6731807512611178);
    msg.setSource(38235U);
    msg.setSourceEntity(215U);
    msg.setDestination(26060U);
    msg.setDestinationEntity(99U);
    msg.system.assign("HIRIXXLHJDGEYGRDVTROFFDWGLFYIACDEFNJAAKKZOQTXKLTZSVLLIEGDRSBURKSUTZZSXOPVYRWCEFKWJNVQAYYALFHDTUSSUZYNEJBBQOHXEWSKBJUDQWMAMOBPUYWIXKZTVLWNLCPJJEXFBHVUQOBUKQPFQTTZPDIGJQXYTYEZARMHAWVEJPCWCUSCOLJRBMHUGHNIYNKCSDCWHV");
    msg.op = 14U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.8443473558437142);
    msg.setSource(44249U);
    msg.setSourceEntity(27U);
    msg.setDestination(64744U);
    msg.setDestinationEntity(7U);
    msg.system.assign("ACXCDJHWUZEFSQH");
    msg.op = 41U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.9792283379023914);
    msg.setSource(40572U);
    msg.setSourceEntity(40U);
    msg.setDestination(43444U);
    msg.setDestinationEntity(114U);
    msg.value = 10894;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.08274244309189616);
    msg.setSource(37021U);
    msg.setSourceEntity(248U);
    msg.setDestination(26329U);
    msg.setDestinationEntity(141U);
    msg.value = 6806;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.9236466959769766);
    msg.setSource(56358U);
    msg.setSourceEntity(208U);
    msg.setDestination(12384U);
    msg.setDestinationEntity(98U);
    msg.value = -26770;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.0005149737448673086);
    msg.setSource(58112U);
    msg.setSourceEntity(31U);
    msg.setDestination(39583U);
    msg.setDestinationEntity(89U);
    msg.value = 0.25133006149841675;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.45020430424601265);
    msg.setSource(31347U);
    msg.setSourceEntity(87U);
    msg.setDestination(1599U);
    msg.setDestinationEntity(140U);
    msg.value = 0.30812555000608444;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.15147446389379282);
    msg.setSource(45414U);
    msg.setSourceEntity(105U);
    msg.setDestination(12396U);
    msg.setDestinationEntity(133U);
    msg.value = 0.548442246472546;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.4390668706726263);
    msg.setSource(58414U);
    msg.setSourceEntity(100U);
    msg.setDestination(24318U);
    msg.setDestinationEntity(160U);
    msg.value = 0.8370027945508725;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.5600109704143668);
    msg.setSource(15851U);
    msg.setSourceEntity(78U);
    msg.setDestination(47037U);
    msg.setDestinationEntity(71U);
    msg.value = 0.9480589087213066;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.6468002307889046);
    msg.setSource(37094U);
    msg.setSourceEntity(100U);
    msg.setDestination(47030U);
    msg.setDestinationEntity(205U);
    msg.value = 0.9863826308356051;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.3079482672534487);
    msg.setSource(58544U);
    msg.setSourceEntity(127U);
    msg.setDestination(60690U);
    msg.setDestinationEntity(179U);
    msg.validity = 27383U;
    msg.type = 29U;
    msg.utc_year = 3690U;
    msg.utc_month = 68U;
    msg.utc_day = 122U;
    msg.utc_time = 0.06399045368796585;
    msg.lat = 0.7425938727886989;
    msg.lon = 0.37803400015338906;
    msg.height = 0.27936626763894445;
    msg.satellites = 222U;
    msg.cog = 0.07427427684846188;
    msg.sog = 0.9139912131688708;
    msg.hdop = 0.8434253746518461;
    msg.vdop = 0.22896262926608157;
    msg.hacc = 0.6698161898036195;
    msg.vacc = 0.2491212923791991;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.36569526200264624);
    msg.setSource(55627U);
    msg.setSourceEntity(222U);
    msg.setDestination(9884U);
    msg.setDestinationEntity(231U);
    msg.validity = 16388U;
    msg.type = 127U;
    msg.utc_year = 28254U;
    msg.utc_month = 254U;
    msg.utc_day = 208U;
    msg.utc_time = 0.9470961035592134;
    msg.lat = 0.16119349375169967;
    msg.lon = 0.806198707889673;
    msg.height = 0.7246122770296645;
    msg.satellites = 24U;
    msg.cog = 0.883775503761108;
    msg.sog = 0.759515355202784;
    msg.hdop = 0.6246411588538083;
    msg.vdop = 0.9235765849172765;
    msg.hacc = 0.8279700729118316;
    msg.vacc = 0.6369828925169968;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.6563864075650293);
    msg.setSource(20760U);
    msg.setSourceEntity(51U);
    msg.setDestination(23644U);
    msg.setDestinationEntity(163U);
    msg.validity = 31995U;
    msg.type = 70U;
    msg.utc_year = 32461U;
    msg.utc_month = 231U;
    msg.utc_day = 250U;
    msg.utc_time = 0.795158053369609;
    msg.lat = 0.3001676346927905;
    msg.lon = 0.929214952950978;
    msg.height = 0.5830964823980958;
    msg.satellites = 179U;
    msg.cog = 0.16690377979504822;
    msg.sog = 0.7275315851503296;
    msg.hdop = 0.11933254467692866;
    msg.vdop = 0.9468485645962876;
    msg.hacc = 0.5696931369572386;
    msg.vacc = 0.845020947227145;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.7230568792566123);
    msg.setSource(46808U);
    msg.setSourceEntity(175U);
    msg.setDestination(30854U);
    msg.setDestinationEntity(236U);
    msg.time = 0.7241012880681235;
    msg.phi = 0.1893338980096133;
    msg.theta = 0.7648787623051179;
    msg.psi = 0.7741686762020704;
    msg.psi_magnetic = 0.6075992075811862;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.9245383522389276);
    msg.setSource(37418U);
    msg.setSourceEntity(77U);
    msg.setDestination(39396U);
    msg.setDestinationEntity(55U);
    msg.time = 0.3995915378926853;
    msg.phi = 0.7957599529575912;
    msg.theta = 0.01629842249721558;
    msg.psi = 0.3982715887994632;
    msg.psi_magnetic = 0.6384091671043118;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.303671391846442);
    msg.setSource(48471U);
    msg.setSourceEntity(118U);
    msg.setDestination(48490U);
    msg.setDestinationEntity(232U);
    msg.time = 0.629491554335967;
    msg.phi = 0.8327650829392634;
    msg.theta = 0.07505467586255576;
    msg.psi = 0.45477413489554974;
    msg.psi_magnetic = 0.21760004384386222;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.45220423484999783);
    msg.setSource(20539U);
    msg.setSourceEntity(123U);
    msg.setDestination(13880U);
    msg.setDestinationEntity(63U);
    msg.time = 0.013627487049498233;
    msg.x = 0.9235795063105721;
    msg.y = 0.43087417681479767;
    msg.z = 0.46697757631043857;
    msg.timestep = 0.24486387871308746;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.5724782890901309);
    msg.setSource(10103U);
    msg.setSourceEntity(203U);
    msg.setDestination(17378U);
    msg.setDestinationEntity(22U);
    msg.time = 0.45620942548664145;
    msg.x = 0.4666431390760636;
    msg.y = 0.6697055276162778;
    msg.z = 0.46191277584920254;
    msg.timestep = 0.9242919911258602;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.7906814616802895);
    msg.setSource(49216U);
    msg.setSourceEntity(180U);
    msg.setDestination(33688U);
    msg.setDestinationEntity(183U);
    msg.time = 0.6043426344544934;
    msg.x = 0.9405279626064794;
    msg.y = 0.40900795890199415;
    msg.z = 0.13617514230911598;
    msg.timestep = 0.045638376967044314;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.8426398680926236);
    msg.setSource(46987U);
    msg.setSourceEntity(75U);
    msg.setDestination(52945U);
    msg.setDestinationEntity(224U);
    msg.time = 0.8443184207182826;
    msg.x = 0.779139952509741;
    msg.y = 0.7954019827362516;
    msg.z = 0.8230356891268805;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.47464727629731573);
    msg.setSource(60950U);
    msg.setSourceEntity(143U);
    msg.setDestination(55306U);
    msg.setDestinationEntity(28U);
    msg.time = 0.5674270265148816;
    msg.x = 0.00047188188312485835;
    msg.y = 0.6818786212394556;
    msg.z = 0.414989788634607;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.8371997029918383);
    msg.setSource(54542U);
    msg.setSourceEntity(0U);
    msg.setDestination(49548U);
    msg.setDestinationEntity(168U);
    msg.time = 0.3091187450383831;
    msg.x = 0.029932771563101368;
    msg.y = 0.938611853185145;
    msg.z = 0.11350103399642553;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.4830668966063538);
    msg.setSource(15832U);
    msg.setSourceEntity(172U);
    msg.setDestination(45623U);
    msg.setDestinationEntity(1U);
    msg.time = 0.1771223875550717;
    msg.x = 0.5183426319845674;
    msg.y = 0.40177478845686354;
    msg.z = 0.1664242419644597;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.7733113195933058);
    msg.setSource(12662U);
    msg.setSourceEntity(2U);
    msg.setDestination(50657U);
    msg.setDestinationEntity(242U);
    msg.time = 0.9130999956338892;
    msg.x = 0.7826203666849728;
    msg.y = 0.6623720859596856;
    msg.z = 0.2243550719907258;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.03178056798819395);
    msg.setSource(41980U);
    msg.setSourceEntity(46U);
    msg.setDestination(57712U);
    msg.setDestinationEntity(224U);
    msg.time = 0.07903760767826562;
    msg.x = 0.6190024874187723;
    msg.y = 0.7605193712164514;
    msg.z = 0.46971057327876375;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.2607997330600824);
    msg.setSource(31529U);
    msg.setSourceEntity(122U);
    msg.setDestination(5459U);
    msg.setDestinationEntity(153U);
    msg.time = 0.18611807259891688;
    msg.x = 0.31749455875879284;
    msg.y = 0.8810424077970951;
    msg.z = 0.7122761341713268;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.8476363609702648);
    msg.setSource(56360U);
    msg.setSourceEntity(142U);
    msg.setDestination(61575U);
    msg.setDestinationEntity(137U);
    msg.time = 0.9899692093885402;
    msg.x = 0.9444574733221428;
    msg.y = 0.26236391983563534;
    msg.z = 0.4111611644752543;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.9782864977052181);
    msg.setSource(56650U);
    msg.setSourceEntity(114U);
    msg.setDestination(21880U);
    msg.setDestinationEntity(175U);
    msg.time = 0.9825332719965866;
    msg.x = 0.5005304596501542;
    msg.y = 0.07086053310312412;
    msg.z = 0.6883994305594459;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.8000740526279387);
    msg.setSource(11160U);
    msg.setSourceEntity(18U);
    msg.setDestination(50962U);
    msg.setDestinationEntity(168U);
    msg.validity = 121U;
    msg.x = 0.8911646529242188;
    msg.y = 0.3209747510046135;
    msg.z = 0.6336967228690027;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.032596168778634915);
    msg.setSource(62783U);
    msg.setSourceEntity(7U);
    msg.setDestination(55546U);
    msg.setDestinationEntity(52U);
    msg.validity = 88U;
    msg.x = 0.781689684777307;
    msg.y = 0.63597239398645;
    msg.z = 0.9694583108481438;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.7826479257060023);
    msg.setSource(15965U);
    msg.setSourceEntity(3U);
    msg.setDestination(13818U);
    msg.setDestinationEntity(8U);
    msg.validity = 104U;
    msg.x = 0.9459645822165001;
    msg.y = 0.36801342915902113;
    msg.z = 0.07569577978837327;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.5162481924580118);
    msg.setSource(53059U);
    msg.setSourceEntity(190U);
    msg.setDestination(58944U);
    msg.setDestinationEntity(232U);
    msg.validity = 147U;
    msg.x = 0.9246039142005307;
    msg.y = 0.2725315846673553;
    msg.z = 0.7365559221454809;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.0023301128687330808);
    msg.setSource(34789U);
    msg.setSourceEntity(239U);
    msg.setDestination(36424U);
    msg.setDestinationEntity(126U);
    msg.validity = 75U;
    msg.x = 0.9112744057730562;
    msg.y = 0.5531697306681788;
    msg.z = 0.4442845732023878;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.4365929901740625);
    msg.setSource(42204U);
    msg.setSourceEntity(102U);
    msg.setDestination(47898U);
    msg.setDestinationEntity(121U);
    msg.validity = 247U;
    msg.x = 0.9137451001844829;
    msg.y = 0.5850385575764366;
    msg.z = 0.5012583591787341;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.1568232054859876);
    msg.setSource(37385U);
    msg.setSourceEntity(37U);
    msg.setDestination(8524U);
    msg.setDestinationEntity(36U);
    msg.time = 0.2858023610856635;
    msg.x = 0.1432476275779475;
    msg.y = 0.5258093856686381;
    msg.z = 0.7014716287311353;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.3171417225468879);
    msg.setSource(39127U);
    msg.setSourceEntity(0U);
    msg.setDestination(48165U);
    msg.setDestinationEntity(208U);
    msg.time = 0.30846740522713356;
    msg.x = 0.22291889005321164;
    msg.y = 0.49739592322879767;
    msg.z = 0.8419433073855418;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.055462432127188266);
    msg.setSource(40867U);
    msg.setSourceEntity(130U);
    msg.setDestination(1826U);
    msg.setDestinationEntity(62U);
    msg.time = 0.5251143773126955;
    msg.x = 0.23084960706916546;
    msg.y = 0.5037585088544086;
    msg.z = 0.6133668687882164;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.3322307133874869);
    msg.setSource(37083U);
    msg.setSourceEntity(36U);
    msg.setDestination(14369U);
    msg.setDestinationEntity(198U);
    msg.validity = 13U;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.7609040348595609;
    tmp_msg_0.beam_height = 0.6680384256841121;
    msg.beam_config.push_back(tmp_msg_0);
    msg.value = 0.3738204745031459;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.09476949991624883);
    msg.setSource(43280U);
    msg.setSourceEntity(174U);
    msg.setDestination(34804U);
    msg.setDestinationEntity(192U);
    msg.validity = 199U;
    msg.value = 0.8610938561250525;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.2598244904009003);
    msg.setSource(41358U);
    msg.setSourceEntity(75U);
    msg.setDestination(15607U);
    msg.setDestinationEntity(232U);
    msg.validity = 53U;
    msg.value = 0.8537009574478353;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.9002447813452155);
    msg.setSource(4194U);
    msg.setSourceEntity(211U);
    msg.setDestination(26115U);
    msg.setDestinationEntity(95U);
    msg.time = 0.9936993808643468;
    msg.value = 0.18272709333260584;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.7176929817896499);
    msg.setSource(37244U);
    msg.setSourceEntity(200U);
    msg.setDestination(65067U);
    msg.setDestinationEntity(172U);
    msg.time = 0.6921039552513778;
    msg.value = 0.42904683018206247;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.1146488602852539);
    msg.setSource(39246U);
    msg.setSourceEntity(252U);
    msg.setDestination(39545U);
    msg.setDestinationEntity(5U);
    msg.time = 0.4396698991913176;
    msg.value = 0.5008999975542949;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.8701107272390867);
    msg.setSource(62088U);
    msg.setSourceEntity(104U);
    msg.setDestination(38073U);
    msg.setDestinationEntity(54U);
    msg.value = 0.6231612651527932;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.8959325819321706);
    msg.setSource(5990U);
    msg.setSourceEntity(120U);
    msg.setDestination(33756U);
    msg.setDestinationEntity(206U);
    msg.value = 0.1119946243944735;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.22744189678144577);
    msg.setSource(21726U);
    msg.setSourceEntity(145U);
    msg.setDestination(23018U);
    msg.setDestinationEntity(221U);
    msg.value = 0.4708026919355579;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.04689190127300735);
    msg.setSource(34422U);
    msg.setSourceEntity(71U);
    msg.setDestination(47871U);
    msg.setDestinationEntity(181U);
    msg.value = 0.32654934461212026;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.7271658749286408);
    msg.setSource(39133U);
    msg.setSourceEntity(95U);
    msg.setDestination(19737U);
    msg.setDestinationEntity(213U);
    msg.value = 0.24140583552774308;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.830689590704919);
    msg.setSource(58796U);
    msg.setSourceEntity(84U);
    msg.setDestination(62147U);
    msg.setDestinationEntity(51U);
    msg.value = 0.9082512056532096;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.5037717093558175);
    msg.setSource(56093U);
    msg.setSourceEntity(142U);
    msg.setDestination(2512U);
    msg.setDestinationEntity(225U);
    msg.value = 0.9249965602511111;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.3430937268279083);
    msg.setSource(46082U);
    msg.setSourceEntity(222U);
    msg.setDestination(59071U);
    msg.setDestinationEntity(241U);
    msg.value = 0.9950153796414808;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.49407073025712744);
    msg.setSource(49472U);
    msg.setSourceEntity(136U);
    msg.setDestination(49033U);
    msg.setDestinationEntity(187U);
    msg.value = 0.2189950247520629;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.012017137531963873);
    msg.setSource(8853U);
    msg.setSourceEntity(72U);
    msg.setDestination(17349U);
    msg.setDestinationEntity(213U);
    msg.value = 0.6363803508104093;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.8509629314083008);
    msg.setSource(53953U);
    msg.setSourceEntity(221U);
    msg.setDestination(26408U);
    msg.setDestinationEntity(32U);
    msg.value = 0.7874811486342702;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.3409137492281822);
    msg.setSource(49662U);
    msg.setSourceEntity(166U);
    msg.setDestination(1520U);
    msg.setDestinationEntity(179U);
    msg.value = 0.8392737934164438;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.6805027172443481);
    msg.setSource(35299U);
    msg.setSourceEntity(47U);
    msg.setDestination(36610U);
    msg.setDestinationEntity(56U);
    msg.value = 0.2733528985005437;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.596792135594703);
    msg.setSource(16415U);
    msg.setSourceEntity(48U);
    msg.setDestination(589U);
    msg.setDestinationEntity(138U);
    msg.value = 0.37960984630558137;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.44705555177433465);
    msg.setSource(51516U);
    msg.setSourceEntity(93U);
    msg.setDestination(25206U);
    msg.setDestinationEntity(60U);
    msg.value = 0.6153889135707773;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.7798540631308017);
    msg.setSource(60866U);
    msg.setSourceEntity(98U);
    msg.setDestination(27071U);
    msg.setDestinationEntity(164U);
    msg.value = 0.35129566576321514;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.6654477884960925);
    msg.setSource(49068U);
    msg.setSourceEntity(54U);
    msg.setDestination(1959U);
    msg.setDestinationEntity(138U);
    msg.value = 0.754890890374388;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.7201515237987548);
    msg.setSource(52033U);
    msg.setSourceEntity(8U);
    msg.setDestination(8716U);
    msg.setDestinationEntity(206U);
    msg.value = 0.9736741260442753;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.7550559289790679);
    msg.setSource(15953U);
    msg.setSourceEntity(168U);
    msg.setDestination(19031U);
    msg.setDestinationEntity(27U);
    msg.value = 0.9197082096531173;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.07136618728212218);
    msg.setSource(56978U);
    msg.setSourceEntity(125U);
    msg.setDestination(30860U);
    msg.setDestinationEntity(7U);
    msg.value = 0.1889584806360134;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.9202960205517968);
    msg.setSource(17878U);
    msg.setSourceEntity(121U);
    msg.setDestination(16187U);
    msg.setDestinationEntity(148U);
    msg.value = 0.26602797609161555;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.979162181925022);
    msg.setSource(25907U);
    msg.setSourceEntity(106U);
    msg.setDestination(17840U);
    msg.setDestinationEntity(249U);
    msg.direction = 0.47983069917055265;
    msg.speed = 0.22314067319889297;
    msg.turbulence = 0.527046005350213;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.25831564076828073);
    msg.setSource(19472U);
    msg.setSourceEntity(10U);
    msg.setDestination(62957U);
    msg.setDestinationEntity(107U);
    msg.direction = 0.0690208562486827;
    msg.speed = 0.9892236451816512;
    msg.turbulence = 0.022554734958958322;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.04254631132538922);
    msg.setSource(35029U);
    msg.setSourceEntity(196U);
    msg.setDestination(62177U);
    msg.setDestinationEntity(138U);
    msg.direction = 0.5978239511784615;
    msg.speed = 0.563405181939551;
    msg.turbulence = 0.28087646399908284;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.9361243146723688);
    msg.setSource(3258U);
    msg.setSourceEntity(40U);
    msg.setDestination(35473U);
    msg.setDestinationEntity(130U);
    msg.value = 0.025662540362930364;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.5045105402522888);
    msg.setSource(41287U);
    msg.setSourceEntity(157U);
    msg.setDestination(46312U);
    msg.setDestinationEntity(253U);
    msg.value = 0.833379472612199;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.8935132408969134);
    msg.setSource(420U);
    msg.setSourceEntity(29U);
    msg.setDestination(58671U);
    msg.setDestinationEntity(148U);
    msg.value = 0.35446203238102136;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.03436687364450963);
    msg.setSource(49717U);
    msg.setSourceEntity(160U);
    msg.setDestination(45423U);
    msg.setDestinationEntity(75U);
    msg.value.assign("RRNITPMEFKSQVAAXKLZAHINBYWETBLJRHSERHKDSGGGTVBNYWPPTYVCFCVWQQHCTGYUYFMUJLNGDXDAJZZWYAAEBWTOXGKNOYTVJQDWXIQKNTUQEBVXMXZCUZMPBKYAEASILKPM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.6840176689722108);
    msg.setSource(48817U);
    msg.setSourceEntity(106U);
    msg.setDestination(1685U);
    msg.setDestinationEntity(186U);
    msg.value.assign("ZNKKCUWNTAGVTUALFDZEUDDMPTIHZCOIUGOIFIWPKFEVLPJOCDSWMHLDCQFUSBMXKBSWAKUNTFEKAOQXZZVDHAMJVWPMCJBJXSECHLNYZPYNFOYXEUMQRYEEGFSQPDCRGVCPTGRYTDQLUVLEEBZFIPMFZXXHTUHGOZYKXISJLZWRTANIDQVGWAVHNDPNL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.7407576957462294);
    msg.setSource(46190U);
    msg.setSourceEntity(183U);
    msg.setDestination(36752U);
    msg.setDestinationEntity(154U);
    msg.value.assign("CZYYXMPPGSX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.8053120971688441);
    msg.setSource(14616U);
    msg.setSourceEntity(243U);
    msg.setDestination(65387U);
    msg.setDestinationEntity(6U);
    const signed char tmp_msg_0[] = {-105, 118, -90, 88, 119, -22, 6, -57, -29, -3, -6, 85, -116, 98, -99, 119, -78, 14, -61, -68, -72, -110, 67, 46, 78, 71, -67, -47, -106, 51, -61, 121, -74, -16, -22, -47, 68, -38, 30, 119, 24, 42, 59, 51, -124, 76, 41, 90, -100, 92, 4, -88, 120, 35, 17, -19, 113, -85, -126, 123, -82};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.6921152047691638);
    msg.setSource(35144U);
    msg.setSourceEntity(2U);
    msg.setDestination(29320U);
    msg.setDestinationEntity(236U);
    const signed char tmp_msg_0[] = {-54, -4, -30, 46, 110, 59, -73, 89, 110, 17, 32, -10, -24, -125, 66, 57, 29, -11, 45, 27, -93, 28, 82, -85, -95, -59, -70, -1, -68, 120, -35, 53, -117, 14, -55, -125, -110, -9, -20, -70, 82, -43, -35, 88, 73, -42, 51, 98, -118, -79, 29, 47, 50, -54, 6, -105, 92, -125, -98, 117, 12, -85, 49, 115, 80, 12, 98, -26, 107, -102, -85, 25, 54, 79, 101, 13, 94, -85, 31, -66, -125, 27, 52, -85, -15, -76, -95, -5, 59, 29, 124, 12, 62, -12, -28, 39, -81, 112, 71, -10, 75, 49, -5, -50, 96, 92, -110, 79, 54, -1, 41, 61, 21, -39, -64, 64, -84, -14, 0, 119, 83, 94, 36, -110, -91, -54, 123, -62, 56, -81, 77, 34, 65, -5, 35, 3, -41, 12, 67, -108, -21, -100, 38, 12, 72, -55, -109, 118, 46, 77, 7, 78, 43, 96, 33, 93, 60, 54, -117, -117, 64, 58, -103, -30, -45, 63, 109, 108, 68, -53, 68, -48, 0, 43, -119, -3, -15, 74, -127, 53, 64, -19, 111, -97, -85, 96, 96, -119, -105, 77, -31, -124, -78, -56, -44, -65, 73, -75, -120, 82, -124, -61, 53, -37, -50, -18, -69, 62, 112, 56, 103, 14, 61, 64, -62, -118, 23, 109, -117, -25, -40, -34, 23, -14, 4, -125, 120, -101, 80, 30, 99, -49, -96, -77, 13, -31};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.01295905700871347);
    msg.setSource(1312U);
    msg.setSourceEntity(92U);
    msg.setDestination(8004U);
    msg.setDestinationEntity(64U);
    const signed char tmp_msg_0[] = {74, -48, 37, 49, 36, 97, -63, -16, 98, 21, 6, -91, 79, 67, -38, -36, -50, 36, 95, -128, 35, 61, 124, 76, 74, 43, 45, 27, 80, 119, -85, -48, -22, 86, -119, -3, -39, -91, 41, 11, -91, -61, 13, 48, 75, 54, 93, -31, 87, 5, -81, -125, 109, 116, 1, -38, 115, 39, 38, 55, -114, -92, 27, -93, 54, 112, -31, 50, -58, 33, -108, -106, 50, 117, -128, -119, -103, 4, 118, 92, 19, -75, 67, -14, -9, -71, -21, -95, 67, 82, -37, 22, 46, -50, -14, 51, -120, 19, -76, -3, -8, 85, -40, -101, 60, -30, 0, 70, 27, -19, 3, 1, 107, -14, -13, -34, -69, -119, 77, 122, -32, 49, 98, 47, -117, 117, 89, -22, -47, 4, 86, 28, 74, 73, 38, -94, 77, -8, -40, 11, -116, 14, -101, -54, -48, 4, -104, 113, 62, 98, -87, 108, 74, -13, -6, -57, -28, 105, -5, -40, 126, 113, -7, -19, -92, -5, -11, -96, 80, 65, 108, -80, -27, -57, 5, -36, 16, -39, 43, -123, -115, 31, -15, -6, -105, -127, 121, 49, 26, 27, -22, -52, 122, -100, -21, 94, -91, 113, 43, -94, 68, -110, -111, 3, -28, -34, 31, -45, -36, -34, 91, -106, -31, 50, 64, 81, -5, -98, -11, -124, 36, -48, -14, -39, 58, 109, 70, -58, -73, -93, -42, 105, -51, -100, 58, 11, -79, -90, 111, 96, -70, -80, 72, 68, -41};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.422203641983141);
    msg.setSource(41874U);
    msg.setSourceEntity(79U);
    msg.setDestination(75U);
    msg.setDestinationEntity(93U);
    msg.value = 0.01992800550988183;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.34264982129034705);
    msg.setSource(17104U);
    msg.setSourceEntity(25U);
    msg.setDestination(37252U);
    msg.setDestinationEntity(41U);
    msg.value = 0.9852977938570234;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.9957366417758188);
    msg.setSource(30914U);
    msg.setSourceEntity(147U);
    msg.setDestination(52747U);
    msg.setDestinationEntity(212U);
    msg.value = 0.29767534138333374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.44372243430151137);
    msg.setSource(58204U);
    msg.setSourceEntity(56U);
    msg.setDestination(37050U);
    msg.setDestinationEntity(167U);
    msg.type = 217U;
    msg.frequency = 3204552483U;
    msg.min_range = 25713U;
    msg.max_range = 20571U;
    msg.bits_per_point = 80U;
    msg.scale_factor = 0.41680009698916787;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.8138838323470783;
    tmp_msg_0.beam_height = 0.6337431527399097;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {122, 110, 108, 24, 54, -96, 48, 27, 4, -85, -75, -122, 56, -50, 113, -92, -67, -16, 107, 79, -17, -67, -41, -38, 26, 72, -49, 110, -86, -7, 119, 8, 88, -114, -114, -9, -34, -97, 38, -13, 104, -77, -88, 47, -128, 93, 12, -114, -64, 0, -127, -27, 104, -116, 35, -103, 111, 46, 84, 42, -105, -108, -95, -66, -113, 44, 90, -100, 119, 101, -110, 125, -90, -28, -3, 94, 90, 22, -35, 35, 39, -91, 40, -100, 14, -125, -17, 60, 50, 126, -107, -103, -93, -96, -87, 112, -55, -62, -56, 120, -46, 97, -28, -83, 100, -4, 100, -63, 79, -26, -29, -105, 117, 65, 56, 62, 9, -36, 110, -88, 55, -56, 126, -32, 101, 24, -82, -20, -23, -47, -69, 86, 118, -71, -122, -18, -36, 114, -57, -105, -73, -40, 65, 70, 125, 15, -9, -127, -31, 3, -20, 123, -94};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.4707752180910869);
    msg.setSource(52394U);
    msg.setSourceEntity(86U);
    msg.setDestination(27297U);
    msg.setDestinationEntity(99U);
    msg.type = 109U;
    msg.frequency = 1941085427U;
    msg.min_range = 63400U;
    msg.max_range = 14400U;
    msg.bits_per_point = 227U;
    msg.scale_factor = 0.12135501876389398;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.8390931399576641;
    tmp_msg_0.beam_height = 0.9770007097488409;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {26, 104, -26, 5, 103, 53, -110, -24, -2, 80, 32, -81, 44, -65, 21, 27, 96, -38, 66, 97, -37, -86, -16, 120, 2, -5, 103, 66, 103, 114, -50, 125, 12, -3, -101, 92, -76, 70, -105, -127, -23, 41, -108, -53, 42, -128, -53, 98, -109, 14, 64, 110, -21, -12, -93, -71, 73, 86, -120, 84, -47, -21, 103, -94, -13, 53, -17, -98, -7, -7, 45, 52, 97, 73, -74, -9, 1, 37, 12, -54, 102, 72, -109, 6, -63, -116, 0, 103, -107, -26, -85, -126, 45, -28, 62, -76, -16, -3, 62, 30, 119, 11, -80, 54, -121, -118, 18, 73, 34, 73, -25, -48, -60, -86, 25, 3, -71, 45, -6, 39, -113, 77, 78, -82, -125, 9, 29, -50, -38, -13, -52, 25, 106, -59, -111, 54, 78, -37, -75, -108, 29, -28, 1, -26, 8, 116, 17, -65, -1, 49, 110, 2, 27, 62, 26, -15, -68, -94, 56, -8, -125, 95, 15, 69, -7, -112, -29, -105, 52, -51, 70, 25, -42, -56, 92, -23, 37, -69, -92, -93, 126, 36, 3, 86, 77, -108, -113, -93, 43, 12, 13, 95, 46, -104, -87, -119};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.5794817449503091);
    msg.setSource(31366U);
    msg.setSourceEntity(19U);
    msg.setDestination(41949U);
    msg.setDestinationEntity(145U);
    msg.type = 232U;
    msg.frequency = 1543434681U;
    msg.min_range = 12949U;
    msg.max_range = 34496U;
    msg.bits_per_point = 250U;
    msg.scale_factor = 0.06276739439652756;
    const signed char tmp_msg_0[] = {34, 93, 27, -128, -123, -90, -56, -70, 24, -50, 48, -116, 117, -70, 123, 57, -107, -65, 81, -9, 68, 77, -105, 85, -33, -49, 37, 73, 87, 73, -1, -99, -22, 113, -86, -14, -25, -110, -29, -63, -64, -14, -112, -29, 60, 98, 36, 15, 86, -34, 112, -37, 114, 88, -92, 104, -127, 87, 62, 103, 31, -103, -18, 15, 41, 63, 58, 30, 49, 72, -65, 94, 27, -91, 38, 80, -4, -101, 112, 65, -108, -49, 21, -40, 50, -35, -33, -69, -114, -7, 54, 73, -65, 45, -105, 90, -26, -113, -123, -71, 91, -23, -24, -117, -59, 7, 16, -114, -92, -81, -101, -13, 16, 62, 116, -5, 4, 44, 124, 69, 27, 42, 5, -69, -111, 63, 41, -125, 72, -62, 25, -73, -42, 0, 103, -116, -34, -28, -22, -125, 50, 44};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.38913913292044566);
    msg.setSource(29871U);
    msg.setSourceEntity(40U);
    msg.setDestination(910U);
    msg.setDestinationEntity(36U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.8401169936383439);
    msg.setSource(8813U);
    msg.setSourceEntity(121U);
    msg.setDestination(4962U);
    msg.setDestinationEntity(76U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.7944812858804974);
    msg.setSource(5320U);
    msg.setSourceEntity(171U);
    msg.setDestination(49663U);
    msg.setDestinationEntity(172U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.6869408999649886);
    msg.setSource(54181U);
    msg.setSourceEntity(171U);
    msg.setDestination(12270U);
    msg.setDestinationEntity(46U);
    msg.op = 162U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.058675795343140824);
    msg.setSource(18206U);
    msg.setSourceEntity(105U);
    msg.setDestination(20753U);
    msg.setDestinationEntity(15U);
    msg.op = 226U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.06568493990918245);
    msg.setSource(29248U);
    msg.setSourceEntity(205U);
    msg.setDestination(55243U);
    msg.setDestinationEntity(215U);
    msg.op = 145U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.8085601162201582);
    msg.setSource(4288U);
    msg.setSourceEntity(171U);
    msg.setDestination(56327U);
    msg.setDestinationEntity(176U);
    msg.value = 0.3537495049023427;
    msg.confidence = 0.7417876009306876;
    msg.opmodes.assign("STIRNTTOBOBUIMVMDVXCWICNMBERUWFYPZQPQXRUPDGHKQTBLKINNMWZSGURQIBKFBCVSJSDVLASAPJQCIAPIGCNDZN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.3678273470925152);
    msg.setSource(42673U);
    msg.setSourceEntity(113U);
    msg.setDestination(63177U);
    msg.setDestinationEntity(254U);
    msg.value = 0.4099888091720657;
    msg.confidence = 0.19940836724564193;
    msg.opmodes.assign("YKYYMKXPANIFTXANEWQMFLVKZGWFLTGJHLCHOADAYPJRXZJWGHEJZTFFDODVCEBPBZDRLNLKSHQQCBXKUFLTUZWVQOIJOQLMXAQURFDMPVDRGSMLUDBPSPWTNYJIHKVBEUETGNNIQSMPJFBVSYZNCHKPDAAZGGAGQNGWUXIWOZODYTCFHCHICETKRJBMBTOYXSPUDEPMLWJXZEVNEJTQVCFOOBWRSRV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.6460999995348808);
    msg.setSource(28609U);
    msg.setSourceEntity(185U);
    msg.setDestination(48432U);
    msg.setDestinationEntity(213U);
    msg.value = 0.6891110742526722;
    msg.confidence = 0.24555524754038083;
    msg.opmodes.assign("KHBZTVNAWMRNAE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.9109898380825839);
    msg.setSource(12763U);
    msg.setSourceEntity(207U);
    msg.setDestination(29660U);
    msg.setDestinationEntity(202U);
    msg.itow = 408310921U;
    msg.lat = 0.8847586194359017;
    msg.lon = 0.31603106352607224;
    msg.height_ell = 0.007477589890584668;
    msg.height_sea = 0.012478788969524257;
    msg.hacc = 0.16712988630675307;
    msg.vacc = 0.022828627669394863;
    msg.vel_n = 0.4072808150835824;
    msg.vel_e = 0.5747127373111929;
    msg.vel_d = 0.9425254891487798;
    msg.speed = 0.2624757181221886;
    msg.gspeed = 0.31102742948555306;
    msg.heading = 0.11497471300271256;
    msg.sacc = 0.42217815248197177;
    msg.cacc = 0.9388116709689563;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.6509906893819964);
    msg.setSource(3124U);
    msg.setSourceEntity(75U);
    msg.setDestination(17346U);
    msg.setDestinationEntity(33U);
    msg.itow = 3542502831U;
    msg.lat = 0.37039870251976803;
    msg.lon = 0.8250427787008082;
    msg.height_ell = 0.5096037780844562;
    msg.height_sea = 0.829894280266472;
    msg.hacc = 0.06462336978819927;
    msg.vacc = 0.7997023704886639;
    msg.vel_n = 0.9615181415766789;
    msg.vel_e = 0.34617423288349636;
    msg.vel_d = 0.6554773052848109;
    msg.speed = 0.7473202210622429;
    msg.gspeed = 0.25361922653025815;
    msg.heading = 0.03060792558648462;
    msg.sacc = 0.27566570457041173;
    msg.cacc = 0.2332388527903495;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.7114406463838998);
    msg.setSource(43930U);
    msg.setSourceEntity(147U);
    msg.setDestination(13752U);
    msg.setDestinationEntity(157U);
    msg.itow = 3179672727U;
    msg.lat = 0.9244369510273988;
    msg.lon = 0.2943532705522717;
    msg.height_ell = 0.259236275341036;
    msg.height_sea = 0.9105447568048565;
    msg.hacc = 0.3382680858950393;
    msg.vacc = 0.08523096514659556;
    msg.vel_n = 0.4148642362886171;
    msg.vel_e = 0.3237932369965132;
    msg.vel_d = 0.3734860692538099;
    msg.speed = 0.7321387347533792;
    msg.gspeed = 0.5100205567574112;
    msg.heading = 0.47819470359816063;
    msg.sacc = 0.30747760926396694;
    msg.cacc = 0.15693409296355698;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.23749226451073369);
    msg.setSource(14574U);
    msg.setSourceEntity(81U);
    msg.setDestination(10284U);
    msg.setDestinationEntity(230U);
    msg.id = 241U;
    msg.value = 0.1277953518879792;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.7116661203644766);
    msg.setSource(52790U);
    msg.setSourceEntity(53U);
    msg.setDestination(64180U);
    msg.setDestinationEntity(26U);
    msg.id = 177U;
    msg.value = 0.031421186384967936;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.32586262086520723);
    msg.setSource(53981U);
    msg.setSourceEntity(200U);
    msg.setDestination(61197U);
    msg.setDestinationEntity(156U);
    msg.id = 68U;
    msg.value = 0.6318471574450394;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.4175887533092586);
    msg.setSource(46059U);
    msg.setSourceEntity(3U);
    msg.setDestination(11372U);
    msg.setDestinationEntity(109U);
    msg.x = 0.005292401964505977;
    msg.y = 0.592093864376067;
    msg.z = 0.6232280875049315;
    msg.phi = 0.2516988232464594;
    msg.theta = 0.33409053642626196;
    msg.psi = 0.6627412767623792;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.36087966497591684);
    msg.setSource(53035U);
    msg.setSourceEntity(143U);
    msg.setDestination(39279U);
    msg.setDestinationEntity(227U);
    msg.x = 0.41606119376590467;
    msg.y = 0.4073878870640968;
    msg.z = 0.9589312026041179;
    msg.phi = 0.9711046368924748;
    msg.theta = 0.2163259842777553;
    msg.psi = 0.8706534205514157;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.711211008397758);
    msg.setSource(17887U);
    msg.setSourceEntity(23U);
    msg.setDestination(54848U);
    msg.setDestinationEntity(29U);
    msg.x = 0.9613605180725615;
    msg.y = 0.977247582390835;
    msg.z = 0.3612308509482155;
    msg.phi = 0.22316226751934087;
    msg.theta = 0.4723333257032374;
    msg.psi = 0.30638068734404333;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.4835356528125183);
    msg.setSource(46271U);
    msg.setSourceEntity(9U);
    msg.setDestination(49681U);
    msg.setDestinationEntity(13U);
    msg.beam_width = 0.9130693731615098;
    msg.beam_height = 0.3187197812814416;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.22104903293016198);
    msg.setSource(27139U);
    msg.setSourceEntity(103U);
    msg.setDestination(63405U);
    msg.setDestinationEntity(52U);
    msg.beam_width = 0.979417228693319;
    msg.beam_height = 0.6317110340647466;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.007648099026164257);
    msg.setSource(45143U);
    msg.setSourceEntity(70U);
    msg.setDestination(51203U);
    msg.setDestinationEntity(151U);
    msg.beam_width = 0.3967249514653888;
    msg.beam_height = 0.5679937668866342;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.8987673693635525);
    msg.setSource(32218U);
    msg.setSourceEntity(147U);
    msg.setDestination(21787U);
    msg.setDestinationEntity(88U);
    msg.sane = 236U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.5728511209795603);
    msg.setSource(56086U);
    msg.setSourceEntity(199U);
    msg.setDestination(34900U);
    msg.setDestinationEntity(111U);
    msg.sane = 188U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.9657706574124516);
    msg.setSource(40693U);
    msg.setSourceEntity(74U);
    msg.setDestination(38781U);
    msg.setDestinationEntity(153U);
    msg.sane = 131U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.26735663094613227);
    msg.setSource(49677U);
    msg.setSourceEntity(119U);
    msg.setDestination(51818U);
    msg.setDestinationEntity(151U);
    msg.value = 0.2473995617203435;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.19180855185538914);
    msg.setSource(60639U);
    msg.setSourceEntity(186U);
    msg.setDestination(23464U);
    msg.setDestinationEntity(186U);
    msg.value = 0.25262223523152916;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.6570574789863957);
    msg.setSource(23117U);
    msg.setSourceEntity(200U);
    msg.setDestination(60135U);
    msg.setDestinationEntity(233U);
    msg.value = 0.816519870163934;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.8795925679155868);
    msg.setSource(3152U);
    msg.setSourceEntity(153U);
    msg.setDestination(732U);
    msg.setDestinationEntity(129U);
    msg.value = 0.8504471017207829;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.552825740991356);
    msg.setSource(64485U);
    msg.setSourceEntity(168U);
    msg.setDestination(28881U);
    msg.setDestinationEntity(214U);
    msg.value = 0.9804185406367558;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.3459716696223216);
    msg.setSource(790U);
    msg.setSourceEntity(60U);
    msg.setDestination(63308U);
    msg.setDestinationEntity(206U);
    msg.value = 0.15176319103491331;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.1438214689981101);
    msg.setSource(30334U);
    msg.setSourceEntity(235U);
    msg.setDestination(29686U);
    msg.setDestinationEntity(214U);
    msg.value = 0.19114173556628655;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.8695844439325694);
    msg.setSource(13549U);
    msg.setSourceEntity(21U);
    msg.setDestination(5621U);
    msg.setDestinationEntity(179U);
    msg.value = 0.4924628510163387;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.5014669694562413);
    msg.setSource(21140U);
    msg.setSourceEntity(123U);
    msg.setDestination(61398U);
    msg.setDestinationEntity(214U);
    msg.value = 0.5570717450937411;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.38892492723419014);
    msg.setSource(19052U);
    msg.setSourceEntity(192U);
    msg.setDestination(60406U);
    msg.setDestinationEntity(240U);
    msg.value = 0.7428302975398977;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.48300535481043094);
    msg.setSource(42534U);
    msg.setSourceEntity(44U);
    msg.setDestination(9937U);
    msg.setDestinationEntity(246U);
    msg.value = 0.6651566219894997;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.7142448830031918);
    msg.setSource(791U);
    msg.setSourceEntity(93U);
    msg.setDestination(64120U);
    msg.setDestinationEntity(30U);
    msg.value = 0.31611227912129414;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.04723828526559526);
    msg.setSource(33651U);
    msg.setSourceEntity(129U);
    msg.setDestination(40442U);
    msg.setDestinationEntity(128U);
    msg.value = 0.08540358399551595;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.046093812151453695);
    msg.setSource(13071U);
    msg.setSourceEntity(136U);
    msg.setDestination(2167U);
    msg.setDestinationEntity(252U);
    msg.value = 0.0010069476655526488;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.5933602100236814);
    msg.setSource(11044U);
    msg.setSourceEntity(174U);
    msg.setDestination(19923U);
    msg.setDestinationEntity(48U);
    msg.value = 0.007530500517298089;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.6473687210543818);
    msg.setSource(53692U);
    msg.setSourceEntity(225U);
    msg.setDestination(33315U);
    msg.setDestinationEntity(164U);
    msg.value = 0.544640753248811;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.12379205963438422);
    msg.setSource(51091U);
    msg.setSourceEntity(42U);
    msg.setDestination(58923U);
    msg.setDestinationEntity(122U);
    msg.value = 0.4598200327424383;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.21953434997919075);
    msg.setSource(58890U);
    msg.setSourceEntity(129U);
    msg.setDestination(16012U);
    msg.setDestinationEntity(166U);
    msg.value = 0.9838477342907372;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.9364998035210782);
    msg.setSource(58205U);
    msg.setSourceEntity(251U);
    msg.setDestination(9837U);
    msg.setDestinationEntity(187U);
    msg.value = 0.3513804861756631;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.46083205242835323);
    msg.setSource(18608U);
    msg.setSourceEntity(36U);
    msg.setDestination(46147U);
    msg.setDestinationEntity(239U);
    msg.value = 0.025435359130072333;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.8599347451419128);
    msg.setSource(34391U);
    msg.setSourceEntity(138U);
    msg.setDestination(32481U);
    msg.setDestinationEntity(86U);
    msg.value = 0.8796868017905204;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.5847380196710559);
    msg.setSource(33946U);
    msg.setSourceEntity(75U);
    msg.setDestination(34173U);
    msg.setDestinationEntity(208U);
    msg.value = 0.8489734050668385;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.38241258955054924);
    msg.setSource(16828U);
    msg.setSourceEntity(168U);
    msg.setDestination(51247U);
    msg.setDestinationEntity(183U);
    msg.value = 0.11532048110416748;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.27406202138985336);
    msg.setSource(4958U);
    msg.setSourceEntity(68U);
    msg.setDestination(40347U);
    msg.setDestinationEntity(96U);
    msg.value = 0.15644935308883934;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.49585606616901123);
    msg.setSource(23968U);
    msg.setSourceEntity(64U);
    msg.setDestination(2691U);
    msg.setDestinationEntity(4U);
    msg.validity = 5811U;
    msg.type = 59U;
    msg.tow = 1715462224U;
    msg.base_lat = 0.04904349966901722;
    msg.base_lon = 0.8869442915618974;
    msg.base_height = 0.7792107367152364;
    msg.n = 0.9617943689467776;
    msg.e = 0.17042751648802634;
    msg.d = 0.41854915377873647;
    msg.v_n = 0.8732723658730974;
    msg.v_e = 0.11501954035189232;
    msg.v_d = 0.7600168881469294;
    msg.satellites = 13U;
    msg.iar_hyp = 64522U;
    msg.iar_ratio = 0.15340978773888214;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.1522003376884018);
    msg.setSource(20175U);
    msg.setSourceEntity(234U);
    msg.setDestination(56081U);
    msg.setDestinationEntity(148U);
    msg.validity = 33470U;
    msg.type = 49U;
    msg.tow = 2822063808U;
    msg.base_lat = 0.7465342734001027;
    msg.base_lon = 0.9615378198430249;
    msg.base_height = 0.9443299131523517;
    msg.n = 0.46641339173826324;
    msg.e = 0.9111555540819466;
    msg.d = 0.3596511694769411;
    msg.v_n = 0.264560466852646;
    msg.v_e = 0.6111743888141276;
    msg.v_d = 0.9941961229184263;
    msg.satellites = 214U;
    msg.iar_hyp = 255U;
    msg.iar_ratio = 0.9098038211483995;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.4674644615375958);
    msg.setSource(41012U);
    msg.setSourceEntity(108U);
    msg.setDestination(61903U);
    msg.setDestinationEntity(244U);
    msg.validity = 15236U;
    msg.type = 40U;
    msg.tow = 553556078U;
    msg.base_lat = 0.20730302257838507;
    msg.base_lon = 0.49657665155737596;
    msg.base_height = 0.06006416149946536;
    msg.n = 0.8156535732586034;
    msg.e = 0.8264493354197039;
    msg.d = 0.27161203099899467;
    msg.v_n = 0.30075130079252943;
    msg.v_e = 0.6609372048981235;
    msg.v_d = 0.7656031794573633;
    msg.satellites = 159U;
    msg.iar_hyp = 51520U;
    msg.iar_ratio = 0.39859527661193295;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.46666097338601875);
    msg.setSource(10698U);
    msg.setSourceEntity(242U);
    msg.setDestination(41913U);
    msg.setDestinationEntity(153U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.5779060819602783;
    tmp_msg_0.lon = 0.9136676389667118;
    tmp_msg_0.height = 0.9796200730930137;
    tmp_msg_0.x = 0.45160883787020567;
    tmp_msg_0.y = 0.8000851667220488;
    tmp_msg_0.z = 0.8943678000791471;
    tmp_msg_0.phi = 0.9744622855348911;
    tmp_msg_0.theta = 0.7208751945796822;
    tmp_msg_0.psi = 0.2188864624681235;
    tmp_msg_0.u = 0.3150509608699049;
    tmp_msg_0.v = 0.9424530739640697;
    tmp_msg_0.w = 0.7435278651345496;
    tmp_msg_0.vx = 0.0400540627082524;
    tmp_msg_0.vy = 0.25491642301159045;
    tmp_msg_0.vz = 0.3315725767843297;
    tmp_msg_0.p = 0.7029364318326667;
    tmp_msg_0.q = 0.8037182322495169;
    tmp_msg_0.r = 0.9256567566969127;
    tmp_msg_0.depth = 0.2811984935130628;
    tmp_msg_0.alt = 0.41688017640569186;
    msg.state.set(tmp_msg_0);
    msg.type = 40U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.6261629600117526);
    msg.setSource(36084U);
    msg.setSourceEntity(173U);
    msg.setDestination(44512U);
    msg.setDestinationEntity(28U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.8609808898883673;
    tmp_msg_0.lon = 0.38048211087465544;
    tmp_msg_0.height = 0.8407513989291069;
    tmp_msg_0.x = 0.4984835491292141;
    tmp_msg_0.y = 0.09114748249336524;
    tmp_msg_0.z = 0.2732808856444038;
    tmp_msg_0.phi = 0.9099205951067912;
    tmp_msg_0.theta = 0.31965674345532924;
    tmp_msg_0.psi = 0.4789104323642652;
    tmp_msg_0.u = 0.9469863794378104;
    tmp_msg_0.v = 0.42298759321862944;
    tmp_msg_0.w = 0.8413210636668464;
    tmp_msg_0.vx = 0.27789273306505646;
    tmp_msg_0.vy = 0.011028257179210743;
    tmp_msg_0.vz = 0.14522556895313665;
    tmp_msg_0.p = 0.30894787210012375;
    tmp_msg_0.q = 0.6845238305658123;
    tmp_msg_0.r = 0.3000727467902279;
    tmp_msg_0.depth = 0.7546154167985738;
    tmp_msg_0.alt = 0.23315752478358853;
    msg.state.set(tmp_msg_0);
    msg.type = 175U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.20660123087750182);
    msg.setSource(16392U);
    msg.setSourceEntity(197U);
    msg.setDestination(20906U);
    msg.setDestinationEntity(213U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.9287693460834975;
    tmp_msg_0.lon = 0.1345145508768526;
    tmp_msg_0.height = 0.4906523661676405;
    tmp_msg_0.x = 0.5060710088804404;
    tmp_msg_0.y = 0.5854250327840842;
    tmp_msg_0.z = 0.6237638759086359;
    tmp_msg_0.phi = 0.12716701562644595;
    tmp_msg_0.theta = 0.28027367260118763;
    tmp_msg_0.psi = 0.6102828855837015;
    tmp_msg_0.u = 0.8063331730808398;
    tmp_msg_0.v = 0.8651110674783987;
    tmp_msg_0.w = 0.0952456288329866;
    tmp_msg_0.vx = 0.9945384144135039;
    tmp_msg_0.vy = 0.12166771402946586;
    tmp_msg_0.vz = 0.06956490831132012;
    tmp_msg_0.p = 0.26541571917109075;
    tmp_msg_0.q = 0.5341495156276262;
    tmp_msg_0.r = 0.008965263777759969;
    tmp_msg_0.depth = 0.26528207469258214;
    tmp_msg_0.alt = 0.8240789855058956;
    msg.state.set(tmp_msg_0);
    msg.type = 132U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.6726400287654347);
    msg.setSource(26255U);
    msg.setSourceEntity(181U);
    msg.setDestination(45864U);
    msg.setDestinationEntity(129U);
    msg.value = 0.33337932644347523;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.7761691308450203);
    msg.setSource(48293U);
    msg.setSourceEntity(229U);
    msg.setDestination(61705U);
    msg.setDestinationEntity(246U);
    msg.value = 0.06667022265300027;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.09190453277692723);
    msg.setSource(38379U);
    msg.setSourceEntity(154U);
    msg.setDestination(7720U);
    msg.setDestinationEntity(12U);
    msg.value = 0.34723146440280495;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.007267978240826256);
    msg.setSource(14372U);
    msg.setSourceEntity(158U);
    msg.setDestination(63322U);
    msg.setDestinationEntity(159U);
    msg.value = 0.5758500696005034;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.10160701963738772);
    msg.setSource(31325U);
    msg.setSourceEntity(162U);
    msg.setDestination(21568U);
    msg.setDestinationEntity(64U);
    msg.value = 0.26774812055645814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.6602906928793466);
    msg.setSource(45895U);
    msg.setSourceEntity(50U);
    msg.setDestination(23002U);
    msg.setDestinationEntity(174U);
    msg.value = 0.9782517401983466;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.5331736969005713);
    msg.setSource(63605U);
    msg.setSourceEntity(205U);
    msg.setDestination(49861U);
    msg.setDestinationEntity(220U);
    msg.value = 0.4580956602166013;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.7747079574048299);
    msg.setSource(51842U);
    msg.setSourceEntity(231U);
    msg.setDestination(59967U);
    msg.setDestinationEntity(163U);
    msg.value = 0.2064335444119999;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.7091205992779877);
    msg.setSource(54726U);
    msg.setSourceEntity(109U);
    msg.setDestination(21814U);
    msg.setDestinationEntity(145U);
    msg.value = 0.3205482384828007;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.291264793643463);
    msg.setSource(11923U);
    msg.setSourceEntity(190U);
    msg.setDestination(28903U);
    msg.setDestinationEntity(158U);
    msg.value = 0.27018550695593657;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.7238408444776111);
    msg.setSource(20169U);
    msg.setSourceEntity(116U);
    msg.setDestination(37428U);
    msg.setDestinationEntity(123U);
    msg.value = 0.848589601081374;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.8038229460923262);
    msg.setSource(14403U);
    msg.setSourceEntity(25U);
    msg.setDestination(26389U);
    msg.setDestinationEntity(207U);
    msg.value = 0.8531506138039368;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.370267194376107);
    msg.setSource(60149U);
    msg.setSourceEntity(207U);
    msg.setDestination(63837U);
    msg.setDestinationEntity(70U);
    msg.value = 0.5332919304608487;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.16646537828878794);
    msg.setSource(61614U);
    msg.setSourceEntity(227U);
    msg.setDestination(51584U);
    msg.setDestinationEntity(233U);
    msg.value = 0.04836060783205576;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.5311567095088178);
    msg.setSource(36397U);
    msg.setSourceEntity(118U);
    msg.setDestination(830U);
    msg.setDestinationEntity(187U);
    msg.value = 0.09006722863794614;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.015852345569957182);
    msg.setSource(17524U);
    msg.setSourceEntity(187U);
    msg.setDestination(48099U);
    msg.setDestinationEntity(167U);
    msg.id = 102U;
    msg.zoom = 23U;
    msg.action = 157U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.5030352478685237);
    msg.setSource(6336U);
    msg.setSourceEntity(145U);
    msg.setDestination(16239U);
    msg.setDestinationEntity(86U);
    msg.id = 245U;
    msg.zoom = 25U;
    msg.action = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.11874132713152752);
    msg.setSource(7480U);
    msg.setSourceEntity(132U);
    msg.setDestination(33627U);
    msg.setDestinationEntity(87U);
    msg.id = 248U;
    msg.zoom = 231U;
    msg.action = 242U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.5755620838770927);
    msg.setSource(58154U);
    msg.setSourceEntity(90U);
    msg.setDestination(59959U);
    msg.setDestinationEntity(193U);
    msg.id = 227U;
    msg.value = 0.4206008081400715;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.7720089649318727);
    msg.setSource(8659U);
    msg.setSourceEntity(3U);
    msg.setDestination(44542U);
    msg.setDestinationEntity(39U);
    msg.id = 9U;
    msg.value = 0.8620828272442245;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.37615340958276844);
    msg.setSource(29709U);
    msg.setSourceEntity(118U);
    msg.setDestination(46400U);
    msg.setDestinationEntity(177U);
    msg.id = 177U;
    msg.value = 0.17887338262348174;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.4733027033788003);
    msg.setSource(54467U);
    msg.setSourceEntity(230U);
    msg.setDestination(53412U);
    msg.setDestinationEntity(112U);
    msg.id = 194U;
    msg.value = 0.3019924879984819;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.19530072493848394);
    msg.setSource(46644U);
    msg.setSourceEntity(35U);
    msg.setDestination(51203U);
    msg.setDestinationEntity(203U);
    msg.id = 22U;
    msg.value = 0.8954232472668897;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.3096815741845764);
    msg.setSource(1498U);
    msg.setSourceEntity(230U);
    msg.setDestination(31088U);
    msg.setDestinationEntity(115U);
    msg.id = 219U;
    msg.value = 0.6279606858135361;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.28463573564802425);
    msg.setSource(30910U);
    msg.setSourceEntity(139U);
    msg.setDestination(32845U);
    msg.setDestinationEntity(122U);
    msg.id = 106U;
    msg.angle = 0.011759853060589354;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.0862236549499047);
    msg.setSource(24564U);
    msg.setSourceEntity(232U);
    msg.setDestination(33584U);
    msg.setDestinationEntity(157U);
    msg.id = 205U;
    msg.angle = 0.6951807134229538;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.4565644543570836);
    msg.setSource(31428U);
    msg.setSourceEntity(67U);
    msg.setDestination(21818U);
    msg.setDestinationEntity(135U);
    msg.id = 82U;
    msg.angle = 0.8744626459203738;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.21506832077821525);
    msg.setSource(49655U);
    msg.setSourceEntity(43U);
    msg.setDestination(20579U);
    msg.setDestinationEntity(62U);
    msg.op = 218U;
    msg.actions.assign("DBJPMZDFJGUAMPOZYLHTFMJLIIADURTOAOIHUWPZUFOXCAPMBXHJUJGBCRZQDTWDFGCIETZWEGUJRJWWXKEWHPTHNCEPMFKDYPCVCERNSVWIUKKEXFKRZVGBUHJQLRNRIZKXLYNKBVQSXPWWQKBYYIJQCBTQIONEVQXNUAEMAXWOKBSVNOSTAYPGZNNBSFXLMXYHUSRODYFBVRHITTGGIZEKM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.9365703730614059);
    msg.setSource(15096U);
    msg.setSourceEntity(147U);
    msg.setDestination(35962U);
    msg.setDestinationEntity(46U);
    msg.op = 235U;
    msg.actions.assign("APETCZUDXWKBYVPZWGKEALFTAIYXORVUGDBWCJYOSMPUKYLMYGLINRBHMSIQTMDNZSFEHEVJQXUQOCHGRAKXMBRVFJXBZPFGXVPCGZVCQGJL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.9046484832693361);
    msg.setSource(58117U);
    msg.setSourceEntity(87U);
    msg.setDestination(1567U);
    msg.setDestinationEntity(73U);
    msg.op = 125U;
    msg.actions.assign("AARCNRKWMOYMEMPSYQNBRWFKEBWFWATLPZRQSIIDXJTGDVSHYJYMKUGVAIWAJIJJCFHJHPOUGIGDPUXFQJGOCXDLUCFQHZTWTEPJCTUCIKSATDKAHZBNENJVDNFMWHIXUDIMVEDZYPRLGTZHQXQLKDXCVXQZPZBELUBNVOEYXOMONMABNGHKKACXLSSYPSML");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.8210780636957824);
    msg.setSource(41355U);
    msg.setSourceEntity(10U);
    msg.setDestination(33650U);
    msg.setDestinationEntity(2U);
    msg.actions.assign("YJLWYEGRGFYTYTLNXLWUNXLZZHYHPMABTIHTDQOKRIXQIIDUAQEMJRSJYWZNZHYCTMPNSXXUPGVNVWSWOUOBFJMQJLQUYIFKWHDFWNQOMASKKYFEIRCVABOEFOOF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.2948494457094384);
    msg.setSource(11411U);
    msg.setSourceEntity(40U);
    msg.setDestination(38538U);
    msg.setDestinationEntity(107U);
    msg.actions.assign("MZBSJCWSHAHUUNJTPJIBFORTEXXVLTQGKYDPPAMDGEFAJNLHWYUDCICYOQLXJXDMPNQISLOKVJZQXIIGFGZBBNFTPXZXKFVTUYKMOZBHHXCKK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.6198282336764588);
    msg.setSource(41209U);
    msg.setSourceEntity(190U);
    msg.setDestination(57490U);
    msg.setDestinationEntity(63U);
    msg.actions.assign("JIFWVPJENKJEGWEHBRJENUYNUQPHYXGYGOPARTBQBTQCDFUAYPLNM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.024146883729712965);
    msg.setSource(29158U);
    msg.setSourceEntity(6U);
    msg.setDestination(57812U);
    msg.setDestinationEntity(127U);
    msg.button = 58U;
    msg.value = 246U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.49022498367467193);
    msg.setSource(56187U);
    msg.setSourceEntity(79U);
    msg.setDestination(56262U);
    msg.setDestinationEntity(16U);
    msg.button = 182U;
    msg.value = 123U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.8380263054478273);
    msg.setSource(42137U);
    msg.setSourceEntity(183U);
    msg.setDestination(45703U);
    msg.setDestinationEntity(14U);
    msg.button = 2U;
    msg.value = 44U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.9399564388932338);
    msg.setSource(15957U);
    msg.setSourceEntity(49U);
    msg.setDestination(39962U);
    msg.setDestinationEntity(70U);
    msg.op = 131U;
    msg.text.assign("BMFNNAQBYVUMPBDCLVWPTHSIRBMTUFLLPSHMZDSLPWHIAXKUMQRQXGRYJEBKCNHEWNISEFRZWKZCBJESJJYJEBEDKALHYZDPPORVLMITODQAJYYIGXZOTKMQMALDNUNRWODTFWGJAGMFIAGHXFPCIRNXTVSHCOTMOJURQUQDWYXIYALUGEJWNQVOXNFRWALHGHCCDZLXVTQUEORKCSGKHCOFSZF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.054879806688070576);
    msg.setSource(49427U);
    msg.setSourceEntity(44U);
    msg.setDestination(62750U);
    msg.setDestinationEntity(19U);
    msg.op = 204U;
    msg.text.assign("BFKXFPOGCKHSMXWCSLAVDCPRLZUIAFATSTTMJZPRIHZAUOHRRDQQABINGGDXZBNYYLJGGGXVFIEFYNBISCZFESHI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.263654115766504);
    msg.setSource(12667U);
    msg.setSourceEntity(227U);
    msg.setDestination(39421U);
    msg.setDestinationEntity(133U);
    msg.op = 13U;
    msg.text.assign("JRXUHNEFESIZXETOGTNJXPKSRYEOSLVQOZZIYRJCYNXYAASKIJQQZZUWBPHTVMUBMQJVPQNNAZOHAHCFRSDJJEHUDWXMIARPKVQSBNMRIWVXLRTYPQSFRXNFKGDNMDYCBECGXLWPCKHFKIKGLVWVDDBUGHKEFZLCZZBBMLDTWTFTGCWHQTHAMWCVLOINGUVRJEFFDQOCCSELOOMLNKETJAGVWBIMXKAOUUBDRSMSUXLWYZPAQPHPAYTGU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.938626722295683);
    msg.setSource(52025U);
    msg.setSourceEntity(227U);
    msg.setDestination(53455U);
    msg.setDestinationEntity(200U);
    msg.op = 200U;
    msg.time_remain = 0.48345468247907186;
    msg.sched_time = 0.8672369970406543;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.24751696002372847);
    msg.setSource(34904U);
    msg.setSourceEntity(68U);
    msg.setDestination(37915U);
    msg.setDestinationEntity(78U);
    msg.op = 136U;
    msg.time_remain = 0.3391211914562233;
    msg.sched_time = 0.814306058590465;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.4338760910048173);
    msg.setSource(24106U);
    msg.setSourceEntity(232U);
    msg.setDestination(51077U);
    msg.setDestinationEntity(19U);
    msg.op = 37U;
    msg.time_remain = 0.5510609747031673;
    msg.sched_time = 0.7464059352607196;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.06761040980838573);
    msg.setSource(8521U);
    msg.setSourceEntity(176U);
    msg.setDestination(61568U);
    msg.setDestinationEntity(67U);
    msg.name.assign("LIYRXFUFHHBMUWDVEMGGTPPQJNBZZUSKDSZZJMULVKDVXBVRYQAQUNOYCCTSPGWNAWNHEZCGSKFKRVNWKQPMAFHQTVJAEZQFJEWVIBFTCEMASCQYYSGRHYJPEIDIYXXHHMZRPOWNDVMONUDDFBXELCAGULZDQKDFXRAJNBTHGOPKXASITCQBKFIOVBIMXW");
    msg.op = 252U;
    msg.sched_time = 0.28604700269655425;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.4102753091524809);
    msg.setSource(47409U);
    msg.setSourceEntity(195U);
    msg.setDestination(55561U);
    msg.setDestinationEntity(194U);
    msg.name.assign("VSKXGESBIYEJPMUJMDKUGKXBWRYBQITOXZXFMZRZFOIDELZSLQUWZDYHTIRQWEDJRVGNMEKIVEPWHDVAGMMRZHPSYJLSAFFWYVMGJDEJENPUNIDCUZZBKGKCRSHWBIFRMDWNTKUVSCCGLXNTOBWRYL");
    msg.op = 141U;
    msg.sched_time = 0.9464059434844814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.5196796040206533);
    msg.setSource(25678U);
    msg.setSourceEntity(23U);
    msg.setDestination(48613U);
    msg.setDestinationEntity(129U);
    msg.name.assign("COEMTOWSZSXNLSKOJYEVNNCVRGPLQNHYCZRURKZLWDHEILXDXBCJFUPSPHLCRKDJGBUYZZMWNROEEYT");
    msg.op = 6U;
    msg.sched_time = 0.7232145676972463;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.22646277156976935);
    msg.setSource(4822U);
    msg.setSourceEntity(12U);
    msg.setDestination(3889U);
    msg.setDestinationEntity(12U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.8856324526697913);
    msg.setSource(17934U);
    msg.setSourceEntity(51U);
    msg.setDestination(63084U);
    msg.setDestinationEntity(103U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.6850845210590261);
    msg.setSource(24397U);
    msg.setSourceEntity(31U);
    msg.setDestination(39631U);
    msg.setDestinationEntity(221U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.7718071143955502);
    msg.setSource(62441U);
    msg.setSourceEntity(108U);
    msg.setDestination(58449U);
    msg.setDestinationEntity(42U);
    msg.name.assign("EXLZMRJTZIUCHEQALCIEWQIONZSLWXKCYNOPGMBRTQUTQIJJFIMFMKBHVKMNCSZALGYANKYMUSSHRJVITAPRNOJMXDLNKSFTCCNWCUDDVJFEVWDTVUBMJGFSGXVHRHJLMIYPKZLYWNKZPHFCBZPGWWJDZPLPSKBDNMNXVZTGQDADEPOQYBAXRHUURTBROOEYEGCKUASPHXLAREXQOWBTBJGOQAYEGYHDWFZXHKFIIRVSSVGYDFFPUIWATQ");
    msg.state = 41U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.9407297142995665);
    msg.setSource(588U);
    msg.setSourceEntity(38U);
    msg.setDestination(33698U);
    msg.setDestinationEntity(61U);
    msg.name.assign("ZUKREMWRFNVKCYCHECQXNOQGPYRGYVFJOAABRBTTBOTTWWFQYTAHBYNAHVMOQDRGYWMZBGEIFPADIMWUUFLHWOXVTJPMUILXNAVCQSYTLDDXBXLQWNZIZSIYZDOPPUBZFHDFPTVABBCGEWKQLMWLRJZMJKIKHRZIGGLSKRLSPSXVCDUGYHFLOOKXSKTRFVWEPJHEGXIDSUNJQPCKJJEZMKAIMNRSMTCIZUHNHJCDNYOE");
    msg.state = 253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.40924867484806693);
    msg.setSource(62108U);
    msg.setSourceEntity(206U);
    msg.setDestination(2584U);
    msg.setDestinationEntity(71U);
    msg.name.assign("AXBPHILGWMIUOPCSFNFTOZUVHCJEIKXGWQYMRCFVDTKBDWJPKZLBOLMXEVQNB");
    msg.state = 237U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.03127139365962972);
    msg.setSource(61884U);
    msg.setSourceEntity(108U);
    msg.setDestination(12282U);
    msg.setDestinationEntity(0U);
    msg.name.assign("AQOHPEBDEKCXXQEQDULGIBVDXMQBVYYDUSJAKTEOAJVVQLYTHDEPPKVLRPLUKBPKMJKJHAQIGFWLQZIWYIZRVBGSUHXPNMJRJNXLVFFUHXLBEUHUAKDZCZASSSPCZDAMQWSWBJHFTIZGNZKHCMHIOTNANRRMFOWBRWPPOMO");
    msg.value = 99U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.9244203683922624);
    msg.setSource(45186U);
    msg.setSourceEntity(153U);
    msg.setDestination(12820U);
    msg.setDestinationEntity(221U);
    msg.name.assign("TNQAXJZWNISKHBZJYUHXIHIFBQNKNPPRFANGXDVYNKJZYRMTWBFSUSPMMGNXIZSPHWHTIOULUHGAGIUKAZQROICQJOHUOSMPTUFFDUEZDFCKLMUWWSAXCJJLSXKEEVKZ");
    msg.value = 171U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.32229487375720134);
    msg.setSource(37670U);
    msg.setSourceEntity(55U);
    msg.setDestination(8595U);
    msg.setDestinationEntity(27U);
    msg.name.assign("KIRQOJRSYYQXOTZIXNLEWFHOZUSJHBPMWVALTFIYCNCFPXKFETSZRYEKPXKWEPEBBJNFZRYMSTJXZTEWIPXIPLUUTYBBQMAQOHDTWVGVEHMDPDOYIDIDHJKLBOKTVPNAMVFRMKEDDJRZFNEBXFVUISVRKOLVGENZDGABKWRQHHUAPVOCACAS");
    msg.value = 46U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.7894967155282371);
    msg.setSource(1601U);
    msg.setSourceEntity(33U);
    msg.setDestination(15027U);
    msg.setDestinationEntity(28U);
    msg.name.assign("LNTUDMYOSXHTQDSDQNGAJTBSZAGFQUWIEHJLRIAXGGMBDQTPFTNPJERCOYANDLWZUIESGCPFBOIFTRPZBOTWCUYEVUXNBRMXWSVVHFNHDYFPAYPLCWJOOUYRYVZQKWQXWDMMMZIZGKMZOTGKVMXGHCYACZSSGASJFEBFEQOZAKXNXNMUJQNEJVCFITRHSNYJOUOAXLBZPLIJGKEQILCXSRKJPBHRKREVLHVYBVLDAMPDC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.4914512464035167);
    msg.setSource(31567U);
    msg.setSourceEntity(62U);
    msg.setDestination(63687U);
    msg.setDestinationEntity(215U);
    msg.name.assign("BKJXJFBNPOZFCESUDTNPUHPHRJVNUDGCZGYYMKAGTWLDBRXMMOYWMUXLXSWQLWP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.09951988060871486);
    msg.setSource(1693U);
    msg.setSourceEntity(148U);
    msg.setDestination(44373U);
    msg.setDestinationEntity(57U);
    msg.name.assign("BNXHGGDXLQQNPSLZXQOHSZKLMNRAQNKLDGMCZYMRBXRGLECAHGZLSEDDFOXXAZALAPGPPBORPYRPLKIOUWVCUWQOVKWDUKYNRSKMOWDKUZPMTCOQMCMKERNBTAOVHFCWFCWEFNGACVQKYEFHFZRVMDAFAHXEBDJIGEHPYPOTVEIIVSESBYTXQXIIOJJFTUKBTDSTUNJSZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.8856858503682559);
    msg.setSource(43168U);
    msg.setSourceEntity(152U);
    msg.setDestination(19714U);
    msg.setDestinationEntity(8U);
    msg.name.assign("QIJTQCPSDMNXVTXRAVHYXIJCEZWHYUPFGOANOWUSBACQRKONAAELFSOFWTBUMVDBFMMZEQYOTTETJXFBAZOLRYHIIKQJBSUOPQGDKISYLPDWSBPEYVLZUADJGLDCITHTECFHJXCRMMWQJZDVGNRHRGPSNACYEYMNOEVSFRPXISJAZKQNKLPITWURHQBLXHLGVKRHWMXNHGJNMVBLUXVGUCLFDZXUYCKSOWZEPUCDBKGQAGTWFWVONRIEZKJB");
    msg.value = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.5749954058243945);
    msg.setSource(55975U);
    msg.setSourceEntity(37U);
    msg.setDestination(2807U);
    msg.setDestinationEntity(167U);
    msg.name.assign("HPJGKKWCTTTBGEJGXMNPIVAENNBWQMCLO");
    msg.value = 207U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.004920258374856101);
    msg.setSource(62779U);
    msg.setSourceEntity(226U);
    msg.setDestination(34827U);
    msg.setDestinationEntity(83U);
    msg.name.assign("TKIFNOYSTEWWUMKNEDJTUZXGXBHJGBCFOYHVGLXGSBYLSUDPHTTWZPNHPZRMWVMRTWDNAKTQIAKYELPODZMNIAWUIXGJVJBGAILHERKUYTXXMVE");
    msg.value = 65U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.8191376341797558);
    msg.setSource(33899U);
    msg.setSourceEntity(202U);
    msg.setDestination(9990U);
    msg.setDestinationEntity(25U);
    msg.id = 30U;
    msg.period = 2314784557U;
    msg.duty_cycle = 3819360381U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.25307214018474034);
    msg.setSource(60711U);
    msg.setSourceEntity(6U);
    msg.setDestination(21752U);
    msg.setDestinationEntity(206U);
    msg.id = 188U;
    msg.period = 926955752U;
    msg.duty_cycle = 3107512454U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.8901325451819856);
    msg.setSource(5678U);
    msg.setSourceEntity(100U);
    msg.setDestination(57734U);
    msg.setDestinationEntity(174U);
    msg.id = 116U;
    msg.period = 1958516815U;
    msg.duty_cycle = 302564831U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.35585147134925355);
    msg.setSource(47849U);
    msg.setSourceEntity(233U);
    msg.setDestination(8158U);
    msg.setDestinationEntity(53U);
    msg.id = 134U;
    msg.period = 3238181966U;
    msg.duty_cycle = 3581389837U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.8633257492014127);
    msg.setSource(52727U);
    msg.setSourceEntity(134U);
    msg.setDestination(2056U);
    msg.setDestinationEntity(22U);
    msg.id = 137U;
    msg.period = 4050702084U;
    msg.duty_cycle = 3278107274U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.880260314145847);
    msg.setSource(50972U);
    msg.setSourceEntity(6U);
    msg.setDestination(49623U);
    msg.setDestinationEntity(153U);
    msg.id = 241U;
    msg.period = 883007129U;
    msg.duty_cycle = 269665633U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.9018177355464286);
    msg.setSource(14367U);
    msg.setSourceEntity(29U);
    msg.setDestination(43587U);
    msg.setDestinationEntity(130U);
    msg.lat = 0.4775139671344305;
    msg.lon = 0.4518185650370846;
    msg.height = 0.6818037834726304;
    msg.x = 0.5072009890282546;
    msg.y = 0.09542871631110295;
    msg.z = 0.8484129024298014;
    msg.phi = 0.6678344920409816;
    msg.theta = 0.6367301397601606;
    msg.psi = 0.14936614590292507;
    msg.u = 0.32001617962558726;
    msg.v = 0.18493307573356366;
    msg.w = 0.9610666058149752;
    msg.vx = 0.9723288173485882;
    msg.vy = 0.7990679335794451;
    msg.vz = 0.37019501265020316;
    msg.p = 0.9206466641401057;
    msg.q = 0.04414004944686789;
    msg.r = 0.3289930748980734;
    msg.depth = 0.4162569209756475;
    msg.alt = 0.8218242960879092;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.23453819383360208);
    msg.setSource(54405U);
    msg.setSourceEntity(238U);
    msg.setDestination(53815U);
    msg.setDestinationEntity(219U);
    msg.lat = 0.6440122207907127;
    msg.lon = 0.33544391732591294;
    msg.height = 0.8263542425948107;
    msg.x = 0.003682509716749882;
    msg.y = 0.9424491991124814;
    msg.z = 0.7698000977315391;
    msg.phi = 0.1274243256717903;
    msg.theta = 0.7099430217527835;
    msg.psi = 0.30681947768551765;
    msg.u = 0.8570293303272944;
    msg.v = 0.32445744316986136;
    msg.w = 0.564150526951018;
    msg.vx = 0.7496942974509766;
    msg.vy = 0.5333568374216877;
    msg.vz = 0.9061664167788944;
    msg.p = 0.7609239617562369;
    msg.q = 0.8856370044590176;
    msg.r = 0.5645646198213239;
    msg.depth = 0.06317276266585681;
    msg.alt = 0.17434153991409196;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.24852568656564156);
    msg.setSource(49205U);
    msg.setSourceEntity(133U);
    msg.setDestination(41427U);
    msg.setDestinationEntity(143U);
    msg.lat = 0.018542953710197096;
    msg.lon = 0.6492396559645104;
    msg.height = 0.759859271218971;
    msg.x = 0.19835035768882936;
    msg.y = 0.12339148929761123;
    msg.z = 0.6440986706438272;
    msg.phi = 0.9239187292200486;
    msg.theta = 0.9050303403598454;
    msg.psi = 0.9547123346805242;
    msg.u = 0.91412783620278;
    msg.v = 0.5154007973241496;
    msg.w = 0.5293324532534874;
    msg.vx = 0.6912235475277213;
    msg.vy = 0.729727800031182;
    msg.vz = 0.8658429886395714;
    msg.p = 0.7491483767699604;
    msg.q = 0.47297298752249517;
    msg.r = 0.08597043463287302;
    msg.depth = 0.3865169515749515;
    msg.alt = 0.9665446020343772;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.5882168349472674);
    msg.setSource(13775U);
    msg.setSourceEntity(188U);
    msg.setDestination(20401U);
    msg.setDestinationEntity(202U);
    msg.x = 0.017215133954075146;
    msg.y = 0.27681090836053424;
    msg.z = 0.042666518041246104;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.9067685471538757);
    msg.setSource(52176U);
    msg.setSourceEntity(236U);
    msg.setDestination(65480U);
    msg.setDestinationEntity(78U);
    msg.x = 0.18983251667994638;
    msg.y = 0.9466357872608777;
    msg.z = 0.629993465915822;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.5345868189614084);
    msg.setSource(63380U);
    msg.setSourceEntity(230U);
    msg.setDestination(54191U);
    msg.setDestinationEntity(130U);
    msg.x = 0.9205203969505942;
    msg.y = 0.5809639327782313;
    msg.z = 0.8525821418338599;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.7113001748760295);
    msg.setSource(1737U);
    msg.setSourceEntity(39U);
    msg.setDestination(53494U);
    msg.setDestinationEntity(79U);
    msg.value = 0.17194251188177334;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.015567210233602968);
    msg.setSource(53037U);
    msg.setSourceEntity(238U);
    msg.setDestination(14950U);
    msg.setDestinationEntity(151U);
    msg.value = 0.2071574354406316;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.47277718156839443);
    msg.setSource(14461U);
    msg.setSourceEntity(74U);
    msg.setDestination(41044U);
    msg.setDestinationEntity(200U);
    msg.value = 0.10969624847238668;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.3757030500919074);
    msg.setSource(11337U);
    msg.setSourceEntity(11U);
    msg.setDestination(47460U);
    msg.setDestinationEntity(183U);
    msg.value = 0.9744700453801981;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.3233003360589458);
    msg.setSource(60329U);
    msg.setSourceEntity(138U);
    msg.setDestination(33949U);
    msg.setDestinationEntity(159U);
    msg.value = 0.2578380277525467;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.36087273396479436);
    msg.setSource(59779U);
    msg.setSourceEntity(100U);
    msg.setDestination(45770U);
    msg.setDestinationEntity(248U);
    msg.value = 0.5701171743599688;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.9752531877361027);
    msg.setSource(35671U);
    msg.setSourceEntity(150U);
    msg.setDestination(63234U);
    msg.setDestinationEntity(238U);
    msg.x = 0.31290557338622305;
    msg.y = 0.4337645770398081;
    msg.z = 0.584156232173691;
    msg.phi = 0.35210546543877763;
    msg.theta = 0.9420579688618792;
    msg.psi = 0.2639041932611005;
    msg.p = 0.986368017842886;
    msg.q = 0.20946579946687616;
    msg.r = 0.9297575945447141;
    msg.u = 0.3922243213683889;
    msg.v = 0.5856035635406491;
    msg.w = 0.5111210184144221;
    msg.bias_psi = 0.1795302268261454;
    msg.bias_r = 0.46765475348209884;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.4988567653187975);
    msg.setSource(2516U);
    msg.setSourceEntity(196U);
    msg.setDestination(33009U);
    msg.setDestinationEntity(112U);
    msg.x = 0.24673348976152243;
    msg.y = 0.6817318960791685;
    msg.z = 0.23155925245892195;
    msg.phi = 0.13815283871943085;
    msg.theta = 0.11934499884218908;
    msg.psi = 0.9851559124984185;
    msg.p = 0.3657350397795488;
    msg.q = 0.022179624065487458;
    msg.r = 0.6621741493451099;
    msg.u = 0.36652866009898566;
    msg.v = 0.3917657057099099;
    msg.w = 0.6194253202117361;
    msg.bias_psi = 0.8129003343097625;
    msg.bias_r = 0.5466392785764209;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.8416117431565586);
    msg.setSource(18597U);
    msg.setSourceEntity(118U);
    msg.setDestination(23187U);
    msg.setDestinationEntity(82U);
    msg.x = 0.9555848355247144;
    msg.y = 0.7960119620299053;
    msg.z = 0.5464112003677263;
    msg.phi = 0.5873674687007423;
    msg.theta = 0.7577871152941866;
    msg.psi = 0.32716677856141096;
    msg.p = 0.9688806031684459;
    msg.q = 0.5644330437986589;
    msg.r = 0.10315891979381242;
    msg.u = 0.4267992107077083;
    msg.v = 0.7139492399872494;
    msg.w = 0.012105521281369658;
    msg.bias_psi = 0.19247291797469457;
    msg.bias_r = 0.5860642363613683;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.7130310288526078);
    msg.setSource(1952U);
    msg.setSourceEntity(97U);
    msg.setDestination(34425U);
    msg.setDestinationEntity(110U);
    msg.bias_psi = 0.570097618657081;
    msg.bias_r = 0.4439122644586544;
    msg.cog = 0.18379587929043084;
    msg.cyaw = 0.5130299384452455;
    msg.lbl_rej_level = 0.04607758259753392;
    msg.gps_rej_level = 0.2255423210745141;
    msg.custom_x = 0.10370836501649194;
    msg.custom_y = 0.6352269523623557;
    msg.custom_z = 0.6543118543582961;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.6375880663835259);
    msg.setSource(9156U);
    msg.setSourceEntity(203U);
    msg.setDestination(35824U);
    msg.setDestinationEntity(122U);
    msg.bias_psi = 0.4965639910573778;
    msg.bias_r = 0.7268204227777711;
    msg.cog = 0.07356546370292005;
    msg.cyaw = 0.35531611722514367;
    msg.lbl_rej_level = 0.8482114670219595;
    msg.gps_rej_level = 0.79715614225558;
    msg.custom_x = 0.2439961975949546;
    msg.custom_y = 0.980164394398232;
    msg.custom_z = 0.6975682047858113;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.5162822631666586);
    msg.setSource(35803U);
    msg.setSourceEntity(116U);
    msg.setDestination(17438U);
    msg.setDestinationEntity(126U);
    msg.bias_psi = 0.1860481550589811;
    msg.bias_r = 0.45010545678166425;
    msg.cog = 0.5855332472469157;
    msg.cyaw = 0.7777777080141949;
    msg.lbl_rej_level = 0.14053174814529612;
    msg.gps_rej_level = 0.2538894396576129;
    msg.custom_x = 0.918010951016683;
    msg.custom_y = 0.5105272561022213;
    msg.custom_z = 0.6528534649978883;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.062260980426109835);
    msg.setSource(10807U);
    msg.setSourceEntity(132U);
    msg.setDestination(8776U);
    msg.setDestinationEntity(142U);
    msg.utc_time = 0.9554855248177719;
    msg.reason = 63U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.06401156917120499);
    msg.setSource(469U);
    msg.setSourceEntity(228U);
    msg.setDestination(50842U);
    msg.setDestinationEntity(101U);
    msg.utc_time = 0.8422497601087267;
    msg.reason = 84U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.7871746222446948);
    msg.setSource(7948U);
    msg.setSourceEntity(15U);
    msg.setDestination(55935U);
    msg.setDestinationEntity(63U);
    msg.utc_time = 0.3685926398807168;
    msg.reason = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.26525322159929865);
    msg.setSource(26733U);
    msg.setSourceEntity(243U);
    msg.setDestination(6205U);
    msg.setDestinationEntity(175U);
    msg.id = 136U;
    msg.range = 0.7783908244198499;
    msg.acceptance = 138U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.056520418028118136);
    msg.setSource(45026U);
    msg.setSourceEntity(230U);
    msg.setDestination(48174U);
    msg.setDestinationEntity(85U);
    msg.id = 36U;
    msg.range = 0.400695625125728;
    msg.acceptance = 89U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.07869722567090942);
    msg.setSource(27357U);
    msg.setSourceEntity(243U);
    msg.setDestination(41265U);
    msg.setDestinationEntity(55U);
    msg.id = 19U;
    msg.range = 0.8816919373069476;
    msg.acceptance = 110U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.4439337513060434);
    msg.setSource(26105U);
    msg.setSourceEntity(12U);
    msg.setDestination(53418U);
    msg.setDestinationEntity(88U);
    msg.type = 99U;
    msg.reason = 242U;
    msg.value = 0.6451852586292863;
    msg.timestep = 0.10383721717156014;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.7973128467843732);
    msg.setSource(34553U);
    msg.setSourceEntity(171U);
    msg.setDestination(53013U);
    msg.setDestinationEntity(252U);
    msg.type = 77U;
    msg.reason = 237U;
    msg.value = 0.5857216124444873;
    msg.timestep = 0.007118753671431444;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.9824992515070291);
    msg.setSource(19711U);
    msg.setSourceEntity(133U);
    msg.setDestination(53274U);
    msg.setDestinationEntity(215U);
    msg.type = 33U;
    msg.reason = 174U;
    msg.value = 0.6491392002991117;
    msg.timestep = 0.6074127415115002;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.10753033837948678);
    msg.setSource(52556U);
    msg.setSourceEntity(134U);
    msg.setDestination(13755U);
    msg.setDestinationEntity(200U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("ZJGIQRJJMLDOWUGVABBALKMZICPFSHFRHBRNLFKCCMNFNWQULVERHDIEETXBZJQRLPSVIRZOFEZAFOWGTOVXMYMLBKVZDYJSZTCSJQYQYIEUPFTTOAQXJXDQNHNMLDDPHCOUXAPHHABTJRCIXMTWGKERUYUDGLVPPXCNCFOXKEUBQIKHAMFWGSNGTDJGOXYZNOJAIVPSKUIHWYTABWKVKXBUSLCVWNZHSKQWTPDQYLGNEA");
    tmp_msg_0.lat = 0.13334343687071815;
    tmp_msg_0.lon = 0.3446549142437736;
    tmp_msg_0.depth = 0.3148614032531567;
    tmp_msg_0.query_channel = 45U;
    tmp_msg_0.reply_channel = 83U;
    tmp_msg_0.transponder_delay = 131U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.4433679481381436;
    msg.y = 0.6952076924964461;
    msg.var_x = 0.5294765630338739;
    msg.var_y = 0.21969127210587736;
    msg.distance = 0.5783568535109606;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.5658277610146336);
    msg.setSource(26232U);
    msg.setSourceEntity(111U);
    msg.setDestination(41610U);
    msg.setDestinationEntity(235U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("KOVBROCNOEPFQGKRPKWCFDCORKWTQQKPFLPIWSSHWIVPXCLRMYVJTTNLSKBUJLKMZMGQPWNLQCWTZGZALRNBGAACVYJXYHNZGFHFTDBHKITJXMDUAESOUYJZSHYUVDEERRMNHOGNYPFMZKUQLGNPGBBBCABVIDIJDQMZXEHUDYTCFUIKXWXOFWWFECRSBXZUEDESGOXWY");
    tmp_msg_0.lat = 0.6720369418026585;
    tmp_msg_0.lon = 0.5105078349552561;
    tmp_msg_0.depth = 0.47184346538171695;
    tmp_msg_0.query_channel = 19U;
    tmp_msg_0.reply_channel = 13U;
    tmp_msg_0.transponder_delay = 131U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.2732445313133923;
    msg.y = 0.09856836909513123;
    msg.var_x = 0.45496950364201294;
    msg.var_y = 0.4122107454624686;
    msg.distance = 0.3456219330635967;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.07199611570972697);
    msg.setSource(62513U);
    msg.setSourceEntity(72U);
    msg.setDestination(59932U);
    msg.setDestinationEntity(62U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("MTKBJTLPWLFOZNZZNSHQBGXAJFIDSYVUAKERZDGCSGYLAFQWZELFWNQYONXFCKATNLDXAYFODUPYZUCJXLLBHXJPYQKOLHIANPHMPNVPJRYAETQKMHMJUSCDXICUXFGHRUGWWRLCQYBQHRITZDNPFBDPYMCDOBVJXSVEKDMAMMUZIQQGTCXOPRAYIRBPBTCHORLBKWEEVFFIGKWUTWIEOHRTBOUCEAZVHTSQMEEVRSMWVIKSVJWVIGZ");
    tmp_msg_0.lat = 0.41841250776288985;
    tmp_msg_0.lon = 0.8469707298685898;
    tmp_msg_0.depth = 0.09617875065274728;
    tmp_msg_0.query_channel = 24U;
    tmp_msg_0.reply_channel = 41U;
    tmp_msg_0.transponder_delay = 168U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.5282482752930237;
    msg.y = 0.47082756149567373;
    msg.var_x = 0.5952785165431874;
    msg.var_y = 0.38555379179003135;
    msg.distance = 0.06072095656007315;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.31854304419968305);
    msg.setSource(62386U);
    msg.setSourceEntity(99U);
    msg.setDestination(14055U);
    msg.setDestinationEntity(199U);
    msg.state = 181U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.9105320612753577);
    msg.setSource(8987U);
    msg.setSourceEntity(55U);
    msg.setDestination(62149U);
    msg.setDestinationEntity(218U);
    msg.state = 218U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.6056881139088283);
    msg.setSource(1191U);
    msg.setSourceEntity(236U);
    msg.setDestination(27639U);
    msg.setDestinationEntity(117U);
    msg.state = 209U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.009641953234067469);
    msg.setSource(50497U);
    msg.setSourceEntity(35U);
    msg.setDestination(54029U);
    msg.setDestinationEntity(115U);
    msg.x = 0.3567810090532819;
    msg.y = 0.77988034122875;
    msg.z = 0.9151590606163522;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.9360426454311649);
    msg.setSource(17027U);
    msg.setSourceEntity(65U);
    msg.setDestination(32167U);
    msg.setDestinationEntity(241U);
    msg.x = 0.8160048619091025;
    msg.y = 0.2877214791840752;
    msg.z = 0.1686480498740035;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.9764778736297299);
    msg.setSource(55003U);
    msg.setSourceEntity(231U);
    msg.setDestination(42240U);
    msg.setDestinationEntity(4U);
    msg.x = 0.19958868021890308;
    msg.y = 0.04208244233585656;
    msg.z = 0.16561209300920454;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.7218146707023828);
    msg.setSource(8277U);
    msg.setSourceEntity(209U);
    msg.setDestination(57109U);
    msg.setDestinationEntity(55U);
    msg.va = 0.8979713264245145;
    msg.aoa = 0.7327413998953509;
    msg.ssa = 0.1832354165749901;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.5611495102595632);
    msg.setSource(21106U);
    msg.setSourceEntity(1U);
    msg.setDestination(25336U);
    msg.setDestinationEntity(250U);
    msg.va = 0.2537814004601716;
    msg.aoa = 0.9298896357884382;
    msg.ssa = 0.019328612772423037;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.9068913064674253);
    msg.setSource(30958U);
    msg.setSourceEntity(185U);
    msg.setDestination(7203U);
    msg.setDestinationEntity(126U);
    msg.va = 0.06549108027120631;
    msg.aoa = 0.8797225588577058;
    msg.ssa = 0.5762488005313016;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.10339396136931411);
    msg.setSource(46956U);
    msg.setSourceEntity(211U);
    msg.setDestination(44702U);
    msg.setDestinationEntity(46U);
    msg.value = 0.7865776546223503;
    msg.off = 0.5334553381833492;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.2856319934535617);
    msg.setSource(45493U);
    msg.setSourceEntity(94U);
    msg.setDestination(17068U);
    msg.setDestinationEntity(179U);
    msg.value = 0.2618936428771782;
    msg.off = 0.17080601216132218;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.6668227417431081);
    msg.setSource(15462U);
    msg.setSourceEntity(25U);
    msg.setDestination(63707U);
    msg.setDestinationEntity(133U);
    msg.value = 0.31741649801192295;
    msg.off = 0.005608395205286665;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.37520736260059007);
    msg.setSource(62415U);
    msg.setSourceEntity(171U);
    msg.setDestination(51021U);
    msg.setDestinationEntity(104U);
    msg.value = 0.5463358141802255;
    msg.z_units = 72U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.17183850601089523);
    msg.setSource(57878U);
    msg.setSourceEntity(63U);
    msg.setDestination(48178U);
    msg.setDestinationEntity(206U);
    msg.value = 0.042094374419831215;
    msg.z_units = 124U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.34993874629511823);
    msg.setSource(6343U);
    msg.setSourceEntity(170U);
    msg.setDestination(25892U);
    msg.setDestinationEntity(156U);
    msg.value = 0.08461789810206344;
    msg.z_units = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.9806520515650055);
    msg.setSource(13320U);
    msg.setSourceEntity(102U);
    msg.setDestination(35198U);
    msg.setDestinationEntity(8U);
    msg.value = 0.7190617297372436;
    msg.speed_units = 149U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.570068191102978);
    msg.setSource(32054U);
    msg.setSourceEntity(40U);
    msg.setDestination(2500U);
    msg.setDestinationEntity(153U);
    msg.value = 0.5601590360219377;
    msg.speed_units = 65U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.46429471493175856);
    msg.setSource(25056U);
    msg.setSourceEntity(149U);
    msg.setDestination(20416U);
    msg.setDestinationEntity(113U);
    msg.value = 0.14624024051243334;
    msg.speed_units = 58U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.38680829036890496);
    msg.setSource(15956U);
    msg.setSourceEntity(80U);
    msg.setDestination(4952U);
    msg.setDestinationEntity(159U);
    msg.value = 0.21285497819746324;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.6418856624411386);
    msg.setSource(53282U);
    msg.setSourceEntity(205U);
    msg.setDestination(50531U);
    msg.setDestinationEntity(249U);
    msg.value = 0.8337983140275302;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.713323683561419);
    msg.setSource(4733U);
    msg.setSourceEntity(110U);
    msg.setDestination(14117U);
    msg.setDestinationEntity(69U);
    msg.value = 0.11079565621964371;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.3757037486813709);
    msg.setSource(44125U);
    msg.setSourceEntity(186U);
    msg.setDestination(18754U);
    msg.setDestinationEntity(103U);
    msg.value = 0.14077419675133263;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.5515423246721757);
    msg.setSource(1370U);
    msg.setSourceEntity(31U);
    msg.setDestination(39120U);
    msg.setDestinationEntity(156U);
    msg.value = 0.051354464928791366;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.2014442486660699);
    msg.setSource(52878U);
    msg.setSourceEntity(20U);
    msg.setDestination(48805U);
    msg.setDestinationEntity(5U);
    msg.value = 0.6314472264236468;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.8412550411492503);
    msg.setSource(43490U);
    msg.setSourceEntity(106U);
    msg.setDestination(5183U);
    msg.setDestinationEntity(17U);
    msg.value = 0.38545749223159287;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.8797505088526542);
    msg.setSource(1734U);
    msg.setSourceEntity(74U);
    msg.setDestination(37796U);
    msg.setDestinationEntity(63U);
    msg.value = 0.7492370274544952;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.09344159963247678);
    msg.setSource(53590U);
    msg.setSourceEntity(143U);
    msg.setDestination(32793U);
    msg.setDestinationEntity(224U);
    msg.value = 0.39933656502674286;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.9979791361835699);
    msg.setSource(6036U);
    msg.setSourceEntity(96U);
    msg.setDestination(60463U);
    msg.setDestinationEntity(128U);
    msg.path_ref = 3098317292U;
    msg.start_lat = 0.379477229464364;
    msg.start_lon = 0.7526099038175549;
    msg.start_z = 0.5519143293534701;
    msg.start_z_units = 163U;
    msg.end_lat = 0.48498513588645364;
    msg.end_lon = 0.3342381115815888;
    msg.end_z = 0.42482683757229467;
    msg.end_z_units = 217U;
    msg.speed = 0.871357226266136;
    msg.speed_units = 210U;
    msg.lradius = 0.6141999607022205;
    msg.flags = 60U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.9230137957609018);
    msg.setSource(1960U);
    msg.setSourceEntity(177U);
    msg.setDestination(3782U);
    msg.setDestinationEntity(210U);
    msg.path_ref = 1032955345U;
    msg.start_lat = 0.7662524399700069;
    msg.start_lon = 0.04593666963630183;
    msg.start_z = 0.7140593080358606;
    msg.start_z_units = 167U;
    msg.end_lat = 0.2227783178297318;
    msg.end_lon = 0.5532582408065203;
    msg.end_z = 0.8332556898701237;
    msg.end_z_units = 175U;
    msg.speed = 0.9731901019374949;
    msg.speed_units = 111U;
    msg.lradius = 0.7755213253105074;
    msg.flags = 31U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.6068091067736974);
    msg.setSource(50690U);
    msg.setSourceEntity(95U);
    msg.setDestination(13209U);
    msg.setDestinationEntity(253U);
    msg.path_ref = 1700941049U;
    msg.start_lat = 0.83432255210173;
    msg.start_lon = 0.2812410026158191;
    msg.start_z = 0.9249443336080958;
    msg.start_z_units = 122U;
    msg.end_lat = 0.38760992198760114;
    msg.end_lon = 0.015506004566116283;
    msg.end_z = 0.26821965427457517;
    msg.end_z_units = 85U;
    msg.speed = 0.6643718103072339;
    msg.speed_units = 243U;
    msg.lradius = 0.6097209910531333;
    msg.flags = 85U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.07751187091972156);
    msg.setSource(44556U);
    msg.setSourceEntity(64U);
    msg.setDestination(19928U);
    msg.setDestinationEntity(132U);
    msg.x = 0.5292850218987442;
    msg.y = 0.7786992741379568;
    msg.z = 0.20347874004228317;
    msg.k = 0.3286470209898905;
    msg.m = 0.6090143791425356;
    msg.n = 0.9728243569728525;
    msg.flags = 162U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.9770935264969629);
    msg.setSource(33915U);
    msg.setSourceEntity(64U);
    msg.setDestination(36221U);
    msg.setDestinationEntity(127U);
    msg.x = 0.49336204649129134;
    msg.y = 0.48650803798150066;
    msg.z = 0.5966910709260786;
    msg.k = 0.35034644094516143;
    msg.m = 0.5885483735651416;
    msg.n = 0.8971326028314791;
    msg.flags = 56U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.03216834196372853);
    msg.setSource(15598U);
    msg.setSourceEntity(247U);
    msg.setDestination(33013U);
    msg.setDestinationEntity(181U);
    msg.x = 0.6983923766436344;
    msg.y = 0.8703999937047112;
    msg.z = 0.5817288957931985;
    msg.k = 0.558597164365773;
    msg.m = 0.5820457224146326;
    msg.n = 0.8054650069792251;
    msg.flags = 12U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.6895772333897243);
    msg.setSource(26637U);
    msg.setSourceEntity(158U);
    msg.setDestination(16875U);
    msg.setDestinationEntity(238U);
    msg.value = 0.6234655233913041;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.860777898559125);
    msg.setSource(31962U);
    msg.setSourceEntity(226U);
    msg.setDestination(19337U);
    msg.setDestinationEntity(13U);
    msg.value = 0.8437017898485373;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.9955087316699223);
    msg.setSource(18352U);
    msg.setSourceEntity(161U);
    msg.setDestination(41018U);
    msg.setDestinationEntity(119U);
    msg.value = 0.8176342717833568;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.6475431990570796);
    msg.setSource(53027U);
    msg.setSourceEntity(69U);
    msg.setDestination(52909U);
    msg.setDestinationEntity(157U);
    msg.u = 0.72425569575069;
    msg.v = 0.6146567432868209;
    msg.w = 0.634998592417531;
    msg.p = 0.9134759610099424;
    msg.q = 0.2705150491608569;
    msg.r = 0.9477075467382472;
    msg.flags = 225U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.03578469773765325);
    msg.setSource(21235U);
    msg.setSourceEntity(23U);
    msg.setDestination(713U);
    msg.setDestinationEntity(227U);
    msg.u = 0.8774381706705846;
    msg.v = 0.9795720639962919;
    msg.w = 0.3490322991411642;
    msg.p = 0.7265941367209329;
    msg.q = 0.0010154211469796115;
    msg.r = 0.3369339770030597;
    msg.flags = 231U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.8897493216472411);
    msg.setSource(55130U);
    msg.setSourceEntity(110U);
    msg.setDestination(20793U);
    msg.setDestinationEntity(227U);
    msg.u = 0.7254048102535219;
    msg.v = 0.07758818555434399;
    msg.w = 0.641006282333514;
    msg.p = 0.14558910809490255;
    msg.q = 0.6116507404710823;
    msg.r = 0.2561029106058862;
    msg.flags = 4U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.015440048161318165);
    msg.setSource(21998U);
    msg.setSourceEntity(229U);
    msg.setDestination(40163U);
    msg.setDestinationEntity(152U);
    msg.path_ref = 3514686223U;
    msg.start_lat = 0.4270343389324791;
    msg.start_lon = 0.09578122680013745;
    msg.start_z = 0.7772619306109593;
    msg.start_z_units = 237U;
    msg.end_lat = 0.07285149565755311;
    msg.end_lon = 0.8168861944883966;
    msg.end_z = 0.010658168979485017;
    msg.end_z_units = 176U;
    msg.lradius = 0.7734148241088624;
    msg.flags = 251U;
    msg.x = 0.5385397498314727;
    msg.y = 0.05042983053529848;
    msg.z = 0.9104653673251895;
    msg.vx = 0.47382050664293984;
    msg.vy = 0.0060025298256002335;
    msg.vz = 0.7824176063537209;
    msg.course_error = 0.2575240920143701;
    msg.eta = 50084U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.9332968415880867);
    msg.setSource(37731U);
    msg.setSourceEntity(70U);
    msg.setDestination(45307U);
    msg.setDestinationEntity(5U);
    msg.path_ref = 1502470761U;
    msg.start_lat = 0.19315549336550153;
    msg.start_lon = 0.8277172075143492;
    msg.start_z = 0.8019356932028039;
    msg.start_z_units = 127U;
    msg.end_lat = 0.4793613560067732;
    msg.end_lon = 0.3781526105033419;
    msg.end_z = 0.35052369583559784;
    msg.end_z_units = 133U;
    msg.lradius = 0.6266911960911371;
    msg.flags = 78U;
    msg.x = 0.2843876857557732;
    msg.y = 0.009281771336331568;
    msg.z = 0.06388754003617825;
    msg.vx = 0.28526280804579496;
    msg.vy = 0.4058906232489119;
    msg.vz = 0.25478059929224883;
    msg.course_error = 0.06506657947951;
    msg.eta = 18165U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.12204587504395692);
    msg.setSource(14895U);
    msg.setSourceEntity(71U);
    msg.setDestination(12721U);
    msg.setDestinationEntity(233U);
    msg.path_ref = 1170406362U;
    msg.start_lat = 0.9811420952658985;
    msg.start_lon = 0.6550278115968339;
    msg.start_z = 0.5325916820488863;
    msg.start_z_units = 175U;
    msg.end_lat = 0.9031839081048623;
    msg.end_lon = 0.34871336141463194;
    msg.end_z = 0.37568472712042644;
    msg.end_z_units = 55U;
    msg.lradius = 0.030786775108238018;
    msg.flags = 181U;
    msg.x = 0.7836906865830645;
    msg.y = 0.4847864734062507;
    msg.z = 0.2153615452237413;
    msg.vx = 0.33070633660984927;
    msg.vy = 0.1582759729597777;
    msg.vz = 0.4175534508726295;
    msg.course_error = 0.850305138358172;
    msg.eta = 17424U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8340818739428691);
    msg.setSource(21153U);
    msg.setSourceEntity(242U);
    msg.setDestination(15985U);
    msg.setDestinationEntity(242U);
    msg.k = 0.20963042628980244;
    msg.m = 0.8408454152899579;
    msg.n = 0.1333632500428561;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.07901299557645991);
    msg.setSource(52756U);
    msg.setSourceEntity(99U);
    msg.setDestination(33079U);
    msg.setDestinationEntity(154U);
    msg.k = 0.0632217776211742;
    msg.m = 0.5311811811005771;
    msg.n = 0.505847695279729;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.885099041277351);
    msg.setSource(17450U);
    msg.setSourceEntity(137U);
    msg.setDestination(33849U);
    msg.setDestinationEntity(204U);
    msg.k = 0.6123105825451592;
    msg.m = 0.5973760508679401;
    msg.n = 0.7769744615016778;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.6758726474742305);
    msg.setSource(453U);
    msg.setSourceEntity(148U);
    msg.setDestination(2590U);
    msg.setDestinationEntity(126U);
    msg.p = 0.8126395704553471;
    msg.i = 0.5594494846050776;
    msg.d = 0.9678889226770676;
    msg.a = 0.2929558256737882;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.522711358234647);
    msg.setSource(50516U);
    msg.setSourceEntity(32U);
    msg.setDestination(45977U);
    msg.setDestinationEntity(149U);
    msg.p = 0.32012788670444003;
    msg.i = 0.8957877459777704;
    msg.d = 0.2942583341886039;
    msg.a = 0.6624078329447474;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.9827370881589007);
    msg.setSource(53639U);
    msg.setSourceEntity(245U);
    msg.setDestination(64231U);
    msg.setDestinationEntity(140U);
    msg.p = 0.5684519494068712;
    msg.i = 0.21873196023123698;
    msg.d = 0.5449653106167588;
    msg.a = 0.7358600711841702;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.11559138492333476);
    msg.setSource(38575U);
    msg.setSourceEntity(91U);
    msg.setDestination(12148U);
    msg.setDestinationEntity(139U);
    msg.op = 30U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.9135055436079738);
    msg.setSource(62923U);
    msg.setSourceEntity(16U);
    msg.setDestination(5229U);
    msg.setDestinationEntity(195U);
    msg.op = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.3473682715131122);
    msg.setSource(59826U);
    msg.setSourceEntity(44U);
    msg.setDestination(41562U);
    msg.setDestinationEntity(52U);
    msg.op = 251U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.6160008479520672);
    msg.setSource(56057U);
    msg.setSourceEntity(39U);
    msg.setDestination(51459U);
    msg.setDestinationEntity(197U);
    msg.x = 0.027002211215984895;
    msg.y = 0.25871737731984223;
    msg.z = 0.36346551154285056;
    msg.vx = 0.6618506973388003;
    msg.vy = 0.7871053240104134;
    msg.vz = 0.7016368163499518;
    msg.ax = 0.8937143297765333;
    msg.ay = 0.7078546133047303;
    msg.az = 0.7978229936655404;
    msg.flags = 11821U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.805539316038265);
    msg.setSource(37080U);
    msg.setSourceEntity(26U);
    msg.setDestination(2090U);
    msg.setDestinationEntity(148U);
    msg.x = 0.855167661556513;
    msg.y = 0.7119066921609913;
    msg.z = 0.3823446146718442;
    msg.vx = 0.6633429299479253;
    msg.vy = 0.5438440763759822;
    msg.vz = 0.5779171373113212;
    msg.ax = 0.2334619166545414;
    msg.ay = 0.5438779156257135;
    msg.az = 0.6028814629552964;
    msg.flags = 31286U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.04018592579806046);
    msg.setSource(13812U);
    msg.setSourceEntity(142U);
    msg.setDestination(19505U);
    msg.setDestinationEntity(48U);
    msg.x = 0.6042433040941959;
    msg.y = 0.8720947066888117;
    msg.z = 0.17988816350642778;
    msg.vx = 0.9608768776659593;
    msg.vy = 0.5240044243350663;
    msg.vz = 0.7077241878384968;
    msg.ax = 0.4994230478096756;
    msg.ay = 0.18267736049681438;
    msg.az = 0.9132406376689327;
    msg.flags = 57501U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.8026050609357855);
    msg.setSource(10671U);
    msg.setSourceEntity(122U);
    msg.setDestination(22678U);
    msg.setDestinationEntity(212U);
    msg.value = 0.28933599963759027;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.5269161838435221);
    msg.setSource(37497U);
    msg.setSourceEntity(74U);
    msg.setDestination(45472U);
    msg.setDestinationEntity(199U);
    msg.value = 0.7424575191041402;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.7145789868328942);
    msg.setSource(38464U);
    msg.setSourceEntity(157U);
    msg.setDestination(35052U);
    msg.setDestinationEntity(119U);
    msg.value = 0.010461054536095027;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.4028067477634566);
    msg.setSource(37945U);
    msg.setSourceEntity(191U);
    msg.setDestination(23258U);
    msg.setDestinationEntity(59U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 2641035558U;
    tmp_msg_0.start_lat = 0.2978521149055152;
    tmp_msg_0.start_lon = 0.2778223092516472;
    tmp_msg_0.start_z = 0.8625496845957712;
    tmp_msg_0.start_z_units = 125U;
    tmp_msg_0.end_lat = 0.7405031220196763;
    tmp_msg_0.end_lon = 0.06080170030269316;
    tmp_msg_0.end_z = 0.7423359779068911;
    tmp_msg_0.end_z_units = 56U;
    tmp_msg_0.speed = 0.20195062861388058;
    tmp_msg_0.speed_units = 126U;
    tmp_msg_0.lradius = 0.08033347459981033;
    tmp_msg_0.flags = 52U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.5758759469193726);
    msg.setSource(16769U);
    msg.setSourceEntity(2U);
    msg.setDestination(48538U);
    msg.setDestinationEntity(186U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 2626807669U;
    tmp_msg_0.start_lat = 0.41700268412107844;
    tmp_msg_0.start_lon = 0.9847446564891164;
    tmp_msg_0.start_z = 0.5025027236515262;
    tmp_msg_0.start_z_units = 137U;
    tmp_msg_0.end_lat = 0.42288610825661044;
    tmp_msg_0.end_lon = 0.6710552483626039;
    tmp_msg_0.end_z = 0.7008992407419893;
    tmp_msg_0.end_z_units = 185U;
    tmp_msg_0.speed = 0.3133949968384019;
    tmp_msg_0.speed_units = 144U;
    tmp_msg_0.lradius = 0.41869560311755616;
    tmp_msg_0.flags = 164U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.5000800412463426);
    msg.setSource(15714U);
    msg.setSourceEntity(12U);
    msg.setDestination(46831U);
    msg.setDestinationEntity(194U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 419910710U;
    tmp_msg_0.start_lat = 0.2990819215615581;
    tmp_msg_0.start_lon = 0.05478155090744252;
    tmp_msg_0.start_z = 0.23411376599578038;
    tmp_msg_0.start_z_units = 128U;
    tmp_msg_0.end_lat = 0.1624544986636638;
    tmp_msg_0.end_lon = 0.804781606744372;
    tmp_msg_0.end_z = 0.899601167895362;
    tmp_msg_0.end_z_units = 44U;
    tmp_msg_0.speed = 0.43620881115849397;
    tmp_msg_0.speed_units = 80U;
    tmp_msg_0.lradius = 0.7620825943750357;
    tmp_msg_0.flags = 193U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.9759892820910735);
    msg.setSource(42570U);
    msg.setSourceEntity(173U);
    msg.setDestination(629U);
    msg.setDestinationEntity(207U);
    msg.timeout = 23048U;
    msg.lat = 0.9104919630082673;
    msg.lon = 0.872221537385913;
    msg.z = 0.9553078222847062;
    msg.z_units = 76U;
    msg.speed = 0.8633373166726679;
    msg.speed_units = 112U;
    msg.roll = 0.0435542296366449;
    msg.pitch = 0.3227240912396041;
    msg.yaw = 0.5351433942822845;
    msg.custom.assign("HIIVQDHOPZDORUKYWBTQDQPDKAWJOZFBDAEVXJFZUHUSWKOCYSFASSWXTUFNPZNAWMKAMLEHXYQARFKBZLPSCJDEIRIPPY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.5868551122501237);
    msg.setSource(12145U);
    msg.setSourceEntity(8U);
    msg.setDestination(41407U);
    msg.setDestinationEntity(199U);
    msg.timeout = 1032U;
    msg.lat = 0.24358770796417972;
    msg.lon = 0.14736571956192523;
    msg.z = 0.8912239102567793;
    msg.z_units = 120U;
    msg.speed = 0.7476933340448126;
    msg.speed_units = 230U;
    msg.roll = 0.23826954981554105;
    msg.pitch = 0.34797776851807416;
    msg.yaw = 0.694414345871902;
    msg.custom.assign("SBVQZDZOQPQWCUSOOKZFOMGYNJJDRADHOORUBMNCYITZTAXHPLXCBHDBATXKBVMPCPRGPQIWZILLPAJRWAAFXTYOXYQENQJKYYDZLUDTCLMIIKCQNYNHGKLULMNSSKFVNOAOVHGDFSGPZAPXYEDFBOGMVVJNMIGVERAWFKNRSHCBKEEPV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.4008772588460012);
    msg.setSource(57710U);
    msg.setSourceEntity(252U);
    msg.setDestination(5470U);
    msg.setDestinationEntity(253U);
    msg.timeout = 58506U;
    msg.lat = 0.608229777954132;
    msg.lon = 0.03387134026834138;
    msg.z = 0.21450949008982356;
    msg.z_units = 137U;
    msg.speed = 0.6203139684874986;
    msg.speed_units = 44U;
    msg.roll = 0.17416495591396608;
    msg.pitch = 0.30893055811296966;
    msg.yaw = 0.024562480283738752;
    msg.custom.assign("OBIOADPBRKNDIVPLHRMSIRCLODBEHQKJWBJHHLFCJGVOJELFSXBGQURVKTBXRWVUOFTZYOQTCNXYXNKHOPEFWRTRMDNLLAQILHUWIIQZOVNGDPAOPRXXSGMWHQUNIEDHZZVWCPYWYQESBNXUGKKZXV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.9542314523996953);
    msg.setSource(36262U);
    msg.setSourceEntity(79U);
    msg.setDestination(56299U);
    msg.setDestinationEntity(202U);
    msg.timeout = 25114U;
    msg.lat = 0.19406494530932716;
    msg.lon = 0.5208748801993305;
    msg.z = 0.315262701547358;
    msg.z_units = 95U;
    msg.speed = 0.20345511382941317;
    msg.speed_units = 169U;
    msg.duration = 59555U;
    msg.radius = 0.08148524435710436;
    msg.flags = 11U;
    msg.custom.assign("HZNDOJTEVQRSOMQPHLTPBXDMAGELWXPQFZFPKTKEKTCFEMYMUQJFQLADSRIBUUKCBYTJABHPFAQDNDDGQZBFCIBKSHBIOQRXKZXWRFVYULVYILGXPAOIXUHTGGAMYIVVIBXPKEKUNVECZFXLDCOYOCRGLENSHDNWOMGMQSJVAPSCEUUYWOFWPGTHLRWWCGAWNAWJVTCZBR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.5551185028280237);
    msg.setSource(53524U);
    msg.setSourceEntity(210U);
    msg.setDestination(5093U);
    msg.setDestinationEntity(166U);
    msg.timeout = 11887U;
    msg.lat = 0.7673485717698315;
    msg.lon = 0.5420550444574593;
    msg.z = 0.8068464657380313;
    msg.z_units = 253U;
    msg.speed = 0.39767095371569205;
    msg.speed_units = 8U;
    msg.duration = 25610U;
    msg.radius = 0.5515144992960905;
    msg.flags = 46U;
    msg.custom.assign("APMWVTPFVCFGIXZLMHGXSPIJDUCSKYMGOSBAFOQPICTRTXTKUZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.19303357320271564);
    msg.setSource(44331U);
    msg.setSourceEntity(202U);
    msg.setDestination(22387U);
    msg.setDestinationEntity(96U);
    msg.timeout = 29666U;
    msg.lat = 0.9915290022604896;
    msg.lon = 0.7610692341707435;
    msg.z = 0.4463264830086634;
    msg.z_units = 172U;
    msg.speed = 0.3636648065727879;
    msg.speed_units = 180U;
    msg.duration = 8810U;
    msg.radius = 0.6206602529323743;
    msg.flags = 201U;
    msg.custom.assign("KJUQAFRSAUGGMFSOTQBUSPYNMUFVCJHWYTWSKDNEJGZFREYCWCKIXGVRBCCOKXXVRQEJZRQSHTPCLZFXPEBNYNLUXFQEMITBRBOTWDLKLDRENCMHGALZPODSTMLVHFAODVTAZKZWTOUJPNISJSPHWBVLUXIKTJAEYIIQGDJCIVBLWXYPWYCREXCOAXJUFFLEFMQRHZJIGDHIUQAKRMBKDMQNBLMQG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.16925442914681055);
    msg.setSource(12033U);
    msg.setSourceEntity(242U);
    msg.setDestination(17347U);
    msg.setDestinationEntity(34U);
    msg.custom.assign("SUWZOWALPJQHHEZUAEDPRQCWGXRFVAKDTPPTXFIMOSWBKJMYDGDKZGYZFUSDMNNANBEMTVEOLWCXEQITTGUPTZJFBGLBLCIHPBFRNVIQYCEESKGTHLHYMJB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.3035453769931362);
    msg.setSource(11359U);
    msg.setSourceEntity(169U);
    msg.setDestination(51886U);
    msg.setDestinationEntity(225U);
    msg.custom.assign("YRDKUBFCKAIJANVXVRKZDHAWFTYPWFDIMSNAQGELICSWYRZEIYDNFWQCZRTIUAHVC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.6768435588743211);
    msg.setSource(37440U);
    msg.setSourceEntity(238U);
    msg.setDestination(72U);
    msg.setDestinationEntity(71U);
    msg.custom.assign("IBJDTFNRQGCRNRCKE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.7266080777089249);
    msg.setSource(32759U);
    msg.setSourceEntity(137U);
    msg.setDestination(6148U);
    msg.setDestinationEntity(6U);
    msg.timeout = 11633U;
    msg.lat = 0.4425686019499734;
    msg.lon = 0.2778365786082574;
    msg.z = 0.8425031944566889;
    msg.z_units = 148U;
    msg.duration = 54087U;
    msg.speed = 0.25026626446348754;
    msg.speed_units = 68U;
    msg.type = 211U;
    msg.radius = 0.4118369470665172;
    msg.length = 0.7089012320034412;
    msg.bearing = 0.1429088345848405;
    msg.direction = 23U;
    msg.custom.assign("DIAVNRIMPCMZIOYMWVHXHOLOWDGLEPTMRMIRUKNJWLMSZYOIXNLRWVSUSEEUYGNBRAUCQUDZFBZFAQTHFHKMFOITYILPDROIRXUSBDGR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.965858773898179);
    msg.setSource(3346U);
    msg.setSourceEntity(245U);
    msg.setDestination(4967U);
    msg.setDestinationEntity(240U);
    msg.timeout = 49017U;
    msg.lat = 0.6703422491655928;
    msg.lon = 0.29515958905412853;
    msg.z = 0.27255449202878534;
    msg.z_units = 182U;
    msg.duration = 30393U;
    msg.speed = 0.8322249306975368;
    msg.speed_units = 53U;
    msg.type = 178U;
    msg.radius = 0.8283292687038373;
    msg.length = 0.39218066977106114;
    msg.bearing = 0.7240297508634542;
    msg.direction = 190U;
    msg.custom.assign("CNSTGWJKHRYTFZGOPLOMSXYSOKEFKXEFNZILUIFFZOVYTVKBFDBVSTEPUMBHDPFYWQYCMARWHJANVSCRKESLXSDHICPEMGJWOXEBKZVXQQLAPIYCGPOVFUHNIDATLCPFHQTTHDQVHDEAAMMDZINGADQIUVGTURIBBQMXWERLCUBCGXKWUL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.3705000613226729);
    msg.setSource(52348U);
    msg.setSourceEntity(56U);
    msg.setDestination(51423U);
    msg.setDestinationEntity(75U);
    msg.timeout = 6152U;
    msg.lat = 0.3625051586155821;
    msg.lon = 0.31778166118001594;
    msg.z = 0.14483680352431383;
    msg.z_units = 157U;
    msg.duration = 62768U;
    msg.speed = 0.0357676804769782;
    msg.speed_units = 226U;
    msg.type = 206U;
    msg.radius = 0.21411670904217772;
    msg.length = 0.7952120465710302;
    msg.bearing = 0.8051617953212721;
    msg.direction = 248U;
    msg.custom.assign("HVXMSUYFPBZDXHKCWJHUQQJNWROYJREORHMDAGUQQQOCKETZVLJCUITNQNTKTFDYNVZLMHUGSXAWBMETABZGDRRLXVHIFXOPOVGH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.11647766360142076);
    msg.setSource(42828U);
    msg.setSourceEntity(53U);
    msg.setDestination(53967U);
    msg.setDestinationEntity(20U);
    msg.duration = 22946U;
    msg.custom.assign("VWNFOUIBKZUGVCBWQTU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.5882853052941982);
    msg.setSource(7310U);
    msg.setSourceEntity(26U);
    msg.setDestination(64460U);
    msg.setDestinationEntity(230U);
    msg.duration = 30745U;
    msg.custom.assign("MCWAAJIGHQGPELYQQRKQBPOWWCSDYMNWRPEWZBAKHYRQGTFJDKXFJIMNHVCYVMQDURPFBMLOTWTQPFTEGFVLGSXCGEMQSJSJCZDKOLBDOZJVOEILNYUAMHACHZPEUZATPLZKJRUAGZVPGDBSPTTFDSXYBTROMYCSIICIVXLFXBRKXOWRENDKVSKNTQDJBNOXYXANNKUIGUBLZH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.3727083014992907);
    msg.setSource(36825U);
    msg.setSourceEntity(214U);
    msg.setDestination(13760U);
    msg.setDestinationEntity(121U);
    msg.duration = 25736U;
    msg.custom.assign("RLGXFTTXWUAHQKQRPDCUDWDCWOKHORTDLELETVICDYBOLWRVEIMWJIMYLRDGMIBNVMZQFJSNXXCNQAVOUNGYRZDUE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.695755532446731);
    msg.setSource(59990U);
    msg.setSourceEntity(133U);
    msg.setDestination(49712U);
    msg.setDestinationEntity(105U);
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.9284854822650417;
    tmp_msg_0.speed_units = 79U;
    msg.control.set(tmp_msg_0);
    msg.duration = 701U;
    msg.custom.assign("CHINKEPFOMZLLIUUTHQUFAYJMKLJLWMUDOBWKGABSFBOLNVYNWFEWQGORMDXKTEKHXRUXPCSDZYYSAXIINPOVXHJOEDPSYEDFPSZRHISBALDONYBQKPJZLCRKAKTQVUGHRYMCKZSCDENQBCIJJEUNZZFAOGQGBPREIVWPWMMGXQOHQRVNHAPGDSJZVTVXRBFWCDUUNYMILAYWTXKRAGTFCQDCIWQBLVMP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.5851788466663719);
    msg.setSource(29927U);
    msg.setSourceEntity(71U);
    msg.setDestination(10555U);
    msg.setDestinationEntity(47U);
    IMC::DesiredHeading tmp_msg_0;
    tmp_msg_0.value = 0.27837284023719333;
    tmp_msg_0.off = 0.03990675124730292;
    msg.control.set(tmp_msg_0);
    msg.duration = 11964U;
    msg.custom.assign("JFWRPBKTLWHETVDWTEVUPSAXKVCYITYDPYPCWGQCHZNQARZKRFECJRZDUPNQELEJNXTOYYHXRSODRCIXEJZMPKIWEGQJMATNLLKPSOMBYDMBUWIXHHVOCDDKAIGWMLLPKNVFOGCANHVIXJGTXDFYMPVJXLXHFNLSQQSGZU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.12191006407100113);
    msg.setSource(50674U);
    msg.setSourceEntity(82U);
    msg.setDestination(29483U);
    msg.setDestinationEntity(130U);
    IMC::DesiredZ tmp_msg_0;
    tmp_msg_0.value = 0.510043612292581;
    tmp_msg_0.z_units = 68U;
    msg.control.set(tmp_msg_0);
    msg.duration = 12809U;
    msg.custom.assign("XMGQSAJYLAADGRHORNHTJPGDJKAJQRZZYLWSXLVZANVKVFIOWPZLCGKLDLUJYCJVQXKYKUPZXRPFPMWCBMRTCWNOFOLAPZCFONVHRYEUDTHWWMTSSPHXRVDSRWBAUSWBLHGDJMO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.3065171269345669);
    msg.setSource(62366U);
    msg.setSourceEntity(8U);
    msg.setDestination(49039U);
    msg.setDestinationEntity(45U);
    msg.timeout = 3729U;
    msg.lat = 0.9118055552449175;
    msg.lon = 0.008643593820429119;
    msg.z = 0.7030404432000188;
    msg.z_units = 199U;
    msg.speed = 0.5344204990687057;
    msg.speed_units = 172U;
    msg.bearing = 0.8954688351629271;
    msg.cross_angle = 0.5024125515722234;
    msg.width = 0.32395935416857113;
    msg.length = 0.4974625070053845;
    msg.hstep = 0.5948566603946002;
    msg.coff = 74U;
    msg.alternation = 183U;
    msg.flags = 222U;
    msg.custom.assign("UJUCGJXBVJVJWQHNNGQZOTRVTYMCEMXLRBHDGWNVYVFSZDOEANJL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.6384600259032243);
    msg.setSource(37171U);
    msg.setSourceEntity(244U);
    msg.setDestination(18035U);
    msg.setDestinationEntity(201U);
    msg.timeout = 37876U;
    msg.lat = 0.9226751836130883;
    msg.lon = 0.32054192186023434;
    msg.z = 0.913489053724632;
    msg.z_units = 170U;
    msg.speed = 0.04474311450249824;
    msg.speed_units = 65U;
    msg.bearing = 0.8821561560993832;
    msg.cross_angle = 0.3178928953240677;
    msg.width = 0.6167625102585047;
    msg.length = 0.003845804172965983;
    msg.hstep = 0.8318112075525664;
    msg.coff = 246U;
    msg.alternation = 84U;
    msg.flags = 63U;
    msg.custom.assign("CMPBEBHQNAEAINREXEYOAWWMBZYYDXMDURDBEKUKJADOQSRTJDVJBOXNVXFFQBZWCFLWMYOAZUTTMMJUVHREDLZWOCCISBSLXLQGLWDKWQONTYPSGFFKPYISJCJQVVTIRGNAHSZTIJCRDBICZXKPUHSNYMGDRWLGHTVCFHEQRTXQZFMPUPNYOMLLHUKJKUVJIYOSPAKRVGFCNYTOOIZZIFDVXFVXTIKUWQELAUQRHCBWHGNASSEGENPMJZLKGP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.07032224895449934);
    msg.setSource(24034U);
    msg.setSourceEntity(211U);
    msg.setDestination(47759U);
    msg.setDestinationEntity(186U);
    msg.timeout = 40318U;
    msg.lat = 0.05746560958399616;
    msg.lon = 0.8930213739425739;
    msg.z = 0.5088781206547447;
    msg.z_units = 69U;
    msg.speed = 0.3843155870157763;
    msg.speed_units = 37U;
    msg.bearing = 0.5374767564527978;
    msg.cross_angle = 0.12510137188043235;
    msg.width = 0.9795199594536328;
    msg.length = 0.12521259042126864;
    msg.hstep = 0.12922110856669056;
    msg.coff = 108U;
    msg.alternation = 48U;
    msg.flags = 140U;
    msg.custom.assign("BOUZQOZAJPKKMGLRIDSZCUUDNENINWBCDZFKTAXIIHNOHLYAJKDCAVHNHMQJFYJKOENBHJVBWPCKSZSCXXGWMVMTBZUKYTQRGPNXEDVRMAIIMJZNHOPYPUFZRPDUTTRWEQSTVMYPAVHBGXFHGYJLIJULQKRFOQRWLEKOTUXTYBABMFEXEGSZPCGS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.02327837487683282);
    msg.setSource(8138U);
    msg.setSourceEntity(7U);
    msg.setDestination(65210U);
    msg.setDestinationEntity(26U);
    msg.timeout = 60568U;
    msg.lat = 0.08207545535346594;
    msg.lon = 0.08212723941119537;
    msg.z = 0.10802482068488051;
    msg.z_units = 49U;
    msg.speed = 0.03517505942024113;
    msg.speed_units = 174U;
    msg.custom.assign("APMENJWNSXKPNHOLZHYXOARUPNHLMKGANLGNSFOLGTQWRBUZYRWPZBQMCMWEAABUAESNFPEXBUYATDIEEEVJDQRIKRBSZKSBUFEHQZXKTLCMNOFLGDVHGBPRJTMMVYPXPFUYVBZXFTACGHVGWGOXVIVCISGITCFIQODKWLFVJKJDYVEWMHJYHDPCRWUTJALFRLDLWYBQISHBJSSHPOYKMKWTYICUMIRZKAQXNCOCERQIDD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.7581321450091247);
    msg.setSource(34744U);
    msg.setSourceEntity(191U);
    msg.setDestination(15080U);
    msg.setDestinationEntity(34U);
    msg.timeout = 59228U;
    msg.lat = 0.9137662686375019;
    msg.lon = 0.22343655515180327;
    msg.z = 0.37921483570132075;
    msg.z_units = 0U;
    msg.speed = 0.903509326280625;
    msg.speed_units = 80U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.42766797966531744;
    tmp_msg_0.y = 0.32003441550412826;
    tmp_msg_0.z = 0.946918309637106;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("WLFTGSMHKMFDTIRBDKGGNWUTZNLVVYMZUIYFJNXQBKURMPPOVLCATXLMOPQZHICJZEWMOYXBNGYTSBBBHBTURJPEODWJIILXLSJPSHXCYACJUVEMQAIJIHWUKGTMHFRHCPAQPHUSXXVZOHZJAGUEYVQCVEXBPCUISLTSRBLZANKVTMSJROZSYLQXCKDMZEIAOQEFHEKPQARWAYZIDTNBROCYNNLKFGQODXAGWDRDNFDSCWD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.9133637350312466);
    msg.setSource(58275U);
    msg.setSourceEntity(170U);
    msg.setDestination(45389U);
    msg.setDestinationEntity(50U);
    msg.timeout = 47093U;
    msg.lat = 0.575518715519504;
    msg.lon = 0.593552272994127;
    msg.z = 0.41238145635370027;
    msg.z_units = 86U;
    msg.speed = 0.3019685645878992;
    msg.speed_units = 80U;
    msg.custom.assign("PYPJURVSXDDQAHBOLGNCSIFJLMNZZODTTHABCAKRFHNIDXGWJPMGTBEPPLPJMRANKUALHTYOIRHETQLMDGPFKNULLMVAJZZNNWDHSYZEKM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.9347894806504456);
    msg.setSource(11320U);
    msg.setSourceEntity(27U);
    msg.setDestination(37286U);
    msg.setDestinationEntity(140U);
    msg.x = 0.10677681455971466;
    msg.y = 0.2714223111602032;
    msg.z = 0.5821132205306154;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.2037141481170459);
    msg.setSource(5279U);
    msg.setSourceEntity(11U);
    msg.setDestination(48297U);
    msg.setDestinationEntity(135U);
    msg.x = 0.8652877447813155;
    msg.y = 0.007377977645289691;
    msg.z = 0.4589761404641918;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.0306029418243019);
    msg.setSource(7455U);
    msg.setSourceEntity(240U);
    msg.setDestination(18040U);
    msg.setDestinationEntity(176U);
    msg.x = 0.9086321343844826;
    msg.y = 0.6610349953402656;
    msg.z = 0.7613975243296183;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.2222691002336905);
    msg.setSource(33896U);
    msg.setSourceEntity(0U);
    msg.setDestination(62171U);
    msg.setDestinationEntity(43U);
    msg.timeout = 21100U;
    msg.lat = 0.4449619362810888;
    msg.lon = 0.13406963703936248;
    msg.z = 0.49849125166229336;
    msg.z_units = 252U;
    msg.amplitude = 0.291863786686419;
    msg.pitch = 0.7236441400462189;
    msg.speed = 0.8537949506397031;
    msg.speed_units = 1U;
    msg.custom.assign("BSLCTKMJQXLKPRIRQFHCLJYQVGUGUWAUUQIMMNAZBVMCCOIFGEZOCANSKXBQLPYLSBOHHXNXTFYSMFKFVEXFNMIWCTVVQZGAAPNJLTODEIAPOPCMRWYWOBSLHZZLYIQHCDITQXTANDNMYOSFRUNUGSIAZFJBBSDVJRDGWVEEEYCTBENAPMUOHPWRHZLUDSJBJZIBCDOVKHXXUFKGKWRI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.696151428956464);
    msg.setSource(48674U);
    msg.setSourceEntity(74U);
    msg.setDestination(52812U);
    msg.setDestinationEntity(75U);
    msg.timeout = 11741U;
    msg.lat = 0.494359769881175;
    msg.lon = 0.5577346650378489;
    msg.z = 0.5805290002677217;
    msg.z_units = 154U;
    msg.amplitude = 0.975113559972396;
    msg.pitch = 0.4724032650211004;
    msg.speed = 0.4502714160679082;
    msg.speed_units = 103U;
    msg.custom.assign("FVJJVRNUMUZVBAFGSOUFKZZEXLYQBHHGNENKXFIAWURWMTXQGQVPWNMTBTGBOEPXAUGKNEZOTJRKTZWZPIBUBOADEMLTXYJYFDYUHFSVYOKSAFHKCHGFLLNDDTXJJWJORBCYMBCKQMNEVRLQHECPGTHLAK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.03334905312631942);
    msg.setSource(5393U);
    msg.setSourceEntity(75U);
    msg.setDestination(16486U);
    msg.setDestinationEntity(234U);
    msg.timeout = 33437U;
    msg.lat = 0.9843070973368788;
    msg.lon = 0.14728972897287917;
    msg.z = 0.2875346301832227;
    msg.z_units = 170U;
    msg.amplitude = 0.5911809168297418;
    msg.pitch = 0.5483071423118027;
    msg.speed = 0.2667527438764026;
    msg.speed_units = 13U;
    msg.custom.assign("VCJWCJYKJOVIEPXQMOIUVQESJVLGBQHGQWCUHWENXKFKCLIHYRLLAZDMMWOHFZPOJPKFVBNUSFLMOEEGHMIAPAOSNTRNYMOLCBGXXQTGUIUSFRZSZYDBOPWWMKQJGNRCULDQXDIWDNAPNAFHMNDFQBVYXCTDINTSESRRYDSVJWSLSZVKPBHQABBJMXEKXKEGNZCVTHYUTFLERAYFODUZUHQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.04411875884015248);
    msg.setSource(35150U);
    msg.setSourceEntity(159U);
    msg.setDestination(18053U);
    msg.setDestinationEntity(39U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.8266022582988535);
    msg.setSource(28037U);
    msg.setSourceEntity(142U);
    msg.setDestination(50131U);
    msg.setDestinationEntity(6U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.36844076516430424);
    msg.setSource(31987U);
    msg.setSourceEntity(120U);
    msg.setDestination(60297U);
    msg.setDestinationEntity(5U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.09731563583036118);
    msg.setSource(41005U);
    msg.setSourceEntity(199U);
    msg.setDestination(55648U);
    msg.setDestinationEntity(130U);
    msg.lat = 0.09779739493333761;
    msg.lon = 0.012601325935864272;
    msg.z = 0.4490361561390346;
    msg.z_units = 190U;
    msg.radius = 0.5324808630955262;
    msg.duration = 28502U;
    msg.speed = 0.5832643208402782;
    msg.speed_units = 248U;
    msg.custom.assign("WOFDBMMKPCYRBAWERIWPQQQXYERRVHVTBHFQEPJSGJQTTIWGRAXOSYUENTVNDCYNJCATYDBKYLBSWDTDXLRRCXAIHDQABZCANEESNAVUMHKGMRNGIQHGSMXNIZPKGSBUONOPZPZCJFYWX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.598995328118784);
    msg.setSource(12036U);
    msg.setSourceEntity(160U);
    msg.setDestination(50081U);
    msg.setDestinationEntity(109U);
    msg.lat = 0.7208980656159395;
    msg.lon = 0.24704967229968633;
    msg.z = 0.4180772284015095;
    msg.z_units = 204U;
    msg.radius = 0.32474309128484347;
    msg.duration = 20195U;
    msg.speed = 0.15497794291571787;
    msg.speed_units = 130U;
    msg.custom.assign("NPGHILRFBJFLVQPBKPHDSCDBRIKIYBJWEAHJARYJHEMTVWDQJOSNTVLBHWIOMVOTMICUOIGV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.733637801307811);
    msg.setSource(54406U);
    msg.setSourceEntity(172U);
    msg.setDestination(916U);
    msg.setDestinationEntity(114U);
    msg.lat = 0.2567786797775816;
    msg.lon = 0.5590123910987603;
    msg.z = 0.5693430817453169;
    msg.z_units = 153U;
    msg.radius = 0.5429615003785808;
    msg.duration = 40908U;
    msg.speed = 0.2497832391788103;
    msg.speed_units = 139U;
    msg.custom.assign("DRKLYPFHEVCZJYQGQMSCMKIIPEBTVXJVYHPCBIBAULMFBQSGDCENAXCFSNDYWATKWJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.8744683372468888);
    msg.setSource(58560U);
    msg.setSourceEntity(211U);
    msg.setDestination(4585U);
    msg.setDestinationEntity(206U);
    msg.timeout = 64953U;
    msg.flags = 241U;
    msg.lat = 0.4801819276061665;
    msg.lon = 0.3482003591075805;
    msg.start_z = 0.5177331790607047;
    msg.start_z_units = 239U;
    msg.end_z = 0.10315485723670448;
    msg.end_z_units = 47U;
    msg.radius = 0.5085457335120254;
    msg.speed = 0.7622629736048152;
    msg.speed_units = 106U;
    msg.custom.assign("AOIKYAGNUYXUJITVMLAMVSGFDXVYWFZDRTHMKZYRTGZEAHJTUHKCWUCQWFWORTMWWGRUPMWTVNOOHMLEOLJDPADSPKEXNEKCASJIOHPIQLQPLHNNJQSOMNBCPEWQCJSTLHSDQFRSWLAFQBUJMCUYAYJSZFPXGGZVESZCZYXUWNJVVBUCTVXOHXIPGBNEFZIEKRJBNFFBPDQYIDOVBIGRXTRSDXIKRCCKKYGVIDDKLMAB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.5856463004458066);
    msg.setSource(16090U);
    msg.setSourceEntity(32U);
    msg.setDestination(14705U);
    msg.setDestinationEntity(205U);
    msg.timeout = 42759U;
    msg.flags = 35U;
    msg.lat = 0.9868771541974909;
    msg.lon = 0.9160412993862814;
    msg.start_z = 0.6252138456422672;
    msg.start_z_units = 100U;
    msg.end_z = 0.46440377215126016;
    msg.end_z_units = 38U;
    msg.radius = 0.3341672831016341;
    msg.speed = 0.24396136841072424;
    msg.speed_units = 73U;
    msg.custom.assign("QCXTFYYPFBSFHYWTRKDWMXOFLYLULJYJQRSYMLHDPGTPRXQOOOBCWLHPBECUQTCVOBHGIZJPAZQVLNGUIJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.5646428362303809);
    msg.setSource(12856U);
    msg.setSourceEntity(191U);
    msg.setDestination(14457U);
    msg.setDestinationEntity(169U);
    msg.timeout = 57646U;
    msg.flags = 71U;
    msg.lat = 0.04912573940291498;
    msg.lon = 0.8033490775793911;
    msg.start_z = 0.7815717582072104;
    msg.start_z_units = 137U;
    msg.end_z = 0.059071856968648584;
    msg.end_z_units = 81U;
    msg.radius = 0.2798002401133971;
    msg.speed = 0.1870718524343331;
    msg.speed_units = 126U;
    msg.custom.assign("WPXNHJTAYHPULWBDUSICPMJCAIXODUIQNPYDRBVSILSQKMPMHLUOTSTMSHJB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.8085445129380806);
    msg.setSource(11844U);
    msg.setSourceEntity(8U);
    msg.setDestination(27201U);
    msg.setDestinationEntity(193U);
    msg.timeout = 5600U;
    msg.lat = 0.0764940335477653;
    msg.lon = 0.3954890478430291;
    msg.z = 0.9987954132692045;
    msg.z_units = 70U;
    msg.speed = 0.5312299145400444;
    msg.speed_units = 70U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.4462027951382267;
    tmp_msg_0.y = 0.9681455992584636;
    tmp_msg_0.z = 0.08857168545428118;
    tmp_msg_0.t = 0.10532573785116017;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("RJKIUTIUVWPUXFIMZTJCTHRMPFDNOAQRNDJZLKGWNKBALXHOJUUMQNZHENKTMFVQRQCAIBJVXSBCMKVJSLLYQLOYI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.8363426763786287);
    msg.setSource(39785U);
    msg.setSourceEntity(96U);
    msg.setDestination(62655U);
    msg.setDestinationEntity(251U);
    msg.timeout = 51261U;
    msg.lat = 0.979793793972614;
    msg.lon = 0.9596682850572571;
    msg.z = 0.598640563470834;
    msg.z_units = 3U;
    msg.speed = 0.8797286528106943;
    msg.speed_units = 203U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.3267324145580921;
    tmp_msg_0.y = 0.3941621314650049;
    tmp_msg_0.z = 0.18265197975684888;
    tmp_msg_0.t = 0.3570758609629776;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("TEZZGUVIMBQTRHGSPLMAKIDLGPRFVSUCZNOUHBIQAOEBNZOORZWTCLWEGFJLNTBGOVCPKOWSYBYZBFTWIYJBFSOSAUFQHNWYKRXPLIRVEMBDZEGMKIPAXPRHCDAEXJLDJVGNPKJNKPZQWMJQDRLHFTJUYINJAZOLUXYSABKTGUQVVXFNX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.34168756917042586);
    msg.setSource(58757U);
    msg.setSourceEntity(222U);
    msg.setDestination(16043U);
    msg.setDestinationEntity(152U);
    msg.timeout = 7157U;
    msg.lat = 0.4129625015582211;
    msg.lon = 0.40062388710980645;
    msg.z = 0.017369509560101415;
    msg.z_units = 66U;
    msg.speed = 0.6944785265982251;
    msg.speed_units = 166U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.11128864588883014;
    tmp_msg_0.y = 0.6414549030196647;
    tmp_msg_0.z = 0.24876193761061727;
    tmp_msg_0.t = 0.10758146847207717;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("ANFKBAHBUWWPXOHCDGENDVAQUHCDYKWMMNTTZSXLZPQLYVGBFYDEAMGKDA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.2391526896590488);
    msg.setSource(62506U);
    msg.setSourceEntity(111U);
    msg.setDestination(18060U);
    msg.setDestinationEntity(38U);
    msg.x = 0.3016372869178777;
    msg.y = 0.8207181211914374;
    msg.z = 0.695604862955433;
    msg.t = 0.670922886620686;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.8318275690178579);
    msg.setSource(1499U);
    msg.setSourceEntity(30U);
    msg.setDestination(49255U);
    msg.setDestinationEntity(12U);
    msg.x = 0.8177640744293476;
    msg.y = 0.3454489185463431;
    msg.z = 0.8791650165953695;
    msg.t = 0.6651285629280347;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.54550036266727);
    msg.setSource(21796U);
    msg.setSourceEntity(90U);
    msg.setDestination(63969U);
    msg.setDestinationEntity(49U);
    msg.x = 0.6220165621141475;
    msg.y = 0.4853008930972288;
    msg.z = 0.32041932439806964;
    msg.t = 0.485180854216401;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.5884789886278367);
    msg.setSource(11063U);
    msg.setSourceEntity(131U);
    msg.setDestination(33474U);
    msg.setDestinationEntity(12U);
    msg.timeout = 33323U;
    msg.name.assign("AXSXFWGXZPHCUQOIVUJPJLGIVVMCXEFKHYHCNJBXPQNGCGVUGKLHWSDIURVDBWMPUFPNLGFTIE");
    msg.custom.assign("TTCINAIYXIKJLPRJBCKOMDKOPFHHJIULTWFTEARIHWVJZQMGFPDNNWHJIRLMYANRMQWKQYNJFCWOHEHFGBCZSABGCXBGYXYHZDMRPHOZUGSETUOUXQVBBAEWUPTSWZLXDISRCDUEXJRZVYTIRJAYDGLPSPJHLXVNQLUTZGPBMUDCOSEDFDEKOSNYDENWMLLZBC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.2769353925203585);
    msg.setSource(28270U);
    msg.setSourceEntity(112U);
    msg.setDestination(44027U);
    msg.setDestinationEntity(31U);
    msg.timeout = 28227U;
    msg.name.assign("KNAIKVCYABBDPAEPQSMBWJMHUCSQDSUQOJMHFHHNYEIZMOJQTVVTGZODVMSLRYXOWMTCYISUWXGHHNVPDIRCPADURLNQRKLZKJBKGXKBUMTHYFEBRFFENUIJIOBSVFGSXCBERXSMOZLAJKGVTEURDUGYFIWHYOWNAAFGYTFJQJDFCNBCUFXEKZZDNLHWXYELBKQPPGRQGPCUYLXITVIDMQSPZJAQCJOHXPZANDVNO");
    msg.custom.assign("MBNQPIWIVNCWJSEYFZTXMQWU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.6738133268966381);
    msg.setSource(12102U);
    msg.setSourceEntity(199U);
    msg.setDestination(45805U);
    msg.setDestinationEntity(158U);
    msg.timeout = 30613U;
    msg.name.assign("ZTSCXKMGJHOQGHXWJQDKKNJFAJNHWBPLZDFRUBZYRBITAFKIGHAPJORRTEMGUPOSECKCISWLTHNJYGELPDYSKPLOSAVAQBVDLUWXHOVRVMMOETGYZJFUILNIMBMDNXGQDJPIWWYVCQBLBTKCSCSNXZDYNGWZKODAAEUQWQ");
    msg.custom.assign("VBNJIRCHUHFTPGPNEDNUWYKXTQGXOZHAAXFTQVQMPFTLWIJDGILCUBMNSUSJQZOUFROUWADKVBSRIOWXJFYLWAHAPWBOXNJYZIEOZEBTLWCQRPCACJRVBAYDQYJQTILFADTXMVCDTGBX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.12230310946922973);
    msg.setSource(47405U);
    msg.setSourceEntity(173U);
    msg.setDestination(25659U);
    msg.setDestinationEntity(30U);
    msg.lat = 0.435538171599532;
    msg.lon = 0.7644036244491627;
    msg.z = 0.44996960488307547;
    msg.z_units = 188U;
    msg.speed = 0.6934375862279255;
    msg.speed_units = 118U;
    msg.start_time = 0.47915116409614256;
    msg.custom.assign("BWGVGOVNJNOKOFGDEXVEZQRASKPKPKIGHXSWEOPMNONUWDNMCEJKXQHZDOLBQTCXDSQTUXDAAGLJIKEIMQGMAENNNYVBSYEGIYWQVFLTJWZII");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.896696648336518);
    msg.setSource(50389U);
    msg.setSourceEntity(114U);
    msg.setDestination(41567U);
    msg.setDestinationEntity(196U);
    msg.lat = 0.9892727602769997;
    msg.lon = 0.9682275519094001;
    msg.z = 0.8879067743925516;
    msg.z_units = 8U;
    msg.speed = 0.3604376479256862;
    msg.speed_units = 133U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.5451191315924984;
    tmp_msg_0.y = 0.2757592492286586;
    tmp_msg_0.z = 0.8723550572262642;
    tmp_msg_0.t = 0.7226716273423313;
    msg.points.push_back(tmp_msg_0);
    msg.start_time = 0.9531493907258036;
    msg.custom.assign("UDRSJQCEGFBEZIEYYTQBPLBIXFUXBNOBONKBLADADDTKFCMVQOKLQXDQLZZAPHJLEPGFRYUERWWMJXHZYQWPYHSTFOPKELTAHIZWRJQSFSBBSVCHESBPCGJCUTQWJNYUIRONKIUIDFCYLAYCQHMYSANVFNRVBVMXKNTUNZGCRXTUEIXSZEQGOXDJAVVIHSHWPFGLXIVHIOGMT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.12216408713081517);
    msg.setSource(27056U);
    msg.setSourceEntity(87U);
    msg.setDestination(14819U);
    msg.setDestinationEntity(14U);
    msg.lat = 0.11787703518325487;
    msg.lon = 0.46193611233742493;
    msg.z = 0.47498845427415604;
    msg.z_units = 202U;
    msg.speed = 0.978223081125371;
    msg.speed_units = 0U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 39160U;
    tmp_msg_0.off_x = 0.4818124645177698;
    tmp_msg_0.off_y = 0.491906480140198;
    tmp_msg_0.off_z = 0.6527061017815498;
    msg.participants.push_back(tmp_msg_0);
    msg.start_time = 0.5149002499385577;
    msg.custom.assign("WSGNAXGSTJUAAZEAHYFGUFSJHZGRXRNNWJQRTLKEZISUIBQNXFTMNOVQPILJABCWOMXITIDIRRSVLZYEXZRAKIFHWQMVVPJNBKOBHZOQDWVSQCZDWYJEXPEYOGCBRQVNTTXQKKDJBEWKLWOPSTUALOKMQDNBFXLFNZUASCDHTKVCPWOGFJCMHHIEMTDF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.7289203415456836);
    msg.setSource(7507U);
    msg.setSourceEntity(45U);
    msg.setDestination(7103U);
    msg.setDestinationEntity(201U);
    msg.vid = 25349U;
    msg.off_x = 0.9905615929726318;
    msg.off_y = 0.4009608934100367;
    msg.off_z = 0.9198352263520129;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.2898416382902753);
    msg.setSource(5894U);
    msg.setSourceEntity(111U);
    msg.setDestination(10625U);
    msg.setDestinationEntity(166U);
    msg.vid = 61485U;
    msg.off_x = 0.7121887895950065;
    msg.off_y = 0.5931429832102926;
    msg.off_z = 0.8559644290135142;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.9074801078390454);
    msg.setSource(47883U);
    msg.setSourceEntity(1U);
    msg.setDestination(59105U);
    msg.setDestinationEntity(109U);
    msg.vid = 42342U;
    msg.off_x = 0.2243272120195683;
    msg.off_y = 0.06537015864158202;
    msg.off_z = 0.5481584149599135;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.033536800278923695);
    msg.setSource(58305U);
    msg.setSourceEntity(232U);
    msg.setDestination(32875U);
    msg.setDestinationEntity(29U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.31511914988284606);
    msg.setSource(39280U);
    msg.setSourceEntity(67U);
    msg.setDestination(6063U);
    msg.setDestinationEntity(108U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.12047999366025042);
    msg.setSource(17368U);
    msg.setSourceEntity(171U);
    msg.setDestination(45464U);
    msg.setDestinationEntity(140U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.3497038203238686);
    msg.setSource(59615U);
    msg.setSourceEntity(79U);
    msg.setDestination(5799U);
    msg.setDestinationEntity(160U);
    msg.mid = 52929U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.9913891917892723);
    msg.setSource(34185U);
    msg.setSourceEntity(149U);
    msg.setDestination(8586U);
    msg.setDestinationEntity(134U);
    msg.mid = 9800U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.43096905695934806);
    msg.setSource(59790U);
    msg.setSourceEntity(114U);
    msg.setDestination(2743U);
    msg.setDestinationEntity(239U);
    msg.mid = 20881U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.09995500111019695);
    msg.setSource(14347U);
    msg.setSourceEntity(72U);
    msg.setDestination(32340U);
    msg.setDestinationEntity(12U);
    msg.state = 249U;
    msg.eta = 28397U;
    msg.info.assign("TMFIXAZLZKDGAXONVDBIWQLDYDWMXAIPHDYRNPJPQRHKJSUDENTEAEZUGMJONMKVWNONBYRDPSFWXIBKFUAWUOXHYGTMGQKGCBSRZXHNAJEOTDYIYAGQNXPTBFZZRMHHKMVYFBTSCHVFDRULJKQXCIZODMEFIC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.49982141035650507);
    msg.setSource(24912U);
    msg.setSourceEntity(49U);
    msg.setDestination(14871U);
    msg.setDestinationEntity(92U);
    msg.state = 187U;
    msg.eta = 17177U;
    msg.info.assign("YMJTXOZXOCRBMWHATIOJGNCPNCUBYGI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.5490011358756607);
    msg.setSource(53212U);
    msg.setSourceEntity(109U);
    msg.setDestination(31003U);
    msg.setDestinationEntity(200U);
    msg.state = 186U;
    msg.eta = 24595U;
    msg.info.assign("CTWOVSCKNGEFRJQHYSOMAKVWROERENPGQQLGROPFBOVGICIBIKQCPWFHTNMXSAPOITMJNDRZBPMIKMYOZHGQZNJQCJXRZAABLCDLDUEDCUHYMXKXSOAERBVWLNVBXGLLXUTDJSUZTROTAPDITJZUIYYWALZSFFAPHGVSKEAH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.23107637338157716);
    msg.setSource(21995U);
    msg.setSourceEntity(62U);
    msg.setDestination(10458U);
    msg.setDestinationEntity(91U);
    msg.system = 26684U;
    msg.duration = 2591U;
    msg.speed = 0.8932626245793966;
    msg.speed_units = 20U;
    msg.x = 0.6676011110196051;
    msg.y = 0.0480342647568498;
    msg.z = 0.4289112317180782;
    msg.z_units = 11U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.6435506926652547);
    msg.setSource(1364U);
    msg.setSourceEntity(65U);
    msg.setDestination(57959U);
    msg.setDestinationEntity(179U);
    msg.system = 42487U;
    msg.duration = 35211U;
    msg.speed = 0.8875184489489687;
    msg.speed_units = 82U;
    msg.x = 0.15654400526951096;
    msg.y = 0.4929339277114121;
    msg.z = 0.5939208917850249;
    msg.z_units = 154U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.45520855578459585);
    msg.setSource(60799U);
    msg.setSourceEntity(123U);
    msg.setDestination(821U);
    msg.setDestinationEntity(132U);
    msg.system = 38796U;
    msg.duration = 47393U;
    msg.speed = 0.09133297048001243;
    msg.speed_units = 178U;
    msg.x = 0.24871893049736105;
    msg.y = 0.618265064235609;
    msg.z = 0.7433437737490581;
    msg.z_units = 224U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.19684134105148543);
    msg.setSource(15789U);
    msg.setSourceEntity(232U);
    msg.setDestination(16086U);
    msg.setDestinationEntity(102U);
    msg.lat = 0.06394777611883129;
    msg.lon = 0.7018057333896003;
    msg.speed = 0.4427011182302527;
    msg.speed_units = 118U;
    msg.duration = 21347U;
    msg.sys_a = 38723U;
    msg.sys_b = 35233U;
    msg.move_threshold = 0.807018630340831;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.7801596482155594);
    msg.setSource(14638U);
    msg.setSourceEntity(20U);
    msg.setDestination(40633U);
    msg.setDestinationEntity(43U);
    msg.lat = 0.976742198509481;
    msg.lon = 0.11779846260418714;
    msg.speed = 0.9118575116996662;
    msg.speed_units = 13U;
    msg.duration = 14078U;
    msg.sys_a = 15653U;
    msg.sys_b = 36170U;
    msg.move_threshold = 0.1611597404779127;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.652524937928721);
    msg.setSource(50736U);
    msg.setSourceEntity(126U);
    msg.setDestination(50410U);
    msg.setDestinationEntity(88U);
    msg.lat = 0.7961314191588752;
    msg.lon = 0.9003087099822912;
    msg.speed = 0.6662176700650612;
    msg.speed_units = 80U;
    msg.duration = 26844U;
    msg.sys_a = 48264U;
    msg.sys_b = 52097U;
    msg.move_threshold = 0.43607571752376706;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.8489344875626826);
    msg.setSource(14677U);
    msg.setSourceEntity(191U);
    msg.setDestination(33943U);
    msg.setDestinationEntity(75U);
    msg.lat = 0.6980430820265574;
    msg.lon = 0.8169279665340267;
    msg.z = 0.8385151320062972;
    msg.z_units = 123U;
    msg.speed = 0.7521705603086982;
    msg.speed_units = 90U;
    msg.custom.assign("FHKUQNVOZKBYDGHTFTBNNMLKWSFEMUYQGNVSANESQGLZLACAVMFVHUNNMGZPSBXTPSCBPOTWCDNRVUXUKYIMWSGQWOAUTZHPGIBJP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.7755421537066522);
    msg.setSource(55620U);
    msg.setSourceEntity(6U);
    msg.setDestination(31370U);
    msg.setDestinationEntity(71U);
    msg.lat = 0.3339337016647562;
    msg.lon = 0.35144437151134456;
    msg.z = 0.4480170274924735;
    msg.z_units = 214U;
    msg.speed = 0.6769671810685781;
    msg.speed_units = 26U;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.9210380593139718;
    tmp_msg_0.lon = 0.5290822685271308;
    msg.polygon.push_back(tmp_msg_0);
    msg.custom.assign("ACPQCISSSMJRUGRIGVHRYOC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.36989842137829376);
    msg.setSource(63537U);
    msg.setSourceEntity(249U);
    msg.setDestination(46261U);
    msg.setDestinationEntity(222U);
    msg.lat = 0.7904564444010764;
    msg.lon = 0.23345954852751838;
    msg.z = 0.11129236614958338;
    msg.z_units = 115U;
    msg.speed = 0.9527669657396337;
    msg.speed_units = 124U;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.359169627230971;
    tmp_msg_0.lon = 0.21667974654434352;
    msg.polygon.push_back(tmp_msg_0);
    msg.custom.assign("EUJLXXEZYOFACFZFYGVQNZNCJTAOPUAPZIDJEWSIZBOXVSNDRYLWCDDHXAHCCDLYKWOJNQNPKBLKLMMLPVQSWPGMGIRGFXNGVCHYYIPTOCPKEMQHBFWRIA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.374805775335485);
    msg.setSource(57269U);
    msg.setSourceEntity(23U);
    msg.setDestination(30715U);
    msg.setDestinationEntity(173U);
    msg.lat = 0.3440649278776793;
    msg.lon = 0.4394882390602075;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.17287876601377195);
    msg.setSource(45752U);
    msg.setSourceEntity(249U);
    msg.setDestination(37591U);
    msg.setDestinationEntity(42U);
    msg.lat = 0.2243749019183745;
    msg.lon = 0.4837953958206811;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.6110889445108338);
    msg.setSource(1222U);
    msg.setSourceEntity(122U);
    msg.setDestination(30933U);
    msg.setDestinationEntity(37U);
    msg.lat = 0.7312236881853452;
    msg.lon = 0.3330576798284117;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.619330192569211);
    msg.setSource(2749U);
    msg.setSourceEntity(219U);
    msg.setDestination(32308U);
    msg.setDestinationEntity(27U);
    msg.timeout = 19558U;
    msg.lat = 0.05450387291933523;
    msg.lon = 0.5823195719790389;
    msg.z = 0.3522640194745559;
    msg.z_units = 246U;
    msg.pitch = 0.591966459088157;
    msg.amplitude = 0.8659128899589098;
    msg.duration = 19623U;
    msg.speed = 0.9853878328266038;
    msg.speed_units = 203U;
    msg.radius = 0.4098702149948318;
    msg.direction = 175U;
    msg.custom.assign("FVZUWQZXVJGZIXORGL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.08853671389779727);
    msg.setSource(14017U);
    msg.setSourceEntity(126U);
    msg.setDestination(5334U);
    msg.setDestinationEntity(249U);
    msg.timeout = 34648U;
    msg.lat = 0.5316173910529366;
    msg.lon = 0.05969153790381121;
    msg.z = 0.6453568737798268;
    msg.z_units = 75U;
    msg.pitch = 0.017953242250294044;
    msg.amplitude = 0.11143350468649704;
    msg.duration = 1178U;
    msg.speed = 0.6487198084796888;
    msg.speed_units = 104U;
    msg.radius = 0.7619038283109452;
    msg.direction = 216U;
    msg.custom.assign("JOEGCZPDDYRLLNMJXZKBSBGKCAKTETJGNIFHGSWGGORARAD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.2130762533020235);
    msg.setSource(450U);
    msg.setSourceEntity(77U);
    msg.setDestination(19486U);
    msg.setDestinationEntity(11U);
    msg.timeout = 6747U;
    msg.lat = 0.6409479126512543;
    msg.lon = 0.1859638174450694;
    msg.z = 0.12085593575108977;
    msg.z_units = 210U;
    msg.pitch = 0.8006543709263294;
    msg.amplitude = 0.9361197657731491;
    msg.duration = 57657U;
    msg.speed = 0.3668543089005284;
    msg.speed_units = 53U;
    msg.radius = 0.16688139479356567;
    msg.direction = 101U;
    msg.custom.assign("XUMBNHXWNBWOSABGFYHCDGDZTOXVPSLHISSEKZIZENWDJQQNPLJLAOQVODMRNMHWVCN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.8157022766222151);
    msg.setSource(30369U);
    msg.setSourceEntity(116U);
    msg.setDestination(35440U);
    msg.setDestinationEntity(164U);
    msg.formation_name.assign("MUSGSJZYQALIASLENXNAVTGCAPODBWSKJBFTYLPKOXMWBDECCJFEUHIHSDVSPGKLJBTAPIGULPTGHQCZEDORNONHQYYQWOSWRXXITUZUREQRWNELFUPUJQFKTRWVMCRKLHVEWWVKUPBRMHOKJBSDNACJCGMTMQGDYWZVS");
    msg.reference_frame = 68U;
    msg.custom.assign("ROJLBAIRNMBGFLTPIRVIPZLQYCNAHWOCBNGWDXDUVFQDCMSJZYYSEVWTVSTCSOSEYOOJUPPILRPCINGJXZMKKJGZJQDKDPUJKBLOXKFGKGHJUWPHUVTQTRCIYTZVVENPNZAXXEQDFYXFHUXGMQRCGFLTIYSRWVFPKERQQTQCYRNAELOMJBCIDWALOTEHVBMMYSZWKUIFQDEANWSIAVAATXYXMRXHOZDPSNMBSBAHBCDGKUWNBFHHFJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.5585640360570089);
    msg.setSource(38499U);
    msg.setSourceEntity(99U);
    msg.setDestination(52536U);
    msg.setDestinationEntity(52U);
    msg.formation_name.assign("AYSYLHYMOWDQVMWPEKAWWNNAYDXGNBQPLCCVSVRFVWKFNJZDORVINBZKWFMEIASUTEZQRELENJZGGFHKXDFSRZPHDYUEQSLUKJOUAVWSTGUODTHKBOWYPUCPCXPOXJZDMXSPKTHRQIPQSHQRVOMGCNGYOMEJEDLY");
    msg.reference_frame = 43U;
    msg.custom.assign("LADVPOUOCYEJOGTGTCYBWPQGNSYTMXXAOFBWNHGFYNJBPJZXVWTLIYMXZNUMZFOKEIMLTHLJCCVJMWSIUTGGIQVTOWCHBFKTAPHLEXDRDNRKVNUQWONCINPVQFEPZTECDRREMBYFHKM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.07959519684234129);
    msg.setSource(16934U);
    msg.setSourceEntity(206U);
    msg.setDestination(39547U);
    msg.setDestinationEntity(214U);
    msg.formation_name.assign("TLVKOWKNFMYGWUIMYUYPZALBVWYOMWBQONVKIWXNXMCPGFRNPHCEBFFTOKUZQVVODTZFPRUQISFWBMMESUV");
    msg.reference_frame = 96U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 8290U;
    tmp_msg_0.off_x = 0.28493000699136894;
    tmp_msg_0.off_y = 0.311464034542387;
    tmp_msg_0.off_z = 0.35331986274857363;
    msg.participants.push_back(tmp_msg_0);
    msg.custom.assign("ZDLLSQZNHHNNTKAIP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.9852867349551452);
    msg.setSource(29117U);
    msg.setSourceEntity(53U);
    msg.setDestination(12264U);
    msg.setDestinationEntity(125U);
    msg.group_name.assign("BDKOXLXVTJDRIRCHN");
    msg.formation_name.assign("IYYUOOGXQQMQKRSSXFSXDWXBYZSTKTFRFQKLIPBXVQRNJFWOXVROGDCMKTGVDBOAUCNUPGZYNRJRNMMHTLPBWQVNCQDOIUHSUBJLRGEORNJKZEVASBHKEAWTFUODOISFSKMUVIJIYHCPCYCHUVWPLAZWHXLWHZLXGLVUFFSBILZITVEVAJEIDARTJTQMPHXEBEBNAHM");
    msg.plan_id.assign("GRVQWZZYPTZXHIOELPCRRNHOADKODBVGLWETZYWSSGRIZZFSWDRJZGCHFKWCDXOTYKTIEQLWUNUGWJUNRVAINALXPQYQFCRLMJUMJFYSBNFNVMAZLOAILXPMQPZJRURVIDSIGFMYPPXVQLAAWNWHBKFUCHJVITXFCKOJNIHMWECDTJQKMVCLZVNGOXGSOAFEXECXBCYPUSHMBDHODJH");
    msg.description.assign("GRPBSUAWBTTVAHRMJCQBECLXERNOJHXTNLAUESFCCYCYQTFD");
    msg.leader_speed = 0.7637453572171207;
    msg.leader_bank_lim = 0.028355821072679976;
    msg.pos_sim_err_lim = 0.5451417231796558;
    msg.pos_sim_err_wrn = 0.9850143240641981;
    msg.pos_sim_err_timeout = 18541U;
    msg.converg_max = 0.6193685432049478;
    msg.converg_timeout = 51779U;
    msg.comms_timeout = 13943U;
    msg.turb_lim = 0.7691133279513768;
    msg.custom.assign("JLBDVCMBYBAZCWDOTTAFHTJNYAUNJLGMIWQCYIZNZZVFPYRVGXHPXRUOTUKRSVAHWROFOKWFMEWHLOHUMFBIBF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.34512015205434543);
    msg.setSource(3473U);
    msg.setSourceEntity(216U);
    msg.setDestination(28075U);
    msg.setDestinationEntity(159U);
    msg.group_name.assign("YOCFNUKKMFVVFZEPRGDQETBQDGCLBUPLKYHUHWPRAGWNDAIRDNTQXQPJTQNOTSTHUTZKOLIMZENIKOTAFLCAHIYPVASVJIWDVSCLAJIURXWWFDABNBFYEWBGBGZLSNOXQWXQMRBCSYKCDVZTAYYCDSCIFNHUGLHBKLEZYLOXPUGPMVMTXVBGXJMIHJOXSYJFPJWLKFCNCGHSENWESVPEQZAQRZIXKJEPZOFRRMMUJYAOUDREZ");
    msg.formation_name.assign("EZZLZGBYDCFVLDEUJIBMHPSSIOFZGHKUXQGEOMEVYIKAZTDSORQBCGNKSOUCKUEGBYSFNZSAVMYANQKCJHGFHEAWLJPXJIXFOJSMFJMVHUCIOXRYLDTPWDVBDIVQTMO");
    msg.plan_id.assign("ZURWBPCBUPXZWERXTIEQNJBYRIVDDZAPKTHWMTFCEIOOHYKZGJBUUUPGPMBYEUVNJXIQRCXSTLTUBKRXDETUEXLLKYZAKIJVPPFWGUEBKMFMGQYVOGSVXWFFABJLDEZVPYPAQHYZMKFOTSGAACTXCQYRACISSHRDHLQFWMJINAQBJIMVKZHDLCSNIDHGGOOXGZPOVDDCBNOLNEERHQGCLSUDNMRYYWQWINROKKLS");
    msg.description.assign("KIXDANYLKBEFPLFVKURGHBPMZWQGTJBLWCFWCXMCZQU");
    msg.leader_speed = 0.20236878456056784;
    msg.leader_bank_lim = 0.28484434875344466;
    msg.pos_sim_err_lim = 0.14961574881777318;
    msg.pos_sim_err_wrn = 0.9663494890676154;
    msg.pos_sim_err_timeout = 50804U;
    msg.converg_max = 0.11422298558231248;
    msg.converg_timeout = 42530U;
    msg.comms_timeout = 50284U;
    msg.turb_lim = 0.017176072713053214;
    msg.custom.assign("JYLUNBSKNTRLZWHOXJJXEDPOPRPNRSMDLZAKLYDMOATLKDTR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.5962551367088887);
    msg.setSource(25064U);
    msg.setSourceEntity(159U);
    msg.setDestination(49860U);
    msg.setDestinationEntity(61U);
    msg.group_name.assign("DDJNDMXQIXYFPCWCCPBQFLRGITJXCAKBNNMRLEYHXHEK");
    msg.formation_name.assign("HNGSPXYUDEZMTELJRCTSCSDVMEFKOXGZNVRPIFKWYUGKEGMBVXQJFLNDDQXWJCZLCIWCUSHYFKIIEJIKXEQNAPTOSQJOPTMAOBPHGNBJMLLAZMASFDOLUZXTDVSKALLTQDYYTZIBSIWFRVHVCUFKQEULGWGONMTBXRBBEYDFOQRAAZYTHCJNPYHPZBMYFMBRRUGWIOWWCEHCDVJZTJIZGPSNJPWXQRBAOVWEUQRULNAFODKHA");
    msg.plan_id.assign("SMWAXBNNJBKZPOUMFISJVIJCYWUZRYKHSBKFEJQWBYQGEABUROXVTQACHVPFUAYNDQYMLAISLGUGNLUVCLPGHUVFPWMRXTEPPOLHVJTHXEORPHTWCIGIK");
    msg.description.assign("LQAYCVIFGHLQMPATSWKFJYCLMNVHNKNRLOWGNJKOCOVDZWVSEBQEROJJCIQXXAYKKXPEOCHYTLIGNUZVHRFWGIMYUIZTSFC");
    msg.leader_speed = 0.4743745004942682;
    msg.leader_bank_lim = 0.6826583453372361;
    msg.pos_sim_err_lim = 0.94234012433745;
    msg.pos_sim_err_wrn = 0.5212041539244666;
    msg.pos_sim_err_timeout = 60702U;
    msg.converg_max = 0.6938559351200957;
    msg.converg_timeout = 54825U;
    msg.comms_timeout = 54723U;
    msg.turb_lim = 0.793389862503221;
    msg.custom.assign("OTCMCICEKTTOVOIERXYSZWJQVOBTVBJZXTKPGPFCMKHYKGYBRDBGOTJGRIKUPVYXFSLXZKECIUNZQHXNIGDAZNQJZCOLVMNCJZVPPJHRWAU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.9395034108714306);
    msg.setSource(20088U);
    msg.setSourceEntity(225U);
    msg.setDestination(61405U);
    msg.setDestinationEntity(254U);
    msg.control_src = 3259U;
    msg.control_ent = 222U;
    msg.timeout = 0.8316924998121452;
    msg.loiter_radius = 0.873501074097082;
    msg.altitude_interval = 0.9214670596811347;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.013414293524305232);
    msg.setSource(63930U);
    msg.setSourceEntity(95U);
    msg.setDestination(22081U);
    msg.setDestinationEntity(206U);
    msg.control_src = 26446U;
    msg.control_ent = 115U;
    msg.timeout = 0.9765186698029341;
    msg.loiter_radius = 0.5960694751408977;
    msg.altitude_interval = 0.7741756692668826;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.0065013652085259555);
    msg.setSource(34732U);
    msg.setSourceEntity(45U);
    msg.setDestination(40642U);
    msg.setDestinationEntity(34U);
    msg.control_src = 63762U;
    msg.control_ent = 204U;
    msg.timeout = 0.11778897227604201;
    msg.loiter_radius = 0.32625891423131137;
    msg.altitude_interval = 0.895702414512232;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.25477150007603877);
    msg.setSource(26014U);
    msg.setSourceEntity(201U);
    msg.setDestination(64034U);
    msg.setDestinationEntity(232U);
    msg.flags = 135U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.886786273921989;
    tmp_msg_0.speed_units = 7U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.675353095785801;
    tmp_msg_1.z_units = 110U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.8266379372513867;
    msg.lon = 0.9961793508849442;
    msg.radius = 0.9402152079663777;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.9888614552126975);
    msg.setSource(29552U);
    msg.setSourceEntity(42U);
    msg.setDestination(1253U);
    msg.setDestinationEntity(121U);
    msg.flags = 59U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.4815299087939532;
    tmp_msg_0.speed_units = 94U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.6614323559072179;
    tmp_msg_1.z_units = 223U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.12897711521452515;
    msg.lon = 0.8743774615260864;
    msg.radius = 0.42998185468745065;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.6252976412766723);
    msg.setSource(28924U);
    msg.setSourceEntity(73U);
    msg.setDestination(12438U);
    msg.setDestinationEntity(197U);
    msg.flags = 237U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.710839857452252;
    tmp_msg_0.speed_units = 203U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.372399140950889;
    tmp_msg_1.z_units = 240U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.17605411050865383;
    msg.lon = 0.4760009620376944;
    msg.radius = 0.6479263781066382;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.7584860332968113);
    msg.setSource(60565U);
    msg.setSourceEntity(240U);
    msg.setDestination(31552U);
    msg.setDestinationEntity(17U);
    msg.control_src = 28792U;
    msg.control_ent = 252U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 224U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.2562400885204382;
    tmp_tmp_msg_0_0.speed_units = 248U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.29363491432145106;
    tmp_tmp_msg_0_1.z_units = 110U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.18580375560648354;
    tmp_msg_0.lon = 0.3972123335933362;
    tmp_msg_0.radius = 0.4248238654442059;
    msg.reference.set(tmp_msg_0);
    msg.state = 195U;
    msg.proximity = 53U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.32937124821740593);
    msg.setSource(7887U);
    msg.setSourceEntity(112U);
    msg.setDestination(50452U);
    msg.setDestinationEntity(198U);
    msg.control_src = 29786U;
    msg.control_ent = 24U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 178U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.8390844194394023;
    tmp_tmp_msg_0_0.speed_units = 198U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.6017853246864687;
    tmp_tmp_msg_0_1.z_units = 144U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.07092044849260992;
    tmp_msg_0.lon = 0.8868492048389464;
    tmp_msg_0.radius = 0.12278846127608034;
    msg.reference.set(tmp_msg_0);
    msg.state = 145U;
    msg.proximity = 8U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.19742197466623368);
    msg.setSource(54186U);
    msg.setSourceEntity(106U);
    msg.setDestination(43066U);
    msg.setDestinationEntity(48U);
    msg.control_src = 24614U;
    msg.control_ent = 149U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 214U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.5034040648933527;
    tmp_tmp_msg_0_0.speed_units = 214U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.6673620019884308;
    tmp_tmp_msg_0_1.z_units = 214U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.4679533425971709;
    tmp_msg_0.lon = 0.9102286322974901;
    tmp_msg_0.radius = 0.2312583116441248;
    msg.reference.set(tmp_msg_0);
    msg.state = 88U;
    msg.proximity = 15U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.9795325336370309);
    msg.setSource(33809U);
    msg.setSourceEntity(161U);
    msg.setDestination(41217U);
    msg.setDestinationEntity(69U);
    msg.ax_cmd = 0.7890560317931872;
    msg.ay_cmd = 0.2461158761103247;
    msg.az_cmd = 0.6419115519453857;
    msg.ax_des = 0.5315635090126481;
    msg.ay_des = 0.7936085331309928;
    msg.az_des = 0.0973256862130919;
    msg.virt_err_x = 0.06879473691434879;
    msg.virt_err_y = 0.26869869555860904;
    msg.virt_err_z = 0.5657476688994212;
    msg.surf_fdbk_x = 0.9085212739808569;
    msg.surf_fdbk_y = 0.5840858436707316;
    msg.surf_fdbk_z = 0.0790020244779508;
    msg.surf_unkn_x = 0.2525309565360965;
    msg.surf_unkn_y = 0.903127293585314;
    msg.surf_unkn_z = 0.5650802660134389;
    msg.ss_x = 0.901581231359146;
    msg.ss_y = 0.41528520371844857;
    msg.ss_z = 0.4923107812842824;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("CJMKHVGOCNEDJWMLYROUVFNLFZRWHQSAWDNYTEVHAPEUBICSEHLXPBWTCZLNLYTXLONCLQVGRKQJHKFTOKPSMEGAFGVUFSRYJSIIVYIBGWSEDCTT");
    tmp_msg_0.dist = 0.49169952216250856;
    tmp_msg_0.err = 0.6052076861867923;
    tmp_msg_0.ctrl_imp = 0.32080897847324497;
    tmp_msg_0.rel_dir_x = 0.8781720547120971;
    tmp_msg_0.rel_dir_y = 0.7641809366395741;
    tmp_msg_0.rel_dir_z = 0.40333498932426504;
    tmp_msg_0.err_x = 0.6733072507092219;
    tmp_msg_0.err_y = 0.5539091990692704;
    tmp_msg_0.err_z = 0.6944918831986283;
    tmp_msg_0.rf_err_x = 0.30284602031534313;
    tmp_msg_0.rf_err_y = 0.3993601712282018;
    tmp_msg_0.rf_err_z = 0.4785045978829112;
    tmp_msg_0.rf_err_vx = 0.8004715699119714;
    tmp_msg_0.rf_err_vy = 0.23751767796296142;
    tmp_msg_0.rf_err_vz = 0.7504230912788835;
    tmp_msg_0.ss_x = 0.9253523154407748;
    tmp_msg_0.ss_y = 0.8314444868652842;
    tmp_msg_0.ss_z = 0.40408439944328656;
    tmp_msg_0.virt_err_x = 0.3806786024115313;
    tmp_msg_0.virt_err_y = 0.7435964181130372;
    tmp_msg_0.virt_err_z = 0.7004179883251694;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.11914274113439738);
    msg.setSource(12466U);
    msg.setSourceEntity(187U);
    msg.setDestination(45854U);
    msg.setDestinationEntity(49U);
    msg.ax_cmd = 0.1927803887054963;
    msg.ay_cmd = 0.606460455849621;
    msg.az_cmd = 0.23110949498196365;
    msg.ax_des = 0.3161626899138368;
    msg.ay_des = 0.6928764945672056;
    msg.az_des = 0.3360279307769519;
    msg.virt_err_x = 0.3446988453124492;
    msg.virt_err_y = 0.0972354357749603;
    msg.virt_err_z = 0.47313123829601567;
    msg.surf_fdbk_x = 0.503743223435103;
    msg.surf_fdbk_y = 0.6511835186275938;
    msg.surf_fdbk_z = 0.8693955811410005;
    msg.surf_unkn_x = 0.25414538904265316;
    msg.surf_unkn_y = 0.026481214517376173;
    msg.surf_unkn_z = 0.64961395782971;
    msg.ss_x = 0.11874302365499068;
    msg.ss_y = 0.2599235870329881;
    msg.ss_z = 0.4664644383360399;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("FPAMUYBZQBEVGEEOSYCCEUAPLTQVXZIQFHBKUINWFWSXHWVKMMQHOLXOGJIYTNZDTJNOKVBCWAVFIJRBFACJNQUBKLGHKKEAOGFBPSWUJXMDDKYFUWSGRZLUQSYOWUIRLEZPGWXXTTUPWHDMDVNQMBHGCSFDXLVBOWZSBQAPJKZOLNIZDOYMV");
    tmp_msg_0.dist = 0.13422395649783858;
    tmp_msg_0.err = 0.11870370869578395;
    tmp_msg_0.ctrl_imp = 0.8828396379666691;
    tmp_msg_0.rel_dir_x = 0.07026595116151613;
    tmp_msg_0.rel_dir_y = 0.48140206560866394;
    tmp_msg_0.rel_dir_z = 0.1646157034188438;
    tmp_msg_0.err_x = 0.8952019973011441;
    tmp_msg_0.err_y = 0.020607595273107182;
    tmp_msg_0.err_z = 0.42877499941451636;
    tmp_msg_0.rf_err_x = 0.1472461902868767;
    tmp_msg_0.rf_err_y = 0.2526525923651637;
    tmp_msg_0.rf_err_z = 0.1015322594756991;
    tmp_msg_0.rf_err_vx = 0.7074004701205826;
    tmp_msg_0.rf_err_vy = 0.9218951109371439;
    tmp_msg_0.rf_err_vz = 0.3640036460857281;
    tmp_msg_0.ss_x = 0.8223362747735758;
    tmp_msg_0.ss_y = 0.4642079511074677;
    tmp_msg_0.ss_z = 0.3236292748361559;
    tmp_msg_0.virt_err_x = 0.16080096401449928;
    tmp_msg_0.virt_err_y = 0.9693752496530079;
    tmp_msg_0.virt_err_z = 0.11791320555678964;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.8778443892494903);
    msg.setSource(53891U);
    msg.setSourceEntity(72U);
    msg.setDestination(49767U);
    msg.setDestinationEntity(165U);
    msg.ax_cmd = 0.5596660101378156;
    msg.ay_cmd = 0.3076443657118526;
    msg.az_cmd = 0.8252839965381279;
    msg.ax_des = 0.37816888715654906;
    msg.ay_des = 0.8975251727619686;
    msg.az_des = 0.033528763207324785;
    msg.virt_err_x = 0.27600361475220514;
    msg.virt_err_y = 0.33816992360499076;
    msg.virt_err_z = 0.914922318325139;
    msg.surf_fdbk_x = 0.3702714666406256;
    msg.surf_fdbk_y = 0.139755413173538;
    msg.surf_fdbk_z = 0.41054517094514886;
    msg.surf_unkn_x = 0.899458121309214;
    msg.surf_unkn_y = 0.6872944739053048;
    msg.surf_unkn_z = 0.19573105505032307;
    msg.ss_x = 0.44865865461083787;
    msg.ss_y = 0.7853643399664791;
    msg.ss_z = 0.2458281197597938;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("ZZFNISMAAKPHSYPOVVIONRNYMJGLEVERLYGXWUJBDK");
    tmp_msg_0.dist = 0.6468897190735721;
    tmp_msg_0.err = 0.776187553567248;
    tmp_msg_0.ctrl_imp = 0.8663475263034957;
    tmp_msg_0.rel_dir_x = 0.9154769064780822;
    tmp_msg_0.rel_dir_y = 0.6069687057894626;
    tmp_msg_0.rel_dir_z = 0.5744955511386999;
    tmp_msg_0.err_x = 0.5800608933146518;
    tmp_msg_0.err_y = 0.9772984056386267;
    tmp_msg_0.err_z = 0.9319482255718361;
    tmp_msg_0.rf_err_x = 0.6294951101887254;
    tmp_msg_0.rf_err_y = 0.7106395347270743;
    tmp_msg_0.rf_err_z = 0.49971396610814345;
    tmp_msg_0.rf_err_vx = 0.8549662537865504;
    tmp_msg_0.rf_err_vy = 0.643725776768805;
    tmp_msg_0.rf_err_vz = 0.942546184915922;
    tmp_msg_0.ss_x = 0.6020667358796492;
    tmp_msg_0.ss_y = 0.45338964887852595;
    tmp_msg_0.ss_z = 0.5115079874959273;
    tmp_msg_0.virt_err_x = 0.064227102654975;
    tmp_msg_0.virt_err_y = 0.28879804278667764;
    tmp_msg_0.virt_err_z = 0.8211644115517415;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.8855574235005181);
    msg.setSource(3369U);
    msg.setSourceEntity(136U);
    msg.setDestination(59811U);
    msg.setDestinationEntity(190U);
    msg.s_id.assign("UTHDQOIRIIMWYW");
    msg.dist = 0.11276735055502796;
    msg.err = 0.03312903093840225;
    msg.ctrl_imp = 0.17901848795511122;
    msg.rel_dir_x = 0.2269999610123511;
    msg.rel_dir_y = 0.5387051258942783;
    msg.rel_dir_z = 0.514959577141656;
    msg.err_x = 0.30310273471277793;
    msg.err_y = 0.6500329817085627;
    msg.err_z = 0.41908380992972494;
    msg.rf_err_x = 0.4608661923535219;
    msg.rf_err_y = 0.7289792065075542;
    msg.rf_err_z = 0.7047374471205254;
    msg.rf_err_vx = 0.6654425625986311;
    msg.rf_err_vy = 0.7560080695155907;
    msg.rf_err_vz = 0.7266665930885172;
    msg.ss_x = 0.22576630799561193;
    msg.ss_y = 0.40659099316531766;
    msg.ss_z = 0.5133381132580176;
    msg.virt_err_x = 0.6654209691455799;
    msg.virt_err_y = 0.04375568314829281;
    msg.virt_err_z = 0.7157791399167277;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.4182401327865706);
    msg.setSource(55576U);
    msg.setSourceEntity(58U);
    msg.setDestination(3098U);
    msg.setDestinationEntity(39U);
    msg.s_id.assign("MLUQXBHIMGEGMLEAPCOFLFBKIIZPMSJVPGJXZGJVLXOOQBHFSXDLMNXRIZFDWMGWOINYBDPJQZCPVFAXUQYQYUENBLBNXEKUPSQRPYBKYSRXHDBVEJWTGSFRBVNTOHTUXYWAPAWJKVOCLQCCPOEIAKTSSMEI");
    msg.dist = 0.28985099442884255;
    msg.err = 0.6517607386788994;
    msg.ctrl_imp = 0.12190788234999006;
    msg.rel_dir_x = 0.7079393312377178;
    msg.rel_dir_y = 0.43785408995107755;
    msg.rel_dir_z = 0.24209922188222277;
    msg.err_x = 0.8370869969656101;
    msg.err_y = 0.06662282539071096;
    msg.err_z = 0.8718338034369685;
    msg.rf_err_x = 0.16409994978111841;
    msg.rf_err_y = 0.10305395341491208;
    msg.rf_err_z = 0.8437222628201568;
    msg.rf_err_vx = 0.781281842340338;
    msg.rf_err_vy = 0.9288571752675056;
    msg.rf_err_vz = 0.44275593038509853;
    msg.ss_x = 0.3978844292881042;
    msg.ss_y = 0.8957283880404957;
    msg.ss_z = 0.8479181448573622;
    msg.virt_err_x = 0.18755065311075536;
    msg.virt_err_y = 0.720633455044386;
    msg.virt_err_z = 0.4532144112263692;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.626694770850191);
    msg.setSource(36975U);
    msg.setSourceEntity(64U);
    msg.setDestination(7153U);
    msg.setDestinationEntity(76U);
    msg.s_id.assign("FUCXFEZJLAXRACODOYATRKVCKWBNCHBAQWIDLBRILDJOIQAXKFONCYPUAPFZQQYVDVSSUJVTCUPHCYVBTSRPWNPIGQEYZDWAWGDGSRTMJXZMMMWKXQKRYTDZMGRQDYVEFZUBVEZXNOBGJKOPOOGEHQDTLUGCNRILOZXMIKHLHJRGLLGMXJOSSAQHQHBUZFNJSXNMGBPFERMTKFCDAMITKWSZLYUSJJEVP");
    msg.dist = 0.26147383609646646;
    msg.err = 0.6021195362109608;
    msg.ctrl_imp = 0.12448296451363572;
    msg.rel_dir_x = 0.6215292372545883;
    msg.rel_dir_y = 0.9282147024006902;
    msg.rel_dir_z = 0.695774433437241;
    msg.err_x = 0.01606119556230745;
    msg.err_y = 0.7591956153750754;
    msg.err_z = 0.6536094750603444;
    msg.rf_err_x = 0.9750036423850961;
    msg.rf_err_y = 0.5062553633611384;
    msg.rf_err_z = 0.2298265761261582;
    msg.rf_err_vx = 0.7918920287284288;
    msg.rf_err_vy = 0.912712049943738;
    msg.rf_err_vz = 0.04928016964190107;
    msg.ss_x = 0.4256703293985037;
    msg.ss_y = 0.21375251009671392;
    msg.ss_z = 0.4007275169421126;
    msg.virt_err_x = 0.09994141735592843;
    msg.virt_err_y = 0.46839771200462976;
    msg.virt_err_z = 0.9342670392016305;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.4656496497111897);
    msg.setSource(60660U);
    msg.setSourceEntity(228U);
    msg.setDestination(53316U);
    msg.setDestinationEntity(29U);
    msg.timeout = 53771U;
    msg.rpm = 0.6023052201045794;
    msg.direction = 98U;
    msg.custom.assign("ZPGVIFBCZWCIHPDPRHXQQWKJDRZOTBJLDLIUGOJZSZLUKVWDGKTUVLKEYTKXFSBEKKCPQYIAGFLVKBMTNLVKDIILNWCUUKCAZEAGREOFSIJRNUUMGDWNHYOPONEXGPPIGYAYQMFBBNVOSONYQPWTEXZMVVSZOMUCGSDTRTHFFHJELLWHPSEJXQEIYRDJOXJACQAFFO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.24340256355838596);
    msg.setSource(37032U);
    msg.setSourceEntity(40U);
    msg.setDestination(20192U);
    msg.setDestinationEntity(7U);
    msg.timeout = 17506U;
    msg.rpm = 0.47813056178047697;
    msg.direction = 49U;
    msg.custom.assign("BATKQOQQMSQBWPCFFVBSIKRYVRAIKDPQFOEIHXOAIQJXDMJWNISEBOFZJACZZPSPMDLEXKAWMXSGMTFIRTDPLJVBHSLIRGLTDKKMVEGJVDYYCRIFPOUNZJTGBKGTFZZAWNCLUWVAXXQOCMITFWOZDLJVSUGHREEQMRLWXBWPUTGIDRYGXEKSTLOXFKESVHOUMYUVPNZJOJKULUBCRYANBTHPNENGCHVCLDECCWQAXSDJNRGBHWHUNQZPYZYU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.5433811203363957);
    msg.setSource(4830U);
    msg.setSourceEntity(202U);
    msg.setDestination(18405U);
    msg.setDestinationEntity(232U);
    msg.timeout = 47760U;
    msg.rpm = 0.7124030680698207;
    msg.direction = 159U;
    msg.custom.assign("SJKPELMTUNGTGPHSGSBIZYTQQPYXHVDGJYMSRIBXFJXSMDWVWJLHBSUZQNMCKFBCPOGITNCDUNCGXCNFCRRTQOXKEELTVEEWJNHAYQHPRTVSUJPFNVWJTLWVSFNLPOOEPWTLJPKXYEOYFRDYRTJMFNZXDUINAPCDRAZQUEAIUGLEKWUGQQXMVDODQIVCKIIDYLKKAOAFKHBIOHAKROHOHCBFWDHAYZA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.055716001572565066);
    msg.setSource(19415U);
    msg.setSourceEntity(16U);
    msg.setDestination(50780U);
    msg.setDestinationEntity(81U);
    msg.formation_name.assign("CJYMTBBPZTTVMVGUZLRFCENXTSSVPYYQUPEFXWUZYJFVYBANZEXDATQYGJWOJOEGDEQTRSJAVOOFJBJWMGRGFXDNWQGOBRRMZSQPJUEOKDDCHVXUGWMMLHFT");
    msg.type = 226U;
    msg.op = 116U;
    msg.group_name.assign("VDWZFBPEAUJPH");
    msg.plan_id.assign("QPWCIVWVIPLIASFFTFNUDUWMEWWAQDESZHTOOGDKYVIAOOALNXCGFVCABKMVGYDNHUEZEHMMYNOGKOFIORYRUAIALGF");
    msg.description.assign("TUCBNSVASPXOAPGPVZQWOCCKHDQEGPYZQKUZCWNTDISYGYRDKYWWHWVGHVYEURLVTHDBKDLLQWSNYAKPZJEZSFRVLCYFBIMEPOXSHAXFTIJMRZNMEKYGTHHYPGKMGVXZFXESCAAPGUITNDBFQQBNLOMLYCTSWRDKQEMZ");
    msg.reference_frame = 250U;
    msg.leader_bank_lim = 0.06363460061386994;
    msg.leader_speed_min = 0.14804629703594352;
    msg.leader_speed_max = 0.3435248437422751;
    msg.leader_alt_min = 0.15989559290035404;
    msg.leader_alt_max = 0.9725215683756868;
    msg.pos_sim_err_lim = 0.28699404217708335;
    msg.pos_sim_err_wrn = 0.427880374645749;
    msg.pos_sim_err_timeout = 55320U;
    msg.converg_max = 0.34432894410878623;
    msg.converg_timeout = 44604U;
    msg.comms_timeout = 3886U;
    msg.turb_lim = 0.901390401148776;
    msg.custom.assign("STTJGWTRSCVIPZWJJFVRASEGPFDJNKYDFIAMUPPHYSJVEIKSHNLYQPBHXTHDKEEQDRZOJWCBTKUSTQWGGMUIWBFQVAMQAHGQJOHFNSUTIBMFVDDPGARBBORPWNNOSKYYRFZJZDXBNLLKUMKKHCJBNMUAWZWNAUCHXRZVMGEELWQCQQCLOXRTIEOWNHVDFXIIDEOYVLXKUTBLAKOCSJGMYCGDOIAXMR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.9131259649351497);
    msg.setSource(52954U);
    msg.setSourceEntity(190U);
    msg.setDestination(14868U);
    msg.setDestinationEntity(194U);
    msg.formation_name.assign("GOYCNNUIDYYHZPYREMOKMQSTNPKULTDJDZMGIJSNDWMFYJINAVXQEHAHLCNFNDZBWPMVFKZKXGAZAJAWZOVUKXGQSBJUOSRIGYKMWQRKFTLIMZWVDZTWKGTEEVBQOXQBTAPPWLECQIVEISHSFJUUXQXJCCXWBEJKHUVQSLNEWFXLTDRCPOOYBBALHHTUSFDCUVCQOHJTXYONFLEVDMPWRBCRGDTZAGUNLIJYVAPHLHIBEFB");
    msg.type = 75U;
    msg.op = 122U;
    msg.group_name.assign("VTOMNPOQEPLOXVJLAAKMDTQJJYQWYBMLUNKHPVKUSBRIBEVDSKCSXABTNWJSIXG");
    msg.plan_id.assign("EOTONPLBVYZYRUIVTBCCIDIAO");
    msg.description.assign("HFPMQWSXYMMRWJBNOSJOEQCOHEHMGCJINVFWVTBAEHYCKVVBSWJGWZQMNPVNZSKCHMNDDFAHXSGJAJLMWBNGAIMZPAFQLLHRTNIEFZJOEYUGHRSZQTDFVMXOYIPDXTCUKQAIPQESUYT");
    msg.reference_frame = 220U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 31431U;
    tmp_msg_0.off_x = 0.7796295661176451;
    tmp_msg_0.off_y = 0.4223819306709232;
    tmp_msg_0.off_z = 0.6026499999592608;
    msg.participants.push_back(tmp_msg_0);
    msg.leader_bank_lim = 0.5037686257935553;
    msg.leader_speed_min = 0.9787255722220483;
    msg.leader_speed_max = 0.847597776130596;
    msg.leader_alt_min = 0.5468340963355471;
    msg.leader_alt_max = 0.6278508822402156;
    msg.pos_sim_err_lim = 0.607000263055472;
    msg.pos_sim_err_wrn = 0.7003604633013499;
    msg.pos_sim_err_timeout = 36201U;
    msg.converg_max = 0.7304551268759023;
    msg.converg_timeout = 2366U;
    msg.comms_timeout = 15065U;
    msg.turb_lim = 0.6721369609469309;
    msg.custom.assign("FBPBITGQPJSRICXJJAKPTFPKEDWCBAGSZQJOUCXKIYRLCD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.5943150003818467);
    msg.setSource(49541U);
    msg.setSourceEntity(226U);
    msg.setDestination(16152U);
    msg.setDestinationEntity(9U);
    msg.formation_name.assign("FPNJUSIDNKNONQDEUXEULCMCADRIOALGWPLXZPYLZFNZPFPGSFCGHGOYZMNHWWUTKRJMVPVFZESTFRMDJXCYFJZGLOMYPRBGGBKGJKOZATOCEYAVQKLVSIJSVTAKCMQLSVQEENHUXRTVHQYSUXKBENDUSBDHOQALOIWIWBWNHKJFTQUFIYIZYTWZDSRSGQRQYCFHCIVHAEBADEITTDXJNGRTMCHHQPLWX");
    msg.type = 75U;
    msg.op = 66U;
    msg.group_name.assign("EJATZJYRIBFJSNFYFXWRFPHNABWDFGAVQXGOJQQKLLAQNDDZKEPOMYLNUTVXZVQEIBYROUSEMNPVHMWTCKUAAGZLLRDJKBOGEOHXECLYBDSGIEESJWLQOJTNPIISBMJWWCUNKZPTKCHFMJIEHGGCCYFWIBYMTDDGLUVNHJSVYXORPKRNBVZQUTUSVAAXHHGFZHILIDSPEZXALQVORUOKBDTYSHPNXMCMTXYKQCSFMCRRUZWKWCRUPTZPI");
    msg.plan_id.assign("NDACYDODYCCTTTQOYBDFLSLVRHRKCGFVGEOKMILJOPQGUXJFDMLXPDAFNQCFAZTOEKKNYKZBMIWORAJUCXVMUPQHTXYJRHWXNCBNJJPRIXBDXUQITBMIKBHEHPQWEJLZTFGQGXDUYMGOYZPSUVHNSZZUQWQFVMLXXWJBWPSWSMCHVTFNJNBLICOVKGELIREUZQHHUAEGHAKVPBPWSLAVSJYERAYRAERPUD");
    msg.description.assign("PNXTETVKUMBBGZKMHXNVUQZISGRQDKLLWGYIWOLSSVQOJAFFOAKTVFRWZRLVZFPCLTNBRVVNBSMAEPTUIAOSIREOJDAJZYYLSWXLHDPUQDCGNBIKRF");
    msg.reference_frame = 165U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 29770U;
    tmp_msg_0.off_x = 0.5405986788727402;
    tmp_msg_0.off_y = 0.6290321289470747;
    tmp_msg_0.off_z = 0.8880426030951832;
    msg.participants.push_back(tmp_msg_0);
    msg.leader_bank_lim = 0.44895868232581404;
    msg.leader_speed_min = 0.3216178532716518;
    msg.leader_speed_max = 0.28550127878881026;
    msg.leader_alt_min = 0.48334052833970786;
    msg.leader_alt_max = 0.1687806910994386;
    msg.pos_sim_err_lim = 0.9560076751902327;
    msg.pos_sim_err_wrn = 0.9706631311652109;
    msg.pos_sim_err_timeout = 49034U;
    msg.converg_max = 0.7711082806645762;
    msg.converg_timeout = 42015U;
    msg.comms_timeout = 34113U;
    msg.turb_lim = 0.09098814759047957;
    msg.custom.assign("LXPIBGSMBQTJIJQKQDTLAWSVGSIEIPRGEVBOJBXFUCFDDABAYCABOFMVMHHZMUNKTKPMKJEOXOFRUPJEYQTKXIYNVZQEJLHQYYUXNAPDATJWBUXURIRUINHNKGYEHHRSNEEXAOSPHPWFRVVKOWODGBGSMQMFGBSYNPDRAJWTJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.9374423444322442);
    msg.setSource(3818U);
    msg.setSourceEntity(180U);
    msg.setDestination(29103U);
    msg.setDestinationEntity(130U);
    msg.timeout = 60857U;
    msg.lat = 0.4247072182547843;
    msg.lon = 0.2709176099465549;
    msg.z = 0.04958212090675984;
    msg.z_units = 113U;
    msg.speed = 0.6879084168786096;
    msg.speed_units = 127U;
    msg.custom.assign("EITFREATXIOYVJSPWFOBBYMVKMUEQRSHYXJHGHPHDVQRRPMYFSSQVP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.566842057756753);
    msg.setSource(62483U);
    msg.setSourceEntity(95U);
    msg.setDestination(8608U);
    msg.setDestinationEntity(2U);
    msg.timeout = 3946U;
    msg.lat = 0.7712717990872044;
    msg.lon = 0.15492642786303734;
    msg.z = 0.5731415862094813;
    msg.z_units = 254U;
    msg.speed = 0.13026544128300221;
    msg.speed_units = 78U;
    msg.custom.assign("XEKCDUSMXVLYBARSTWMWSKTELREQAMXKGIIAZAOBYINRRUDYSBNVJPCLKBICSWTZVRWILDTZXPUHYZBCTEJEYDHOOXZJJGDZSBJZEEHVESBWKKUQYAZFJANPLJFNHSTQFHLTVGDTVDTIFQGOBRNQMSWEPVORKWWMXNCRDLLOLNRXBAMWFHHDGIEILUOYCFZOBPFINFUCJQUGCOM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.5810653194898299);
    msg.setSource(28092U);
    msg.setSourceEntity(15U);
    msg.setDestination(38569U);
    msg.setDestinationEntity(224U);
    msg.timeout = 65161U;
    msg.lat = 0.04597463459571116;
    msg.lon = 0.5320195718908564;
    msg.z = 0.8162212200721629;
    msg.z_units = 217U;
    msg.speed = 0.1961466338378839;
    msg.speed_units = 112U;
    msg.custom.assign("JGBOQBNJBHUPXJJTTCHVRAMOVZFFDQXOKBRDVDCLNWHRQCGHATZFMEKWUUZYPNYKAYIBLSTBWGQMHEHEOEAKAZRGSKKDEXUDHOWZL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.4206056759203797);
    msg.setSource(42725U);
    msg.setSourceEntity(20U);
    msg.setDestination(54591U);
    msg.setDestinationEntity(42U);
    msg.timeout = 50145U;
    msg.lat = 0.5019315647301278;
    msg.lon = 0.6717402206614965;
    msg.z = 0.45540754901729497;
    msg.z_units = 187U;
    msg.speed = 0.4010955734402468;
    msg.speed_units = 11U;
    msg.custom.assign("SYVUMOLAMNHOZIJGKXQTQPPJVXERZVVVLVFVKISRMCPKHBGTQWUBAGQCFEMATSLCLSICJYGIQEJBHFYGCZWXASDRQKIMIYZHVWXKNEEWSZOKCWFHDYFSBPJBDTOPOW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.4296923529074047);
    msg.setSource(20477U);
    msg.setSourceEntity(140U);
    msg.setDestination(14476U);
    msg.setDestinationEntity(61U);
    msg.timeout = 34681U;
    msg.lat = 0.8168100710955791;
    msg.lon = 0.13243309351686183;
    msg.z = 0.1592001572653361;
    msg.z_units = 24U;
    msg.speed = 0.4308648466637206;
    msg.speed_units = 236U;
    msg.custom.assign("GGRANQEMWWFQZEJGAJNPVIUHXSUZCEERRNBLSYZABTXJRCSQGYRA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.9325537452012337);
    msg.setSource(55178U);
    msg.setSourceEntity(84U);
    msg.setDestination(12037U);
    msg.setDestinationEntity(55U);
    msg.timeout = 9329U;
    msg.lat = 0.44194058568713857;
    msg.lon = 0.5716706070212833;
    msg.z = 0.7922274445992911;
    msg.z_units = 104U;
    msg.speed = 0.9821558961976363;
    msg.speed_units = 127U;
    msg.custom.assign("OJNUGISIMFNTVGDTLMOQGAQVUYEBYKJCPDNUXSBCBCZHNUYOIWHTHERWPQKEAEOOXKPS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.7032354449626387);
    msg.setSource(48173U);
    msg.setSourceEntity(36U);
    msg.setDestination(47023U);
    msg.setDestinationEntity(185U);
    msg.arrival_time = 0.7804701148903287;
    msg.lat = 0.4025994866841297;
    msg.lon = 0.3806424688865714;
    msg.z = 0.5440686950345334;
    msg.z_units = 250U;
    msg.travel_z = 0.5311229302802126;
    msg.travel_z_units = 88U;
    msg.delayed = 4U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.2788460019484017);
    msg.setSource(24735U);
    msg.setSourceEntity(194U);
    msg.setDestination(63766U);
    msg.setDestinationEntity(232U);
    msg.arrival_time = 0.31830732337587575;
    msg.lat = 0.4401709228532328;
    msg.lon = 0.8778164202075837;
    msg.z = 0.35992310006161055;
    msg.z_units = 247U;
    msg.travel_z = 0.5281124919597867;
    msg.travel_z_units = 13U;
    msg.delayed = 98U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.5608643951324873);
    msg.setSource(48098U);
    msg.setSourceEntity(27U);
    msg.setDestination(60745U);
    msg.setDestinationEntity(173U);
    msg.arrival_time = 0.9199336561667883;
    msg.lat = 0.3345991864614368;
    msg.lon = 0.35673448328352075;
    msg.z = 0.9935107103528328;
    msg.z_units = 106U;
    msg.travel_z = 0.6896360570681412;
    msg.travel_z_units = 10U;
    msg.delayed = 98U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.5871414152373539);
    msg.setSource(42035U);
    msg.setSourceEntity(155U);
    msg.setDestination(50197U);
    msg.setDestinationEntity(48U);
    msg.lat = 0.5478752678758617;
    msg.lon = 0.8963642389227919;
    msg.z = 0.5214794541330339;
    msg.z_units = 114U;
    msg.speed = 0.3737206569483329;
    msg.speed_units = 104U;
    msg.bearing = 0.01126442663911531;
    msg.cross_angle = 0.5425230046443489;
    msg.width = 0.8956122839649667;
    msg.length = 0.7873810430396858;
    msg.coff = 252U;
    msg.angaperture = 0.034240438658158845;
    msg.range = 10886U;
    msg.overlap = 174U;
    msg.flags = 111U;
    msg.custom.assign("WKWPPGFYNEQDVSILAWFIEZDLRHDQYXNFMVMUHAXBBYPINNLYPRONDSVXGTQUTCISOMURXYXUVHTBOQPGHRGOFLZJTFXEBA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.9525439273443815);
    msg.setSource(1242U);
    msg.setSourceEntity(109U);
    msg.setDestination(57913U);
    msg.setDestinationEntity(194U);
    msg.lat = 0.31055858183685037;
    msg.lon = 0.7210530396959424;
    msg.z = 0.06972950398969657;
    msg.z_units = 23U;
    msg.speed = 0.1925192913202941;
    msg.speed_units = 43U;
    msg.bearing = 0.03831763728892745;
    msg.cross_angle = 0.5191175017734571;
    msg.width = 0.4387762646306894;
    msg.length = 0.19330360736375496;
    msg.coff = 53U;
    msg.angaperture = 0.6220802379055679;
    msg.range = 40912U;
    msg.overlap = 164U;
    msg.flags = 239U;
    msg.custom.assign("KXVWKGGBCKADHFXZXMBBGIGCTPCJHUFATNIFVA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.04117089032159971);
    msg.setSource(59699U);
    msg.setSourceEntity(243U);
    msg.setDestination(27869U);
    msg.setDestinationEntity(245U);
    msg.lat = 0.19200327397301264;
    msg.lon = 0.7366830580262641;
    msg.z = 0.09416555387099235;
    msg.z_units = 1U;
    msg.speed = 0.0020182758099008824;
    msg.speed_units = 95U;
    msg.bearing = 0.09619005660634705;
    msg.cross_angle = 0.9062644637310716;
    msg.width = 0.7455943626049615;
    msg.length = 0.19889565992346414;
    msg.coff = 215U;
    msg.angaperture = 0.8361464047365058;
    msg.range = 20036U;
    msg.overlap = 143U;
    msg.flags = 199U;
    msg.custom.assign("FNFZDDEFSDSIGLSAFAVGNXPNGOCCYJCPEEWYNKJXVXVIWHZMYUXFNBAYFTRBCMRMRAPHTDUIEGRPOWXSOWKPZYRYXHQMJCSXQSODRMWOUMVQOYCFVMLNRAVXBDTRJLHHWCVQSXATDPUMNLQWKVRUNWLGHEBZJTLVEFQQKJDIDGNBOZBGZCKTJZOPPTWQQEKYKUUTYPOOMLIBBAFZEZXUYKVAKDLBHSGRHATLHWSTUSUICJINKICIEZL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.4375552661341212);
    msg.setSource(40139U);
    msg.setSourceEntity(153U);
    msg.setDestination(1114U);
    msg.setDestinationEntity(153U);
    msg.timeout = 15255U;
    msg.lat = 0.30577820801495315;
    msg.lon = 0.299327446868211;
    msg.z = 0.0020474953000017004;
    msg.z_units = 18U;
    msg.speed = 0.9963797201163926;
    msg.speed_units = 248U;
    msg.syringe0 = 71U;
    msg.syringe1 = 92U;
    msg.syringe2 = 120U;
    msg.custom.assign("XCSPXVKUOPVZQSZMLIJATMESQVNNTWZRDOLCZQHNNRKQUNQZKWGFUTZFRLSHIAPFWJHRJTCZZYGCIWLLDHHICYXGWVAVXSGSDEFCPLIOSHBVWMGGPSYXMBILWVLHAPVQSGZGMDEWXTGNRWKYINNXJD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.7839484389706762);
    msg.setSource(62041U);
    msg.setSourceEntity(131U);
    msg.setDestination(2881U);
    msg.setDestinationEntity(116U);
    msg.timeout = 41254U;
    msg.lat = 0.8353545446478571;
    msg.lon = 0.5996229045834567;
    msg.z = 0.13114702604076756;
    msg.z_units = 184U;
    msg.speed = 0.029561697483688087;
    msg.speed_units = 42U;
    msg.syringe0 = 126U;
    msg.syringe1 = 221U;
    msg.syringe2 = 226U;
    msg.custom.assign("LDQYPMJEBWKHSKIOKJDFTQULNVXALBCEYUUCFJTGXUTPASNYLVBGDIPPOERZJSCOOQYSPUSMMRWOBWVICVERYHFAYXZRNKZPSUKEZVNVQLSKTLYCQVHMEFVCETXDQTUIFIDWPWTSBGQGWNJTTPZJXIQHDKUVCOBKACCYDKYMRXMZZHDEIZVDRHBRLIGJLIWUUPGNMSJOBAWBLEZNHCFIAHNQOHEFAMN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.09495947913714975);
    msg.setSource(64038U);
    msg.setSourceEntity(230U);
    msg.setDestination(21513U);
    msg.setDestinationEntity(48U);
    msg.timeout = 17529U;
    msg.lat = 0.5668927311820852;
    msg.lon = 0.3445784643177693;
    msg.z = 0.7249086031877215;
    msg.z_units = 105U;
    msg.speed = 0.15716747833014943;
    msg.speed_units = 217U;
    msg.syringe0 = 45U;
    msg.syringe1 = 19U;
    msg.syringe2 = 206U;
    msg.custom.assign("KSHOLYMPINJGDGUQJBTHPRFYUSGFTCKFRPOBUMYQPMVDYNUJXPH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.9471867417292184);
    msg.setSource(53914U);
    msg.setSourceEntity(183U);
    msg.setDestination(5619U);
    msg.setDestinationEntity(120U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.22464542587515068);
    msg.setSource(54127U);
    msg.setSourceEntity(57U);
    msg.setDestination(59364U);
    msg.setDestinationEntity(205U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.1730116486824843);
    msg.setSource(43977U);
    msg.setSourceEntity(6U);
    msg.setDestination(15181U);
    msg.setDestinationEntity(101U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.5844119699294096);
    msg.setSource(54133U);
    msg.setSourceEntity(27U);
    msg.setDestination(6762U);
    msg.setDestinationEntity(107U);
    msg.lat = 0.041843254255646944;
    msg.lon = 0.3828082775005398;
    msg.z = 0.8489573956221321;
    msg.z_units = 131U;
    msg.speed = 0.17661977676578966;
    msg.speed_units = 118U;
    msg.takeoff_pitch = 0.3569090144256122;
    msg.custom.assign("FAETLRDJBG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.007584367894144517);
    msg.setSource(5171U);
    msg.setSourceEntity(164U);
    msg.setDestination(26534U);
    msg.setDestinationEntity(156U);
    msg.lat = 0.7231573339506068;
    msg.lon = 0.1281885128871849;
    msg.z = 0.17074707655814236;
    msg.z_units = 63U;
    msg.speed = 0.9280747835168939;
    msg.speed_units = 245U;
    msg.takeoff_pitch = 0.8192115309241578;
    msg.custom.assign("OVCMKVCNEXRVJRNVAPQKCXCMKTDGULADFUHUYQOHAJXEKZTMYFDBHVKOYDXJOBTOSFZTDWUECMDTQYQKMNIJRBTSIGYIXDDPHPNSRXKHVFRQAQPZWJGEQVHZABHXKVSZEOAOBDELOAVFLCPZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.8986251356561753);
    msg.setSource(26327U);
    msg.setSourceEntity(62U);
    msg.setDestination(3395U);
    msg.setDestinationEntity(30U);
    msg.lat = 0.7538623942927168;
    msg.lon = 0.14936140685400578;
    msg.z = 0.9515749077041097;
    msg.z_units = 190U;
    msg.speed = 0.853096580850493;
    msg.speed_units = 57U;
    msg.takeoff_pitch = 0.8751307231202748;
    msg.custom.assign("PBZYSKQSKEMSITUZNNBGJENVCUEFZRLLMVQWYMAZCEHPAQSJMSOATOBGYFDGIMUOUEHQWLMICJKAQUNDK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.47871111485576745);
    msg.setSource(44913U);
    msg.setSourceEntity(34U);
    msg.setDestination(49220U);
    msg.setDestinationEntity(113U);
    msg.lat = 0.6366372482071562;
    msg.lon = 0.9834870877621835;
    msg.z = 0.5134951985740086;
    msg.z_units = 69U;
    msg.speed = 0.9412467091809038;
    msg.speed_units = 205U;
    msg.abort_z = 0.2370206595375507;
    msg.bearing = 0.903843401842841;
    msg.glide_slope = 238U;
    msg.glide_slope_alt = 0.4180918119366357;
    msg.custom.assign("JZDDINAAFVIBIXGVSMCDCWSVRLHTIYQIOIKREIWOAJBLRTRQRVUMSNPNWSFZQBBZTSYOUOVRYWJARSLZYWULAKNAPLMZGANALHKGLDPXUPXJTBYJJWDNXQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.4654712577205231);
    msg.setSource(59338U);
    msg.setSourceEntity(248U);
    msg.setDestination(62129U);
    msg.setDestinationEntity(207U);
    msg.lat = 0.3927136560244643;
    msg.lon = 0.5498971020944344;
    msg.z = 0.4901553695662465;
    msg.z_units = 76U;
    msg.speed = 0.034383480460646876;
    msg.speed_units = 60U;
    msg.abort_z = 0.29367985370154137;
    msg.bearing = 0.21855560716194256;
    msg.glide_slope = 184U;
    msg.glide_slope_alt = 0.603259312846447;
    msg.custom.assign("QPTHGVYFAOGFONTNYRWDNBUTGWYAXAIRVALBHUGQHCZIRWZGJJIWTUMASOHCOYVCHSLSOJGVYMHUBCAAJVLSDIXRRJIBLJEOEDNPIHQUKVPNMFDXXPPRODNBTUIRLEDGUEYXIFZPJLYYMSXKUAWZCFMDVZOCFBDKWITRNVTPWKIDGCKGSJALESZEOQMKFCGZZYQBBBEWLSFFYFXRNTQXLEMUJWCZKQTVZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.599464685433717);
    msg.setSource(9645U);
    msg.setSourceEntity(217U);
    msg.setDestination(41979U);
    msg.setDestinationEntity(194U);
    msg.lat = 0.5635932382593497;
    msg.lon = 0.968410767844439;
    msg.z = 0.9066245401771862;
    msg.z_units = 183U;
    msg.speed = 0.2991674520303863;
    msg.speed_units = 122U;
    msg.abort_z = 0.22337536473496544;
    msg.bearing = 0.6040277908900882;
    msg.glide_slope = 168U;
    msg.glide_slope_alt = 0.09255536512679707;
    msg.custom.assign("ZLRCJEAOKIMKKVJBGGNPIBTFUXZUXWUKUMQEHLSHSUVPSSMNJGLPLPQRLRZUYUEELVOJNIKRDQVCFCIZXWFPJKXFBDZWYQCHVGIIRESAYXWMZGZBQBOQBTLERAMOEGVO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.6355640200068645);
    msg.setSource(26725U);
    msg.setSourceEntity(15U);
    msg.setDestination(24097U);
    msg.setDestinationEntity(186U);
    msg.lat = 0.019744976158729943;
    msg.lon = 0.8868698902301095;
    msg.speed = 0.8858968214083239;
    msg.speed_units = 152U;
    msg.limits = 195U;
    msg.max_depth = 0.13813478854124572;
    msg.min_alt = 0.09416181786924771;
    msg.time_limit = 0.9419647631739748;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.8342619459643393;
    tmp_msg_0.lon = 0.9688660416388583;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("GONHNAPLLMCKHGYUGQWO");
    msg.custom.assign("OMRQMMQWFSPZQGSKJVPYSNXMTAAVDHLYDOSYLAIKKBENKVHZETWOEMZZRTCYTPTJICCDRDFJFRIBVMADUNSZKOBHECDUFEANWHGLXIEAXLKVUUNVSJFXGRHNUMUYKBBQIBFEOCPWBQUTTGKMFVS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.4295907966950664);
    msg.setSource(22721U);
    msg.setSourceEntity(253U);
    msg.setDestination(26192U);
    msg.setDestinationEntity(218U);
    msg.lat = 0.9004692365391159;
    msg.lon = 0.31301690620158407;
    msg.speed = 0.8605645813543121;
    msg.speed_units = 100U;
    msg.limits = 150U;
    msg.max_depth = 0.6908653006925176;
    msg.min_alt = 0.7751575621380671;
    msg.time_limit = 0.6052853624898562;
    msg.controller.assign("JNJKWDKDHWCPTROJBJCVAEAZXGRRUPXESUAA");
    msg.custom.assign("MJUNXSFVODOZKKKMPCUAHUTYDBGSYSFGTBZZQRXJZRNDDKYWVSPRMDMGSMPAGKTQJWJIDZXWHLNUAUBVZLCBPQFUNROIENBLNGJWLSFKAGFDJQNMOCHLELXQWYTTZUCIYBMXJOOARREHHFJZICHIKIQBEPAVLPNQTEEABFXFELVCWYMTHGAITSZXBRPANEFOUWCFJQVQVGDSTXUGRKYPRKRJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.8707703952317991);
    msg.setSource(53878U);
    msg.setSourceEntity(108U);
    msg.setDestination(52774U);
    msg.setDestinationEntity(53U);
    msg.lat = 0.8765432922441382;
    msg.lon = 0.005421279863960793;
    msg.speed = 0.6900390136857965;
    msg.speed_units = 161U;
    msg.limits = 123U;
    msg.max_depth = 0.055562547094221704;
    msg.min_alt = 0.34719543737361114;
    msg.time_limit = 0.09639280325574828;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.5283347886526306;
    tmp_msg_0.lon = 0.6704251113596886;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("UYUEMHMUVIRFSUYBZDDJUECRPQHLTWBREOCMCPGEOYXWMWVZKRJUVPZYNJMMGNKFKVJGHBVDKHSRFHLTETSIYTQVWAUQCDOJSA");
    msg.custom.assign("LWIXBJUQDCTSYXKOEBKNBNJOTSWOSQXCWNRC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.5760042795758225);
    msg.setSource(59788U);
    msg.setSourceEntity(227U);
    msg.setDestination(55508U);
    msg.setDestinationEntity(178U);
    msg.target.assign("IVZAGMWBYSSENDOCIJTLCHUMRYYMOYDGTJMKOFFBBENYEGLZALDXNQAYLIVOKDAWNEUWBSMOHNEAIRVXXZRPZZKUJEOGDDWRXKMLSYBCGQTTPHJPHXIJMMNIAWKVZBHAIQBRXIGTFWLPSDAGFPPRSKIJJFXCCCAJOMLQQDGVFQBHLDFVWFZRRJVVTCCUNHXXQHKQCNHTTPSUYHZDERWCQTSV");
    msg.max_speed = 0.9618803663801903;
    msg.speed_units = 27U;
    msg.lat = 0.22477645740639096;
    msg.lon = 0.5348697132039625;
    msg.z = 0.5604536266370563;
    msg.z_units = 64U;
    msg.custom.assign("FSRCITCCUYHTGLUYVLAIHEVQPABZZXPLTYJRIORGVXSVUWNXLIDREHWXQKZTHCSVLVOBCTMZQHQWXWKAEAIEICJOGZINYOOFMDTQFGVUNAMBJWRIMGHKPNN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.22273622993225173);
    msg.setSource(64724U);
    msg.setSourceEntity(193U);
    msg.setDestination(6817U);
    msg.setDestinationEntity(251U);
    msg.target.assign("VDDXQIYBWZAEPULWVXKSBSITDQTLGFWCYJPMJAFRAPPONDEFEIMHKUOQNHFBUDKMHRZBWYLZKOIMLGIGWEXESLPJRNHDUCTBPMICJMNCRELXRDZCJGRCNQQKNFWQTHJVVHMPNYNIZLAYCTGOTVXOOGSWTMLLPYUHTVBUDSJBKIKMAUGPEYWQCJFCFVEDSTFXARRPZSCLGWUABZQHZHOJRRJKMTYVKUXXWZGXSIOAFENNYDOUKBBZSVXHG");
    msg.max_speed = 0.20261209073719677;
    msg.speed_units = 164U;
    msg.lat = 0.5758167814079235;
    msg.lon = 0.1894325033217642;
    msg.z = 0.459632775375343;
    msg.z_units = 114U;
    msg.custom.assign("KHCJWVCYOMNDWAXMCMIIMOEHXSQRLWIQQZFBTIYFHBSZWARGGFRPZQTZTSULYYWAINKJNIYLZVIIQONKAZTAMXSQDH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.31461995990393143);
    msg.setSource(34730U);
    msg.setSourceEntity(135U);
    msg.setDestination(56108U);
    msg.setDestinationEntity(125U);
    msg.target.assign("SDNMISKYTSWQQOFYRGZPBDUOZKRLXXEVJTOJHRIIBPIEBKBKOMNUXBWFSJGEUNEJTBAJWXCICTOUOUANTMWLAIDSWDKSALJHAFEFJKXCFXNTNA");
    msg.max_speed = 0.7868284404099318;
    msg.speed_units = 141U;
    msg.lat = 0.5058758477624955;
    msg.lon = 0.2308870551111093;
    msg.z = 0.36027848963035436;
    msg.z_units = 188U;
    msg.custom.assign("TNUFBOPDMDRPXGJTVWQWPHUHWHGZXHWPWTCUDGTQGQVWDPFAEIFVDAEQSKVNSMCVOMXZMAKBPOOIVDTFICQXSRIUGBYRRCUSLYMYLSEKKEIDGJFMLQPOMBGHQYGPEXNHUAIQLXWNANOTDBZU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.7531306880624774);
    msg.setSource(20194U);
    msg.setSourceEntity(179U);
    msg.setDestination(7205U);
    msg.setDestinationEntity(125U);
    msg.timeout = 1900U;
    msg.lat = 0.3736096011766461;
    msg.lon = 0.9543746452836512;
    msg.speed = 0.2657825595919504;
    msg.speed_units = 224U;
    msg.custom.assign("WEXEDVDQJRHMTWGZSWLQJXMMQRCACJRGNWQAOYCMVWTIPVOPTBUAUZVTFEASJHXZYBTPYBOFDRVAIGAHEBNCVDEZOAOWPRMUFFFVXQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.021959052624864972);
    msg.setSource(49188U);
    msg.setSourceEntity(80U);
    msg.setDestination(784U);
    msg.setDestinationEntity(230U);
    msg.timeout = 51010U;
    msg.lat = 0.5199738551714707;
    msg.lon = 0.6845633234447739;
    msg.speed = 0.8325502508544564;
    msg.speed_units = 211U;
    msg.custom.assign("FTHNGGDHPUXOMJUMYNWXLNAGJRFQPALCKOCNZPHMHKJUJHXRRNTIQWCTAHHYDALCENPGEXCORBSSVKZDJQOTDDALVTWZGNXCESMNBPKSAETQQZMRHMFIGTCFSIXCNWIZIKSABMBYQQVJENDIVLYTUFUYYWPTLQFJKRGVWFRWKEZLDIWJFYIEPXAUTBFSMUZKOESBUBOF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.40590470122773903);
    msg.setSource(59920U);
    msg.setSourceEntity(139U);
    msg.setDestination(37190U);
    msg.setDestinationEntity(199U);
    msg.timeout = 31708U;
    msg.lat = 0.3027326341980011;
    msg.lon = 0.7982744847310012;
    msg.speed = 0.7524101172809895;
    msg.speed_units = 59U;
    msg.custom.assign("TAKBPULFPRXOUDTHXIEFXXAUFBVWPUPTJXNXCHEQQZGDDGKKNHOUJLCZMJLVEFAVCQBSWPHWRWRJFPHQNXMDCNJLSMKR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.9502447307780773);
    msg.setSource(55416U);
    msg.setSourceEntity(249U);
    msg.setDestination(55948U);
    msg.setDestinationEntity(156U);
    msg.lat = 0.8497751163674045;
    msg.lon = 0.4456336568291823;
    msg.z = 0.4785017185104481;
    msg.z_units = 183U;
    msg.radius = 0.09813546196473577;
    msg.duration = 42339U;
    msg.speed = 0.8988399318337478;
    msg.speed_units = 171U;
    msg.popup_period = 42034U;
    msg.popup_duration = 45066U;
    msg.flags = 89U;
    msg.custom.assign("GOYKBNQJSJZKUOEZWRDOYQARPRAWDHUHTOQTMYQSSUJLGQVLMYAJPDPTXITGF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.9395749940772151);
    msg.setSource(30883U);
    msg.setSourceEntity(19U);
    msg.setDestination(53907U);
    msg.setDestinationEntity(17U);
    msg.lat = 0.6379393063894624;
    msg.lon = 0.7539547708096462;
    msg.z = 0.11173415765874306;
    msg.z_units = 203U;
    msg.radius = 0.885077968466399;
    msg.duration = 4186U;
    msg.speed = 0.7511371036646689;
    msg.speed_units = 33U;
    msg.popup_period = 46966U;
    msg.popup_duration = 3059U;
    msg.flags = 3U;
    msg.custom.assign("XCCJJBWJEURRGZYSDIFCRZAFMWPRV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.1164692413576689);
    msg.setSource(12313U);
    msg.setSourceEntity(13U);
    msg.setDestination(6980U);
    msg.setDestinationEntity(130U);
    msg.lat = 0.5099330034867801;
    msg.lon = 0.30982015331806234;
    msg.z = 0.5541711044468849;
    msg.z_units = 216U;
    msg.radius = 0.4726051144835637;
    msg.duration = 13864U;
    msg.speed = 0.47582463500455074;
    msg.speed_units = 79U;
    msg.popup_period = 22985U;
    msg.popup_duration = 55861U;
    msg.flags = 10U;
    msg.custom.assign("HCBCZTFNTF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.8797128489322393);
    msg.setSource(26765U);
    msg.setSourceEntity(53U);
    msg.setDestination(26112U);
    msg.setDestinationEntity(13U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.36347146780701944);
    msg.setSource(36070U);
    msg.setSourceEntity(203U);
    msg.setDestination(38147U);
    msg.setDestinationEntity(41U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.16622334611671474);
    msg.setSource(43754U);
    msg.setSourceEntity(148U);
    msg.setDestination(15621U);
    msg.setDestinationEntity(127U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.44576772095054285);
    msg.setSource(23153U);
    msg.setSourceEntity(76U);
    msg.setDestination(56045U);
    msg.setDestinationEntity(241U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("XSAMWPNZRPKATWDRKKSVTUBUGQQTEIFKLICYCYWPZCATXUWIPNOABCBUMHJLNZBQFROEQMNGPJGLWAOUKOCSAODJVJVYGPIVMPNIIOUMDSFDHLHJMYEEZWEODIASPOSXBJQGIPRCEJRYGNSCL");
    IMC::LowLevelControl tmp_tmp_msg_0_0;
    IMC::DesiredRoll tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.value = 0.6217241620678639;
    tmp_tmp_msg_0_0.control.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.duration = 11335U;
    tmp_tmp_msg_0_0.custom.assign("XFYROVTYDNKHWFZXCLGSOALUGPHJVSMDKFIKRXIYCZKMMGBEGSUOTZOILQUPDIMNZDDYQICUUOPGTHZNKLREMUNYQLSHZZARJVUPAAEJMQBPEXOE");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.7018713476695285);
    msg.setSource(55504U);
    msg.setSourceEntity(13U);
    msg.setDestination(28832U);
    msg.setDestinationEntity(242U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("ECVJBKNUDHUPZJYQUFGDZUZCNVNWTIBGGPRZSYNPFGWYIKREJLBXCDYOTTAESPKFJLPVQVENYRTJOVKQWPICLLOUXUHTQRSKBMWCQKECDXYINVXZDHYQHIFLKVTYMXCABSEIGHFNIOGFQRSOKOMFHSMBCTZMOVGLTUYNLYGQXLRRGVBIPJZSEDTHFWIPDJUDVDOMAXXSDLLAPEMAEMMTIASRKFJZBPJCUAGOXZR");
    IMC::IdleManeuver tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.duration = 45772U;
    tmp_tmp_msg_0_0.custom.assign("UYEDLHABVKFVRBCURAMYMGKVNIHRTRNHVIWSIATFBVBNRWSF");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::FormationParameters tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.formation_name.assign("XCYGEEWBVSHZRVJIDDNSZAHUPLYNUKBZTRZQKDOHFXNNKOXFIMQYCMPULNALLWMYWNDKFPSPZITMSOEHTBSTVBJQCVJGZAVBQOBOXQOKVNNQOQKMVBCTGPGDOLAIRFHDFCYERTAXFGRALEPBWCAYKZERVKSURJJJHYALJMZ");
    tmp_tmp_msg_0_1.reference_frame = 140U;
    tmp_tmp_msg_0_1.custom.assign("FEWGYVZYKRTMTLIPHIVRXASUNAW");
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    IMC::Launch tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.timeout = 50829U;
    tmp_tmp_msg_0_2.lat = 0.42415150052422257;
    tmp_tmp_msg_0_2.lon = 0.05078457643539558;
    tmp_tmp_msg_0_2.z = 0.9774140956614442;
    tmp_tmp_msg_0_2.z_units = 68U;
    tmp_tmp_msg_0_2.speed = 0.7438985778522956;
    tmp_tmp_msg_0_2.speed_units = 112U;
    tmp_tmp_msg_0_2.custom.assign("SACWNPBRBDEYWEWOLZXDRNMHLKHBGRXYXFLQHESYUWJAIFUAIRZPPLCXNUCWSETKHSBPGPDTLURHZJGHJWKRFTYXDVDQGGOIZBZSFVNZEVZMZGUAKQXM");
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_2);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.7968051954237376);
    msg.setSource(32808U);
    msg.setSourceEntity(35U);
    msg.setDestination(31217U);
    msg.setDestinationEntity(41U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("MYJFASUSRUJJGDJDKAPRPEYPXNQHVCINJFDTLSAHHIZDQHUGJXYBVVATROPUASKOOYKMYBIOROZSDFYXAVAFIHBGXRSELNUCJIWEQBGZLNVTBKBMWWFAOPVT");
    IMC::FormationPlanExecution tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.group_name.assign("HLLAAIOLRJLSVTDKBZKSBXIPUXCOTNNNAIORFOMKZEZWFMC");
    tmp_tmp_msg_0_0.formation_name.assign("UADWYBGOFWWFCAQPQGTRREUZVLMEIKBRQNLUDMNLPYWEAXVOPQPCLCYFHDGALSWKFZFYFEVAAKQKBJRCWZCYJBTFJJEXZSRMMINSGBZMVHQQWEDTPYGIZKFUQVLAJVDSULKNUMBBUDNICIBSYM");
    tmp_tmp_msg_0_0.plan_id.assign("TOMKWCTANGFPALGRLUGVKQFTUGLTUNBRUDTFLPMNJEWSABVCYZJSRPDBVCYRYIWVFFWGSLAVEJIBZMIJMZGDXPUNQKOYPYWHMXOMQZWVPKKYSSNDJFVCMQPQZHKCYWZAREEJURNIQZCORONPIHGVOTSZTAGRNIDXISDHLELQLFKWCUOYJXHOTEBCEBNMXS");
    tmp_tmp_msg_0_0.description.assign("OSGXEYWSCOWNGGKQQDAGUWAGJWAOTZVWLIMKTALCYLISDRVPHEZEYUVRGSYWPQBZDCSBNXXENJ");
    tmp_tmp_msg_0_0.leader_speed = 0.7991666722373169;
    tmp_tmp_msg_0_0.leader_bank_lim = 0.4357095860894178;
    tmp_tmp_msg_0_0.pos_sim_err_lim = 0.040997300483982535;
    tmp_tmp_msg_0_0.pos_sim_err_wrn = 0.5589853921756256;
    tmp_tmp_msg_0_0.pos_sim_err_timeout = 42173U;
    tmp_tmp_msg_0_0.converg_max = 0.5135190421741501;
    tmp_tmp_msg_0_0.converg_timeout = 48031U;
    tmp_tmp_msg_0_0.comms_timeout = 58830U;
    tmp_tmp_msg_0_0.turb_lim = 0.35936838373871327;
    tmp_tmp_msg_0_0.custom.assign("DGGRYUVCWBELBADPMFXUCASOTRVKNIM");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::StationKeepingExtended tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.lat = 0.22181537197482404;
    tmp_tmp_msg_0_1.lon = 0.3629625646426894;
    tmp_tmp_msg_0_1.z = 0.8068762811354031;
    tmp_tmp_msg_0_1.z_units = 65U;
    tmp_tmp_msg_0_1.radius = 0.652064750086929;
    tmp_tmp_msg_0_1.duration = 21201U;
    tmp_tmp_msg_0_1.speed = 0.09169499563159222;
    tmp_tmp_msg_0_1.speed_units = 102U;
    tmp_tmp_msg_0_1.popup_period = 15809U;
    tmp_tmp_msg_0_1.popup_duration = 602U;
    tmp_tmp_msg_0_1.flags = 195U;
    tmp_tmp_msg_0_1.custom.assign("WTQJQCMNSQIJVHETANYZWEZDBWNWPDMMVOIBCG");
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.34443237354106526);
    msg.setSource(28736U);
    msg.setSourceEntity(161U);
    msg.setDestination(15874U);
    msg.setDestinationEntity(110U);
    msg.timeout = 37121U;
    msg.lat = 0.3703234550409621;
    msg.lon = 0.42976380840175776;
    msg.z = 0.9901057507201708;
    msg.z_units = 4U;
    msg.speed = 0.3885339716504991;
    msg.speed_units = 166U;
    msg.bearing = 0.9601732963384798;
    msg.width = 0.395178510490898;
    msg.direction = 170U;
    msg.custom.assign("KTLGYIZWJNGDHYMVIFSBCUTKFJAXZQUGGNRTIDGXFWOESBLLYDSSNRFJHVJZKPUYQQNPVTDIWXRABCQSNUROKQVKIZKUGCXABTOWMKLCLMIXCDVFDHFEAUJQYYMBTIZWOWDLMUWCALRXZVAAHTUPCBEINRMWFZMXFYXSBJSMPEYTWNHJRIASVVMGLUPSJFOKKNTHYPZHBNVEUOQGYPDWEAEPAOXOMGBPEIHPJQQCLETQXLKNHRVZRZC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.3913721892936266);
    msg.setSource(53444U);
    msg.setSourceEntity(222U);
    msg.setDestination(19990U);
    msg.setDestinationEntity(193U);
    msg.timeout = 46115U;
    msg.lat = 0.5730938180109842;
    msg.lon = 0.12584420937183538;
    msg.z = 0.9644770849860149;
    msg.z_units = 51U;
    msg.speed = 0.0891701750687558;
    msg.speed_units = 165U;
    msg.bearing = 0.5505517559862627;
    msg.width = 0.5465848225380854;
    msg.direction = 39U;
    msg.custom.assign("RLWKYXLYJXEEJQHCYMUYZLSGQVZAJTCUJLSIOZTRPMBGBZAQKYRDCVMWHQUESDTYXIFORKJYXUNVEWHVHFVNFOWQHLBRUAKQTOZZGNIWQCJNUSTZEXNXMVGMODWAJHCDJSHXAJQCEUUPKDETOBOOIFACBIEKRGYDCBDMPSMPPPXNERRFKG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.04521555038965219);
    msg.setSource(45989U);
    msg.setSourceEntity(92U);
    msg.setDestination(63239U);
    msg.setDestinationEntity(5U);
    msg.timeout = 44867U;
    msg.lat = 0.11452786805729898;
    msg.lon = 0.7902549570729563;
    msg.z = 0.31730021799534114;
    msg.z_units = 237U;
    msg.speed = 0.6908771483272774;
    msg.speed_units = 32U;
    msg.bearing = 0.5305474938177142;
    msg.width = 0.33637450321607065;
    msg.direction = 83U;
    msg.custom.assign("IBNVOGXRQEL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.13359115602234284);
    msg.setSource(54016U);
    msg.setSourceEntity(62U);
    msg.setDestination(37760U);
    msg.setDestinationEntity(48U);
    msg.op_mode = 46U;
    msg.error_count = 130U;
    msg.error_ents.assign("ZEHBRPXWIVTDCOEAORZAEOREKDOQXRBMGSBZSMPXWHFNFIWLJFAURSCOMZYGLKVISEGNTLHMHTKYZQEZPHJLYKLTIGAEVBTKBJPBQHSNCXJDTQVXRXPLWBQCCMHWFVLNZAUGRELYVUOWCIXDGKQMQUWVJDQWAGCHOBBYXYIDLAGDVFMTNTMQSUUAUJOZGPUSPRSVYEFSDBUITIKYCYNQCOXFJNJMFVJPNN");
    msg.maneuver_type = 3803U;
    msg.maneuver_stime = 0.5941769892443837;
    msg.maneuver_eta = 60925U;
    msg.control_loops = 822244102U;
    msg.flags = 60U;
    msg.last_error.assign("OQYWVUPLLNOTEJCIVJHHMGXPQEBSEVAVZMALJJHPILMJXGZKYDKVCMHVHPSKKUEMRPBYIHEITYKWFJJXCGGUKGREDZAYPOXAFNMNUQOYNIJWKQVIQRZAKDAFGYFDAJSDFGLSWUXQUSSNXHLCRGQYIZYSVBCBRBODXXMHEBZZQZTAG");
    msg.last_error_time = 0.013633175636596495;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.547958458929116);
    msg.setSource(57972U);
    msg.setSourceEntity(222U);
    msg.setDestination(60555U);
    msg.setDestinationEntity(182U);
    msg.op_mode = 59U;
    msg.error_count = 41U;
    msg.error_ents.assign("PYRIAMXZVCOFNWJENOIXTEUMMJLWAQCQHOP");
    msg.maneuver_type = 35891U;
    msg.maneuver_stime = 0.4494360897043692;
    msg.maneuver_eta = 34086U;
    msg.control_loops = 2654579794U;
    msg.flags = 230U;
    msg.last_error.assign("CBZYOHLFLUWRQRFLRNKJDPQNNRMQQGTJAZUNGLRRVUASPKNBKYEKBOMHCMXHQERSEASOGCBKFCTGAIKIEWLPGWKJJZNCTVZBYPOVMYRHYUTLBMWSXATSPIFNMFQZHYIDLVFEXFKHXAHOUSEDCWIN");
    msg.last_error_time = 0.6901759213548276;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.4466386304200991);
    msg.setSource(26566U);
    msg.setSourceEntity(220U);
    msg.setDestination(55533U);
    msg.setDestinationEntity(27U);
    msg.op_mode = 125U;
    msg.error_count = 74U;
    msg.error_ents.assign("INQNMMHVSORGZRZFJDTGNDYMUNXTKWCKKUPRWCGLWFDGZYDOEELWPAICONMXGFSEMSPHPWWOTUDPBSCZASNQTRJCXPLALWTXUPWAEEOEQJFLMWKXZNGTMSKXCXYLSLHUNBQ");
    msg.maneuver_type = 30165U;
    msg.maneuver_stime = 0.7359006574869436;
    msg.maneuver_eta = 29536U;
    msg.control_loops = 3432219693U;
    msg.flags = 237U;
    msg.last_error.assign("JZMYVASDEMYQLDBEJGGGBMHZQJRLIPZPXTRXWKXHHQJVNTLAEYWKCULESADSOOEBDNGDGTQVKWMVRPRLSWRSTYIXYFXNQKHYZKYOSBERMBYAASZUHNIWNCAVLAQFMJVURMNMPJWBBOWQFAJDJKENVHFIRFWUXODXEDIMOTIFAXWNOKOCXGBLLUDXPVDCIJIOTKCUCQMSWZPUFHLYIAYZGULGORTG");
    msg.last_error_time = 0.25719950537514735;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.5535412150389523);
    msg.setSource(22082U);
    msg.setSourceEntity(243U);
    msg.setDestination(8313U);
    msg.setDestinationEntity(219U);
    msg.type = 39U;
    msg.request_id = 60971U;
    msg.command = 136U;
    IMC::CompassCalibration tmp_msg_0;
    tmp_msg_0.timeout = 15013U;
    tmp_msg_0.lat = 0.10123659756697911;
    tmp_msg_0.lon = 0.4949644996618593;
    tmp_msg_0.z = 0.5901074341170517;
    tmp_msg_0.z_units = 242U;
    tmp_msg_0.pitch = 0.46558801929063665;
    tmp_msg_0.amplitude = 0.8938408738474453;
    tmp_msg_0.duration = 30522U;
    tmp_msg_0.speed = 0.25901236986555787;
    tmp_msg_0.speed_units = 201U;
    tmp_msg_0.radius = 0.8872381885433495;
    tmp_msg_0.direction = 150U;
    tmp_msg_0.custom.assign("XYBHQHRNMJMWOWQZSXMIISLJEYMGRWMDCQYOTLKASQEEKKKVZVCFJNXHXTYQKWRPRPLHAZSXRHHTRUEGVSWIWFJKWRGOZAJIKNAIPSOYDSYFBLEDLUYUNATVXVPZDEZNCNEGJQOCVIZXWJMXZNLFCTA");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 41242U;
    msg.info.assign("QGVCEDKKXCQYWXUATPCRMXOUSFBRYFBYLCNPVQABCREPCJSWOSTPLOOFETAWQUJIPLPGLNGRVKBVQJRCZNHHYNZSXXUQWBXYEAVGFHI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.34666834865615326);
    msg.setSource(41374U);
    msg.setSourceEntity(183U);
    msg.setDestination(20059U);
    msg.setDestinationEntity(160U);
    msg.type = 155U;
    msg.request_id = 24663U;
    msg.command = 99U;
    IMC::FollowTrajectory tmp_msg_0;
    tmp_msg_0.timeout = 22172U;
    tmp_msg_0.lat = 0.032887911356406674;
    tmp_msg_0.lon = 0.05374872440692846;
    tmp_msg_0.z = 0.3496973419518873;
    tmp_msg_0.z_units = 128U;
    tmp_msg_0.speed = 0.462187265666562;
    tmp_msg_0.speed_units = 143U;
    IMC::TrajectoryPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.x = 0.1280151166218536;
    tmp_tmp_msg_0_0.y = 0.10099501287103985;
    tmp_tmp_msg_0_0.z = 0.7011114124219778;
    tmp_tmp_msg_0_0.t = 0.027100913097132362;
    tmp_msg_0.points.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.custom.assign("LQHNKCQSQSKTAEXCRMGDFJNLORQIGBVZIMMWRXGDJEGCSCUMFPDOXPUG");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 16670U;
    msg.info.assign("DMWZSDWOQDORLNHVQFFVVMZPFHXSQPGRYLZPNBXWAPYMTOAOWAGNGFGSJECHIFHMPFRGVSUTEATNAACKAQCPHRTLDRQGJKQBBUHEBEYLUTWNCOTFQBIHLGERHBEYSAIJURXGOYZVAIHSYPPWKXMFKMZBIWCXMVVMDKZMDMFUIZHSOBCJIQEXOUZLQKDESFSLJTDYYOTNDTXPKLCUYWUBJTXUVXDRKNIBJONJZCNAZVYJGKKX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.12339026394278418);
    msg.setSource(19930U);
    msg.setSourceEntity(113U);
    msg.setDestination(60821U);
    msg.setDestinationEntity(251U);
    msg.type = 68U;
    msg.request_id = 9213U;
    msg.command = 122U;
    IMC::VehicleFormation tmp_msg_0;
    tmp_msg_0.lat = 0.6830500795216662;
    tmp_msg_0.lon = 0.27130626972162686;
    tmp_msg_0.z = 0.11663414180119536;
    tmp_msg_0.z_units = 251U;
    tmp_msg_0.speed = 0.7818578055474313;
    tmp_msg_0.speed_units = 230U;
    tmp_msg_0.start_time = 0.8460935626803882;
    tmp_msg_0.custom.assign("QZWGVXZQNUNNCGRGSMLYSCSYEUHWPZGFLADNEYPBFKVOQRFPDDESMZCCOWKMHIKXIOZCFSRTBGDSWKAEVTFWRCHJMUMIKZJLWLLPCARPYHBNJUTMDTHXVREJHKAMRXONTMBDKBYVOUBIAWXOHJDWHRQWGQEDUCFTLJBIBGJXLQYPAPVUNABVJDQPVZOFHFEMPJNOFLTQVZCTPFGQSESCYHYKSEY");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 56025U;
    msg.info.assign("TXXVAHZZTVJFVBRHDYLOGHLEOWIFKOXJTBPVIMHZKYDIKUIZWBLSFJFEZEKCYNFTBDDSWMWSZJGYVAQAQZLRLUTWJDOPGSIYNLEOJTHXAGYRRXJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.025108800457718905);
    msg.setSource(58959U);
    msg.setSourceEntity(171U);
    msg.setDestination(52880U);
    msg.setDestinationEntity(18U);
    msg.command = 80U;
    msg.entities.assign("TCQZRDGUJDVHHVLEOCNIBQUHTMCWXIUXUTNTXMPBUVYJPPTXFFOLARIEYYWWMQAAPXOUTBZOCSGCAKRVADOJSPLZGEMBAYDQXUSGHKQFJKLJPFAIBTNFPUJEBDZMQDPNOOGNXJKZFSELTQXCBLADZVIDLEVWOKSNRMNIWSIHUWRCHGWRQLGESKK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.9971489797308185);
    msg.setSource(6323U);
    msg.setSourceEntity(204U);
    msg.setDestination(50356U);
    msg.setDestinationEntity(183U);
    msg.command = 225U;
    msg.entities.assign("AZYCYWCKRKGKPHAEWLZOQMDUSYZEKEXZZVJBSCEDWOXJRNKYSLRCGGHDJRODODTKUMFGTUPOCMXRJSOXUAHCRWBQQGVJIPXWKQCKSHYPVVONTVMFHYPVRTTFREBFATKHDQUXQLJXTMP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.19805348837263415);
    msg.setSource(25387U);
    msg.setSourceEntity(20U);
    msg.setDestination(27777U);
    msg.setDestinationEntity(133U);
    msg.command = 213U;
    msg.entities.assign("DLIHDSUYWLGKBVPJJYDBAEOIGXADLGFURTXAITMCHZSMRRJYVFVPEHTWLENAHZAFBFKVUTJBOQMSPQJRFZSPPIKOIQAZTLJCERSVCOWLYDLRSDYNXYCQVGAUBTNGIAYUFNZKOWBNXMQKPGONXRIKUKFJMBYLUBKAEZHHGFTMQJIHEBWXWWQNZMS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.006089899728996873);
    msg.setSource(44599U);
    msg.setSourceEntity(184U);
    msg.setDestination(62537U);
    msg.setDestinationEntity(144U);
    msg.mcount = 39U;
    msg.mnames.assign("CJKVECFEUUVQQPJCBQDEHHT");
    msg.ecount = 56U;
    msg.enames.assign("RUWUGVENIIZOZVGNTWFCKKEBOGQKZMAGASTPLYEZQSXREWQIGETVWPCBLQRZIUFHYMRMCVDJGVLLWUDTZPDKHBANFPBLAEKMSWNZQTUJWPGWNDKGZAIXTXLLRHOSJMVDEONHXVRHDFNHYJBCIEYIPIIMAVEDBCKXBAGBEODACQQGFTUPRHLDJTQFASSNUTMNOFWUYTCYYZQCKROXUXYJSFPLK");
    msg.ccount = 29U;
    msg.cnames.assign("FPOKZDPIXQVRFOILHNLCITRKDJBIHEBGYDOQIHDAYBFXCIMRCUIDYGINNXUTPOVAKGVMNMKRMTWXOBVRUSAQRYBPYZYXMVQOISHUCECQBSNLMWBVLKTHLXJTFKYLNXQGZBKJZOHRZTSAUJZPMFSMUBCUCHHZYFPWRPWVSJJPNGYBEPUWGJDLEEH");
    msg.last_error.assign("LOTOPBPQVAXXVRUKQNVVAQCHGEYQMUVKGFNUEHLKAVLESYMJCLMCCUBQSYHYEQSIJNNBFWSGTBRPKMWTLYSRWDMRRSJFWSDHKQJXAEMDZRDQDFHGNTFRTAZGXOEMOLODIWIPTVGGPOYJBEISOOZLFFTMJVMEWKAPUZYOVMOBDIHICVKPCUBC");
    msg.last_error_time = 0.8667835851748911;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.47174517270361827);
    msg.setSource(54883U);
    msg.setSourceEntity(127U);
    msg.setDestination(60596U);
    msg.setDestinationEntity(178U);
    msg.mcount = 46U;
    msg.mnames.assign("NSHMTTLRDMJIDTLVVYLAKZLZWPNRGRZRSHHBFAITWHWSLOFQVPRINRZDRQNXYJOQHMXJJIYFGCKWKV");
    msg.ecount = 218U;
    msg.enames.assign("IHWHZQROBJYTGRFBQEHKCPKLAWKDYIJXMNKMMJUGGNCUUJWPMPXVOYTZMKVLXS");
    msg.ccount = 247U;
    msg.cnames.assign("VKJDYTIVWOGLSLYEPVHKBCUVWAISGAKDEZJKQHUUNQRFBGGFPIVHIOZLIUDPDVROGCBFYFCDUVHCWJEQHFJLHMJPEMEYUARIEZM");
    msg.last_error.assign("CHJJRNWSWPERJVABMMADNVRIDYBJZRNXFLOAPHVGXDEFPHASXRDQZWTHKZEJOFQCHIEBJMCQDIFAZOLPFREELVDBMVYNXLACQCQOBYNNNXPYTXLJSKMINFOUEIXSILMRGJKZIXWSTUAGE");
    msg.last_error_time = 0.4411503564726337;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.0790478811486548);
    msg.setSource(63657U);
    msg.setSourceEntity(208U);
    msg.setDestination(45710U);
    msg.setDestinationEntity(32U);
    msg.mcount = 198U;
    msg.mnames.assign("JARCRWADGWYQVXGSOHNQIPNGKWKTSJBHNXBWCEOXMLWTAIZDPGTQLOVEJPPNTOKZHIFLORPDYYZYYRDZMURSWJSCBUGBARAZDVIIBTEEWKCDSVIXJHGXNSJXRDPAQTCSWWFVQLCKKYNQPOLFMMQWXUZEMLUAFYINCUMATFQOBDMSVRCIJUMJVYEYSIBVHVLNLQODGKJVEFRXMGI");
    msg.ecount = 13U;
    msg.enames.assign("AOOEKNBCYALMOWRDFLHJJGLOKK");
    msg.ccount = 177U;
    msg.cnames.assign("HMGKUDQKLQSRAXVOLRPZTXFLZGZTTQJGNERYTPPFYFRYSBYUASAIMXDALTADHWRZCXOBIUBTRRJSYJGHOUANKEMTTHKHPCBQGJUPAWOMVBWTJJOQWLECIWQEUVPTGBWNYDWNXRYWEZNEJOLFHFZMVDZIZMFHCKVYIVGMKMBXWWFICOHGBNKDRIAIVZKSQLJRIBLJNCEKCEF");
    msg.last_error.assign("IGQSZTLOZHXFNAGJMEVJ");
    msg.last_error_time = 0.5334779104307592;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.9368680768822863);
    msg.setSource(27582U);
    msg.setSourceEntity(149U);
    msg.setDestination(20299U);
    msg.setDestinationEntity(113U);
    msg.mask = 161U;
    msg.max_depth = 0.26603476576261786;
    msg.min_altitude = 0.7828220783247736;
    msg.max_altitude = 0.15357884033646363;
    msg.min_speed = 0.27862732881833185;
    msg.max_speed = 0.8672557606633524;
    msg.max_vrate = 0.5131121052290909;
    msg.lat = 0.3147830759416268;
    msg.lon = 0.9329871220383799;
    msg.orientation = 0.26825196959758;
    msg.width = 0.2902952932935198;
    msg.length = 0.08817656279776576;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.45660371967584623;
    tmp_msg_0.lon = 0.8562196015032675;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.7447867975622573);
    msg.setSource(33916U);
    msg.setSourceEntity(135U);
    msg.setDestination(29105U);
    msg.setDestinationEntity(64U);
    msg.mask = 132U;
    msg.max_depth = 0.4022546489193354;
    msg.min_altitude = 0.049193302314695986;
    msg.max_altitude = 0.22165483783525974;
    msg.min_speed = 0.43673650172477385;
    msg.max_speed = 0.5850386173613449;
    msg.max_vrate = 0.6656436047828268;
    msg.lat = 0.045115183028862305;
    msg.lon = 0.45261353931215975;
    msg.orientation = 0.3720529199899726;
    msg.width = 0.6999824286118065;
    msg.length = 0.8065735275104503;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.15815352537709237;
    tmp_msg_0.lon = 0.2663814926765652;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.8593142489537462);
    msg.setSource(62534U);
    msg.setSourceEntity(237U);
    msg.setDestination(8533U);
    msg.setDestinationEntity(69U);
    msg.mask = 253U;
    msg.max_depth = 0.5338084702383316;
    msg.min_altitude = 0.05142945753887296;
    msg.max_altitude = 0.22233737298616674;
    msg.min_speed = 0.07348744907853344;
    msg.max_speed = 0.10065125973665068;
    msg.max_vrate = 0.7726181034579201;
    msg.lat = 0.07527202575222791;
    msg.lon = 0.6777137204251015;
    msg.orientation = 0.19729373936728878;
    msg.width = 0.12509645043368356;
    msg.length = 0.2508837190458102;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.2626659809002677;
    tmp_msg_0.lon = 0.2556327534211954;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.6167526833276664);
    msg.setSource(60137U);
    msg.setSourceEntity(252U);
    msg.setDestination(23266U);
    msg.setDestinationEntity(4U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.8323703882830111);
    msg.setSource(5231U);
    msg.setSourceEntity(234U);
    msg.setDestination(19992U);
    msg.setDestinationEntity(178U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.2697057216287937);
    msg.setSource(34229U);
    msg.setSourceEntity(166U);
    msg.setDestination(39552U);
    msg.setDestinationEntity(94U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.6683893568817164);
    msg.setSource(23299U);
    msg.setSourceEntity(210U);
    msg.setDestination(64349U);
    msg.setDestinationEntity(132U);
    msg.duration = 52242U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.4521673150669727);
    msg.setSource(40819U);
    msg.setSourceEntity(175U);
    msg.setDestination(44674U);
    msg.setDestinationEntity(201U);
    msg.duration = 19024U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.06562513367571388);
    msg.setSource(50762U);
    msg.setSourceEntity(124U);
    msg.setDestination(59508U);
    msg.setDestinationEntity(228U);
    msg.duration = 16186U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.12628649600049247);
    msg.setSource(7015U);
    msg.setSourceEntity(213U);
    msg.setDestination(108U);
    msg.setDestinationEntity(94U);
    msg.enable = 176U;
    msg.mask = 3782129484U;
    msg.scope_ref = 60974469U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.7546673449834164);
    msg.setSource(36714U);
    msg.setSourceEntity(253U);
    msg.setDestination(44431U);
    msg.setDestinationEntity(208U);
    msg.enable = 76U;
    msg.mask = 1330138003U;
    msg.scope_ref = 3069815017U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.19773782691896402);
    msg.setSource(7590U);
    msg.setSourceEntity(254U);
    msg.setDestination(36363U);
    msg.setDestinationEntity(55U);
    msg.enable = 191U;
    msg.mask = 4055189915U;
    msg.scope_ref = 1324760262U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.5908746622483851);
    msg.setSource(64496U);
    msg.setSourceEntity(31U);
    msg.setDestination(36101U);
    msg.setDestinationEntity(207U);
    msg.medium = 211U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.8347360116724586);
    msg.setSource(47069U);
    msg.setSourceEntity(204U);
    msg.setDestination(64650U);
    msg.setDestinationEntity(49U);
    msg.medium = 116U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.5987638217474311);
    msg.setSource(55328U);
    msg.setSourceEntity(122U);
    msg.setDestination(38088U);
    msg.setDestinationEntity(146U);
    msg.medium = 244U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(3.474752098497902e-06);
    msg.setSource(13771U);
    msg.setSourceEntity(24U);
    msg.setDestination(34180U);
    msg.setDestinationEntity(133U);
    msg.value = 0.15765970503131554;
    msg.type = 190U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.9476796439594024);
    msg.setSource(27074U);
    msg.setSourceEntity(69U);
    msg.setDestination(51616U);
    msg.setDestinationEntity(238U);
    msg.value = 0.15037940479473688;
    msg.type = 84U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.2354846373236711);
    msg.setSource(54965U);
    msg.setSourceEntity(252U);
    msg.setDestination(19702U);
    msg.setDestinationEntity(24U);
    msg.value = 0.14752679955642256;
    msg.type = 66U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.8514590029599058);
    msg.setSource(38584U);
    msg.setSourceEntity(182U);
    msg.setDestination(3732U);
    msg.setDestinationEntity(191U);
    msg.possimerr = 0.8103791833621947;
    msg.converg = 0.5200028149207188;
    msg.turbulence = 0.5447513224935092;
    msg.possimmon = 130U;
    msg.commmon = 240U;
    msg.convergmon = 55U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.6593879640766499);
    msg.setSource(58509U);
    msg.setSourceEntity(101U);
    msg.setDestination(31716U);
    msg.setDestinationEntity(65U);
    msg.possimerr = 0.5574338470269827;
    msg.converg = 0.1857808663319389;
    msg.turbulence = 0.7744797487950402;
    msg.possimmon = 11U;
    msg.commmon = 174U;
    msg.convergmon = 205U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.7926797600484451);
    msg.setSource(65491U);
    msg.setSourceEntity(45U);
    msg.setDestination(53062U);
    msg.setDestinationEntity(144U);
    msg.possimerr = 0.9652198008858786;
    msg.converg = 0.6804424440080487;
    msg.turbulence = 0.7678575678404825;
    msg.possimmon = 111U;
    msg.commmon = 24U;
    msg.convergmon = 79U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.4911790967030777);
    msg.setSource(23648U);
    msg.setSourceEntity(25U);
    msg.setDestination(63798U);
    msg.setDestinationEntity(224U);
    msg.autonomy = 15U;
    msg.mode.assign("JDNZKSBJSWRADRDDRCCVBFVPZVAYCKTFRJNHVGOMIVFUQJNXPGKIRFNSQDIFRXZXZYTOFWJOCCKVGXXQTXOUNTTJAHOLWIYJIGWPKOUVGYKUNUHBZQWDMFHWNTQAJGCMQUAEAHTCPDUWRZGWLEEEPFQTTIPFBSCUGKZNXBRMZPMYBOEPBNDKLXIUELBDAVURYEMLHSYALOLLBPAMHSIEYVDLHPLIOXKGXOIMEMEASYCHJYMVWQFSQZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.31492435774003513);
    msg.setSource(61484U);
    msg.setSourceEntity(81U);
    msg.setDestination(64289U);
    msg.setDestinationEntity(142U);
    msg.autonomy = 189U;
    msg.mode.assign("YIZPBODSYHJAHGWOBRTVIVCYTMDQRQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.6740604528102305);
    msg.setSource(14192U);
    msg.setSourceEntity(108U);
    msg.setDestination(55518U);
    msg.setDestinationEntity(66U);
    msg.autonomy = 98U;
    msg.mode.assign("MBJWSZDKFVHTRXDQXYRLCPFGUCOMRBPNWWQZOLNBHHMCVHGRIDLCISBWDHDMINUXTMSKOZRKTJZPRNAEHYFMEPIYFIOJGLDUDDSMFJCXRTYVZEXGMPUOAIEVQNGYVIYQJQCOLIRNLUGZKFFZPETSAVVSQYCC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.40543787963845723);
    msg.setSource(9290U);
    msg.setSourceEntity(52U);
    msg.setDestination(4202U);
    msg.setDestinationEntity(179U);
    msg.type = 100U;
    msg.op = 121U;
    msg.possimerr = 0.5758747471252146;
    msg.converg = 0.2075531100978787;
    msg.turbulence = 0.6838203934774224;
    msg.possimmon = 48U;
    msg.commmon = 134U;
    msg.convergmon = 156U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.5583875023641479);
    msg.setSource(8445U);
    msg.setSourceEntity(62U);
    msg.setDestination(55263U);
    msg.setDestinationEntity(31U);
    msg.type = 198U;
    msg.op = 23U;
    msg.possimerr = 0.9952053853237679;
    msg.converg = 0.9939684354991707;
    msg.turbulence = 0.46186228845405675;
    msg.possimmon = 107U;
    msg.commmon = 76U;
    msg.convergmon = 170U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.6376351028867945);
    msg.setSource(3577U);
    msg.setSourceEntity(139U);
    msg.setDestination(46103U);
    msg.setDestinationEntity(90U);
    msg.type = 59U;
    msg.op = 243U;
    msg.possimerr = 0.5628059787347244;
    msg.converg = 0.8771625644651124;
    msg.turbulence = 0.4963561120254165;
    msg.possimmon = 39U;
    msg.commmon = 212U;
    msg.convergmon = 247U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.7174600171729895);
    msg.setSource(44813U);
    msg.setSourceEntity(121U);
    msg.setDestination(60867U);
    msg.setDestinationEntity(210U);
    msg.op = 157U;
    msg.comm_interface = 163U;
    msg.period = 38264U;
    msg.sys_dst.assign("UHWGSFXBLDHE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.10985894404363683);
    msg.setSource(16809U);
    msg.setSourceEntity(248U);
    msg.setDestination(40743U);
    msg.setDestinationEntity(100U);
    msg.op = 226U;
    msg.comm_interface = 112U;
    msg.period = 44076U;
    msg.sys_dst.assign("TFOZGTKNYNWKIYTKKWDJSXLZOYQHDENUWHOJRVCJRSOQZEDLCBFNQISMUO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.6739533032072129);
    msg.setSource(49880U);
    msg.setSourceEntity(199U);
    msg.setDestination(58074U);
    msg.setDestinationEntity(29U);
    msg.op = 186U;
    msg.comm_interface = 8U;
    msg.period = 41176U;
    msg.sys_dst.assign("XLKVTNRHLJTEQRGTARVABVCLQMEGBMUHUKCFOSURNLKKDAQPNOPOBZSTAHHETBJYXFFMPOPYHEVBVXSDGQGJHWGDNOTPDJDMTFDAIYYEWSMPVUUCCMJCFISWNIQQNYMGBKXMXXZWRQYDKALAJKZRIZYBUCRDXXQPFLZBSLXURHWIVBLWHJAOOWSNCVCSOQPOZPYWZHFG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.4061453347939371);
    msg.setSource(37657U);
    msg.setSourceEntity(85U);
    msg.setDestination(58290U);
    msg.setDestinationEntity(94U);
    msg.stime = 3684028074U;
    msg.latitude = 0.5923301993995425;
    msg.longitude = 0.844271549897069;
    msg.altitude = 39718U;
    msg.depth = 58670U;
    msg.heading = 16471U;
    msg.speed = 928;
    msg.fuel = 76;
    msg.exec_state = -112;
    msg.plan_checksum = 17865U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.9108585066510863);
    msg.setSource(18717U);
    msg.setSourceEntity(138U);
    msg.setDestination(62655U);
    msg.setDestinationEntity(222U);
    msg.stime = 4278170429U;
    msg.latitude = 0.8553277294091246;
    msg.longitude = 0.9348775217703086;
    msg.altitude = 42693U;
    msg.depth = 21733U;
    msg.heading = 53569U;
    msg.speed = 14725;
    msg.fuel = 116;
    msg.exec_state = 55;
    msg.plan_checksum = 63675U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.3542468050348384);
    msg.setSource(24186U);
    msg.setSourceEntity(65U);
    msg.setDestination(53838U);
    msg.setDestinationEntity(213U);
    msg.stime = 3155322664U;
    msg.latitude = 0.9675376927592045;
    msg.longitude = 0.11932299200094176;
    msg.altitude = 31372U;
    msg.depth = 63392U;
    msg.heading = 14272U;
    msg.speed = -8999;
    msg.fuel = 67;
    msg.exec_state = 25;
    msg.plan_checksum = 40830U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.3858470983879261);
    msg.setSource(21146U);
    msg.setSourceEntity(68U);
    msg.setDestination(43055U);
    msg.setDestinationEntity(154U);
    msg.req_id = 36209U;
    msg.comm_mean = 156U;
    msg.destination.assign("WJELYEJVTSOOXCSAKYWRJNEGFTBRJNNHUXJJMBAYPEUKSJERIMBMZVRYVCIIQHQXWLOJWRBLBGCZCZOHUKYMWVHQLQDNPNNAOBDPMFVPGGPDPFSEWKYQEWVYSPKHIDDFZUXXGPLXLOOKTQVGZCATUIFHRSDETGRZQNFTGLYKSUVWTARKYNWXGNIMDHQCYMUCSWHTABMISZBJPIKAXDBEKALLDGPFXMXV");
    msg.deadline = 0.8030142588801057;
    msg.range = 0.9786935387117373;
    msg.data_mode = 218U;
    IMC::AcousticLink tmp_msg_0;
    tmp_msg_0.peer.assign("UXFIMWYBOMQMPFIVRZXEXVUDIQHWOKRJSCFVIQCKDAKIHGYCGGQOTBJMGALWTCVENSQODUTRKUHYOSNRVFLHFRLSAUJZNMNYMBTDMZKOCZYPDYNMANCBCEQJDETFZYDAFKIKHFZZYFNPUXBHRTKQWATCUPXGJZLXDCXGEUWLOWSKXAGUMPBAESNYBVLLPHYLEIVSCJZS");
    tmp_msg_0.rssi = 0.2054190942035986;
    tmp_msg_0.integrity = 60199U;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("JKFQAIBBEYTAKKFIAAYKUDMDSZKWFXLQYTWKIPVTSWZSFYFMPYLLPGGSPWTOCMGIIKATIRDQTFSEHGZYGPIPLQVDRNXAPVMBXCREVRTXBNFNCELMZJHETXISBLICYTRDCLMFOEGXAOWZSAZZZSJKNUBAXLPOAVJOCVWHEMDWHUQRYFNUQJLJBYWBNNRRDXRSGWFDUZUUCVMHTDLGBCHPKOQHQXGMDOVGEECRUONHXSQEBN");
    const signed char tmp_msg_1[] = {-97, -83, 77, -10, -6, 19, 49, 40, -50, -76, 78, -95, -12, 19, 13, -119, 108, -16, 49, -102, -18, -100, 108, -80, -111, 7, -128, 33, -16, 110, -47, -31, -32, -66, 62, 95, 22, 68, 36, 91, 124, 125, 116, 60, -65, 77, 15, -53, -81, 61, -27, 43, 17, 120, -114, -127, 115, 62, -65, 41, 35, 23, 4, 28, -105, 22, -84, 98, 102, 86, 83, -108, -74, 5, 0, 66, -115, 29, 83, 89, -82, -21, 108, 78, 14, -46, 5, -64, -50, 86, -12, 20, 6, -121, 55, 16, -9, -119, 43, -117, -117, 0, -84, -80, 72, -78, 110, 42, 7, 69, 115, -85, -107, -116, 88, 122, 4, -63, -8, -90, 30, 120, 82, 71, -76, 108, -99, -88, 70, -4, 69, 39, -27, 0, -52, 93, -71, 25, -87, 9, -33, 68, 106, -28, -115, -63, 81, -75, 120, -12, -20};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.937378094053303);
    msg.setSource(11170U);
    msg.setSourceEntity(202U);
    msg.setDestination(23962U);
    msg.setDestinationEntity(5U);
    msg.req_id = 58335U;
    msg.comm_mean = 253U;
    msg.destination.assign("VKTHQNTQDNZVJKQARGPOIUASYINZGHJHNCWMASDLF");
    msg.deadline = 0.7701860716626566;
    msg.range = 0.37634539018947355;
    msg.data_mode = 43U;
    IMC::PopEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("WGJCPIBNCOTQCUGQZACFLOVARGDYWWSZDJEKSLOZKOVPAJFCLGSGTDDTJTMXULJFMWPPHFIGVPYTNTIKFBANNIMMQXBOKVNXD");
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("XRRXRBWIGGXEFKLYJLHYVW");
    const signed char tmp_msg_1[] = {91, -111, 79, 48, 37, 4, 53, 38, -111, 63, 74, 3, -19, 4, -120, -7, 59, 16, 124, -119, 71, 1, 122, -19, -49, 98, 116, -17, 122, 85, -8, 114, -81, -76, -42, -29, -51, -109, 45, -27, -125, 34, 96, -102, 99, -46, -9, 76, 33, 24, 64, -80, -57, -3, 24, -23, -69, 11, 2, 64, 92, -46, -109, 98, -113, 47, -93, -87, 88, -22, -81, -61, -111, -34, -93, -121, -58, -21, 94, 51, -69, -43, -4, -125, -117, 17, 115, -31, -94, -47, 2, -38, 78, -16, -23, 104, 14, 18, -21, -14, 30, 21, -89, -54, 2, 93, -14, -10, -27, 34, -16, 90, -5, 14, -53, -121, -46, 32, 60, -103, 52, -96, 59, 55, -111, -79, 114, -122, -70, -67, -39, 113, -53, -54, -111, 68, 19, 36, 43, -113, -96, 94, 79, -69, -42, 121, 70, -53, -98, 60, -64, -128, -82, -100, 120, 47, -64, 55, 63, -109, 105, 110, 71, -125, -113, 79, -33, -36, -23, 51, 2, -24, -45, 101, 53, -62, -62, 62, -37, 9, -122, 45, -85, 4, 8, -127, 66, -59, 69, -1, 50, 22, -36, 123, 17, -115, 9, -126, 26, -99, -45, 25, -5, -125, -69, -85, 55, -14, 56, -126, 53, 119, -49, 86, 33, 96, -72, -92, -86, -60, 91, 114, -81, -98, 120, -123, 39, -124, 95, 80, -66, -43, -125, -54, 26, 14, 27, -42, -96, -121, -74, 109};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.4685948074835833);
    msg.setSource(30742U);
    msg.setSourceEntity(102U);
    msg.setDestination(21176U);
    msg.setDestinationEntity(220U);
    msg.req_id = 60070U;
    msg.comm_mean = 137U;
    msg.destination.assign("NRITZLHQOXMRVJWPMNUNPZPYLYMIBAORKBXVRBFKNSGCQBPPUGGQUXVABDEYTIRKSWXSGEJJHMUD");
    msg.deadline = 0.304384420366262;
    msg.range = 0.47385628929521384;
    msg.data_mode = 244U;
    IMC::LedBrightness tmp_msg_0;
    tmp_msg_0.name.assign("SABRDMYOVPMYIZFEKCYBDCRZNGZTHTYKGAQRNPBDPIAIGPGGWXZCIMWIRCRDLUKUWQMFHQPEKV");
    tmp_msg_0.value = 26U;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("TIVWKBHLAXOGRZGZYIMXKJDOWNPFHUTYCRSJZAOLVWCBOAGTYRAPHRTQBHSUCMCZBMZZRBUETNGTBEQEZJQNVSDPOBARHSQXMHADNSWBTPNKQGMPZXQUHMJLKSPNLLCIVXZLEXJMEUOUVBYQMAKONYNVLKCGILHVVJYIKQCEEGUAWXCLJYSPDUEDUKRIHJXISNCWRDTITJGKWAPYWFXRRWOFPDFPQYMF");
    const signed char tmp_msg_1[] = {70, 108, -116, -58, -29, 119, 116, 94, -124, -68, -6, 58, 56, 20, -33, 75, 24, -80, -5, 105, 65, -42, -67, -29, 1, -24, 56, -90, 80, 23, -22, 118, 79, 57, 126, -85, 77, -19, 86, -82, 70, 5, -3, -122, -10, -79, 75, 85, -115, -18, -16, -93, -6, 125, -48, 93, -2, 57, -75, 78, -114, -111, -43, 118, 80, -53, -55, -123, -80, 101, 75, -126, -116, -121, -116, 88, 32, 56, 22, 123, 84, 18, -94, 105, -22, -108, 47, 109, 83, -50, -105, -77, 43, -28, -17, -58, 5, 63, 100, -27, -45, 23, -90, 103, -80, -99, 104, -114, -70, -59, 98, -7, -96, -36, 101, -56, 17, 98, 84, -119, -44, 68, 50, 76, 32, 111, -79, -34, 15, -32, 108, -16, -21, -51, 102, -97, 43, -51, 111, 59, 87, 97, 87, -93, -43, -15, -9, 51, 42, 109, 61, -64, 115};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.06798199089903201);
    msg.setSource(39130U);
    msg.setSourceEntity(223U);
    msg.setDestination(23155U);
    msg.setDestinationEntity(150U);
    msg.req_id = 60854U;
    msg.status = 83U;
    msg.range = 0.31665220399736316;
    msg.info.assign("HXYSEGGFDVMOMXQSANZNXZFYAUVIURGPFSBJXHIJIRLXWKRMNXUAKFHTGWLWXBKWG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.24893775531216444);
    msg.setSource(41592U);
    msg.setSourceEntity(243U);
    msg.setDestination(45694U);
    msg.setDestinationEntity(229U);
    msg.req_id = 50433U;
    msg.status = 99U;
    msg.range = 0.02573544614529555;
    msg.info.assign("PERHUXPQBINLGSTNTXINSWGMZJWMSEJXDJSIXKG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.3100646785323242);
    msg.setSource(57227U);
    msg.setSourceEntity(214U);
    msg.setDestination(35752U);
    msg.setDestinationEntity(83U);
    msg.req_id = 20873U;
    msg.status = 194U;
    msg.range = 0.6056253295821213;
    msg.info.assign("PBULVAAQNKUUNAMTWBAPYFRKRQQBMCKOIYSENPVWWCQHQFOITTZELQCDBHCNJXRNVSUCEIPVZWDXHLAPOQHKUFOWAHCKREJFLSHMZXCSKRNUGAQJFOUNIFKTUVGELXLBTFZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.3678562268025447);
    msg.setSource(57248U);
    msg.setSourceEntity(1U);
    msg.setDestination(47638U);
    msg.setDestinationEntity(77U);
    msg.req_id = 49695U;
    msg.destination.assign("WCOABTGLRWXASRPFIPHGKTVUTWDBGMEMIPHBNAOJUOPDXWFUFRCGOKQBEWOLJDVNHONFAYISNKJMGZAZLZIBPJUEUEMXCBUJQLSXVRMYVHZZEVGZGXYDCJQYXCVU");
    msg.timeout = 0.5341587457307528;
    msg.sms_text.assign("VRCDPTLWRDZBYJDNRDXHZQTXWZNLNHFCGUJICWWBIIJRPHCYGQIUHYZUPQNGOFUBXKVHTRWZNLDPYREYOHAJYOPTSARQHFVGKGBORMOAMOUDKKOXE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.20581555201160529);
    msg.setSource(16872U);
    msg.setSourceEntity(72U);
    msg.setDestination(32473U);
    msg.setDestinationEntity(89U);
    msg.req_id = 39965U;
    msg.destination.assign("ASBDYPNXMIDIKUTPUGADFQLWYLXZGKUHWAOFDRGGDTUMLZZOZJXJJSXCDCLBMTYMMXZCFHCZOAHMHZVLABBGVCTTSEHKEROAVQVYWLKNTEKQWUOVNSYIRECEBQJTPZIKRZKNPXYEIUNBSFVAKODFFAMMGLGDVPBXSPHGBOQAHSLRUSWAJJNWKXBZJJDHOCMJOIXBWWCTFPRORCLDKISFNWQNERNIUGGYJXSUIVYWPHFRCTIVHVERLETQNYQF");
    msg.timeout = 0.6044214623722468;
    msg.sms_text.assign("TQAUVSUSZAEOYDSKWUDJEXJSECMPPUBWEVOBYVJWCPGIKLBBOOPYLBPGPVDHXQQFCBFJGJJXRLCZTZWYSIHZMINIXBAVXZHZCGTNSSRFMOGQKKHWBKZYTFOBLLQJYTF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.8114297657984698);
    msg.setSource(1687U);
    msg.setSourceEntity(85U);
    msg.setDestination(16301U);
    msg.setDestinationEntity(134U);
    msg.req_id = 17925U;
    msg.destination.assign("KIACOJRZRORYUMNVZXGDYUAWKWDSOCNLRMOTDPCHBCOYTHPPQTXYMEIQSZIDZFCUFKNVAQVHOWNUMQKVYGTMKSEPRGJHVWKVIVRLOJMQNRYMDEWATXPSBGTKHPLFCDQF");
    msg.timeout = 0.2585155750438718;
    msg.sms_text.assign("SXRZNAMJOJHIZDAOVDWXDOGMWENJBGUAKRLCCBUFLIWADYTIZLAKKMQSZIPRFSFPQCTDYJFBBJOWPQUCMBKKRAHWBJMHNGDYXVMPQSHGQNSPHSBIQUYSOTOXACMPGALIZRTYLCJHKWBRWNSECZVGLSRETWVFUXWYTDOHLXTHMDKYCOQMFUIOXQNLTUBUYZTPJDJVUENZSFEXETFQDIRMERFVNGAPXJXRKGVLBFPCYVEVPVEOQNIIL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.3991948841565135);
    msg.setSource(45958U);
    msg.setSourceEntity(142U);
    msg.setDestination(10697U);
    msg.setDestinationEntity(184U);
    msg.req_id = 11941U;
    msg.status = 145U;
    msg.info.assign("GJEYWICTEBLZTYGNLVWSTEHHLLHLAWKFFATRVDKNNUOJLTAZJAEZDQSSNZFDOUHQJXXPMSIYCFPMMPHNBYDNRWVUHYTYEOZYGWNVOXDWGIALQXXOOPAHMLCSMXKIDCNBUIGCCQKOOVICTJBRKJWUWSKGBEJPGMFCQZVBQKVFPCSGMIWXPFAQO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.980101761476016);
    msg.setSource(21464U);
    msg.setSourceEntity(228U);
    msg.setDestination(64919U);
    msg.setDestinationEntity(75U);
    msg.req_id = 63433U;
    msg.status = 185U;
    msg.info.assign("PSPMCFRTZQEBWKQHTOTTZHKHMIILLCNXWCXAXWKNZPHCXAZHBPEFHMMCSQQWBGNGSLYDKARFLHIPETARRCKEVIGSSKLYXIVQYGSZNBLYBOWEEYARRSYT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.6648932282609694);
    msg.setSource(43612U);
    msg.setSourceEntity(131U);
    msg.setDestination(52852U);
    msg.setDestinationEntity(164U);
    msg.req_id = 57985U;
    msg.status = 165U;
    msg.info.assign("NTLOLZRBVXOMUKAAXQKXSBVBWJATBMGEOKPCPHLRCUUGRIUPGQURWNSARQJHZLAZUDPVXHKTXSEYCLBYHOXWMUZZOBFKRIXJTASXSNLGBODONIMKYPECSQURDCDIBJAEPGYFCYZTWWRYTGDGQUZFECNWYKVDJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.7888859905164414);
    msg.setSource(9174U);
    msg.setSourceEntity(218U);
    msg.setDestination(2054U);
    msg.setDestinationEntity(37U);
    msg.state = 99U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.4565890037481978);
    msg.setSource(14425U);
    msg.setSourceEntity(154U);
    msg.setDestination(6738U);
    msg.setDestinationEntity(201U);
    msg.state = 250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.8872844681144136);
    msg.setSource(56639U);
    msg.setSourceEntity(119U);
    msg.setDestination(16448U);
    msg.setDestinationEntity(183U);
    msg.state = 57U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.9235257849468815);
    msg.setSource(30192U);
    msg.setSourceEntity(133U);
    msg.setDestination(56419U);
    msg.setDestinationEntity(154U);
    msg.state = 230U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.9172078939784694);
    msg.setSource(51316U);
    msg.setSourceEntity(202U);
    msg.setDestination(59339U);
    msg.setDestinationEntity(243U);
    msg.state = 209U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.3176908133182609);
    msg.setSource(2670U);
    msg.setSourceEntity(133U);
    msg.setDestination(18669U);
    msg.setDestinationEntity(103U);
    msg.state = 82U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.16680874193053463);
    msg.setSource(23136U);
    msg.setSourceEntity(48U);
    msg.setDestination(11670U);
    msg.setDestinationEntity(248U);
    msg.req_id = 49351U;
    msg.destination.assign("RJXDEVJYTOBRMOCDKONO");
    msg.timeout = 0.2481285147816017;
    IMC::FollowReference tmp_msg_0;
    tmp_msg_0.control_src = 48603U;
    tmp_msg_0.control_ent = 205U;
    tmp_msg_0.timeout = 0.25547404145970676;
    tmp_msg_0.loiter_radius = 0.9066611555112587;
    tmp_msg_0.altitude_interval = 0.24835133753912553;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.20351912679284612);
    msg.setSource(10169U);
    msg.setSourceEntity(199U);
    msg.setDestination(20611U);
    msg.setDestinationEntity(202U);
    msg.req_id = 29348U;
    msg.destination.assign("JGKQVOOUUIOQDAWVBKAQZJSPJKILLRXJHWXKWULPRRBWBHNIJOBZSCDCHTLFDIUZHZFMCNMPVDWHYINKZFHZCTRVFOOEVPBRUKSDOLTMGQPWHVZLYAYXGCXNFVKKJTYHTNDEMBNHF");
    msg.timeout = 0.7118993344590497;
    IMC::CommRestriction tmp_msg_0;
    tmp_msg_0.restriction = 139U;
    tmp_msg_0.reason.assign("SUJNUNTHLJYES");
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.06703708181518164);
    msg.setSource(10580U);
    msg.setSourceEntity(50U);
    msg.setDestination(49201U);
    msg.setDestinationEntity(217U);
    msg.req_id = 55408U;
    msg.destination.assign("ZPOYRTQGIJHWBHBTCOGTXEDRUUEHSITXOMEQNXYHKPVKPXZGBXGAJUTBYPNOOUFDJWCPRNDNVABXXDIVIJPA");
    msg.timeout = 0.20618166064415033;
    IMC::LoggingControl tmp_msg_0;
    tmp_msg_0.op = 119U;
    tmp_msg_0.name.assign("UNMXTDESBOCVMJDVKEIPVOAOSHJICXGPOMXZRLDNSNEKWHLPQDAGHEQUEPCWUYFLODYTOKYZWFFSASNQTZSWEWXBNCLNIKIKJIFXLQSTGFWUCMHJLBPVAPKNRAGDJUGCSSRZZPKI");
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.343204892413673);
    msg.setSource(37317U);
    msg.setSourceEntity(217U);
    msg.setDestination(23587U);
    msg.setDestinationEntity(36U);
    msg.req_id = 47602U;
    msg.status = 150U;
    msg.info.assign("FPTQBMEJLTEPWWLAUBEWQMGEBXLLPRKAFDUMLDSRYXGHRAFJGDVAVEDDCVAKHXFEOUPCFLOVIRU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.8987900362831125);
    msg.setSource(8075U);
    msg.setSourceEntity(157U);
    msg.setDestination(2110U);
    msg.setDestinationEntity(41U);
    msg.req_id = 46173U;
    msg.status = 18U;
    msg.info.assign("LYRXKEEIFHZKYEXVDFNUVPWYYGGGAPFBWDCHPBYTHSHITKJBSCHLAWZRZWOSJURWUYZATZDXEHDHNHEGAMNCQKSDROULGEQZX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.2385525898757842);
    msg.setSource(18619U);
    msg.setSourceEntity(250U);
    msg.setDestination(40478U);
    msg.setDestinationEntity(3U);
    msg.req_id = 28964U;
    msg.status = 131U;
    msg.info.assign("UBDCCSMXLXELBKMCCXUVMSQZAZNSKHEQQRBCYTEFEMZVACEHCOJNBZXGEYWDFWGWGJJBHNDXBSRZGBYWSTPDYOUBMYIVSMIMAKBKZAALULGJXFJWTKJLDDAIYOJIKVPXZPFZKROFDVQKQQDOTHOIGERSRTAAQPGTIKQZRQRIHYXIGGAPFDZNOFYWNJYHPUPBPYOPXVQKJXHRCGFVVTIUJSWNUCNECLLRNFNISLOAWNR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.8271974331931701);
    msg.setSource(29644U);
    msg.setSourceEntity(159U);
    msg.setDestination(39875U);
    msg.setDestinationEntity(60U);
    msg.name.assign("UCUOKHUMGKBEGZGEYKEHDXMJEBNKVMFIXSRCOVIWMJUHTNWBQFECNACVQTESITUPXVYUBEFARLHLSQZRILIDTNYHLZGMJONMHSYAPPURZMKCPAUHCBSJFKORQP");
    msg.report_time = 0.9674615866657813;
    msg.medium = 115U;
    msg.lat = 0.421473279343196;
    msg.lon = 0.9680630775785122;
    msg.depth = 0.22811496471799442;
    msg.alt = 0.5184973344285578;
    msg.sog = 0.2643214914561639;
    msg.cog = 0.7365327208379625;
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("GLNWPEQMAPELPNJLUBFMXSIVCVEHDHWNHQOMAMGRTLHWMTBIVCEFSXBQMQTKTZCLRLDWETNLZKGUTYZPCIQEANXXRBIEFFCOBCDFNKJKPHJJGCHMSQATAWDSHAZOGJTUZQKSTSNUPHCDWRBALRRNYGUZYRJJMIVDQWOXKFJAPMCSFVVGPYWFDISYBYCKO");
    tmp_msg_0.feature_type = 250U;
    tmp_msg_0.rgb_red = 15U;
    tmp_msg_0.rgb_green = 116U;
    tmp_msg_0.rgb_blue = 181U;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.9848562487440701);
    msg.setSource(25799U);
    msg.setSourceEntity(238U);
    msg.setDestination(20468U);
    msg.setDestinationEntity(2U);
    msg.name.assign("OZWDADSJZVUXUHEVQJBPDQVF");
    msg.report_time = 0.7449705916010582;
    msg.medium = 30U;
    msg.lat = 0.9204177822433981;
    msg.lon = 0.4927101580203571;
    msg.depth = 0.7730967159298349;
    msg.alt = 0.300926795007727;
    msg.sog = 0.707489320538651;
    msg.cog = 0.9370907141329119;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.7367389656766962);
    msg.setSource(54924U);
    msg.setSourceEntity(139U);
    msg.setDestination(36504U);
    msg.setDestinationEntity(26U);
    msg.name.assign("VQVZOYDEBYOKIRQNOYXBISPZWYKSJFXPDPMBNSALZTKEWEBJKONODAVFACSDBQPBZMEEJOQKRYIWEGBHZZFNVIAYTKCHARQC");
    msg.report_time = 0.6115010183983651;
    msg.medium = 94U;
    msg.lat = 0.5449859441686838;
    msg.lon = 0.24227106604969784;
    msg.depth = 0.3158665248599938;
    msg.alt = 0.9222503276498519;
    msg.sog = 0.74092704655169;
    msg.cog = 0.258538869902075;
    IMC::HistoricEvent tmp_msg_0;
    tmp_msg_0.text.assign("AMKBVEJLYTYZQCTZUCMNDIRXRUYIEFWHUQFNHXQMZPBHACHEVCZJTSQYYKAWABRUWJFLBTLKBFVCSHSNFGWBZIXRTFLRSTDYKPPYMKNCMSIAJTEIQTOAIDPIUPHGNJHZKOGKNFGDNZNFLXQRVLAPVBCEJOVKOBPVXCUFRFODMTWSYHAOGUMDWXMHXZTGOQSZMVWQEZYXJDEIMDDPKCRONGSIORBS");
    tmp_msg_0.type = 186U;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.9729766497287627);
    msg.setSource(23362U);
    msg.setSourceEntity(35U);
    msg.setDestination(34316U);
    msg.setDestinationEntity(120U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.2756109436922264);
    msg.setSource(6166U);
    msg.setSourceEntity(140U);
    msg.setDestination(39850U);
    msg.setDestinationEntity(65U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.748892543806799);
    msg.setSource(62179U);
    msg.setSourceEntity(178U);
    msg.setDestination(17306U);
    msg.setDestinationEntity(240U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.8268247530705699);
    msg.setSource(10147U);
    msg.setSourceEntity(81U);
    msg.setDestination(12542U);
    msg.setDestinationEntity(187U);
    msg.plan_id.assign("WWZAXQUDAQZOMBKSCVENOCIDGQZPHLZCPRGANMJVVOENTOMBTSFIRCVYTIRUIZAGPEJTHRDBKRURCMJPVTBCSYGXKOXHKAXKSGCDMPNYZGDFNJHJNJYFNYOIEWYVLMUHGHZNTBPFIWJJKFNKQSLTWFORFRBQXGHVVUUDSODFEJEMDSNIUAELDSAYLULSMHIYISQZMFMIAJRLLGTAUPTQXPBWLOFLPQBCWQDEXBHQKWUTKVWYXZOAPERWEHGZ");
    msg.description.assign("MGGRHGYDJKZHPIZAOYSTQWBQPJSAYMSRLARXKJSGPERCTLCWNZQOKSMRPJSHWLEGKUGRIBKWCSECPQFZDWTUVLTXJHKHOAVFUSVEOOGGFQIAZMHYWNZOVBIKLZAQGGNFEJZXFWYDIYRZXBPJREVMNUWBBRENADXCVPEFTFTVHLLQMPVLJCKUAIDTPTITFISFBNOPHVDOVDUXFXCYJLDCAUCTEHXMAREINUDNMUMO");
    msg.vnamespace.assign("XKUBFHAILPZTTWWQBEXVNQDCWYTGVKHAZTUCRVFGKAHPOSZLLAZBXDUESFVMJRIQGJPGBMOJZEHVNXCXRMRGYRBHUPYDJMPIZOYSGMDWGMVSSKDUTYCGEXHQDRZNGJSNO");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("JSXMNZNXEVTCFGFCGZHYCGXPJKPRXYDOLJFFKFMFESWRCAIEBIUNTKUKISOHWAKXTHWKWOHBWDQUMBBCPEEUTEINJTMQSWHKGQKHAZQWAEGWUJNNVPIHLFRLKEDYLMZXEOQTURYXHBQSFDYZMRCMZIVYTWZAOSUIJCSVTBCHLPVMZBBVDJBRMQCNESBKGORLAVLUZHIJ");
    tmp_msg_0.value.assign("SBOPFWTODDBNJTQGOZFSGKCZRTHXSHYGQEAJBXSIMPFRSEWIRVIBVOCNKEZWYNZXLGVHTVQYKYNDFGFQSPWUMCIOZGNLEWSQXHXGRQURWAVHTAQIXYNGUBLFYMDROIUOMNRAHKWCPPOPZUDYWLDMALEQVMVIJEEVHJPFDYCCWECFHJPEGXUMXYZKBDDMJPNYWRGIOQSAAHBKHLKKUAQLSAZRKVCVIBJRAMTBL");
    tmp_msg_0.type = 40U;
    tmp_msg_0.access = 213U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("OHQZJHCJBRABIXUTVJLQVENQHDOIWDJBKYYUWBVFCMBDAOSRIGJPRURTJDUNOCZVHHKIGFSQNLGNSXKNHQTEJPAEBTAFWXXOGIYWAPDKQHUMKHLYMVCMCOFSZBZDNITGPOGICUVZWDMROOURTFAKQXWFPIXBZKLXDQDCCSYZIRBETRYBGPTZEKWMJKVYRZPQEHSJUPGXXSKUQRSLVMWAYDGYIELTCSEPMLFENM");
    IMC::PlanTransition tmp_msg_1;
    tmp_msg_1.source_man.assign("TDFVCZMLBMVJFAPDMWFGMJRGSBLOVUHYXQRSSAXXPZJKFTONNQDEVSDXASPQETZUQWDQGXCREACLVUETAYGOWAIZFYDNBDTBVIKXPRYKYVJBGSTKB");
    tmp_msg_1.dest_man.assign("GWOFLGCCFBYBKPGUDPAUDORZHGAPMTLYXTAZOAKDWLRGPWPXSFZLIGFRRMSOFFHVSHRWIDLVYFSSVFSIHBCENZECDCHHTJQARWDYLATBIBHRHTZQLTEYPYPJBEVIBVZBSUGJDQUXQEEWTUKOBQAVUEJFMQQC");
    tmp_msg_1.conditions.assign("SFXYIJTXFZJPJMPVLBQQYYVZZCWHFDDGDGTXKTZWBCQWLEMRZNBRCRGTHGSUHXJLVOYLUEUTYDULTTWFVZBEQRDENDCIJPJKPFIEXHDLUKBCKKQSMQYTYWANNZFOGIDYJXSZPBCUEMWSOMSXLGPERQNLNAOINCOI");
    IMC::TransmissionStatus tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.req_id = 12610U;
    tmp_tmp_msg_1_0.status = 116U;
    tmp_tmp_msg_1_0.range = 0.5847609651650211;
    tmp_tmp_msg_1_0.info.assign("YXHHTHYZSBTYNUYKHJLOQDJUVLNPCWBTYXCOUQOHPRKIQLDJDIM");
    tmp_msg_1.actions.push_back(tmp_tmp_msg_1_0);
    msg.transitions.push_back(tmp_msg_1);
    IMC::LblConfig tmp_msg_2;
    tmp_msg_2.op = 207U;
    msg.start_actions.push_back(tmp_msg_2);
    IMC::VehicleFormationParticipant tmp_msg_3;
    tmp_msg_3.vid = 8620U;
    tmp_msg_3.off_x = 0.7955870762134987;
    tmp_msg_3.off_y = 0.7414317663496265;
    tmp_msg_3.off_z = 0.09585478451745244;
    msg.end_actions.push_back(tmp_msg_3);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.9635661351543853);
    msg.setSource(45382U);
    msg.setSourceEntity(217U);
    msg.setDestination(57386U);
    msg.setDestinationEntity(239U);
    msg.plan_id.assign("TSJBNGQUTCEYRHDGLCKPKPTPJIFTQJABXDIOOSOEQZGXKFUOUMKRKYELAFGUFITVQJZWXDRMONVGPUFTHXRRTIDEWSQEFOKYTMVWCJQZIAVQDZZBSLBIGMNWWYYVGEHFHDBESWSUUIKCIJAERESYGIFOTLOSJAKHHSHLSMPANDCACYNUXMWYOQLVWJBPMVTLYHBKBGZXNDLQXXPMZIQWPYXVCAKW");
    msg.description.assign("VKXRVLJWJLCLXQYLTMCJIKJLCOOXKFZXWOPACUHLORWNPTKDEYHEFGQVARLSJPFPGBPVFRQIOABEVJSXTBT");
    msg.vnamespace.assign("XXLLNTIJBQQHVKVMXOJIXPZJWHSIADPWUHJTBDSYXZYNGSTMFQUOZDRRRKAFRAKQJBFVABLDPCQPGFSDXBBMWONUZAWEPXCCBGHFZHMNKIRQFPSCEELYKAOHGWJNBEUZNOLYRFLKDVQUWHIMVMUXJXMFUEWYNEWOSGGOBTEODXIIFLDGSTAE");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("KCJXXLJWQFHUYWXJOEQCYPHMFCRDOSZNYCYUNUDGPQWNLRRVJEKUZDXSLIWGXSWUVKPQAOHBLIXWSGXRUHMRBWKJTFXVHLBKGDYCHZMQIIZIDDFTLAQHNHWTCCJYTZZJNESRLSWEMTBIEOPBVBPDFSEACKPADDMLIXZSOMRZPEFOBI");
    tmp_msg_0.value.assign("OAUBRKDARTWSHCXCNOSATYQFLSLVOYZSVCKILKYPYUADRFPSEYAMIKPDJQCLZNPHMOZSJDZCPNEAUPIZDLJBTFGHWFWGUHPTHSKVWIQMSAEOAXMNZCOSYXOMMKKXCDQRJWCRRUNLYYNGIVLEBTDRXBSHEUEYPHHIZBNMFJMAUFTECVUQEHJBLRGGDIZTGWKZLXVYGQTJJBOOFXBBVCXMFWPWUGJBPVWKKUFWQZIVQMIADRNR");
    tmp_msg_0.type = 60U;
    tmp_msg_0.access = 178U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("CZTCZIRNKOBSQPEKZKUQVIYHCKFIRYXWSHFNFAXIWKMBBSFRNAEDYGILWSGBRJFIJL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.5871464549128549);
    msg.setSource(52133U);
    msg.setSourceEntity(202U);
    msg.setDestination(63253U);
    msg.setDestinationEntity(188U);
    msg.plan_id.assign("TOHFNIUDNZVSSJUQVMVXOZVXFILEA");
    msg.description.assign("TUHAJCMHNBPBWUDBGLXYTZODAVVWHNOQQWFJYWEZRCCRUFWZDRCCUMTTCLPLKCOGIWEHTJHIHIWIYINRJRJGLXQKGMWKJXNSZCVLULUPKWLLZGARVOKBZVIMEFDGFVDBDSRGIEXPWJKYSAXOSJYZVQVRYSMATDDTTPXPKGETPGYOMQKJPQAVNMXXEMNUEKSXZGMRZBIEMSBQFEFRBBYADNUZNXDQ");
    msg.vnamespace.assign("TTHMBTOYOCQUJRTVNURQZTTWVGWXRZTMSWRVQFEEYPGVGPKBWJVPWAJXAIJSRKSCSRDFMIIFIFXCQBUHIFCEMSPXPOQLOMKPLKDVDEDFGHYGXHNMSCZULFCCKJCFUZEQMXHUJHAWXTSNZZKWAUGSXHYRLQQTBNYZQEAEYBNKMPFTOMIUREUBDRBRPKOIWVNVJYDVOSQAWKYNOLNAGDEFBVZYPHJOILDOGSDAUYPHLEC");
    msg.start_man_id.assign("MLBICVELQCXPYMLJMURNEPKAPWAJQZYQCSAXYAMCSQCTPOZBVYNSTXWVCQHBAEMWXWIHBAZOGIWNPLEKGTAYQZAUTJMFYRTVUGIRMNWRUOBCBKFQNOADXNEJQSLMLEZQPLGPTVMKUIHFEHWQOZWDJCUYNDIIEBBIJSJFTKFRTZVXGFNTSSKICKPHNWVODOVBFZMUGECAYEHVZGLHGUBKFYDJLRSRFHUFJPLKD");
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("QFIEPWKAYWDGOWUDVXAHUVGMGSUJNDFHWPRKLIXRNQPHCBLYGTFSLCCRDYBDHUALCYRYHVRBORTPQOZKMOZZKOISUUKITVQZLJECFCXJYUDEBBTFBEKJNXFACDUSSJSNHXLQYGIONFYVOIBHWJWMXXTNEPWSQEZJMFVGLUERTGKSGOPYCVISPWXKMFNIJCDMZABPVAIMRRZZAHVXWKMOZQVAHEHCU");
    IMC::FollowPath tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 47956U;
    tmp_tmp_msg_0_0.lat = 0.12401333434649975;
    tmp_tmp_msg_0_0.lon = 0.8301886662678164;
    tmp_tmp_msg_0_0.z = 0.7496380363537137;
    tmp_tmp_msg_0_0.z_units = 13U;
    tmp_tmp_msg_0_0.speed = 0.555696834666363;
    tmp_tmp_msg_0_0.speed_units = 175U;
    IMC::PathPoint tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.x = 0.20507416766329978;
    tmp_tmp_tmp_msg_0_0_0.y = 0.6119398346726169;
    tmp_tmp_tmp_msg_0_0_0.z = 0.25350309325659814;
    tmp_tmp_msg_0_0.points.push_back(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.custom.assign("JEYRURZGLHBLCQNEIICCUZFQLJERUNRSCDCNDHMWMUVMJTPTT");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::UbxSvIn tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.meanx = 0.9564237864700232;
    tmp_tmp_msg_0_1.meany = 0.8916312647894221;
    tmp_tmp_msg_0_1.meanz = 0.7301963246035245;
    tmp_tmp_msg_0_1.dur = 3234573459U;
    tmp_tmp_msg_0_1.meanacc = 0.08055877758283869;
    tmp_tmp_msg_0_1.obs = 225943433U;
    tmp_tmp_msg_0_1.valid = 64U;
    tmp_tmp_msg_0_1.active = 66U;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    msg.maneuvers.push_back(tmp_msg_0);
    IMC::CameraZoom tmp_msg_1;
    tmp_msg_1.id = 81U;
    tmp_msg_1.zoom = 77U;
    tmp_msg_1.action = 202U;
    msg.start_actions.push_back(tmp_msg_1);
    IMC::CloseSession tmp_msg_2;
    tmp_msg_2.sessid = 3621126421U;
    msg.end_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.9988926471078894);
    msg.setSource(62945U);
    msg.setSourceEntity(120U);
    msg.setDestination(42168U);
    msg.setDestinationEntity(166U);
    msg.maneuver_id.assign("WSNFZXOZDGMXDVMIXCKVXGSFQLQGITWDDSMUDMROJLGCJPYWNSIPGIQUXEEKSZMGITJANBVVBNJUUTHUYOCISGQOPYAHWJQFKCNZMJXVWARQZUODHHAPPEBVOBZPLYKAWARFUUBYCFKEYHKUBZODJBZNWFXCSGBEERTZRRNTKNOP");
    IMC::StationKeeping tmp_msg_0;
    tmp_msg_0.lat = 0.01190530019896019;
    tmp_msg_0.lon = 0.03452715780951132;
    tmp_msg_0.z = 0.6866198615689533;
    tmp_msg_0.z_units = 114U;
    tmp_msg_0.radius = 0.18875088253020733;
    tmp_msg_0.duration = 46784U;
    tmp_msg_0.speed = 0.455259561644092;
    tmp_msg_0.speed_units = 252U;
    tmp_msg_0.custom.assign("NQFGXSMFTASITINQQQZDVTOMHYSNHUCFPBWAMXGYOQDALRQIAZMRLSSYUSKGHKGFUDLHPXHUJRMURAVIYKARJWBZWRQJNNOGYLEYRZTLNPCOYZBVYSAJPQDZBLLIJXA");
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.10772186486435276);
    msg.setSource(26491U);
    msg.setSourceEntity(98U);
    msg.setDestination(43921U);
    msg.setDestinationEntity(233U);
    msg.maneuver_id.assign("HBHOPZACQQSVJLUFSUVJXLUVKUAPDFIDIVMYHKMPHCXYKSPASEQVUKMNJERIEETPWGCZGDXSJVCMBEYMOWRTQLAELJXNSRDVUECKGHZHISGQTJQUGWPVOBODCSKIMPZNRMTNGHARJDZBGFLYLRRWGWXWTPWWHOETZMAYFYNQODFAEKAMJCYZTDETQKYORWSZXYHUVZLSOITFDIV");
    IMC::Land tmp_msg_0;
    tmp_msg_0.lat = 0.6272513255663289;
    tmp_msg_0.lon = 0.21062164755546564;
    tmp_msg_0.z = 0.061939573427385985;
    tmp_msg_0.z_units = 144U;
    tmp_msg_0.speed = 0.8878798157153664;
    tmp_msg_0.speed_units = 181U;
    tmp_msg_0.abort_z = 0.024030012622207608;
    tmp_msg_0.bearing = 0.6578316503718076;
    tmp_msg_0.glide_slope = 135U;
    tmp_msg_0.glide_slope_alt = 0.7413810175222388;
    tmp_msg_0.custom.assign("CDBQLOFDMJPFNPQDFJOQWBMEQYZZWR");
    msg.data.set(tmp_msg_0);
    IMC::HistoricDataQuery tmp_msg_1;
    tmp_msg_1.req_id = 42392U;
    tmp_msg_1.type = 29U;
    tmp_msg_1.max_size = 28880U;
    IMC::HistoricData tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.base_lat = 0.051998931901738654;
    tmp_tmp_msg_1_0.base_lon = 0.043177329151204424;
    tmp_tmp_msg_1_0.base_time = 0.2328346011740703;
    tmp_msg_1.data.set(tmp_tmp_msg_1_0);
    msg.end_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.9970717943867058);
    msg.setSource(45112U);
    msg.setSourceEntity(35U);
    msg.setDestination(58004U);
    msg.setDestinationEntity(89U);
    msg.maneuver_id.assign("AEWYTTJGPFLRMCDKHJYUJBDZEBXSSVPOCGWHIHMVHZNIIODQMDDECAYKAKUJIJDUGCAVAYRTRFJJUUOQGNPFSGHOZZUIHOREXFEXDQSHXQFDDUXTKLTIEHLIQSNKKWYNQBTVYPZERSLTQCLKSZARPOZNWMIKJOPFPSNOWKXYKWP");
    IMC::RowsCoverage tmp_msg_0;
    tmp_msg_0.lat = 0.7016119438590229;
    tmp_msg_0.lon = 0.7890280299187405;
    tmp_msg_0.z = 0.05511745353928055;
    tmp_msg_0.z_units = 230U;
    tmp_msg_0.speed = 0.027139067233249103;
    tmp_msg_0.speed_units = 92U;
    tmp_msg_0.bearing = 0.5569244821090362;
    tmp_msg_0.cross_angle = 0.787800980379999;
    tmp_msg_0.width = 0.4706546845614634;
    tmp_msg_0.length = 0.814886700171152;
    tmp_msg_0.coff = 152U;
    tmp_msg_0.angaperture = 0.05554610137803029;
    tmp_msg_0.range = 51644U;
    tmp_msg_0.overlap = 201U;
    tmp_msg_0.flags = 168U;
    tmp_msg_0.custom.assign("ZXXRSQUCCNDADHBPMMWVOCFWKKTURWIPVTFVEMUXBBASZEJNAKZCXMRASSQPRZYSOFOYUHVPJNBTWIDVEUBNKZGEJRXTUPBEGEIXIXDCOQFZC");
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.5343908626684507);
    msg.setSource(47859U);
    msg.setSourceEntity(244U);
    msg.setDestination(19087U);
    msg.setDestinationEntity(163U);
    msg.source_man.assign("XWTBJCFCRCAUVJXXWATFMNATFKLPVQKLLJUWVKTLSYGEEWCKXHGJRRYYGKOIVEVPOCFHRJFBNSYNQNHQWTMEEYHGLYQJIMZTWDJQVUHOAQHYRZDQHAYZABWJQZDDPNBOXLZJSAMXNDDWYKFERCAKKLIUVPOGZAMORBYUOBRTHDPDGMUPASGNZBLOGNXEF");
    msg.dest_man.assign("NGFSPXIHGQCNTAUNMCAQJSRBRZHIJKIOCMZSMJHQQKXPHH");
    msg.conditions.assign("RMJRFXPBWGMNHTLFCCEKYRTBDAHRPCELYYJFDBEHASRDCOTOZWCNOKCNXPKEMY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.27961342499225406);
    msg.setSource(46703U);
    msg.setSourceEntity(176U);
    msg.setDestination(8902U);
    msg.setDestinationEntity(110U);
    msg.source_man.assign("CLZMIGKFTDMQHQEJNYKIJUZDFISBWUOPBMYGQIGCSBFTQTUZPNPW");
    msg.dest_man.assign("OSCGOLZPXARZSIHRIHLEDXPSOIPQNVVVYKNRFCRBELFBQTEIDTUKMPZPAGUTZNUXDIBNLAEKTISCYVSYEMQKWCFMBQA");
    msg.conditions.assign("ORNSYFAKWBHLIJQUPY");
    IMC::TCPStatus tmp_msg_0;
    tmp_msg_0.req_id = 44069U;
    tmp_msg_0.status = 3U;
    tmp_msg_0.info.assign("BSMQPRAUUZPTWQDMCAPXIHBRQWWOMANTPDITSAYHYVNMGHGLGLXAZKRUWGKBQXRKXUVLBHISATDOIITGZCIJJCREFKRQBLXEJZFBWDJOMLYBZNGPCO");
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.8467700014863572);
    msg.setSource(12088U);
    msg.setSourceEntity(105U);
    msg.setDestination(8194U);
    msg.setDestinationEntity(254U);
    msg.source_man.assign("FHVEHDMXXLBZDTPXOWISJFHYALJVYWAWKUQREGFFZJXWPLTCTNGTSEBWMZUYTBTQU");
    msg.dest_man.assign("MFXHUQZXKONHTVBNRARPABIGEWWVTAQUJBMZPQKVXSAJDHIIINBCBJIGSWYUJTSHGRKOOHCCDSLKEQQOLSWOOZQRZFYIQVXCWDKCFLSHNVAXJQADWMDXDULHRAOMJETOVUBCEYNLTWFXTZGHWNJIBYBBALCLREFEPOMNGUTJTNFZQDRVKEGGVCMIFYUFIPRDMSFZHSMPFLLWRPPECXRATUVP");
    msg.conditions.assign("XFWZQHUJXCYDRGGXTQLQXWMOKEKSUDOEJESOZZWIDEQUILXB");
    IMC::GetParametersXml tmp_msg_0;
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.963850305511057);
    msg.setSource(13631U);
    msg.setSourceEntity(130U);
    msg.setDestination(12417U);
    msg.setDestinationEntity(112U);
    msg.command = 186U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("NUJTBAXNHIUYCHUPZDOAQVXEXZOKOBFFNPOPKUKLJISBOBWOWGRYPEWRZCTXKAULW");
    tmp_msg_0.description.assign("FIFGMEXHNIXYCRLOVYXKYXEW");
    tmp_msg_0.vnamespace.assign("IELWKRBSGCTTSJHUYJISYSQGRAVTFRDDDASDJGEMXJVMUVZWMBXRSBDJWABHESZFOMGFYUOKOBHNVVFWZCXJDPYETLEQOWHUHYCNVDFPTKQRQJQDBSJSGMWNZUYRMKALIOIDEACADAVXGQWIFQMPOFLYKWMXKFLIXZCPGVHCZHNGGECKBPQRTNTHEXJFOLZYSXRPBKNPOUIPNBNAXUUYLCEFVKLVMLKJZHCPBTQURZWANCUHOE");
    tmp_msg_0.start_man_id.assign("RAWHWTGYWYIBFVDUQOKGJOURARXPQYFSUEGJVPVKGVCHCMHCDHZMNMSSVMGZAOISCZNGRXFYNDITNLCPXZZHOBLSEWBQTKXAVZQDNXLQMPBNCEQZIORICUUMNEXOXROOKJAFMDPZAIKWHTKVTJLBQWVXLAJGTDZUSANGLKFXVAJVXIRUWFEGCYPBQEPSLKPQWWYHUJBELUMPCTMJSDFEFLWYMPFLTKYGNCTQOBEJHRH");
    IMC::PlanManeuver tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.maneuver_id.assign("YXMNTKTDHOSHIXPYVZHEDFXCHSNZUTNNEHTQPLXLOCDBIRCBMSJVKGFWMSCQLFGMAPBDZDNPANPGDSSRTIRKMSTLHYQ");
    IMC::Sample tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.timeout = 24331U;
    tmp_tmp_tmp_msg_0_0_0.lat = 0.7489190887808634;
    tmp_tmp_tmp_msg_0_0_0.lon = 0.6607938477668468;
    tmp_tmp_tmp_msg_0_0_0.z = 0.2784668987578839;
    tmp_tmp_tmp_msg_0_0_0.z_units = 49U;
    tmp_tmp_tmp_msg_0_0_0.speed = 0.5053559530053167;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 123U;
    tmp_tmp_tmp_msg_0_0_0.syringe0 = 212U;
    tmp_tmp_tmp_msg_0_0_0.syringe1 = 227U;
    tmp_tmp_tmp_msg_0_0_0.syringe2 = 41U;
    tmp_tmp_tmp_msg_0_0_0.custom.assign("BOPLJUVGRHUOSBKPBDWLXJULWLAVTZRISURLYZIVVJOMTJYXPGVBSITTEFEZQQYNUAHSPETJDHGXWADEAQCJMMEMTKUKAFHPBKNBCIIGYDXQXCZPQAFSCBVJGKSQOUBMTKCEDBLGEZORWDJHGRDPWZWRAZHIRNXSQZJIERUNHRAYCHLSDSNHKYYGZVWUVWEMJGOUYMXNY");
    tmp_tmp_msg_0_0.data.set(tmp_tmp_tmp_msg_0_0_0);
    IMC::IridiumReport tmp_tmp_tmp_msg_0_0_1;
    tmp_tmp_tmp_msg_0_0_1.frequency = 597245229U;
    tmp_tmp_tmp_msg_0_0_1.info.assign("FWVIDAFWRXPYHEPPZHAMSFHUOXMGSVOUNXDNDZAGTUQAXAWPJEAQNYQCHKGIEVSWMDWNPTKYLUKPSXIDUFVFTZSRBEFRRLJWVTLOKBYOJIRPOZZENUIXBKC");
    tmp_tmp_msg_0_0.start_actions.push_back(tmp_tmp_tmp_msg_0_0_1);
    IMC::Goto tmp_tmp_tmp_msg_0_0_2;
    tmp_tmp_tmp_msg_0_0_2.timeout = 23866U;
    tmp_tmp_tmp_msg_0_0_2.lat = 0.9275893973835111;
    tmp_tmp_tmp_msg_0_0_2.lon = 0.8158320258141448;
    tmp_tmp_tmp_msg_0_0_2.z = 0.148516777039015;
    tmp_tmp_tmp_msg_0_0_2.z_units = 120U;
    tmp_tmp_tmp_msg_0_0_2.speed = 0.5600718352115972;
    tmp_tmp_tmp_msg_0_0_2.speed_units = 57U;
    tmp_tmp_tmp_msg_0_0_2.roll = 0.5885678309327634;
    tmp_tmp_tmp_msg_0_0_2.pitch = 0.009218957118745541;
    tmp_tmp_tmp_msg_0_0_2.yaw = 0.5884039612242439;
    tmp_tmp_tmp_msg_0_0_2.custom.assign("UJZPMVFBNKFHAUDEMOZTOMEWGDGSJMGGCEBWLAPYTBRGDFABWWHBGPQHSDXXBMSKZYDURVYJPPAUWJVTCDABENJFNDOIMMIRONFSTMNEPSFYUTXWXTQBCKESMFYTJCVBEQHRKJCRLDAUZCZQUFKUTIGJYRLKOYIKPILQYWPADLVNUHOGOHJJLKEAHX");
    tmp_tmp_msg_0_0.end_actions.push_back(tmp_tmp_tmp_msg_0_0_2);
    tmp_msg_0.maneuvers.push_back(tmp_tmp_msg_0_0);
    IMC::PlanTransition tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.source_man.assign("TQKDFHUPXSIRKSYTVHLJOAEVEGCWAPLXCHPOTCUQONOVJTWKDLYQPHZFROIUBAPIMEEJZLZZKTEXVBDSBGLXSJYNJPIUYIBTMONDRTWLHYVCKBJPYNGABIJMPLUQSFPIZHCWGNAFKWFSTQFGKUXYBDHRMM");
    tmp_tmp_msg_0_1.dest_man.assign("OOOSFWBUIYLQUIZBDFEQTOPDQKDKBDPGLKYEPHULH");
    tmp_tmp_msg_0_1.conditions.assign("ZECNJIQJWCRPZQHZCGHIERVSVXFTSZDVGKAIPLNKDFCOVZYXCBONJIKKPEIEHL");
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_1);
    IMC::FormState tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.possimerr = 0.5394277791955814;
    tmp_tmp_msg_0_2.converg = 0.1505132435471378;
    tmp_tmp_msg_0_2.turbulence = 0.22204503432226852;
    tmp_tmp_msg_0_2.possimmon = 78U;
    tmp_tmp_msg_0_2.commmon = 155U;
    tmp_tmp_msg_0_2.convergmon = 231U;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_2);
    IMC::GpioStateSet tmp_tmp_msg_0_3;
    tmp_tmp_msg_0_3.name.assign("XWEJNKVPNIODQLQWYLUGEBQKIPQUBGPRCMIJQJNDPQVOPRTBHNEKDWLGXDIKOAUNXMQRFDCCWJYTYWDWXHJFFGRZHABBXYAPNKAJUXMRTZZBMTHFRGHXJZHEUTMHRVUVZISTVGOOZSYCDGIAKYSAVQSCONWEJDMCOEHSKSOFXAUBFHVGSFMEIBTMNPCOTOVTWKFFNKJQQUDNAGIYPXWGBYKWZEYSIJM");
    tmp_tmp_msg_0_3.value = 152U;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_3);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.12470264386463958);
    msg.setSource(55564U);
    msg.setSourceEntity(116U);
    msg.setDestination(64046U);
    msg.setDestinationEntity(52U);
    msg.command = 61U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("JRDPLNIPKKYFVUQECBPGAPMJDIXHGSHUKJWVZQXRGLJOKZUAJDXOKTYAZMUSXJXNSXMFESKNMSFRARQUIRFHWFJRGNDBTQOUEEGQKKFHWAATSYLIMXZPOTLGWIAECMOBJVVPNRHHQBOGGQBCPDNQTDLZTONMOXLMCVUXBNHTFYVLWUSV");
    tmp_msg_0.description.assign("ODJORSBJWSGVVJVPDDGFNNYFIKCSKUXJBMSMHTAPLYJIGORVUEGWECUCRHKPEYWUFDZPHGVTVLKQDKENAPYFORKBRNMAWQCSIUVBCJAHHRJMMRVSYNUEHVBNLIWTOLQALDZOZXLPJYDHIZ");
    tmp_msg_0.vnamespace.assign("RIFEYEOXTAUNHEYHISMTMASWZMFIZUIVFYEHPENQBZRO");
    tmp_msg_0.start_man_id.assign("NBJQPOANSFEJJKMQFGCJYWIEGHZGLUWIVPSLMJZYOTITDHWGYMWKSXBOBCTWWXMHNPHVHUHJBTCPXHXUDRANNICBINUXDORTAYDFVVKSHQZADYGXEAWXGFQE");
    IMC::FormationEvaluation tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.type = 170U;
    tmp_tmp_msg_0_0.op = 195U;
    tmp_tmp_msg_0_0.err_mean = 0.7972215183782828;
    tmp_tmp_msg_0_0.dist_min_abs = 0.27611480335096794;
    tmp_tmp_msg_0_0.dist_min_mean = 0.4476409231644799;
    tmp_tmp_msg_0_0.roll_rate_mean = 0.916922534272492;
    tmp_tmp_msg_0_0.time = 0.829632265217432;
    IMC::FormationControlParams tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.action = 104U;
    tmp_tmp_tmp_msg_0_0_0.lon_gain = 0.07057211098392113;
    tmp_tmp_tmp_msg_0_0_0.lat_gain = 0.22311161313652583;
    tmp_tmp_tmp_msg_0_0_0.bond_thick = 0.21896586634755355;
    tmp_tmp_tmp_msg_0_0_0.lead_gain = 0.6106953561526649;
    tmp_tmp_tmp_msg_0_0_0.deconfl_gain = 0.20829115723865088;
    tmp_tmp_tmp_msg_0_0_0.accel_switch_gain = 0.1575612098286926;
    tmp_tmp_tmp_msg_0_0_0.safe_dist = 0.2914237480659524;
    tmp_tmp_tmp_msg_0_0_0.deconflict_offset = 0.4520069448621449;
    tmp_tmp_tmp_msg_0_0_0.accel_safe_margin = 0.4350548384998971;
    tmp_tmp_tmp_msg_0_0_0.accel_lim_x = 0.5549150511629727;
    tmp_tmp_msg_0_0.controlparams.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.5572115356614197);
    msg.setSource(17125U);
    msg.setSourceEntity(4U);
    msg.setDestination(37927U);
    msg.setDestinationEntity(167U);
    msg.command = 136U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("CTLEKEWFCKKTWJZDPQKHMSXWFSULEDXCAXMLQCYINFLIZQAP");
    tmp_msg_0.description.assign("VIFTOSXHWVBIWFGAAYABSAJBZBDWOGDUUUAUNLJTGFAZCJMDFUKPEMHJZPTRQOJUCMWUNXWCFZFYQGQIHNOWMIZUOLTLEDXZRGPYORDKQIOMYWYGHASVQBQJERPBCTJKLBKNVBHXNJKVOQKYCHERVXBRTZSCEZKMCAPNZLEPIGEUGSDFYQXCLWILRFKNMTQFGSHMRF");
    tmp_msg_0.vnamespace.assign("JSIEHSTZPVLYHJJYJZLERHVWDVT");
    tmp_msg_0.start_man_id.assign("DQXPGJVIYOZPBUPBBOJLOHEBWIGRBREEZLMVFHLPIWQDCCMTGXYUZCJVFKHROCAMKWJAUVNSZHBSXMUKDZKAVKQBRD");
    IMC::PlanManeuver tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.maneuver_id.assign("DSYLYVIWYBNVBZMWYVMXAYGWIHMXKULFIGPMLRCESGUHQEEKJIRXKPBUZP");
    IMC::YoYo tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.timeout = 25677U;
    tmp_tmp_tmp_msg_0_0_0.lat = 0.6661246245641145;
    tmp_tmp_tmp_msg_0_0_0.lon = 0.5866653579830141;
    tmp_tmp_tmp_msg_0_0_0.z = 0.02321043197223549;
    tmp_tmp_tmp_msg_0_0_0.z_units = 48U;
    tmp_tmp_tmp_msg_0_0_0.amplitude = 0.05707095283016872;
    tmp_tmp_tmp_msg_0_0_0.pitch = 0.30515289350960506;
    tmp_tmp_tmp_msg_0_0_0.speed = 0.8320288336927978;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 114U;
    tmp_tmp_tmp_msg_0_0_0.custom.assign("WFPALCFUDREHYPSDJIOXOVJXQUOONTVNCOIVSYGGCKKZSPKMYLXMMWKXVNVVUXORAPKMDMHWGTAFQLLYVJRKCXZLREWEZYWHWBQIXTSXRGTZBI");
    tmp_tmp_msg_0_0.data.set(tmp_tmp_tmp_msg_0_0_0);
    IMC::TextMessage tmp_tmp_tmp_msg_0_0_1;
    tmp_tmp_tmp_msg_0_0_1.origin.assign("CSPSJVFFAHHELOYTXEGWQZ");
    tmp_tmp_tmp_msg_0_0_1.text.assign("QPHJMRQQQWRBRDEWQJVHEEWLKNOZMOUFMYLNECNWKHXMWOEH");
    tmp_tmp_msg_0_0.start_actions.push_back(tmp_tmp_tmp_msg_0_0_1);
    IMC::ScheduledGoto tmp_tmp_tmp_msg_0_0_2;
    tmp_tmp_tmp_msg_0_0_2.arrival_time = 0.5687176979897437;
    tmp_tmp_tmp_msg_0_0_2.lat = 0.8870263521155565;
    tmp_tmp_tmp_msg_0_0_2.lon = 0.3523596402148138;
    tmp_tmp_tmp_msg_0_0_2.z = 0.018942179040855933;
    tmp_tmp_tmp_msg_0_0_2.z_units = 247U;
    tmp_tmp_tmp_msg_0_0_2.travel_z = 0.30647454402396657;
    tmp_tmp_tmp_msg_0_0_2.travel_z_units = 112U;
    tmp_tmp_tmp_msg_0_0_2.delayed = 97U;
    tmp_tmp_msg_0_0.end_actions.push_back(tmp_tmp_tmp_msg_0_0_2);
    tmp_msg_0.maneuvers.push_back(tmp_tmp_msg_0_0);
    IMC::GroundVelocity tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.validity = 190U;
    tmp_tmp_msg_0_1.x = 0.6859986328995219;
    tmp_tmp_msg_0_1.y = 0.9525766440024546;
    tmp_tmp_msg_0_1.z = 0.28316258254877447;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.18778021690628321);
    msg.setSource(59795U);
    msg.setSourceEntity(177U);
    msg.setDestination(57041U);
    msg.setDestinationEntity(170U);
    msg.state = 54U;
    msg.plan_id.assign("WOPGRNCWZNATYVWQYQDGQJADNYILVURJZNLYSHAFHTRARKHEWTSVOTIPFCAQFCOJZGXLBYMTEWTVGAVBXLRZPOFPUMBCW");
    msg.comm_level = 79U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.2865707328876712);
    msg.setSource(30293U);
    msg.setSourceEntity(67U);
    msg.setDestination(20282U);
    msg.setDestinationEntity(178U);
    msg.state = 252U;
    msg.plan_id.assign("DQNZXQQVEJLEFJGCXSJVSSUHHMWHOEVNSSZHKUSDHPMCFYUMXEFYXWUWZEWMHGJNTBCBFFCCLLGKQZPOKKGBOFDPFGOGAABXMLOLFLTGNMPXKTPQQEFFPRTRVVGROVXZMLJBVXRTQCIAXCVIIHJY");
    msg.comm_level = 11U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.37696877054701017);
    msg.setSource(11389U);
    msg.setSourceEntity(188U);
    msg.setDestination(2728U);
    msg.setDestinationEntity(11U);
    msg.state = 215U;
    msg.plan_id.assign("LNHIFTHHLEYCCEMZEIRVOVGTURHSQNYBYWMVQTEAGZKBFHEPDTDLDIYITLTSEBLYKODNOWODKPKPAQOTRLZNDZJJXIJCJEVOASZFNUNOWRKHVSHEYAGQIRQIRMTRBGGUSMHVT");
    msg.comm_level = 68U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.22953607478289773);
    msg.setSource(13081U);
    msg.setSourceEntity(193U);
    msg.setDestination(15851U);
    msg.setDestinationEntity(85U);
    msg.type = 106U;
    msg.op = 58U;
    msg.request_id = 31270U;
    msg.plan_id.assign("OTNPRNBTDDKVWIQPLGTEHNEHLLYVUSVLHSJGTJJWHABVDX");
    IMC::CommsRelay tmp_msg_0;
    tmp_msg_0.lat = 0.41420181422035784;
    tmp_msg_0.lon = 0.8499300206258786;
    tmp_msg_0.speed = 0.21274626278416076;
    tmp_msg_0.speed_units = 40U;
    tmp_msg_0.duration = 56842U;
    tmp_msg_0.sys_a = 48043U;
    tmp_msg_0.sys_b = 55640U;
    tmp_msg_0.move_threshold = 0.7014200592103524;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("EKDLWYHGUUOKCJNCSLPBGKJRFOHPVVUFPYISLQMWPMTODQXNWSQCEALIJDAWCVXRDVNALSJRGYDVIAOYPHGDCKGHWPRKENGDLXFXQZPWVOYBTGHIIJCIFQRECZBRMESJGOURJANZXYLHKSEEBPEBHOMPBLZZERNDARKXINJLAQUVTTJIBAIAZUXMXXKZEWSHUWSFUCAYQOMMBZFPZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.2867959467417287);
    msg.setSource(13442U);
    msg.setSourceEntity(110U);
    msg.setDestination(40138U);
    msg.setDestinationEntity(214U);
    msg.type = 32U;
    msg.op = 168U;
    msg.request_id = 47266U;
    msg.plan_id.assign("ZVKMEYCNIVCMBQYYSTHJDR");
    IMC::Distance tmp_msg_0;
    tmp_msg_0.validity = 30U;
    IMC::DeviceState tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.x = 0.07912025156259017;
    tmp_tmp_msg_0_0.y = 0.29287580112921796;
    tmp_tmp_msg_0_0.z = 0.9753935978612198;
    tmp_tmp_msg_0_0.phi = 0.8795780981565842;
    tmp_tmp_msg_0_0.theta = 0.5514293113864472;
    tmp_tmp_msg_0_0.psi = 0.12110935650496879;
    tmp_msg_0.location.push_back(tmp_tmp_msg_0_0);
    IMC::BeamConfig tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.beam_width = 0.9956634271173403;
    tmp_tmp_msg_0_1.beam_height = 0.6016007152713413;
    tmp_msg_0.beam_config.push_back(tmp_tmp_msg_0_1);
    tmp_msg_0.value = 0.6649606116612975;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("PEBVCPHBWWPAZURPAMAVHQQKLYVAIPLIMGMEQDI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.9502745274712705);
    msg.setSource(884U);
    msg.setSourceEntity(237U);
    msg.setDestination(2944U);
    msg.setDestinationEntity(216U);
    msg.type = 142U;
    msg.op = 77U;
    msg.request_id = 42242U;
    msg.plan_id.assign("SVREPEAIBMHOZDXGNMVXYQOCGEHBYDLKACHZZZBTXCVQMSGHJZGOTWCSALQFIIQJBKNWPTAKHUXAAOQAEBLRTZVYMOGYDUJWJFQJTFOPSFPTJEGWLGVCTARFRHFSHWLKBDRIULACCSDOOPUXILXKNZWIHVVMNFRQFOLELNIJEDVGXSMNQXUKPBKNMDKPRURRBSZPWJZSEYYMVYSMPEEPDZWYULBOJFWCTVY");
    IMC::SetEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("IRLPGAREGEPGQJLETYFFIQYQDKGMQKJCMUYYIHJTWDONABIMUMASFHZZOLZHJNEWIIOWTTEVCVIJESBPFTTOZTSJPRLDHWAZWWTIFLSZCOUPZVKYQDLPBTBLQYOFBKXFMMCPDXRDWTGSVOXHRCXRONYEVYRKMCPZDVMHGQ");
    msg.arg.set(tmp_msg_0);
    msg.info.assign("AHRTSQMNXCGSMLBZTEVOZPYAXOFMBIUHNBCRJEKORQSNLUESEDIRJVWWJEUZXZBTFPGOBKUZSQHPLNSPVGAJSQNUFQDDJFLRXHJYDCAIZMCFPDDVKGGCJFMOKFBGGYHKKEXUXUVWTKSWPLFOOVRLWDQUYTIQIHNOZCRWCTHSTTCKZYMCBNBHVJVWOQIELTRMILKBUBARYGHNE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.4663927069822045);
    msg.setSource(484U);
    msg.setSourceEntity(153U);
    msg.setDestination(62204U);
    msg.setDestinationEntity(160U);
    msg.plan_count = 39513U;
    msg.plan_size = 3156502527U;
    msg.change_time = 0.5999831343081572;
    msg.change_sid = 26409U;
    msg.change_sname.assign("JIWXJHGMNBJEMHOARAOZNQUGKWACOUOERCNMGMWYRFZMJLQIZUBVLGVKNADICSTZYCNLGUUNERLHDWTLGPTXRHMVCFMFWHFFDLTBKTUNBYYEXUXABPFVHKEIWJPQVOVDVQFSXZSTSTSOYJLPW");
    const signed char tmp_msg_0[] = {120, 30, -90, 91, -71, 60, -79, 18, -118, -119, -40, -3, -103, 49, 28, 72, -37, 95, -2, 64, 2, 85, -40, -1, 104, 7, 35, -25, -123, 91, -63, 18, -25, 60, 36, -84, 2, -125, -121, 13, -73, 28, 45, -50, 2, -14, 70, -124, 106, -81, -11, -125, -3, 57, -75, -119, 86, -17, 125, -26, -72, -11, -9, -39, 124, -2, 16, -84, 55, -101, 37, -101, -127};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("DFTBUNTLVJPEMXMUZNIVSFTAIRANMBOWZGSNGGZJRDCXDRCOHZAKKHFLLYPKUMMQNCOMAUBFJVWOJPDNZRWMSHYYYUGFJAFIAHZEVXKWBJIYHHZHVDLCJVEIPEOQSCIELOXYCREZUBSBDNVDQWNUTGBPLUGQTORDYIKTFBSPXEQSKLUZVZYGLIWCNVMCXJOAUYCEKHWAIAQRSEFTXSRTXPKJJQGWPGQROXLHVTQPFNWSFCEYMKITWDQBXGRHOM");
    tmp_msg_1.plan_size = 13018U;
    tmp_msg_1.change_time = 0.7848005064445023;
    tmp_msg_1.change_sid = 25337U;
    tmp_msg_1.change_sname.assign("DSLNLOBFEGMBOWSTPZSCKZDMWZQWMOMLRKXTNZJZSUTFFVOTIYFABGOQPLBEPPMBRYDLVVOXMDYFNEXGXKDACKCXGZVBHJBYXHZRPTTQQDVLDRRHIQJASARSDKP");
    const signed char tmp_tmp_msg_1_0[] = {-45, 80, 29, 62, 3, 91, -88, -76, -122, -125, -13, 59, -50, 72, 106, -3, -82, -25, 1, 109, 35, 15, 44, 56, 126, 48, 42, -36, 33, -96, -62, 44, 50, -45, 4, -68, 83, -46, 101, -124, -15, 50, -45, -88, 83, 50, 82, 29, -71, -18, 117, -57, -34, -69, -47, -21, -76, -45, 3, 7, 124, -91, -82, -75, 108, 46, -49, -120, 66, 97, -66, -90, 109, -3, -2, 92, -28, 58, 92, -68, -50, 19, 101, -1, -120, 75, -62, -52, -37, -61, 71, 33, 12, 37, -44, 38, 88, -73, 44, 11, -24, -102, 65, 125, 39, 3, 18, -23, -115, -46, 0, -84, -67, 89, 123, 97, -78, -117, -37, -100, 67, 3, -1, -67, 19, -118, 5, -41, -128, -67, -73, 64, 10, -101, 123, -93, -113, 67, 46, 49, -72, -115, 53, -73, 46, -11, 103, 44, -73, -114};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.9992053602994804);
    msg.setSource(1138U);
    msg.setSourceEntity(172U);
    msg.setDestination(13435U);
    msg.setDestinationEntity(150U);
    msg.plan_count = 9575U;
    msg.plan_size = 2318429508U;
    msg.change_time = 0.04307772428357359;
    msg.change_sid = 58113U;
    msg.change_sname.assign("TKCWCCHZQEWQAXUBFYKDOTEPJWBNMLYUCUKBGJYWSAIVBQROFMKAGFSLQOTFQLWHNFESSPVPSXCEIMXNQRZMOFEKBRLESGHCAESWTHZXDBMRNGZRNXLYROMHJOLKJAZURVQUDFXXUMJVTHHKGNVCGBHYNIIKVJFKPHTIIGTFZZRBCWLJTRJEYPLPWWDIUGXEYCLUPUPDGNOLVMRTBNUXYCMIOOGSAWEJHKJA");
    const signed char tmp_msg_0[] = {28, 104, 12, -79, 67, 74, 82, -59, -70, 44, 120, 69, -56, 3, -89, -22, -57, 93, -5, -123, 24, 7, 69, -120, 37, 102, -66, 21, -49, -114, -60, -18, -79, -126, -128, 75, -9, 44, -9, 58, -57, 92, 1, 67, -40, -95, -35, -110, -12, -11, 7, 53, 45, -108, -116, 39, 58, 29, 68, 33, -49, -103, -71, 115, 51, 3, 15, 118, -81, 103, 54, 87, -128, -43, 121, -127, 34, 110, 17, -71, 77, 23, -118, -31, 94, -49, -105, 34, 84, 118, -6, 96, 80, 13, -102, 38, -44, 123, -108, 55, 36, -95, 90, -119, -92, 43, -27, -48, 91, 55, -86, 39, -113, 104, -82, -8, 57, 99, 20, 115, -9, -59, -28, 98, 39, -57, -105, -7, 4, 13, -87, -39, -120, 39, 45, 18, 91, -58, 87, -53, 6, -66, 31, 87, -4, 32, 40, -73, 51, 86, -42, 3, 10, -18, -60, 83, 5, -14, 92, 31, 46, 26, 24, -128, 2, 97, -32, -52, -61, 76, -75, 86, -106, 69, 121, 40, -14, 48, 93, -94, -84, 61, -51, 99, 12, -15, -26, 46, 89, -83, 126, -55, 32, 95, 53, 120, -82, -103, -28, -125, 126, -116, -41, 79, 24, -74, -33, -15, -90, -23, -81, -61, -128, 53, 8, -4, 28, 65, 69, 46, -118, -87, 123, 102, -106, 116, -2, -74, -78};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("KFRQEJWRLRASLEJVEZTMYOJXOHLRBMZQQNALPKWNZCJFNYYDVVNLBHSSPYCDPHBVBOEWRZAEMIVNIJPQGFBMUZFTSSPXIEIMEYLZBWTAZCTCGXVUQNBGXXFUZCUDCINBPPVSZYHHRJGIORWUJTAAPMRQCJBWIMWNSNLDKFQTYWPFGURUHCIFMEXSXHSOGKUUDEKVLAHDDVSLKTQYKPTXGGAKIUFIHDOLWOKCDHQMCBXYRO");
    tmp_msg_1.plan_size = 27565U;
    tmp_msg_1.change_time = 0.9962697729217111;
    tmp_msg_1.change_sid = 41894U;
    tmp_msg_1.change_sname.assign("TJHXYFVDUNQLHSTRLRKOZDCQORWSPBOZMFPISKGEGRHCHTEMPZGJQMWKPHQFIFZDVQZDIPZQTJO");
    const signed char tmp_tmp_msg_1_0[] = {107, -32, 68, 55, 73, 10, -56, -66, -3, 8, 40, 83, -128, 54, 48, 85, 4, -106, -90, -63, 18, -32, -111, 17, 93, 4, -53, -66, 32, -24, -70, -64, 110, 105, 57, 2, 36, 109, 47, 10, 116, -68, 122, -33, -75, 90, -87, 119, 37, -19, 118, 29, 51, -103, -122, -25, 71, -123, 51};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.571635366081121);
    msg.setSource(64129U);
    msg.setSourceEntity(90U);
    msg.setDestination(11821U);
    msg.setDestinationEntity(69U);
    msg.plan_count = 50617U;
    msg.plan_size = 217075468U;
    msg.change_time = 0.30833457601332626;
    msg.change_sid = 32351U;
    msg.change_sname.assign("WYTZCXJDFYRJCHIHZOPCWOVTUNVLLQSXBIZXBABYNWMIWRBUALVGWPDXESCAXJFYTJITVOGXRNRMTYJMPCFUKLFROOXTQTGRSYZVZHHNRPEYKOONFJAYDLZIBANMSIK");
    const signed char tmp_msg_0[] = {84, 38, 52, -2, -27, 22, -124, 22, 92, 110, -60, -16, -69, 64, 78, -64, 53, 31, 71, 4, -40, -116, 14, 126, -58, 86, -108, 120, 80, 113, -30, 79, 63, 46, 92, 44, -63, 103, -23, -3, -71, -12, 82, -24, 5, -22, 5, 95, -9, -50, -28, -93, 45, -51, -29, -81, 31, -96, 18, -23, -117, 17, 93, 41, 23, -43, -121, 29, 113, -26, 29, 49, 8, -108, 50, 119, 37, -39, 73, -63, -88, -68, -128, 25, 18, 47, 112, 85, -43, 39, -51, -91, -127, -103, -29, -5, 106, 65, 30, -23, -120, 46, -116, 47, 113, -71, -64, 121, -83, 118, 61, -78, 117, 29, -94, 31, -119, -69, 56, -13, -20, -39, -118, -45, 126, -117, 0, 93, -60, 120, -103, -25, -81, 30, 75, -32, 77, 51, 90, 50, 63, 22, -37, -126, -51, 86, 33, -48, -34, 3, -44, -99, 46, 7};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("LCFSGYGTGLYLFAUYZRWCGNONRJAHVIFUQGDKZEGUBUPWDFEIQBAKORYDZKNBKZVRRGACVTKEEXPVSQWBKFXKSMHPPXRGMTSKOFPWCVTYCNEEIGEWLNXNTUDNWQMSHAZRAXKWYBZQNICHJPAVFOVCRQYTGWIQRJHUMBSBFSAMAYXSFNWMMSKMVJDLUILTPJELOPVIJXVDDMPDOCHIOTXE");
    tmp_msg_1.plan_size = 31503U;
    tmp_msg_1.change_time = 0.09069177428510966;
    tmp_msg_1.change_sid = 43174U;
    tmp_msg_1.change_sname.assign("PVGCOEJIMJBHFSJKUFNZHYHMNGDOUESZNAFLVTPYHNLDDNXUTQECBZMSESPANIWOSBFKVKQZNIXDLSWOWKFRX");
    const signed char tmp_tmp_msg_1_0[] = {28, -94, -5, 1, -61, 53, 98, -53, -128, -29, 106, -51, 104, 9, -34, 77, -42, -126, -36, -5, 48, 14, -34, 11, 75, -83, 70, 102, -56, 12, 11, 18, 34, -41, 61, 113, -63, -98, 76, 86, -62, -90, -56, 96, -41, 34, -62, -46, -70, 98, -68, 34, -82, -97, 75, -54, 114, 22, -71, 115, -109, 83, 70, -90, 87, -123, -96, 52, 84, 40, 49, -92, -78, 51, -118, -72, -88, -67, -27, -57, -37, 4, -90, -13, -7, 95, -70, -112, 84, 121, -124, -126, -88, 68, -41, -53, -47, -60, 38, -70, -37, -70, 81, 116, 41, -90, -112, 12, 28, 91, -121, 43, -64, -12, -33, -17, 82, 63, -60, -65, 9, -44, 51, 37, 71, 42, -107, -126, 81};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.5352334355830317);
    msg.setSource(42009U);
    msg.setSourceEntity(69U);
    msg.setDestination(55862U);
    msg.setDestinationEntity(115U);
    msg.plan_id.assign("YJJNJECKNQVGHJTXRNOXWVEVTPCJONKWPCKEZTHBIOXQOLPSHTFXDHUKIDGJQVKZNUBYAFANSRJYASLEPPYBDOMVBPECMATTVOGWLOISIZODNPOTYDYYQABE");
    msg.plan_size = 14718U;
    msg.change_time = 0.4323513476046328;
    msg.change_sid = 46707U;
    msg.change_sname.assign("KSILUTEVZDWIOAQFEEYAQTSYOSRRKTCYCCNJUUIGAJ");
    const signed char tmp_msg_0[] = {95, -114, 47, 42, -108, -57, -60, 112, -128, 96, 82, -115, -1, 105, -96, 90, -15, -42, 97, -23, -58, 85, 99, -46, 54, 119, -119, 95, 37, 79, 61, 26, -104, 65, 102, 57, 86, -22, -106, 111, 93, -22, -123, -56, -95, 115, -19, 26, 1, -83, -115, -82, -123, -45, 70};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.13418723179236702);
    msg.setSource(7072U);
    msg.setSourceEntity(219U);
    msg.setDestination(18068U);
    msg.setDestinationEntity(125U);
    msg.plan_id.assign("WSZYJQMBYNXWVFQTZIWSADFHXCKGLPBYRNQQAPQXGKKSMMYTENGNZGHOJEZAEFWAJDRDMTAUICJWDKJBCUVEKOVNJTXILCBMIBDENEPWHLTFSGVMQTMZHBLZYAGQSBGQVHPYIDZAREIQCVVHOSVPOKCDTKURFUNGPMHAZ");
    msg.plan_size = 32975U;
    msg.change_time = 0.6090771518564903;
    msg.change_sid = 5400U;
    msg.change_sname.assign("LKIMHMDCAULOTUDPIKYOZGYNHNHVUUSKPCIWDPNYRGAMNFXIGBGQBXFXXGDBLMGSBJFEBZXEFNJQVKCCWATSKOVXBCYQENPLPSJUIZLMOWYAVZDFKVAQKCZIOQXHTQJHYRRFDRWEGPVRZJJMBQVPTTRWYERJNANSAZTFARUIHGWFJALEHVFNBWDGZPBQEOOHK");
    const signed char tmp_msg_0[] = {-25, -9, -8, 100, 55, 19, 61, 77, -43, 120, 121, -61, -49, -2, -85, 95, 0, -22, 98, -85, -79, -45, -100, -91};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.03762337338596289);
    msg.setSource(45259U);
    msg.setSourceEntity(143U);
    msg.setDestination(15560U);
    msg.setDestinationEntity(75U);
    msg.plan_id.assign("LELTJTAHVZ");
    msg.plan_size = 29225U;
    msg.change_time = 0.6766986932337101;
    msg.change_sid = 41610U;
    msg.change_sname.assign("GCFWNVQJTPSHFACQYRUREIXSBBER");
    const signed char tmp_msg_0[] = {-67, -7, 118, 122, -24, -101, 87, -39, 21, -31, -17, -119, 12, -2, 114, 119, 72, 101, 87, 60, 27, 103, 86, -116, 53, 100, 36, 69, 96, -56, 84, 106, 72, 71, 126, 32, -121, 56, -112, -5, 29, 88, -1, 117, -90, 17, 68, -105, -125, 94, 107, 2, 53, -115};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.7758806251808106);
    msg.setSource(14915U);
    msg.setSourceEntity(142U);
    msg.setDestination(14008U);
    msg.setDestinationEntity(40U);
    msg.type = 111U;
    msg.op = 113U;
    msg.request_id = 42106U;
    msg.plan_id.assign("BNKPWIKYNVOEWXIJVIAAEWCFFZALVIXCPUMUMSRVGQGLGANURWKDHVJPHHRAGFFMUHRSMQUAMZCVUSUCNZNEYKDNTSAMKLDYORMBBWAPBJKEIJWYBZMRBJCTDJKQEQFURGTXLOLEIFGHTMZYZLLRXJXDLXOTVDKVYRBUOKGDTSAXHEZRWOTMWSQIIIOCJHQGPEZXBXCGVOFSHTFOWZCHODABVIBCFDLJUPNYLPDFKTWYCN");
    msg.flags = 24886U;
    IMC::RelativeHumidity tmp_msg_0;
    tmp_msg_0.value = 0.11687549402402864;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("DDJXDLWFYJENKBQGPTXWTYOJHRALMCZZQRQLNCGESVKGACSSKNTKQUMLYUQFQGMRZXPFDJJPFOZRPDSHCWUTVKHDWWLXZYNFEJVJSNRGULBPBSHUPNJTTTZIOSWIMGEDJG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.7755447417897048);
    msg.setSource(14537U);
    msg.setSourceEntity(194U);
    msg.setDestination(50374U);
    msg.setDestinationEntity(73U);
    msg.type = 183U;
    msg.op = 82U;
    msg.request_id = 55277U;
    msg.plan_id.assign("VDBFXZUNPOXKXKXMDEIBFGYNVGGTOYMHLCLHUCREWQYWFRTTNMLSJCQXGSRLUKSDIAZJABOHHMDANMFLFBANNUBPMKXIGWEKYVUHEP");
    msg.flags = 43876U;
    IMC::Pressure tmp_msg_0;
    tmp_msg_0.value = 0.442406512457717;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("RQIBPXMKFWZYMZAQKPLLQDDBOAEDFUPIOZDIVIWQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.19472920190309506);
    msg.setSource(28151U);
    msg.setSourceEntity(236U);
    msg.setDestination(39660U);
    msg.setDestinationEntity(45U);
    msg.type = 252U;
    msg.op = 39U;
    msg.request_id = 28842U;
    msg.plan_id.assign("XNBBWUFBCQYDSQTZVJQLTACMDXPTNBVCCJIUOOTBWGKEHXYDPPWJBZLRIYLVVTPFALWVNHCHAVXSTZLQOKDJGVVYURZBOEUTMVDYOHRUISLUKMJFSCFMPLYQI");
    msg.flags = 61153U;
    IMC::DeviceState tmp_msg_0;
    tmp_msg_0.x = 0.33931419209261593;
    tmp_msg_0.y = 0.8708484704086032;
    tmp_msg_0.z = 0.26199796658094;
    tmp_msg_0.phi = 0.8827091672886933;
    tmp_msg_0.theta = 0.49298448366748115;
    tmp_msg_0.psi = 0.4555060148270118;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("EVXUFXOIXNZUTRGRDUSXKLQRVCDFFTOYRUIAJWGUKTBBEFMKWTRQWPLGAQAMITMCUUBPFMVJPWZIDGXIDZVSKNGNLBHQKOARVVDVKPGOEJMJSMYWQIHHHMGEXPHZTQLPCRNRCLSJVUMSPDQKCCCNOLFINSEAWMYZTIAOMHOWEWXFRASAIGPBHQCHWEYLSNJPLXBJBUFNSKCWBDDJNHALIGZJQNYYXOZHFZJOBRZYTEOQGPTEYKDVAZCFE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.9151912908648907);
    msg.setSource(13154U);
    msg.setSourceEntity(111U);
    msg.setDestination(48584U);
    msg.setDestinationEntity(191U);
    msg.state = 46U;
    msg.plan_id.assign("GPEDXCYIRTYFFTBRLGVFOZJWHXYUETUODLDDEVXMHSCKUPFLTKXGQWYJCNZYKNNFPHORQPYBKCHGQSAGUZZRABZYAIHOAGCCUCUBRVKQRBRMRDBAHESOJISDLGMSTKVNZQSWAKTFJCSNQOCLRM");
    msg.plan_eta = 1825190367;
    msg.plan_progress = 0.24479792741270656;
    msg.man_id.assign("NCXCBCZYVGJCNXKNRJLSGSQCSXYRPJEXTAEZNLTQZIWFKZSXIOBBGIDDJZYORTKTFQFXLWUHPZRCPXBSUSWQWNLVPYMVAUDMHSGMUJOLQGHVCHMQRAZKJCNDAAPALBABT");
    msg.man_type = 51704U;
    msg.man_eta = -1797885745;
    msg.last_outcome = 40U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.5056306271264347);
    msg.setSource(41493U);
    msg.setSourceEntity(34U);
    msg.setDestination(43327U);
    msg.setDestinationEntity(183U);
    msg.state = 70U;
    msg.plan_id.assign("IOJAURUEXFMPYRNLXEMERAVULJXQNJONURVCTUBAXFBWVCWQTYPSOLBAEKGGPYDPSZKBMMKTHFALWSYVTNEIYXAOJDIWGLWTLZNCERDRWCDINRJVMJJZEZABFOHPUCILOVZPQGGKLBQXHQDPMRJQWNVKPQLJWQCHGMIVJEYSFGKDDCCYPZGNFASKODDMTZTRZXHXTXMCTFSKUIKIRFFQAUPSGHUBHBUDYVYZZOTWXS");
    msg.plan_eta = 1096415488;
    msg.plan_progress = 0.6218470652312791;
    msg.man_id.assign("BPQGAKUEZOCNCHOZMRZYVMLLHKISMVIHKXNPFYXVBYTUDOXMEPCEIPROJGSZKFLONYNKDMWVYMDQMKSFJZFDLUHRXHYVTVWIJOKSZJWSVPOJFGDLBCRBQTSZJXWUINEVHGQXTRTRYQAWTLPURQUTMAXXANKQLSBQVUBKUKIICSJGJDEQSER");
    msg.man_type = 2017U;
    msg.man_eta = -1690937417;
    msg.last_outcome = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.5604574409771182);
    msg.setSource(39401U);
    msg.setSourceEntity(243U);
    msg.setDestination(27198U);
    msg.setDestinationEntity(2U);
    msg.state = 59U;
    msg.plan_id.assign("CXLWUJNKZYWOGSTBGRDULPGUARAHKKXMMAYNFULJQUNVSOOMYZGVJYLLEKBSFWQZOBMFMTIXQMEWRHZJWEGSJVZ");
    msg.plan_eta = -956650030;
    msg.plan_progress = 0.930673703271643;
    msg.man_id.assign("FQBMUTKAEXGIWJVAVFQNJDTXQRCFUXPENHHDITTESGBO");
    msg.man_type = 14828U;
    msg.man_eta = -183827580;
    msg.last_outcome = 179U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.5979886104464798);
    msg.setSource(61174U);
    msg.setSourceEntity(176U);
    msg.setDestination(53078U);
    msg.setDestinationEntity(25U);
    msg.name.assign("HWDKLGJGUGIJOEADXVOKLQHXAZPZYCTFWCGNWYFECMTYXTSMYKXUSZBCHCDZFCEVTSWXRSQMXXAVUPBIGPQEBFVIFYHOMWUYPWAEUSLLTTADJRNIISCH");
    msg.value.assign("MCGGCEPJMXSQHEHFXVVXKUCMGNZLHOJZAEHWYDMKPGICVOQETUAQAFBQFCPCNRUPLWGQSFRTUCYIUFEPBWDRMLOZNYOLSTDMEYDPXRKZOVVRAVGJROEWWELIHYICAAXUKXYZTWMWKYRJYHDKSTHISOUIWZDAJBGPXKFDDICSEMFQPFYSQABFHT");
    msg.type = 163U;
    msg.access = 27U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.7181071307636617);
    msg.setSource(4213U);
    msg.setSourceEntity(50U);
    msg.setDestination(21533U);
    msg.setDestinationEntity(252U);
    msg.name.assign("ERUPOLGNXRAXVJJWDPYOSEKOXNZWWMXSAQSGFHMMLFNLNVYXUAACBOLAGXGIOGBRRQWGBZOFEDXNCDQKIDJFYCKIIKNBPGPQBRKBLEKSSUUMYXVUZQUMBHZTUFAZCTIKKGEFSREDMMFHYMKUTCDPDNQQJCHMTQAYJCRWWVJISLVTHNACJQNT");
    msg.value.assign("XISMUUOCMBTTGUKJJRUIVLZVRMERDFYWFWCFYFYAFRXLOKVVHCM");
    msg.type = 119U;
    msg.access = 63U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.3663400538821818);
    msg.setSource(48377U);
    msg.setSourceEntity(144U);
    msg.setDestination(49377U);
    msg.setDestinationEntity(47U);
    msg.name.assign("YHVEQFPPHZMIFZDAXOKUPRRCYQXDOIFTURJSKJLWEKCUSJVMRIESGIWMHRBJFLWELFZAMEWFITHUAOWXNJDBIPAXTXUVYGWQOPJXQRUYHGIHZBM");
    msg.value.assign("HNLPRWQYONXFXXUKVMOBTACTONZYCUZRKEMAARWYUBOIXDOUGVETTMBH");
    msg.type = 24U;
    msg.access = 24U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.9092409927898322);
    msg.setSource(19496U);
    msg.setSourceEntity(11U);
    msg.setDestination(49306U);
    msg.setDestinationEntity(197U);
    msg.cmd = 128U;
    msg.op = 69U;
    msg.plan_id.assign("QMXWEZMDUWVMKZSUPMLDWQBOFOGLQIWVTKHMJVDFRXAOTAUGOQEJJIDWPEGQJYVZYLTVJKLTBPNORGNQHSRIHGVWEBDCMSUVRNXAZIYFBSLRFTFGEQMQHVKYHNGCAGUCPCEGQLOZFXXUIPUNNYRLSOPPFNNOEITXAARVYWHDOJY");
    msg.params.assign("KFHXDXAWUNYEZUJKOUZVFESCBJJSHSSLEUMHEONWRPRWCJWZNWVRADUDXMQAGIZTHQPIPGYDWMASJLYUH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.9008807548965048);
    msg.setSource(52073U);
    msg.setSourceEntity(231U);
    msg.setDestination(49416U);
    msg.setDestinationEntity(53U);
    msg.cmd = 61U;
    msg.op = 99U;
    msg.plan_id.assign("NUGKEZALXNHYNOYUFPXJZNRGHKBAWFIDUFOTNWZLPYFKCPBECDXSHQHLBZLCDMVLXMOJLJXLQBVVTIDPLYQSYYDUESPGJVKQGUBYAYROGQGEVSULOKACIPQZMSSHAFZPVRMHZMHDWQGRAPUZNEAWROITCRCCFT");
    msg.params.assign("PMMELUIFJUWKHYDSKFBNV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.10975288542783224);
    msg.setSource(13418U);
    msg.setSourceEntity(53U);
    msg.setDestination(63976U);
    msg.setDestinationEntity(3U);
    msg.cmd = 118U;
    msg.op = 50U;
    msg.plan_id.assign("UBNUMPHZSFOFJQGKDGEDJOSVYTVDLVTCHTFWRFQLZJVFPAJJSAYUNXRBQNKYBGHQGOWRPNDOEASNVPVWOTEODNWLDXHTZALNEDDXBRUREIOGIJOIHXLKWUEUBJBYYGBWCWCEECFBVUMMXKRWTHTMZQZZCIEHHQZMZGSLMRRJYSKQSZWLCFUIKNKYQXAKTCXFPIVRSYKYAVGMNYHMUXBZJPWVASEQIPMPILACXLTOGMFCOUK");
    msg.params.assign("CGFSMSIXDAJKAEDLFJOIBKJSPZKZMUETPLXPULXBIPGMEICHMJNHVZOVCUABXLNYQCRUFPRHYUTHHBVSJRHNZAZEQRZRXDYNGASUXPDDHTJWQPOOAOMMYVXNKUFLQNVIGMGRPDIGMKQKGBHNQMNGHPQSEULXEZFDPOTKXISTWVBTJVCLFDLWCDLV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.5399904924096343);
    msg.setSource(25384U);
    msg.setSourceEntity(7U);
    msg.setDestination(20825U);
    msg.setDestinationEntity(253U);
    msg.group_name.assign("ZIHQKJAQWMTALRKBJDLCWTGOMHTNZMQNNVSDWZKLICYDHZWZYQUZSUTRFDTECBYXBQLJASRLPPNYFOSDUFIUBCEXHXJUIATCPHWBNFIFYNQRUREJBVOZAETSRHWIQKKKGAZVLEOIEFWKMGOJMGVNJPVREHVXSQNXPLXXDEROCBKNONSFGDBYCMACVMGXKSXUAPQEOZWTDFYVVCALHISWRGYSAHDQBZGMRLJYOFI");
    msg.op = 169U;
    msg.lat = 0.16012585520812717;
    msg.lon = 0.3105995256430767;
    msg.height = 0.6102899024846602;
    msg.x = 0.4506027923381488;
    msg.y = 0.9380298381224222;
    msg.z = 0.44650953305215046;
    msg.phi = 0.5708296143633066;
    msg.theta = 0.05601220586038724;
    msg.psi = 0.1322763431359617;
    msg.vx = 0.5722027237525601;
    msg.vy = 0.9500022535884829;
    msg.vz = 0.9894039833877859;
    msg.p = 0.29122090681428636;
    msg.q = 0.28723829078757623;
    msg.r = 0.010068446393933228;
    msg.svx = 0.9396407197484725;
    msg.svy = 0.5377608175287129;
    msg.svz = 0.645898413278795;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.2396123161405539);
    msg.setSource(2338U);
    msg.setSourceEntity(142U);
    msg.setDestination(37398U);
    msg.setDestinationEntity(168U);
    msg.group_name.assign("GOSDDKNUZPGXATCENKYVNYZZDLPVPASREAJIRGTDCWGXCONYXFUOSFBWMGXNDMXJMRAQNHMXFKOWGEHATVKUPAQWITSIGOCIFPTR");
    msg.op = 37U;
    msg.lat = 0.6324807525502698;
    msg.lon = 0.7262791763705844;
    msg.height = 0.13495430020879673;
    msg.x = 0.9056599133722866;
    msg.y = 0.7747948244405943;
    msg.z = 0.28852762902616635;
    msg.phi = 0.5007692086453083;
    msg.theta = 0.43204962236825295;
    msg.psi = 0.9095830717419585;
    msg.vx = 0.47261129273144264;
    msg.vy = 0.8535521787889992;
    msg.vz = 0.6833087138433992;
    msg.p = 0.8741683345972515;
    msg.q = 0.05330460239751844;
    msg.r = 0.21702316849099879;
    msg.svx = 0.45313507030762745;
    msg.svy = 0.31053959982330936;
    msg.svz = 0.34334805167955496;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.812145415722315);
    msg.setSource(54490U);
    msg.setSourceEntity(157U);
    msg.setDestination(61016U);
    msg.setDestinationEntity(93U);
    msg.group_name.assign("BBPLKMTGQUZPWTLMTHQASDOIACTHLLGTIIRMZUUJRTHJNQEACDFUKXELSGQUKMXAZKVZHYLEHMCJWVBWZNJFONOHXSONYWVKFYPIMEQKSINVXNAEQGJGDVQOEKCXXUDEARUKCGNWSQBPPPHBRZFLGNPBFWUIHZDMECZYRMRGULTBJKLDDEJSWPDXVZGWHZRXYQWYSMSXYOEDPJNFVSIRIVFOJTOCDTBCWNSCGTARBXBR");
    msg.op = 17U;
    msg.lat = 0.693898860143089;
    msg.lon = 0.025994953035469615;
    msg.height = 0.3719290254785931;
    msg.x = 0.9024106891029178;
    msg.y = 0.8843420638704695;
    msg.z = 0.5225048463303323;
    msg.phi = 0.06936544164430725;
    msg.theta = 0.9838017714634717;
    msg.psi = 0.9963599997081247;
    msg.vx = 0.9310452832943201;
    msg.vy = 0.514739557362655;
    msg.vz = 0.9620783524456368;
    msg.p = 0.7367377341086478;
    msg.q = 0.09045081928974896;
    msg.r = 0.989300411311418;
    msg.svx = 0.22540734883409108;
    msg.svy = 0.761930119165762;
    msg.svz = 0.6387771402357555;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.2074975029283994);
    msg.setSource(35623U);
    msg.setSourceEntity(163U);
    msg.setDestination(29439U);
    msg.setDestinationEntity(37U);
    msg.plan_id.assign("INZWKEWDQPIVLJPCYWCKRDONAYSAMRISALIOTOWEDNQJSKEEXGUABMZUAAY");
    msg.type = 216U;
    msg.properties = 165U;
    msg.durations.assign("ZSOMPPHGYIJUYGTMPTVMLRFGKKBYIEUETWGJVDZDMKDSQ");
    msg.distances.assign("PFOJRZLJBYCZIMIMKCALLZAJYNIREDHWBTAEMNPGAHRHVPRXTODCEBIPRQOEKJVEVXATPSPVEDPMQDZCSANUSACLOUZJYSDHMOPNLUWWEFOU");
    msg.actions.assign("BVHXKENIUCZIYSLTGSWZUVEWDEOJDSUHSYAZAKFGOWNJMYGGTOJPXACCXHAPFQDSROLPQZKGECYIYCUMYKTWMSNTNVFXDODXNTHCJBFWWGGVBRMHRCTPRTXEIAMCFGFBWOTIURJY");
    msg.fuel.assign("MJMJDGCYQZUTDLXQRIFNFRVOUVEEPSHZJWGTYHFPINAATCLQTQVWZGJPKACSAKCYVNHLAWPJYWXERHNEYCCODQSRSTNWGIBKLRZZNUHPBBMJDEFDCFWQNCSAWMYLWRNPJFXZSZXGOBHOQPAIBJQLDOFRCBMOXLYFEORWPESVKXFBTENSUDMTKBNIVVEIMYLAODLXJEZVTUDAPOCUMSWDUXUKHVYXGKYHGRJAZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.2058244752759678);
    msg.setSource(50231U);
    msg.setSourceEntity(136U);
    msg.setDestination(57592U);
    msg.setDestinationEntity(2U);
    msg.plan_id.assign("BQXTDPIKFAFUHNYEFTCVBCVWMYGKWRHJMPNRLOKDOOPKJTGDCXVDINGNFJTVXLTRMZGUDROEOCYRQGDMWHRSBUIGZQRNJSZQYEORBAECPYHIGMBPVNSLBLBPDJXLKZAMQAWSKEPMHFEVOAGMIZPZXFSIDILFGVFTNARBCUXUTYELWLNXSWICWXHLUJHSBEUVNWZTCANXKHUOPIMAYJOQKEGDAFJUPEXKJDTMAV");
    msg.type = 193U;
    msg.properties = 111U;
    msg.durations.assign("MMLGXRHROUEWYUNQRWVDIWDFGYFGHPMWHFFSMMVKZQEIJTLSEYBKCCFCLBRKYIFDQUGKKRMEXWXHQGSMHFQIQY");
    msg.distances.assign("GGLSBGDDOEKKEWJHHAMQDVQODUSEMJOOYRTARYCGMUKCVASBKAFNSCSEDWXPJNQQGDMHBHPKWNCJZVXYZEAHCKMMYORZGNYGILSQFTOPZR");
    msg.actions.assign("ICLJCHUXJCMIEUDDXMDGZNRVDQKPFAESCGRBAIATESYSBUPNZLXLUPWBRFPVQRNPLBUKZYJSRIZODEMURBJFFWNCGDWMKALSEYOWTMJVLVHTVJFECZVRBXJOPSHSOTKWRIQZWGNTKYUKXZUNIYTTCXAEDQIQHHFTOLHWNYGX");
    msg.fuel.assign("DIJNFYTHTKQWRFRCBTSSI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.07136914996466037);
    msg.setSource(46453U);
    msg.setSourceEntity(145U);
    msg.setDestination(62759U);
    msg.setDestinationEntity(83U);
    msg.plan_id.assign("XOTPWDZNTJUGCSYJFKULHHFPXSZXYPQJRIPLROUMLXPATMCIASZNJICVDTKMOHOHUPJLFGBOFSPDLBIOIKYBSMRYEX");
    msg.type = 48U;
    msg.properties = 108U;
    msg.durations.assign("LASOGMIXWEAOB");
    msg.distances.assign("NIAUYWZPUACXMQBFVMEPWQFRPLABMQVGZLFZMUZRDHMPXBJGIHCEVTVEAIHAGOYOCNFESROSYRGTQWQNJNWTYFJDYBBDNJIDFKEZPIBHJWKJGKOULHWLGDAUAALUTHKDJLWVCKDQLXVNS");
    msg.actions.assign("BYOBVRTQVKTFPDQBMQVEJDFBDDTZJBFEKOWYGFWVJUEGDSTXBPHTZSURLUALJYUDZPYYFOXPTKBKOBZPVIYAEGAEBQDCMMWYDAXSGKCWWXYTRRKRPLCLKBEDICPHASIJSINEWXNWG");
    msg.fuel.assign("MECGUTEKSTSVXYSWTYDWOMIDLBPXUNYJQBVFVUJDPMIPXVEHPAYNSSPCOORJQORAQTGVNGUWRNIIOXUJXCQKNLZMQUGLZBFERJZZBETMZTOEIVDHLHGKSDUX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.37248658332312057);
    msg.setSource(64316U);
    msg.setSourceEntity(152U);
    msg.setDestination(24102U);
    msg.setDestinationEntity(64U);
    msg.lat = 0.585898177111286;
    msg.lon = 0.13579194046139498;
    msg.depth = 0.09205048071511257;
    msg.roll = 0.8914944338065004;
    msg.pitch = 0.9285526613049614;
    msg.yaw = 0.6189292550000237;
    msg.rcp_time = 0.2794904645308899;
    msg.sid.assign("DSOUXYFLJIAJSRAUUPCOEWDEPYSNPKGCYMQWOMCBWDVAIZPZOGVEOBBIZWELXAEOYHHPNEPWJWGMUVLXBAQAFHTJUFQN");
    msg.s_type = 31U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.6201684794338641);
    msg.setSource(61614U);
    msg.setSourceEntity(165U);
    msg.setDestination(63177U);
    msg.setDestinationEntity(65U);
    msg.lat = 0.5087162238907693;
    msg.lon = 0.34542895550712205;
    msg.depth = 0.6892305630377038;
    msg.roll = 0.0023587425718372135;
    msg.pitch = 0.8794588483619673;
    msg.yaw = 0.1322520621209201;
    msg.rcp_time = 0.23050200550826272;
    msg.sid.assign("PDFIEOGYULLDNKWVPGNKUQTRVTZKWJMSDYKHWFIWBNEBRYKFDYOABXFULPXJDLUIIZLQSXOGQNHUUIVQTERJEBHCKAAPCADZXXINIURLGUFAHRFIJBEAGQTMYRTYVKQSQOAMWOQGOOZQFTHNGPBAAUJHNSLBVFXVZNEMKJSTSOCBSEOPMLUWTZYCZSAJVGWZJDKXLMXEBVPCCMHBTKDP");
    msg.s_type = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.02368433120827762);
    msg.setSource(38267U);
    msg.setSourceEntity(109U);
    msg.setDestination(26302U);
    msg.setDestinationEntity(101U);
    msg.lat = 0.05010159982239315;
    msg.lon = 0.0971443775113432;
    msg.depth = 0.5081062436929247;
    msg.roll = 0.8950195963165168;
    msg.pitch = 0.2358169455975221;
    msg.yaw = 0.1715049262054249;
    msg.rcp_time = 0.8592908864672916;
    msg.sid.assign("VSYMRJEEMYNIPQDARVSTVMTJMFGFCXMKJRTIGFA");
    msg.s_type = 14U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.09729735091641578);
    msg.setSource(19819U);
    msg.setSourceEntity(88U);
    msg.setDestination(26647U);
    msg.setDestinationEntity(6U);
    msg.id.assign("GEBYQWEDTPNPASLXQBXXZRRMJGUVUCVOHNAVFCARDPOYDCSQMLGJELQOFTSEMBJNFBFJLNWXRJTTBUKIEISSTVQHWHBAZRGZZMNGZKVWPLVZEQ");
    msg.sensor_class.assign("LMVCOMMGSBPWQRYPRXCULIMTZQQXUUXVJ");
    msg.lat = 0.11751863653008232;
    msg.lon = 0.20854158023375324;
    msg.alt = 0.7462848534974623;
    msg.heading = 0.31683228224641635;
    msg.data.assign("NYUVPMGXDSNQJYXRETBGIYOVKVUWLVSEWAYTLYWPZLSJTWMQDFJPZVWMWFFUUCMHENMIZOYQDTKIKQAGIOMAJBQMOT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.8564916126592746);
    msg.setSource(16070U);
    msg.setSourceEntity(55U);
    msg.setDestination(5503U);
    msg.setDestinationEntity(210U);
    msg.id.assign("UECKJITDYETLWANA");
    msg.sensor_class.assign("BNQXZACRPBIIWAAQRVAUZHLWQAMXLBVYSDPZETUTIMHTIYYVRFZBHIJDMVFCOVSVAPTAEKHFUMQNGFWMJQGLGHGYRWSENU");
    msg.lat = 0.2660513107372764;
    msg.lon = 0.6947882595945766;
    msg.alt = 0.37178164244124035;
    msg.heading = 0.31218906206552577;
    msg.data.assign("HGBMGGULCWQIPPXGAVQIRLOXCVZLOYHPNZWYTDKYKIRKNVLUQMGAIJCPDCXMWCLCHIUOORGRJAEJWEMOHSVDEFJFBYWTOHXNEMBLVJAMZTUOYQQTRXLUBIGRVNKFZPYFCQMLRDCQSSDFCGDSDGCNIAQEAKFRYUUHDKFVPTZVOKJPELHSZUENQMHBPXRZNOQUXY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.5615977513035064);
    msg.setSource(39231U);
    msg.setSourceEntity(63U);
    msg.setDestination(6026U);
    msg.setDestinationEntity(100U);
    msg.id.assign("JXUFEWWGQEPMEPVIKYNSDZPMWQGCXQJFUYJLQPXTOY");
    msg.sensor_class.assign("LPJISRRHHTKZBEOKYXLDFYPQWMFOWTNBFPSOXDAEQUEMGKIGELBSMH");
    msg.lat = 0.7403513848043909;
    msg.lon = 0.30823700729018133;
    msg.alt = 0.9622590291654329;
    msg.heading = 0.1925661207164675;
    msg.data.assign("PAKMTASHOXWRVJQTLYSGLNBBANRQAKUOEDYPNDGDNIXRUDZHDGYMCIFQVAVDYICYHTDOHZRFEPWSAGMEBFLGRVUVDFBDPFPBCXGWJBLEYKKTHHANGZBNTSLJHJLSJMYSIUICANCKZAUBTVWHWSXUVKULEMEJXRWCYXJHZMCPQIQZGXEBDBMRSEGPUUSKQIQORJZROCJCZOMPZTYIPONLOCLQXRJMKWFUIKSTQPFOZAENMVXLWFXOVINT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.5468746887807935);
    msg.setSource(31948U);
    msg.setSourceEntity(183U);
    msg.setDestination(60891U);
    msg.setDestinationEntity(223U);
    msg.msg_type.assign("ELWPNOKOFNANKXENDHHCEXGMYOMNZQXDFQGOUPQJOJWGMEFRVZTTFYAZTTLSVIPVGSVPDSRCJPFRKDYTRFBZIKAVZQELYCWUDNPUHUTTZBCDLBHIJYVULDPBNGJRYPCESHUFDGLIDEVYQNMFAXSMROEZSHGJLAIORWOAKHHRQWBFQIYCWABBQSOBKQMKBXDGLWMJVQTPTXRZRUUJHETWIW");
    msg.sensor_class.assign("LDRTEMCJONDYHYCYXZFLYGKEDSSXIUAWEHZRBDGVLKAVJGTNKDBAUHNQCSZNYQCKUELSXBPPBPSBAPLRMRIRMHNOJGNUCJHSMPQMLVLOGTICSKTXDWHVAVWZHUXTMBXKQAVWBDEEHWHIWMAVNARRAUICBQBRSDYYFGWCLMJKTPN");
    msg.mmsi.assign("PYKCAKLOFRHLXFSHJOZNOHYIPDGXSKUPMMWESNQQHCVCBXGZWLLSMWATBCZCTMQTIECOKSEVCVFQSLPRYAVVCULDBBTYHBJZDSUDJIJFYQIITNFERXK");
    msg.callsign.assign("ZWRLEYWVZQMGHOMRXKZYVMNWPMGLOPNSTIFHEQEFDSFUMAIYGWLKUXKTLRZBXDRNJJMILPXTIWUADJOGBRBJKQNKXURBCPBCEBHZEEHCKLYNCFUMAVACFSJMFEGVVGSTUHJUAONQBLHXDTJRZUAWXVFINLXNHUPEBCDVKCICLYPZTZOFYSAITJGBICRDOMESSAZQFIGXTSYUDAWQGZRAXVGPYSYQTHLWPKIBHPQDNWKVQHQ");
    msg.name.assign("GFKXEHLGYJMYOFZZVAIMFMZPBDJCHHDFHWQUVGCZUZKESTWKASQTQBGNFVXJGXEDVMEZBSJLXQGODUBLSYJWWSNXIUNMYUMSLFJCJPLLAXRSOYSTUICMAKXGPRPLCAWUFAVYDWIIUWTAMHWAKDIZHXNTHKRPOQZLKFFPODDVAEBNKTQKGRYULPBRDNYGVTMNRPSQSHQIOVFPJCCONMBQOTIRCTGTREV");
    msg.nav_status = 154U;
    msg.type_and_cargo = 220U;
    msg.lat = 0.5778660158456991;
    msg.lon = 0.12587721985709455;
    msg.course = 0.19579628786303327;
    msg.speed = 0.585478385345711;
    msg.dist = 0.3823897307170948;
    msg.a = 0.07507684285367044;
    msg.b = 0.5921600565647464;
    msg.c = 0.49238934557312375;
    msg.d = 0.46366631184408247;
    msg.draught = 0.05575576673797478;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.7839317105972824);
    msg.setSource(553U);
    msg.setSourceEntity(125U);
    msg.setDestination(34170U);
    msg.setDestinationEntity(39U);
    msg.msg_type.assign("XNIWHMQSZOJVKTTGNGQULYDTXBAYGILWWDMAGVECHUKBUJATFEYLOHOWCPGKRLEFVJHFOQOIFABASHDSYPWMAMSNXBYNKDSVYVHENKJZAV");
    msg.sensor_class.assign("CQKMYRFGUEBKXJADNRKKCTAIXQCNQCMQZMZLADZIYEQHOYQPHRVDYZNIVHXOCE");
    msg.mmsi.assign("FKDDVOZIVZDJXLEQVHKRWFSHGKNILEMSOPWOLRCNRAUPDVRDOXN");
    msg.callsign.assign("ZSXIPOGLXRQQHBINQAANGMNWECDEOUSOLMGFKKFCFZBSIXWKCCRIDJDAPUXTLPDTWAFVJJHTOVJXNPIUZUCFUNJYDECFSULQJZHWEKYMBHTEJZQYWPTIGPVRHOYVNY");
    msg.name.assign("KWQQLDCEJXHYQQQYKWAVCNSUZIOXCXZJUCOWIUZLGLVTWBKGHQEDYPPSCFTDRARZRPSDMSXMVEBTCJCUESMISGJDMUGSMQDOZTKEMTVVSOJGAOFBZEZDHLRYQYVVLNRSIHX");
    msg.nav_status = 112U;
    msg.type_and_cargo = 225U;
    msg.lat = 0.48501899259725767;
    msg.lon = 0.0016706537517440223;
    msg.course = 0.8595648499131839;
    msg.speed = 0.6703055748869514;
    msg.dist = 0.8918176927772297;
    msg.a = 0.9077619365373585;
    msg.b = 0.2990749211243138;
    msg.c = 0.06278891426046462;
    msg.d = 0.3594230747490035;
    msg.draught = 0.2511320987630802;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.736028463764327);
    msg.setSource(52065U);
    msg.setSourceEntity(136U);
    msg.setDestination(24739U);
    msg.setDestinationEntity(164U);
    msg.msg_type.assign("JULRZVYYQOWVJAAHOOITGGEYEWQXIQCRGJBJAGIRKTCZHQBFPCASNZNQHOEYQLCSBPUSXHRSPFBFHVFXQHDWWBVUAKJBXKVAUIMUGYKINSXYDJMJEYEHPRCKCOEWFEHJGTHIAGRLCKKLJLPMXLKFPGIRUQAPUWHZZY");
    msg.sensor_class.assign("ORYQZFKCAMZSDZSBGVWFULCNJOIBJJAHU");
    msg.mmsi.assign("IIJTZFQTEDXSUVVHFICCUCIB");
    msg.callsign.assign("ADBXYUVMZNXQNOQIAJKABJPPFUTCOWELIIFWHRVGNBDNPMOHXUWPMJSUHIPFEWVYKQLOUVRIMTMXTVDYOLCCZYHUEUZJTZRRWIBURWFQERNFVLZVTFWJIDOTXRNNXNEYBHSBGYZRENPATLLKWLBFNDGTCDRSDXQQVZHDBEJGKHMASCOKCPDISJLZPYVYETCWJUXMWKASHEYGBOZUMKGJTPMAQCHVLRGQQAEAIGMXXS");
    msg.name.assign("VGFEWJLKIQUZPDHHIWHMKGOPYLWKHTNYPCXSEQGNGWOPTJAKMZUANZROOZZGJVKRHXVDCEQKYVFIXSBOURMOJEFDCPIUGDVPWVMXSQPRWDXZFOJCLQIJDRQCUQFTPNTBEGJTKEBF");
    msg.nav_status = 9U;
    msg.type_and_cargo = 142U;
    msg.lat = 0.8617023881358683;
    msg.lon = 0.08675711340985282;
    msg.course = 0.6228613172956831;
    msg.speed = 0.23297521677489985;
    msg.dist = 0.8887118127132155;
    msg.a = 0.14678985732393335;
    msg.b = 0.406078609436905;
    msg.c = 0.6042958794348873;
    msg.d = 0.04723473343840823;
    msg.draught = 0.5546383252153922;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.8011630766630036);
    msg.setSource(58187U);
    msg.setSourceEntity(174U);
    msg.setDestination(25739U);
    msg.setDestinationEntity(145U);
    msg.id.assign("RMIGCNFKUHXAFILXTRSLFAMPXWAXCIQGYVDTDUWUJDHYGFIRTYHFVKYEDEKLGLXOUMVXYVANFGFDGXSNUKSQOULTAECBNNMIBTIZFWTCEXGGHQVVMNAQFLBBPONMURKOWRKMIPBNWCJASJFQTZPMBJNEREWEVDYSIXPOCYOLERMWAPUYJPRZJWKDHGZADOBGLWQZUPSCKQDCLOVLREHTHBUBITVSPSWHKZQQCTCYZZSKPROHJEJZBQAJMZHOYD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.9647737014088594);
    msg.setSource(10391U);
    msg.setSourceEntity(212U);
    msg.setDestination(961U);
    msg.setDestinationEntity(252U);
    msg.id.assign("ZIFONVCGDJTGLLNGYQKTDZHMPIGOSAUSZPFRHGV");
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("AJROFGVUISJIBBRWTEYPWYJGKZTAMXSQKKOIRCGMNPOHDUROKSSVVGSLFHKQQDWBCGVQGWCSUCIYJFFWRTGFXB");
    tmp_msg_0.feature_type = 102U;
    tmp_msg_0.rgb_red = 82U;
    tmp_msg_0.rgb_green = 156U;
    tmp_msg_0.rgb_blue = 193U;
    msg.features.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.3621385304212281);
    msg.setSource(26124U);
    msg.setSourceEntity(64U);
    msg.setDestination(4608U);
    msg.setDestinationEntity(67U);
    msg.id.assign("YCPTJNCGQTUHUBQPASEPAUIXAJPHGFFYNRSHVNFMXDLNTTVDYN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.6290347401344457);
    msg.setSource(3142U);
    msg.setSourceEntity(208U);
    msg.setDestination(50143U);
    msg.setDestinationEntity(106U);
    msg.id.assign("YYQKIMOWANWWXMCSJOXRFHGRQRXDSLEMPJSKBSXXNYYNCHTXOLPIMIAZTKDBHJHFQXUDJTKAJDDCZOGQBBKGITHUMFOWYXVUSBVVYMJHHGDFCPBPUIJDWLCSEAVGIRDRJCVRUIENHCGPLKNQPUTJEDWVAAPWXUBYQRTWVEONGLQKZOAKVEBNMPYLTDMMWFTVVSTATJSRQEFGHUCKYOUZFFERASGNIPZCQZOFANBZMFE");
    msg.feature_type = 54U;
    msg.rgb_red = 221U;
    msg.rgb_green = 162U;
    msg.rgb_blue = 207U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.031994472723259726);
    msg.setSource(1167U);
    msg.setSourceEntity(216U);
    msg.setDestination(59585U);
    msg.setDestinationEntity(60U);
    msg.id.assign("KDSNXDBOZRSUYMRMGASZOWVRRCSQHNCLYXAMWOMZ");
    msg.feature_type = 90U;
    msg.rgb_red = 207U;
    msg.rgb_green = 128U;
    msg.rgb_blue = 108U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.05233632830169033);
    msg.setSource(18912U);
    msg.setSourceEntity(143U);
    msg.setDestination(7194U);
    msg.setDestinationEntity(46U);
    msg.id.assign("ITYHPFEEPACLQHNBCWSAJRCZSGBREAFJKDUJQKFNFMXWYMYTZGYANCPLRQLWVXBGYOVHAVAVIVWEROBMVLLZAWKICQSQPNRMBZHLUTVOCJSPQSMNHDDXMWDMUTNDFZJXYRT");
    msg.feature_type = 15U;
    msg.rgb_red = 187U;
    msg.rgb_green = 169U;
    msg.rgb_blue = 109U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.9941107348137492;
    tmp_msg_0.lon = 0.7526434627208216;
    tmp_msg_0.alt = 0.32457157288461813;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.9674167748089094);
    msg.setSource(1219U);
    msg.setSourceEntity(231U);
    msg.setDestination(60542U);
    msg.setDestinationEntity(51U);
    msg.lat = 0.1711083000901794;
    msg.lon = 0.09144562062291106;
    msg.alt = 0.38371683271829404;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.3283696882795216);
    msg.setSource(58656U);
    msg.setSourceEntity(81U);
    msg.setDestination(48022U);
    msg.setDestinationEntity(72U);
    msg.lat = 0.6449743251437174;
    msg.lon = 0.3500820455749114;
    msg.alt = 0.28937995958077856;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.6717206345951913);
    msg.setSource(62924U);
    msg.setSourceEntity(53U);
    msg.setDestination(8616U);
    msg.setDestinationEntity(145U);
    msg.lat = 0.9037751546696688;
    msg.lon = 0.9506997900428268;
    msg.alt = 0.3752359718075592;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.29073265284207006);
    msg.setSource(39493U);
    msg.setSourceEntity(137U);
    msg.setDestination(13326U);
    msg.setDestinationEntity(188U);
    msg.type = 228U;
    msg.id.assign("LJBKIDNSBZPLFOLRNGTRCSBZYIUNWJIYFKPDGBBZBFZUSZDEQGEAETQDEEQMCRXHCCWRXWUFV");
    IMC::FollowPath tmp_msg_0;
    tmp_msg_0.timeout = 2811U;
    tmp_msg_0.lat = 0.9272839728985974;
    tmp_msg_0.lon = 0.8045582825177088;
    tmp_msg_0.z = 0.7003552455772516;
    tmp_msg_0.z_units = 200U;
    tmp_msg_0.speed = 0.30120876491320414;
    tmp_msg_0.speed_units = 108U;
    IMC::PathPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.x = 0.5292316708780805;
    tmp_tmp_msg_0_0.y = 0.39779074498485456;
    tmp_tmp_msg_0_0.z = 0.6314972240998062;
    tmp_msg_0.points.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.custom.assign("MWNDLUQFXQIJCBJAHSINSUHHUBNHVBIVPOSOTRWAEECGQZKWKJTGSYEATZJW");
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.947180177144748);
    msg.setSource(15165U);
    msg.setSourceEntity(97U);
    msg.setDestination(55520U);
    msg.setDestinationEntity(232U);
    msg.type = 119U;
    msg.id.assign("PJWVDVLCNCNZLQSXLVDZZLABYFENTO");
    IMC::TeleoperationDone tmp_msg_0;
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.4131013625705722);
    msg.setSource(386U);
    msg.setSourceEntity(65U);
    msg.setDestination(34887U);
    msg.setDestinationEntity(101U);
    msg.type = 90U;
    msg.id.assign("BJXRIHYBRYAWNQRMUQOVNSXBTDWNDFBUPNFZJCWZKLFCNWWVBRVAIMPESQEMIQGUSXUNMWJHTZKSBSTKUSDSEOVRULBGZJODQHYRLQHDCCCWAZGYZCDTMXPDEHPZXGHYVPIIOTGKXJUTIFIFVFEWHLXGRAXZEHOMMLJLAHSGFGRFYKCKOABIGPTIZKFNROATQEJJDKOKEY");
    IMC::EmergencyControlState tmp_msg_0;
    tmp_msg_0.state = 82U;
    tmp_msg_0.plan_id.assign("XZJMXGSGOIHPWSMUYLITQNOZYZVYAKYRYOJLJTEGCVCDNNUSCVOYBVNQRNTNIHXRWXKAZXSKEQKEJGMOXIJCNSTTHEQVHKAEYQOOQMKQPRIUFFESSWKWHYMAMHEILWGRDUQSPA");
    tmp_msg_0.comm_level = 21U;
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.06769183583714133);
    msg.setSource(19762U);
    msg.setSourceEntity(241U);
    msg.setDestination(12450U);
    msg.setDestinationEntity(181U);
    msg.localname.assign("OTQKECFGQAYTSYBMIMKFLTMVMDYKHFRTUCZANNJBJCUAMWBVPKYVEOHSSTWKTLAHCQDCCSZYMWPGVEWZNFENOKFHXZVSMHWOYERQHFGWHDFMSJOHOWPLDMEZKNCQAQTGXDDFISEUCPDJBZRLXPDBAFWYQRVPOGNROUTSYDOXXERGNUKLJWXUYGSAARBJSXJJLHJGIVMLXR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.35877639125779204);
    msg.setSource(20875U);
    msg.setSourceEntity(79U);
    msg.setDestination(61241U);
    msg.setDestinationEntity(36U);
    msg.localname.assign("LHSXHLXXTKPOIYUPNQTINUSLNWCWZBOADGFOIACUHOTGQERMTZJOWFIFKCPTNDBGLQGTQEBRXMRMACHCDDBFPXPAKAYEWFOSYEJMUMMOZHYTVMTUGLQWHKRZODQWFU");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("CQROOTEBJEYVCXWGTRKGYFGHBIKACHHBTNR");
    tmp_msg_0.sys_type = 115U;
    tmp_msg_0.owner = 46131U;
    tmp_msg_0.lat = 0.19899280899315208;
    tmp_msg_0.lon = 0.6622182536057982;
    tmp_msg_0.height = 0.882827528981634;
    tmp_msg_0.services.assign("LXGFNSSSFMHWXXEMSPHWKPJHQBYQIPZRANRBRWTWJYTVBDLOGZLKOKA");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.9515835888108851);
    msg.setSource(64523U);
    msg.setSourceEntity(49U);
    msg.setDestination(15511U);
    msg.setDestinationEntity(44U);
    msg.localname.assign("AZGMMEGWFTVGWZDOHAWSKKSSCIQFEFYXXGOXUZYNPSRWQTPGZSVPSMHJS");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("ERHCBLCBVJEAXDGLJEVUEWTNJRGPSGABYKSMFELLXOPDWBZRCZFUNCRHNEVKGTYXHHDQUPOATTFQCINDUXIIVUALFMUYXGEVHYWPZJOTWNBUSIQLKBAFZDPDKSKQINMKTYDUXPWOMBTYVEQSMQFSBGSKCDZKXIXGOVZRZJUCVJMTRURRYFMARHTQMKMFMEOZVPADIWPESWOCHZOBXLWAALOHIJDYPYSIKGQFHJPJHSQWTGG");
    tmp_msg_0.sys_type = 65U;
    tmp_msg_0.owner = 31328U;
    tmp_msg_0.lat = 0.4441194575855826;
    tmp_msg_0.lon = 0.8528167781972001;
    tmp_msg_0.height = 0.8994335352864891;
    tmp_msg_0.services.assign("IMIPWLXZTGRFQWJEJDVMJFZAENAQAYERDRODKDSAXSOXARLGUDRZDKNJCHNFEENNQHDXOMKBZKDNBIBKVYYJZHXXJAXRUMVTYWTOBCFWRGOJIMWEIULPUGZWFAIOPOIUZYLTFVLYKASSJSWHLKPOSPUBQHBGBLNCEXZGSKUBUXMPXQTGDGCCGJNMHRHOHHWVOFEHVIZVMBNPCDMTTLYKMQTSCVE");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.2397087695317215);
    msg.setSource(3250U);
    msg.setSourceEntity(40U);
    msg.setDestination(37542U);
    msg.setDestinationEntity(240U);
    msg.timeline.assign("QDSCVKQVSVPPNCRWPWPEHLNVMUJZTJUAREYOHXFNCFQLWUWIOMHBCAOSPJFPQVGKRUIMUTOGDHCSSBNFOATCLBHXXAZZRJCBXISVXLLTAAVMGDEHKTAQNYRNJOF");
    msg.predicate.assign("LOZRGWWVTMWHLHQVTQJNKGOZMLGXDECNIOEDAVAYOJUAGXFEZOSPQPMKHHAIOCTPVIPDCTJETDDODHSVRZPXPAZVLQSTFJNNZICLPSGFUGNBLHBUMREBQLMZH");
    msg.attributes.assign("NYMNSRUAYZRJQZPZCYYWOFHDDUEXOHQWNRZPQBKJKQSHYGKKLLITHOXIKFMUSSODJQJMJEBCMSLSFOVDEAPXMRLIPBQILYTAOZKCUINZMPFCGDHBV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.09318079286640824);
    msg.setSource(26905U);
    msg.setSourceEntity(107U);
    msg.setDestination(20702U);
    msg.setDestinationEntity(239U);
    msg.timeline.assign("NOCEMMNIUFWBZKFZOEOJDCVDSGCEDSTETEOMZXBFWGXQGTSLNHUVZRHXNPQJWQKYQSBQPRVNIGPPQEHURKVKNFUVYLAWOTHIGXEUUJALIBXUPBHQTYJLCJTRJGWOFNXRKYFBWLHQDZKOYMYYHZNOU");
    msg.predicate.assign("SGSVDRYUWFPLNNGWCDGFERNSHAVRHMGTVCLHZUDCOYQPRTBPCCMNLAFSQZWLWSELETXFNCPQBYERLEPXGAJMJJBTEVQYQGCDKDKGKZHYOKUMEWBNBYZYFHJROMXWJXOFNRAZQASWSESYDATVZBKNJZNKIIPQFJMWXISURIPXLUJPFTAAKOXOEZXNHIROGI");
    msg.attributes.assign("RKRUWVNSFDBTHTIBMDHHGJZSDDICSZWIYHMHCZWXBLEJAJPNKXINVPLSPQKPMTXPZZOYUCDVZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.5065798352490587);
    msg.setSource(51591U);
    msg.setSourceEntity(211U);
    msg.setDestination(30815U);
    msg.setDestinationEntity(53U);
    msg.timeline.assign("YLKWDLYTEUYSKVDWUNZLDLBITQHHKPAGWIOBTLTKVXPDYZHTGIIJALUMMBYJQERIVZFZJDYQNOZXIJDEOEFJLGQYWNKXCWDSAOWGFGPQYFOSHXRFESNADBGBWHDWOURFZEZMPMCBKMPOXMAKIUWNRLZKFVHUUNUJRAWZJXHGQCIESPTB");
    msg.predicate.assign("DDKZGIXEMGLCEFMQDOHPCDVVJIFWTJHVCWQHOBVHRYQDMTYVPARXYKVJOAIPMRAYCLBPSLTPJXBWTUGAEOOGWBNLXGTBUYVQMLSDBKFSLDANZSWPQHYUQKWKFRCTJLZLUMUTJLQCKEANJFC");
    msg.attributes.assign("HBVTLRGPUXAQGLDYVVIWUXKCFCCLNZVQBWHXLEVZXBMYRUSMRIITXDANPSNXIECEUJRDXXGHQUTWWYOHRTZNQEMJNQJWFTIUYHNTJCRWWCSSKOBZBRCPPDADPFBHEGMBJZKPFAP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.3833492298318496);
    msg.setSource(5606U);
    msg.setSourceEntity(178U);
    msg.setDestination(21564U);
    msg.setDestinationEntity(23U);
    msg.command = 118U;
    msg.goal_id.assign("BOFWTNALESCLRNACUHAKZVEMZEQXUZADVMKNYDY");
    msg.goal_xml.assign("HRLTMAZUBJOYWYOBYTVMEPUWHZCIDJNEDMSKXENXLOLIAKNGJFNMVCTUALSTPMKUWRZSYMXSCCLFOJDJRPSTUFVWRYQQYFPJIQAWSYARQKXVHPCJSCHTSQDBFEZQKLESOTFCHJXPTCZKGMOWGB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.26938581652064597);
    msg.setSource(15514U);
    msg.setSourceEntity(155U);
    msg.setDestination(23156U);
    msg.setDestinationEntity(195U);
    msg.command = 42U;
    msg.goal_id.assign("KXUZGVQBRUUHSFKVDFPUFPQGLJSXDFBZPVXGCHNOMEMNOIXIRTSEWOZWCPXWTICEFSFTJARRUZCAODWNZINMKWLMMTBRRVWKNJURVJFXEHLMASKSJJQVIHTZKTNYWOJNBBDQOAACXGJFPTUZTAVGBCMHFLS");
    msg.goal_xml.assign("LKXLAIGIKNBQCLRDVUSWEPPOMPGYLSPJVHWWNAXQLVDHBCZIREZBYENPOMWCRTKCYGQISTSXKDNCUZUHIRAGFTBSAZSKWEWXPXRBHLHCQAKFQMAEKVEOGOBTCDCNPKFYNDVERMZXZJEUMJYPVUFZYUOZYDWGJYUCRWNOJGUATNFNYWOHVOHBDUVRKTILQSMFRKXJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.76122675889826);
    msg.setSource(39561U);
    msg.setSourceEntity(55U);
    msg.setDestination(29391U);
    msg.setDestinationEntity(83U);
    msg.command = 246U;
    msg.goal_id.assign("DJKBKUXRMLAVXINPVAZSAZHTVOKQNDWODKEKUEMJFWGRAVHQGSEGJYZDWMPBLYBSTOXUWTUUHIZDCCCERVPIRCHREJFUTUYDFGLTNYHACWROUMSHTPYGKHNTWIAVELLGPACVKFMBMFQWNICLSNGDPRQDUNCPZAMQFKLJTCIGEBSVBQEPXBBLJNQNJEVQYMKRONRZYOWJSYGAFIZTSPVFGIEZIFX");
    msg.goal_xml.assign("IACZCIGJBZEZLDFWLEPDVHADONDOHDCWUAUVGMRCZHOYFVKSFOIPBXOIVAYHGKPVTNTSASCXHJSCMBTGKRCXGKEDPTPIUIRLFKLMPWXOYSBHJWNILGPQMLLLUOSFFWUGKSQXMFOYVXGNBWTKBTQQUBDNRAPTJJXONUEMFIEDR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.3193939749154905);
    msg.setSource(35757U);
    msg.setSourceEntity(111U);
    msg.setDestination(33968U);
    msg.setDestinationEntity(179U);
    msg.op = 108U;
    msg.goal_id.assign("AYRIURFIEEYQWFZGJCNXLRMZIEIIBQJTGDJRNOUDLSHXHXGJODBZADYKBMVCPWCHNVYWHYKLIFKBWWQSAAOUCETDKASYOBWSZDUNBVVXPFSTGLQTGPIKCZUACZJXFWHNJYCRORJLOGUMUOGNRKWZHYMHXFPLBHGSUAVMKRDJRCEEKXUVFVQIOPTXENTNBFPLVZZMELHSEMONSPZIHPDYQWCQGQMXONACBAX");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("OROUVNQZKCSLERPDRJEUDARCSVSXYFTJADHSOITCQNHRJGZEFUVHENRDJJAZINFWGXVAZXJILATKX");
    tmp_msg_0.predicate.assign("SQNSSEAXOWVQDUHLCEBQFUKDHGBNCDGSTOZOFVHPIBGLTTIAYMNUFEIYPMUPXLPITBSTMNWMRCJFOFWBLONQNGHCZAXKJNRVUKKWUQC");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.5653794134051024);
    msg.setSource(56421U);
    msg.setSourceEntity(195U);
    msg.setDestination(47118U);
    msg.setDestinationEntity(30U);
    msg.op = 181U;
    msg.goal_id.assign("GRDLURWRCGFNJHKTSFUQBDWNVPJHDVCXXGMIUYDBQRYCCPMCZTVMRXYRBGINCKYRISVQDZUXFBROPALEAKEVEBEANTDPSXSJFBSOWNALDDKBJHFLLEBOTINTHZVPEULMHSWQQUAAJOLSTSXTAXPLHKHKFOLMCUGCHVXGJQSVKIPHJOIHZRP");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("HHIMIPCEXZGNVPCPQBTJQIEXJXJSNWJARMRPBLBMZIWFUHQRPHNZTXFYTLZGMGYOATOEMEQAUDMKAUTMHLMFICKIFPNOFSLVOEANXBLYELNGFKBUUEWNSTCNVOUHFJIJUPWWWCWSWCJOZJTRSDZFFVMZKXAHBKLCQYYJKAGQWLUGKHOZTSNIDYKHQIDSDWECYREPGBUYPXQBZLVOGTZBDIRSEUMBYYGPTJRKVSOCKSAXFRQVHXQRDGLDVC");
    tmp_msg_0.predicate.assign("BGAJFEISGDHLGOKDQIPWEAMLBQOSCNOWBYHQACETORJYFPFRXIRULXJHBUMYERWSJSBNTRXLFPKFFIUEAVARTDBVWNGCEVKQGGRZOVVIOMDNAKVGURCSXZBQUMVEFQOIKYIGDAZVOVJSLHZCPSXOUMZBHKYMUWBLTHATKGTOZCLLCXKXEQC");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.6526984664821821);
    msg.setSource(47047U);
    msg.setSourceEntity(115U);
    msg.setDestination(64152U);
    msg.setDestinationEntity(109U);
    msg.op = 160U;
    msg.goal_id.assign("HCQQFUTUDMHPGIMYXVLWWDDSCYHLXQMFOANJZCSCXOIIHMTBYEVRIIERMXVDCWOBJCLZEBNHBIRXASGGPBJTGQNUUHWGKPDJTZRTWAJPDEVFXFKGPUXOECZYDJXNHLLVBKZKSNIBMQVPVNZCEPLSAKALKBYTSHYVDVANTFKFUZBWWESKWYASYIVDKOFRAOUJPGLX");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("EAKIXACNCESWZOWKVVNWLOIMTTUGVFECQGPLQEZPRZDBQXNLMWYGULPNBWKOLPNHVGLSOIWOKBETNBFAUYXRPCTSXZUANWPKMMRNDGJZUHJLSHJZJDKVYASIBEDXNTDJAFTHKCVQUMZSYGMWBPYRKJIYLAB");
    tmp_msg_0.predicate.assign("CMZAPVJONEHRTVJFOZXGCBMVDVWEHJVMKCITQKIFTHXLILIRZAAEZBGDLL");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.1104637111311001);
    msg.setSource(59550U);
    msg.setSourceEntity(137U);
    msg.setDestination(56388U);
    msg.setDestinationEntity(24U);
    msg.name.assign("NCSVQFPGGLXWPTMUBBGRGRNSFFOXPJMVEPDKHHQYRKHSDANJYRARESTPODRBTFCZJUXOVUXVAKUTHNWJAZQWETYEFRVFESGBUYOWQOINHUITJLKLYWWHCFDUCSGDUL");
    msg.attr_type = 158U;
    msg.min.assign("JYQFPRAGZBBWGOQUSOSQXVCDQNMJMVBEKFKBLKHLQUDVCZUHTKUGEQPGKKKWFJFJVCDFQJMZZNNJLHYCYI");
    msg.max.assign("PNPBGPMZAADQREJULMBAPNOVVACMNRNKXHINETBPTBKOPFTDABXSEKOWIXROZWEBWALWFTPHCGJRGQKZUHWVRCGXSVZBUNGFVVSEEYDTQJWQFNOTDLEOPSEINLYOHHCDXIMFYXLZNTQTZMRWWYGQUUYKYGOYDQAVULCTSGHXIFAPDYUZMULCLOXNQWCLYFIZVKMIHAXKQWDDZRKDSYECJH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.4053417773424516);
    msg.setSource(15283U);
    msg.setSourceEntity(172U);
    msg.setDestination(59539U);
    msg.setDestinationEntity(37U);
    msg.name.assign("HTVWSVJIMJQEVLQNPCITSBMDGAERQIMNKJHWRCIBXSNMZNDIURDGJSUBGHHVTUJDRWCHHXFZDKQYFLHPYEMUBLOLGZNKFHVOKGSOWJMPULDAOGUDMXXSFGYADYFRPQORBIGZRKXVLZZCPCSOVNAHCQNRKLVXLSTBIAUUBKELFTIWMNYDXTGRAPXEKEAVEFFCQOWTQSQWXWPTUOBQYEOZKPHAMJYUKZGOJPEW");
    msg.attr_type = 225U;
    msg.min.assign("QPXDNIZSZWJLLHOHAUXLBOAUAVMNJODZIFYEMWZJAQYADJUBNKNZGBNDOIUCIQYADOHNQBWEKVCMMFZACDCQGTVYCHNVZPIPXSVEESXNLLKMBUMHVQQUPESTVLFWXMEOFRNCNHFKWXWPTBFBJSCWERTQTRJJXKRYKJBHXKYRQOOBYTMDGKSFEUQWSLLGJPGCYGDAKSIRPFMBOUFHXCYRZROLLUWYEXTICPIWHPZGEIVJTGTTHSUSRGI");
    msg.max.assign("DCZLTNGNXECHIBXILSSOAFRHWJDPBWVUWHKZWQIGJNFPFLMSYEKBPETJBI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.128558958003949);
    msg.setSource(27344U);
    msg.setSourceEntity(155U);
    msg.setDestination(64032U);
    msg.setDestinationEntity(245U);
    msg.name.assign("YWKBLGKWJKHXGMXNHGYVYPJQINQTPIPOAFT");
    msg.attr_type = 99U;
    msg.min.assign("MNVYSQAUYEDCWETLMYJMCHZMIEXRWBKLLUIDBVWRFUCORUCHOBZLYAETXESHHIIBVGJKPIPAFKSNKDWTSZZJQLOXCEQJTAINGGWAVRXNRGCQGGANVFTJKYPENHYSWDZVHUSSKGYHETTTEQUQNWJUWLCPSBATKUDBGFIFVXZYQSWJHBJKIXQWDRNBERLXFOFPVMH");
    msg.max.assign("ZIOHRSOZTLFAWBPTIVTKCMUBHIHGSBKIXHURIFVZYNEXGMDIFYTHTUGZACQQGNLYQVSIINJMBSEDNEOOWDOMVOFYAYLPLYJMIDNKAVDPYDPKAPTJACSLFXZDLOCQJWBHIGJYYVSGCNKURWUQLCNEMLZXOEQWBURAFKECBHJTJPNTXNJROPQZCLHJKRWDNEEURRGKEURDPABPR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.39118459305420716);
    msg.setSource(60025U);
    msg.setSourceEntity(196U);
    msg.setDestination(17024U);
    msg.setDestinationEntity(171U);
    msg.timeline.assign("JMNYJBWLPBOHHYSROGQSLPUNGHOQMDLSHSQZCSHCJFIZCDUVBIEKTJXSXBUCNFHFUVKAYPTZPMEQNOBPUHYEMSYALLBWACSPRTKSCZVMDEPPDDKXTJHUNOBVXQEWCWX");
    msg.predicate.assign("ETNJIRRDXRIQUKMSCHZUUROJAPFTICDXRKVCDNYGKEDBKCHMYGCRCLSYNPSJ");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("UNVPASMPPEBSZBEEIWKHLNYSNQOPNXPUDCGHVNXCTHVKGMDRPFJFHAAZMZAVDXBLJAJXSLMEYBRPKJDVRLRIAUPBNXRXTOCTIBLBVYFLOESQZFIEUACWZYCIIJFWTELJOCMWIDHQTTJDYVMCZHDDJHIUUUXPLOFJXSHYPZ");
    tmp_msg_0.attr_type = 19U;
    tmp_msg_0.min.assign("RLZLLUEXUAWMZVWDMWBJXPYQZVCSVVXSAQOBYNQDSBADUWHXARAFAGEPNFIRRONAWFENETKIMYVUAJNGBYQJWLABOBSPHBELUXLFSODYMCHWGERVFICEKGHCLKHBWPFYRSGZUZPFZKVNTQJUOMPYDFQPXOITNVTYQWKHTKELIDYXUPKGISJKHKLSDSJMTIHHUZVB");
    tmp_msg_0.max.assign("YJFYGNPMDLEXXBFLGRIGYQVMGGFPWRXRXIJBAQKXAZUZOSIHERNJVHCEBULPHKMSXYIMIGFLLTMQFDZNWQJCOZSHQHRLDNZNAYOWMNXHRDORHAKNGKVY");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.6323078748147778);
    msg.setSource(26063U);
    msg.setSourceEntity(81U);
    msg.setDestination(41624U);
    msg.setDestinationEntity(50U);
    msg.timeline.assign("FTHRNQBBPJGRKMFZXQKKXUCFDRPKAQCLVRDTYZGCEJEWLFZSOAOKWIZEJWYSIWYUQOHCWHQWJVSHFXVSETNDNONGUIHVNBOXIPJPGVUTCGUQHFMS");
    msg.predicate.assign("TRUYVONBIIWIHHYLVNWRUFGBPIUTDUTWQEICRBHWCMOMNJOMFQWQABXHOMECJWEADPDFCKOSLASKKQBUVFRWPYYSIHXRKOOJGGZFZJOTVGCAXUZXGPAVKWEKCZGECDQFSJNSFOJLPHXAXMEGLQNZPUHRISRSVYKNMVSCFJTJPPFBFNDIKXBDJQHCW");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("DVESYMONXBXGJ");
    tmp_msg_0.attr_type = 39U;
    tmp_msg_0.min.assign("PYLEBRTXTASRJCYBAAFMEJNLDQOXWNUXAYXWXBGLKQGOONRSECV");
    tmp_msg_0.max.assign("ICZRUDCBNIAOYBENGNOXSFWGHLOYHAOXAIHEUDROKLMUXXYLOQJVIDJMHRQQBPMASNNKWDMKQPMRGYZXCTQCCQTGUURVMWUZTGHINBLVXGVZSAFSKAATWJBDJQZMOTIMTZTYSARHYBUUMJES");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.16458505907528265);
    msg.setSource(10017U);
    msg.setSourceEntity(164U);
    msg.setDestination(17848U);
    msg.setDestinationEntity(132U);
    msg.timeline.assign("VOPKXDJKQHDLZRAQEPKGMDPQZYFWZWUISTSRKQYMPNBACGBJUBBBDWTJPFYNIAUENCRSJACAOZQXTPHWTIXIJZVHAEWODEKISFGBHMGAQLHWNUSTVMIAVCFQVGKRTJVGGE");
    msg.predicate.assign("RPEGJUHMVBMABUWDHJUHDIHVHTQFMSHBOEWMJBPGJRIDEYLAZFFVLOLJUZKJNRVNUVJFVXUUAGSIXYRLIYSPFSQPMTXQVYXRANCAQEKEXPLSEQPESCHKBKEDBWTLNPWCNAXHZLGFQBPMIUTESTIOUWDATTTGYTBKVZBLQCAQGWZWTOYODFSPXCNMWXJHWGZJYNVOYCKWSZDXOGRCFEDIKNKAOMIFSZCYOQDVIGBZYQCKNIR");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("PMDWKNNUKSWJJABLUOCNXQGINV");
    tmp_msg_0.attr_type = 29U;
    tmp_msg_0.min.assign("KLBDQYTZMMJV");
    tmp_msg_0.max.assign("BGFOXKJBZKCIEIQQNUSCNLASDTABZBAPLFMHQJLQEGRFOG");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.10780078986647412);
    msg.setSource(50060U);
    msg.setSourceEntity(128U);
    msg.setDestination(56003U);
    msg.setDestinationEntity(28U);
    msg.reactor.assign("NSPTFDEKBMTYLEFISHLUMUHISOLVPTYPDOVANGYGUVRZDPCLJWBIRQWFANUDWCBDYNAJZJLVCDLEAJTKNKHXSXVJUCMQKCFRNTMAFYEZOIFWVGHQNYCBNPGQTZQSZAIIKUBGXWWLEIGRKXTTLOXQUNJPCEJRZYDFHFHMMCGSLRASSOVYSTOPZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.2013005285095102);
    msg.setSource(42484U);
    msg.setSourceEntity(147U);
    msg.setDestination(165U);
    msg.setDestinationEntity(237U);
    msg.reactor.assign("BOLFBLQWNLWKSAYIZDEXICSRFVBVRHIDSGFTEURIQGDUTRPIVCTOQUHNUHVHSWATTBYZVNVAOMNSLXXTENOCVYINPRHVEBDBXYJDKMSQJXHHWGPQRCCWAONAMEOJIQXZRJKGELZMIYNXJQGAN");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("XLPKRHWALNAKYKMHGLKUZKJXHDKYHRNFLCLVBWBQFUYEQORTJZFOCWQBQDKQXIBOIMYJDNMMQYRVJFPKAFSFCXOYTBEOJNB");
    tmp_msg_0.predicate.assign("NASWLYVTMLBJNROPVQXGTONGGFRATFPHUILSTZZLMYXOADHUNCKWCSBDKGOXMJFLQREVBSXIHQAPDYEJPOIYHJXWIBRPUZZRMFHRMYQGICEGNBWNKRZDKTIHZAGUPYQIKPDEUXLSPFOLMBBSJYJIYXVHQKNJEBUOVUADZDATWVLLDGCGNSKVSJOCODZICHYBJPMECXTXMTDRMREEHXPQFCAFNRKZCFCGEBUUFMSTAQWKWVTILWFEUNKQZHJS");
    msg.tokens.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.08092100886281928);
    msg.setSource(34374U);
    msg.setSourceEntity(239U);
    msg.setDestination(46579U);
    msg.setDestinationEntity(42U);
    msg.reactor.assign("HCFSCRMCMVBTSZXIXQDOBRYKQJGSVQQXYBMVOZYPZTPNMOBSIE");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("XIIEIHTLVDZDJQMJFPGZNCSQTLHEDVNOCFZYJMBVGVXZUTYPLUCBRICCGRWMYTMMMZIKFDCNQAXFOTAXKWUPXXKEWDVRBHRLJYSQPINKHMOHTLBGQYPKTOIAEZYSMUFWZRUGELUJLMZEKOBTAC");
    tmp_msg_0.predicate.assign("QYXUIYHKDLTLVDRGQICZUGVOMEXSFECSUEVHJBBHUNCACHRWXIOWIOWYZYCPVRFANJUSPLSVZYNBMAKEDLBKNUGVPFHXYFMQEJTQXKSLMAFFHHGMRTJBMOZFYDKYAWYUSVQGSXWREACEBFDDWADQQMEUDIQPIDWTRJSCOGWJNFMKJEOKZPVXLGJWOPPTQIQHKSZIBCILZGLGJJDZYUMRNRPMEBHFAOZATXRZTVRTXOTBLHOIWVNLNKP");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("IAHZBGIWIDUERANBRFBXVHQLTBDSACGNOXXOCYZPPLMZXGRWXYJAPRBTXQOWGVXCHRDOCUEGAVQIALTFNBCFCEJILXRQRKVHWDMUZXKSFDTSDNESPICROOSMBYPUWIKGZDKUFURQFXQJYQLFVYYVOESVACRAAHVJBUJNEIBKNGSENOMHOKDTLJWWALQEFOUT");
    tmp_tmp_msg_0_0.attr_type = 102U;
    tmp_tmp_msg_0_0.min.assign("BHPPCFKPGNWYHLBRJJCWQRORBYCTHTFCYASVUEHFSGSQRDGOMUHXUSPBBKVOVIXQJZYHSDLWGLIDZATEAYIERWFVZUBZZHAAWKQEPOTIQJPLKVLHPXNOADRBTLJFBBJULGQNIUTGIMMJKGWQSYUEOEZOWLMXXMMECNXQSRRDDJZVAPWSZTHIUMWKZYSDIFMCUDNIKYIFUOQPYQFSACPGLFOTAJWFOKJXTNKRELGNMCGB");
    tmp_tmp_msg_0_0.max.assign("JGLUABEOKXIPRGOZCGZWFBHQKDXMFTJGYQPDNERBNBGSVTBDBCIYYVFJHFQWMOQKAXVUSRGTSKEIAHLKLGMVIPMBETAXSTUAEPWEPUIMWNWYRXORYOFFLRDJSHPOQHMKXEOMJQMVALDIYHJYHCTMNQATHIZWXWCXJMDUZOVLIFRHTVNNIVNQZABNBGYGJCFVDBTUXZZLWRKSTFYUCSENAOCPLCSOEDGQVKLWHCSUPSRPZNQRXYPUFZDWKZJJ");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.tokens.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.5729290215113841);
    msg.setSource(1471U);
    msg.setSourceEntity(174U);
    msg.setDestination(35022U);
    msg.setDestinationEntity(42U);
    msg.topic.assign("YJWWSDWVTSHYNXVPYWPWOFXFMFNBHDGKEPDPUWSYNNSLTICUNYIOMEQCEOOOBDHELLSFULHIPRTKMXOBTPMWMGBJICKJVZHJOBCCEFAFHRLVIETZSCHDIPNDXUZPIEUXXRGAQFVIALRCYZWKPPTKQXLVRSTNDXJVCQJKOLISDJABOZCDXRUUGQQGKZZATGHGFAFQJQLSRLZMTCJDOKMWVVMANGKETUHFGIJXQMR");
    msg.data.assign("MUCSPTXITJNQMUUNLWWNAYWLKFZCERYJHQINWLOOYQRPCZABSWOBGDEPYKZXVYEUZDVIUUXEDGOAUQARKJLLCVFJBSNPJOAVXDHIMUJPJEWCFIMORBRWGQFIPBATPZKGIIKOVTZTNUHGLGOFWHFCCNXMBX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.7957672117828809);
    msg.setSource(31555U);
    msg.setSourceEntity(100U);
    msg.setDestination(27587U);
    msg.setDestinationEntity(229U);
    msg.topic.assign("PQGPTLOVRRYLPTEOFJCHKSRVXHSKVSFFSNDRJILWDXZKWNHVLCEBUQFJDNBBJMLMVPDUUOJIATWSGWLKZBOHLSBOQSYPDVBFMQFYYUJSTPRAYCIQSNOMETBNVGEJZEMXSZWCAPUADIOOBWTNRYFKUZRHCVCN");
    msg.data.assign("USTHNFXJNVDFMIBEAXJXDR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.4754886873540324);
    msg.setSource(40651U);
    msg.setSourceEntity(32U);
    msg.setDestination(34767U);
    msg.setDestinationEntity(173U);
    msg.topic.assign("SHLAYKLFBXQVPVLJPXGPICUTXBZZGXWTEARXIVGGQOYWKSEVJUCZUBMHACMJTKDOZEBJFNRUCEWZVQJKEXZUYDSTYFNRWILZESHTKQGZTOSMINQUNUFKTMAGKSSOGPKW");
    msg.data.assign("JHSIWLHITYLZEQSAJFZBVUKDMVOZSKIGOWBIGFKHIPELNAXJJXCSLELYWFEQGKLSTSNQDYBZSTVIQXCSXAEPXNJMHFPDMCOWKRMX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.3823874004798624);
    msg.setSource(54400U);
    msg.setSourceEntity(131U);
    msg.setDestination(10353U);
    msg.setDestinationEntity(240U);
    msg.frameid = 157U;
    const signed char tmp_msg_0[] = {-26, -118, -11, 56, 68, -35, 40, -44, -39, 34, -37, -22, -26, 3, -106, 51, -116, -40, 55, 20, 111, -124, 49, -90, 101, 121, 33, 119, 90, 39, -38, 93, -45, 85, -74, 5, 25, 79, 44, -8, 62, 50, -42, -17, 32, 17, 113, -29, -108, -118, -27, -32, -30, -102, 36, -107, 55, -29, -9, 77, -59, -126, 111, 25, -59, -20, 82, -126, -78, 0, -126, 14, 63, 8, 46, -21, -73, -68, 108, -125, 4, 42, 112, 119, -62, 86, 2, 69, 45, -78, -122, -105, 57, -22, 109, 82, -89, 78, -104, 114, 106, -92, 51, 19, -91, 55, 19, 29, -122, 17, 3, 126, -106, -126, 17, 77, 24, -89, -112, 46, 31, -52, 63, 62, -113, 5, 63, 30, -1, 39, 75, 101, 27, -95, 27, 43, 119, 20, 100, 41, 56, -111, -53, 75, -32, 110, 30, -7, -28, 83, -91, -104, -62, -7, -93, -3, 22, 53, -75, 6, 35, -100, 37, 96, 74, -92, -109, -93, -23, 6, 107, 85, 123, 106, -114, 49, -97, -31, -35, 126, 92, -16, 83, 20, -48, -111, -120, -121, -28, 104, -65, -42, -40, 67, -79, -67, -4, -86, -79, -93, -31, -10, -88, -98, 76, -91, 54, -66, 111, 105, -87, -25, -32, 40, 110, -72, 82, 2, 22, -72, 74, -5, 68, -68, 17, 114, -17, -27, -5, -1, -44, 106, 5, -27, 28, -112, 77, -128, -9, 70, 100, -27, 37};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.3382498056059312);
    msg.setSource(49278U);
    msg.setSourceEntity(57U);
    msg.setDestination(47735U);
    msg.setDestinationEntity(72U);
    msg.frameid = 194U;
    const signed char tmp_msg_0[] = {65, 38, -106, -64, -1, -126, -52, 24, -37, -99, 48, -54, 61, -6, -16, -116, 108, -110, -31, -77, -26, -104, 93, -21, -126, 53, -108, -7, -96, -101, 68, -3, -68, 76, -45, 44, 11, -81, 99, -31, 35, -1, -120, 68, 29, -52, -117, 91, 65, -61, -124, -49, 69, -105, -104, -29, -26, 13, 117, 27, 88, 73, 110, -23, 80, -46, -63, -13, 49, -59, -46, -54, 87, 44, -18, -4, -102, -100, 95, -107, 71, 67, 24, -21, -58, 62, 62, -4, 123, 98, -10, 64, -114, -66, -118, -83, -6, -27, 122, 5, -120, -78, -87, 59, 77, -11, 57, 83, 59, -23, 28, 95, -115, -2, 118, 74, -22, 81, 21, 92, -12, 81, 18, -124, -5, 108, -123, -118, -7, -5, 27, 10, -122, 54, -73, -40, -99, -17, 107, -66, -101, -51, 108, 54, 109, -31, -61, -65, 106, -97, 44, -126, -105, -108, 63, -61, 117, 78, 58, 17, 37, -11, 78, 53, -12, -95, -9, -5, 78, 41, 1, -87, -98, -49, 121, -24, -27, -115, -30, 99, 68, -126, -24, 57, -4, 82, 34, 10, -5, -58, 12, 115, -25};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.23152079535919645);
    msg.setSource(57947U);
    msg.setSourceEntity(99U);
    msg.setDestination(29649U);
    msg.setDestinationEntity(208U);
    msg.frameid = 217U;
    const signed char tmp_msg_0[] = {-42, -31, 59, 107, 98, -92, -122, 98, -97, 101, 10, 17, -38, 107, 101, -112, -32, -90, -46, -119, 114, -89, 101, -17, 15, 50, 13, -31, -64, -44, -52, 91, -48, -111, 25, 23, -32, 56, 30, 111, 31, -120, -86, 52, 89, 87, 126, 42, 75, 24, -56, -110, 25, 19, 40, 113, 19, 4, 92, 28, 83, 42, 63, -61, -73, 104, -104, 85, 109, -50, -110, -90, -86, -52, 52, 79, 25, -84, 6, -117, -104, 111, 102, -40, 26, -7, -75, -8, -32, 6, -19, -100, -93, 73, 93, 30, -127, 32, 31, 37, -86, 63, 125, 113, -20, -48, -63, -32, -92, 91, 63, -57, 80, 56, -121, -94, -4, -124, 27, -56, 51, -90, -43, 74, -71, 77, -14, -85, -5, -83, 48, 44, -86, 97, -90, -126, 32, 10, -20, 56, -31, -118, 82, 44, -51, -22, 46, -63, 4, -19, -33, -14, 103, 16, 46, 82, 50, -100, 64, 71, -93, -103, 63, -39, 6, -94, 20, 112, -47, -9, -53, -7, 113, 46, -26, 0, 24, 69, -7, 85, 33, -73, 74, -42, -48, -8, -80, -12, -82, -34, 23, -121, -42, -96, -48, 78, 52, -43, -109, -74, -49, -115, 32, 19, 54, 1, -127, -36, 55, 41, 80, 0, 40, -77, -77, -40, 80, 31, -5, 42, -101, 97, 126, -86, -77, -95, -28, 124, 59, -97};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.31076778441323794);
    msg.setSource(50446U);
    msg.setSourceEntity(232U);
    msg.setDestination(35457U);
    msg.setDestinationEntity(110U);
    msg.fps = 87U;
    msg.quality = 241U;
    msg.reps = 159U;
    msg.tsize = 4U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.1541748201032036);
    msg.setSource(32235U);
    msg.setSourceEntity(141U);
    msg.setDestination(37531U);
    msg.setDestinationEntity(139U);
    msg.fps = 86U;
    msg.quality = 169U;
    msg.reps = 176U;
    msg.tsize = 156U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.14995050922541908);
    msg.setSource(21093U);
    msg.setSourceEntity(125U);
    msg.setDestination(52087U);
    msg.setDestinationEntity(9U);
    msg.fps = 231U;
    msg.quality = 130U;
    msg.reps = 113U;
    msg.tsize = 69U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.589748147358526);
    msg.setSource(59644U);
    msg.setSourceEntity(159U);
    msg.setDestination(47660U);
    msg.setDestinationEntity(74U);
    msg.lat = 0.7652794077473887;
    msg.lon = 0.544883463083789;
    msg.depth = 134U;
    msg.speed = 0.9776059667777067;
    msg.psi = 0.2959455287975894;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.8913084113140947);
    msg.setSource(38687U);
    msg.setSourceEntity(246U);
    msg.setDestination(25537U);
    msg.setDestinationEntity(69U);
    msg.lat = 0.3485912199315532;
    msg.lon = 0.03643062535811348;
    msg.depth = 61U;
    msg.speed = 0.4875040782274429;
    msg.psi = 0.8909743468913447;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.8285812763844569);
    msg.setSource(60895U);
    msg.setSourceEntity(89U);
    msg.setDestination(55140U);
    msg.setDestinationEntity(166U);
    msg.lat = 0.5496862309108197;
    msg.lon = 0.04116334383628306;
    msg.depth = 99U;
    msg.speed = 0.008295585630684;
    msg.psi = 0.631205857040844;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.4979718418497425);
    msg.setSource(45190U);
    msg.setSourceEntity(190U);
    msg.setDestination(49009U);
    msg.setDestinationEntity(170U);
    msg.label.assign("YFSXDSCIHPMEKMYJMBDDTSWWWLSBJMYYJNAFWGIMAZXZOGQFVXREHUKQEZIAABPVJENKZRWUTIKFLYGUQAZRWOCGIBWOPHTBYQGXQLAOGVGUONVNDLFRYTHSIDZIJFNCSZJZXCBKPQNPWQPUVYOMVLVUEEPCABXQSNBMLHJJTXYNWUDHTMXGMXRCRETEFIUAWZARKCDREDSOJTVKHGUXCBQVLPDLR");
    msg.lat = 0.03632136666149344;
    msg.lon = 0.7905757736093734;
    msg.z = 0.4264654436659905;
    msg.z_units = 109U;
    msg.cog = 0.5743623991223857;
    msg.sog = 0.7419032346234392;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.02637998367520955);
    msg.setSource(46539U);
    msg.setSourceEntity(234U);
    msg.setDestination(31408U);
    msg.setDestinationEntity(45U);
    msg.label.assign("NHEMDCJWJQTMTTMPSRDVIDWCABARCLOESFAUQYOSFNIRHIVKZIFZZ");
    msg.lat = 0.2966568455797691;
    msg.lon = 0.9349952643170566;
    msg.z = 0.2189062604114851;
    msg.z_units = 188U;
    msg.cog = 0.0163576124228364;
    msg.sog = 0.4435279396049733;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.25538427361331273);
    msg.setSource(3934U);
    msg.setSourceEntity(66U);
    msg.setDestination(40521U);
    msg.setDestinationEntity(36U);
    msg.label.assign("DRJBPVZFOCTWNXJNLUCXPYLEOYLEUCYXDVQBFVQRUWDPZOKJNJDQRUSHWHNWLILECPKATTWKIZKANSWEUWUUGHMETXHR");
    msg.lat = 0.32499719053004406;
    msg.lon = 0.042170334408667354;
    msg.z = 0.17100428496691078;
    msg.z_units = 73U;
    msg.cog = 0.34742860893605376;
    msg.sog = 0.7224059669422848;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.10218588835701925);
    msg.setSource(41562U);
    msg.setSourceEntity(77U);
    msg.setDestination(51637U);
    msg.setDestinationEntity(72U);
    msg.name.assign("MZRHDBWRDLSHCTYEICZWFCEYFBADZINRLOJUXQCMQODESTCHZFGCSRGJ");
    msg.value.assign("OFZAEOSSFIFPCFDDXKPECSISZVKHLZOZLSENWWKOVAYDRUBRYPLCWQKWANSRNEJHVATFLGXRMDQWNMMBIJXHXEOPUDCIMXUJNCJYTCNQYTIWPTJLTKZQBYAWUHBUGTPXWTSVLCJIFGHRONYHFZE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.9548233741419404);
    msg.setSource(6262U);
    msg.setSourceEntity(143U);
    msg.setDestination(1457U);
    msg.setDestinationEntity(12U);
    msg.name.assign("ZTDPRCBLMROFZKFKDJIXZAWNKQMJXRSXDWCODVIOLHFMSUSAEKRGGVPA");
    msg.value.assign("MYGZBAQTTQALPSYJGSDPHMPBPSVHYPFJRFJBRVUUXSZIHQXMXYIVZZMNBBKORADMATUSVBHWRSYJYVSVLPO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.27824458668126095);
    msg.setSource(58260U);
    msg.setSourceEntity(26U);
    msg.setDestination(12753U);
    msg.setDestinationEntity(10U);
    msg.name.assign("DKFQWKTAPCTEUEKOVQKHSLCLPPKVXEGFUHMSCZCIVPOHVVWZGJGJOUSXZVCHRBKITDLOGERIUSMISVEZNWDTPSLEHYVGHCGJFXXNJMYMOYMBNDRYCPWFITYFLJETQYAQLVPYSRFXIDMCTTCLFWZIEBQUJONGKAXEXISMILDNTBIDRULWKJXABKAANJBYSOHJQOBNDQVMPMEMYZHABPWBFHQRDYQWUFFZXHRAXUPWGGRARUODUGNRBZ");
    msg.value.assign("BDIYERQRCFXTPXQUKBFWNSYRMTEJEQFULAVZUMCATBTSGCTDHRAWFBLRGWSZZOSGZODNPAQCVYJPVVWKFMUAOEEVQPMPNIMXYDMXHQJRAGOXVHGURPKBQNDLYYNIXHWWIPIJBYPFZILLOLUHSPGKEH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.7341487371959498);
    msg.setSource(23029U);
    msg.setSourceEntity(114U);
    msg.setDestination(10596U);
    msg.setDestinationEntity(25U);
    msg.name.assign("RODPPVEAROOTHRTGSTYIWVPIDABDGTFRFXUVUFNTEFEBTKXMZHJGXAVTYBVUNKNCHBXSSUISQBADVIXDTLITCIKVXNIEYSFZUPGCAXMFFWFHKJGALMLRZWODNAUZZPCMORJCOQCEREWCECLOYJYSGJSWNNKEQJVBGMHHHDLDLKFRBRQAUHLMHJYZEYCSGYUZWPNHQNMMJKLPZQQVISWTXPKCBJWQVOWPZN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.011094332664468243);
    msg.setSource(21156U);
    msg.setSourceEntity(22U);
    msg.setDestination(63215U);
    msg.setDestinationEntity(152U);
    msg.name.assign("EDCOGBXBMKIHBWHEFWHMLKJPJWCRBQVMMPNAZQICKZNYZBFUUUTLTNVATDJXTQIJVFFLZSMLUWHGZJPPCDYFIOPLJBCUYLOPKHLQAUSFDIRKSMKCNGXOGCROPEWXCXXAWTOLAREXANIKYVJRGUVYGDEGREEQHCOJAWZUDPQGUWNVMQDSUTBRYSFDVORHYZFRAQODTTMTQTEKBHIAOLLSDWHKYWMSZFHZGVZICS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.5238323287651899);
    msg.setSource(19335U);
    msg.setSourceEntity(229U);
    msg.setDestination(53743U);
    msg.setDestinationEntity(220U);
    msg.name.assign("GHDVNTPAVINMCNBPYLFFQAMWBSMFXKLVEKEZXCDQRGHYZLXCEK");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("VJDGXDDVNJOSZNOPWBLCNXBDPANOSDFJAHHFTEFOROTYMGXEUDMNVRLDAMAKBKPBDCZBJIWYOWESNZKTZYRKOLJIBIUMPXXHEJUKHMTAWQYAQHVIGERIQZUMKSXXGSMEQAJCRHYLBZFQWPUHVIGXPWQWTMHJNZLSVFGAQDLXFSKJCAYINNXPSWUCOZVDLTFTUBWEVYULRCGLHMOWANRLKZSPVTCEKYPICJVGUCRBUSRZQEPQIRKEBT");
    tmp_msg_0.value.assign("FOBICZVQBLLPVVIWLRXCCLFMAIKTMEKQGUJADZUHSTOWMKWBOOIYXOZUMDJYJPFPENHCOOPRSGQGKYXNAWGTNBHHEJYOCDVJXJFHGMNXFUXCVFXYTTIFZQQPWSSGPNQXEWJYKKJDFUGRWRZNGSWRSLFBINHDEIDRAYTZVIRRGZQCPGRLCDATMUVVBEDKVAHISLBUYAPNMKSELOQVDRCUEPANWWBTMBNAKPZDYEHMHZOKTYSECBUSX");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.31992194476407476);
    msg.setSource(15047U);
    msg.setSourceEntity(233U);
    msg.setDestination(46624U);
    msg.setDestinationEntity(153U);
    msg.name.assign("PXAFWIDACEKHFEBWENMALODXKVQULZQVTFTHTAPNBQTAEZSWWHUOEJGISCEXMENXENFJPQZNQURATWCIEJZCRYLQLGSVSWNXYFSLJDJSJOKMRTIOXKMFHXLDZADHHUGTUIFFO");
    msg.visibility.assign("LDSOPYWBRAWEXENHSLYWLUPTOMNXTKWFJIYQNAJCHSQWJPCLACWNBAOZJMRQFHUCBNZGTIWDKROHMXKJLGFUSEALDMTVQKKSUGCGBTUQEYRMZYPVHNHFKLKVNFUROJAMJDLTHPEQRUMDZPFMXHOTSJQSIOGPBDYLZBYCCINKWMXFNNEVUZGZQIGYIFESIEGTRRVCODKFLZRDTWYZZQ");
    msg.scope.assign("HCBBASNVCWCLKIRRFEFKLRLFTIKAJXODJMKTKVOKGPIZFLYGBPWJQWQAQZOKDMRMMAFFQJOPRRO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.29484190107061503);
    msg.setSource(4279U);
    msg.setSourceEntity(137U);
    msg.setDestination(16218U);
    msg.setDestinationEntity(212U);
    msg.name.assign("PPNSMZAETZYMJAKVVVWWIIFMXCONOIJBOIJKQOSZUKFJFGARAYIMHJJCTWLHMTGWDRIRTGKQZSIEVUPFGLBFUSGABQSNWRSHVDWRXROXNWDGSTPKHWMEKDQLYFIBCLEKPUUV");
    msg.visibility.assign("TSFLIZXKHQRAGXDOUEGGWEYWSWUPJEWEVQYLFVZOHRCPVRDNOSBCIQUVTDWSNDFZSDNMZQVCPHVMWBALXJ");
    msg.scope.assign("KRXGCZPZSQMRVMHFSIUREGQKTFBKYOJDBSTFLPOEUFYDMSNSDGKWOLPTSLAYMMFSHKYNNBHIIJXDALLRIRQXDWYMQEQUJOLQNAACGTRGBMUECIBJROFPVRBIYJHTUPVEUYFYFVIJWZLAOSCAOHTMGPMJNJZCDICZH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.4682244010236063);
    msg.setSource(4667U);
    msg.setSourceEntity(106U);
    msg.setDestination(54181U);
    msg.setDestinationEntity(133U);
    msg.name.assign("TWTDETJEJPZTZZYAISZECINSHXFSFLIQRGUSIXFMYKXJUGUKQDURZYBMXHGVISHMCLWAHQBNYXDGLTAVKWKUHNMCPQLDXAQSEEHDRJKAHVRTZZLVEECXQJSFMCMNXVWBKLYOPJWGJRUEFVVFDGCUMNWEBKNHDAGTIMYLBWHFRKAGRIYIPGFQOLBMWZFLRXOYOSDMYJSPQWZOCPPAFEDGJHCZAUIIBSDKPNTPBUYVWBVUBOOCAOCV");
    msg.visibility.assign("NQYZSEKWUITWPSPJUJYKBVYUCOGTLYBHQZTIJVNXTOALAIWSRODCVBLGDQDCBSTWYDNYFTIDILMJVTJQKMNLKOQVRZXRMJOGKORXEAUADEVHGQFPEYIZNVMVNANMBDHCUBUYZVUIP");
    msg.scope.assign("NYBXWRCRCSVDEGCHRLKUIQZOWOBBYYJQPAAKZHMLRZKYJZEVWQDMBPOMUELHIBPDLOGZPBTTSTKSJPEPXJGRIJRAGMTMAAWWHQOLRHQKXYKJIAMVPMOUQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.9294847449646586);
    msg.setSource(4446U);
    msg.setSourceEntity(216U);
    msg.setDestination(15933U);
    msg.setDestinationEntity(103U);
    msg.name.assign("BFIDNDDDKGXSAPAHEGMMECSMLHPADRUJQLFTWAESTKAWCBEZXYOZWFFTQJLBWNBLLBXWJTJVVQVUJBD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.37757508711545495);
    msg.setSource(50054U);
    msg.setSourceEntity(86U);
    msg.setDestination(32841U);
    msg.setDestinationEntity(73U);
    msg.name.assign("OXRXKGDDUHYEECJBUUDIZEFBQXBMDAGZYTJAZBYCBEPNNWGBRVKRDGSFFNWTJVPWELHWAWXJXHHSMXKGIIEEGXFIVOVYQNYBPOTCWBLUPMLQEQJWTMGM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.03085135761837754);
    msg.setSource(42378U);
    msg.setSourceEntity(232U);
    msg.setDestination(47483U);
    msg.setDestinationEntity(190U);
    msg.name.assign("IFODOXXPGDQMCWSTAHKPMRVKGZASUTLXFSOVURHNXIDHLLFODLHXICJRGGLSRTKYPRVOWEKBNFLKQHXASWBGD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.8785744510922044);
    msg.setSource(61973U);
    msg.setSourceEntity(97U);
    msg.setDestination(16192U);
    msg.setDestinationEntity(113U);
    msg.name.assign("AEAMLNCCTTUXGNRZHKQGHGNIFRBXYHKWUZPJBFLWSBOUPRDMSMDYNVEQADPFZGISYSTGHUNZXDBSEZTUDAJOQEHOZKONCUVCPTRMTWXKYOVXEGBZRIYBLJGVBFSPIBCYFZEIXOCKOSPGFPXHRPINUMTCJAPWRRITHVAGSIKWTKOLWMWYBH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.48489052748826444);
    msg.setSource(45990U);
    msg.setSourceEntity(190U);
    msg.setDestination(2781U);
    msg.setDestinationEntity(50U);
    msg.name.assign("BIKGYUEXBNVOMPHJPJIPQNXGJFAO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.37044342509676387);
    msg.setSource(47721U);
    msg.setSourceEntity(159U);
    msg.setDestination(6932U);
    msg.setDestinationEntity(5U);
    msg.name.assign("DOGVLBMSXTYFPXOMIQADIRPMWVUFUWBULOWYJCKPPJUHMOUXKJVUTEANOWSTRLMRTYHKUBQHNZVZBRSXAYSFHYQTISKTEJFSBIQOBZILYVBLWGMVQAUFLVAFJRRMGCPIGNFHXADJLCGHLSDMACQNIGO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.778825308450284);
    msg.setSource(64188U);
    msg.setSourceEntity(187U);
    msg.setDestination(5315U);
    msg.setDestinationEntity(76U);
    msg.timeout = 1083654702U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.2777924956307962);
    msg.setSource(59015U);
    msg.setSourceEntity(240U);
    msg.setDestination(65046U);
    msg.setDestinationEntity(212U);
    msg.timeout = 2081107460U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.48127195169948445);
    msg.setSource(53395U);
    msg.setSourceEntity(44U);
    msg.setDestination(6427U);
    msg.setDestinationEntity(174U);
    msg.timeout = 3251269438U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.1036553909024247);
    msg.setSource(19906U);
    msg.setSourceEntity(254U);
    msg.setDestination(36271U);
    msg.setDestinationEntity(172U);
    msg.sessid = 2478442918U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.6086096048435975);
    msg.setSource(28787U);
    msg.setSourceEntity(235U);
    msg.setDestination(44503U);
    msg.setDestinationEntity(94U);
    msg.sessid = 331784968U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.6479914894407688);
    msg.setSource(30850U);
    msg.setSourceEntity(115U);
    msg.setDestination(33688U);
    msg.setDestinationEntity(123U);
    msg.sessid = 1412058143U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.5322352663507977);
    msg.setSource(56320U);
    msg.setSourceEntity(143U);
    msg.setDestination(23730U);
    msg.setDestinationEntity(197U);
    msg.sessid = 846845639U;
    msg.messages.assign("AFPIAMRORHTNMNFBVVOQMGUZPTRXURBGLLMBFPOPMZWGLBKCLCQIJPTUFAVQMUJMKYYTHCKELFOAIYYYGANPRIQNPOGZNVQTMSYIXWHEADKTFLTSLDZWFKHSWQSHOIHNZJITQVHSBEBSZWYOAUHUWLWGWNTOVNANCDXZUDAKYGDEGPDKLSVYFVXLCBPDXJERKXCQEQEHDUMCOFZZCOBXWHXGBEKIAIFJJCIPJVBUURGRKEQXXJSERZDSDTYW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.7410316651872288);
    msg.setSource(7006U);
    msg.setSourceEntity(162U);
    msg.setDestination(44408U);
    msg.setDestinationEntity(120U);
    msg.sessid = 2933516801U;
    msg.messages.assign("ZJRJCJQLGPPBLFXPKBZAHZRCIFMNIVOKWLTWUATAMAQXSEQCLKWKDKZBSGUXRNORGHBNSMMOBWVZOVNFDHRQHGFAETXEJSISQEJAKWUEXNYZYWQYGNBLSCPULBRNNIHIGGNQTZVQRRMYJPWDUOTXCQMPZWUZGLYVPCFRCIITNFAOHOHXKDJAXTRIWKUEMVLTACCFSJDTBYIHLTOJEYDUXMYIZPGDFFDYJSKWVEQADBUGSCXPH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.20525326922152032);
    msg.setSource(5183U);
    msg.setSourceEntity(239U);
    msg.setDestination(2221U);
    msg.setDestinationEntity(253U);
    msg.sessid = 407387595U;
    msg.messages.assign("XKOGAUGGRLTSPDFQDBISQKYSPVUWBLBJMFYDZZHIWJMFSMEKGVTCGQGETGE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.5711396318807997);
    msg.setSource(54414U);
    msg.setSourceEntity(112U);
    msg.setDestination(38560U);
    msg.setDestinationEntity(63U);
    msg.sessid = 1954148970U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.7573240134438005);
    msg.setSource(53848U);
    msg.setSourceEntity(231U);
    msg.setDestination(11536U);
    msg.setDestinationEntity(136U);
    msg.sessid = 2691836595U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.770932188454789);
    msg.setSource(64685U);
    msg.setSourceEntity(161U);
    msg.setDestination(6633U);
    msg.setDestinationEntity(173U);
    msg.sessid = 1063891531U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.7891277564003105);
    msg.setSource(63792U);
    msg.setSourceEntity(248U);
    msg.setDestination(53820U);
    msg.setDestinationEntity(185U);
    msg.sessid = 165268649U;
    msg.status = 90U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.5685207940837174);
    msg.setSource(44860U);
    msg.setSourceEntity(154U);
    msg.setDestination(37004U);
    msg.setDestinationEntity(138U);
    msg.sessid = 3094565098U;
    msg.status = 60U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.478229002556403);
    msg.setSource(35903U);
    msg.setSourceEntity(82U);
    msg.setDestination(36954U);
    msg.setDestinationEntity(249U);
    msg.sessid = 62883782U;
    msg.status = 124U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.6746358673342231);
    msg.setSource(47882U);
    msg.setSourceEntity(138U);
    msg.setDestination(57303U);
    msg.setDestinationEntity(198U);
    msg.name.assign("RRTETVAPRVBFXQIYUHSBIDQIITGZUIAPCXLGYJETYPKRSYLZNZLVVRZQAVCXGWUATICENDCNDFAWFKBFAMBLJMQOUPINQQCXLRFLXWJHOKHSXCGMZMOBBSJTKZNLEZHJYJGUVAPEKPD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.7532727982555667);
    msg.setSource(59594U);
    msg.setSourceEntity(220U);
    msg.setDestination(25744U);
    msg.setDestinationEntity(114U);
    msg.name.assign("OCFTBWKXOPUVWE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.1999471349141796);
    msg.setSource(50061U);
    msg.setSourceEntity(227U);
    msg.setDestination(55872U);
    msg.setDestinationEntity(0U);
    msg.name.assign("DOLNFCFOTYKYVDJMKKYPBAHVMOVKZNZCKJQIUMESCGUVWZTDEEVSJWRMVTKIVWCCVIGLDLRIEHJQXDZSMPPGOUD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.4964936495333814);
    msg.setSource(1881U);
    msg.setSourceEntity(46U);
    msg.setDestination(43730U);
    msg.setDestinationEntity(73U);
    msg.name.assign("ICZSGYSRCREFVJQSNZYESMMJSODQBMGOALABBCNVTWKOEVLKTCJAFEYEXRZKG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.21046413156970378);
    msg.setSource(39673U);
    msg.setSourceEntity(152U);
    msg.setDestination(42081U);
    msg.setDestinationEntity(172U);
    msg.name.assign("PHTUVIHFKVQNNIYHAUIAYWDFKPBLNQHSYEBLRJJMTDNXJHSZZJEMLZWBGCXUOKGQGFAOKJVPJXNZCMIORSDKXUEWSZRVDKBFURGZNQEGKORZDMMYAWABOTCHDZUURHEAYZHOFRDDWFRPYMRLXRAXSXOJQIEIMONWEJTTGCINICQELPQUBGWXHVASCQNTCLMSVEVGEIDTLXVOTYIZYPKGQCPKWSTPDSY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.47865713303957813);
    msg.setSource(31119U);
    msg.setSourceEntity(149U);
    msg.setDestination(43965U);
    msg.setDestinationEntity(27U);
    msg.name.assign("UVMVPYSKWGEYLCGZVZZWGDMEXYZNKNNSZAOOILXPLFMHVILBJWBVJKYB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.6774955401344933);
    msg.setSource(58773U);
    msg.setSourceEntity(117U);
    msg.setDestination(61842U);
    msg.setDestinationEntity(219U);
    msg.type = 93U;
    msg.error.assign("LYFUIGEQUBGCAQJEWPBWYPUATBQSLMZCAOGQZHCUROVYLNVVELVXIWKOWOCPTIAJYMHKSJYEMDVJJKXSCRPSCATSXRONDMWETSLFJBVUOTFRNPGJYVUFRIAXHTPNFBAOEGPYFKTGDQIDEFLCWFTBLTBXNDJMNBQPPDHSCISKRMRGWSROLDVXJQYUKYOGZTIHXNFZXHMUHLPMQANVWACRZKJNGIDHKKEBZHISWZINUKXGLQZFUYDDOXECRQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.7484005897620074);
    msg.setSource(55379U);
    msg.setSourceEntity(211U);
    msg.setDestination(33677U);
    msg.setDestinationEntity(249U);
    msg.type = 153U;
    msg.error.assign("ZVNHRRIZLKVMNVHKXOUWJOJQHYQDRISNEZGKUWLTEOXLGVYGWDBBLCGADINIFQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.09546690690768933);
    msg.setSource(39689U);
    msg.setSourceEntity(219U);
    msg.setDestination(16458U);
    msg.setDestinationEntity(59U);
    msg.type = 181U;
    msg.error.assign("TFJESYVLQCNIXOUTDQCAWAYHDK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.9021014513902135);
    msg.setSource(41405U);
    msg.setSourceEntity(240U);
    msg.setDestination(7391U);
    msg.setDestinationEntity(109U);
    msg.seq = 27470U;
    msg.sys_dst.assign("WMPMCSMYZYNZNGSVENHCMZ");
    msg.flags = 108U;
    const signed char tmp_msg_0[] = {55, -34, -76, 65, -103, 55, -2, 103, 15, -57, -110, 37, 98, 125, 109, 90, 38, -35, -85, -69, -17, 79, -101, 4, -79, 18, 27, -108, -50};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.5682800785307816);
    msg.setSource(5016U);
    msg.setSourceEntity(4U);
    msg.setDestination(5413U);
    msg.setDestinationEntity(136U);
    msg.seq = 9297U;
    msg.sys_dst.assign("NRITPWOEFUBX");
    msg.flags = 129U;
    const signed char tmp_msg_0[] = {105, -73, 76, 80, -71, -31, 56, -38, -53, -15, -96, 40, 64, 68, 111, 121, 88, 107, 81, -19, 39, 88, -10, 21, 29, 7, -125, -53, -77, -1, -42};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.7144169835022203);
    msg.setSource(16081U);
    msg.setSourceEntity(61U);
    msg.setDestination(25557U);
    msg.setDestinationEntity(162U);
    msg.seq = 45880U;
    msg.sys_dst.assign("WEKMJLRINWYSYQBJLIEMVGHKYXOZMDNQEQXLQPHFZ");
    msg.flags = 162U;
    const signed char tmp_msg_0[] = {-77, -63, -46, 32, 26, 63, 117, -62, -23, -1, -88, 52, -18, 116, 120, -111, -14, -69, -51, 119, -74, -73, 104, 57, -85, -81, 98, 109, 111, 94, 14, 75, 71, 50, 123, -30, -16, 78, 64, -28, 2, 95, -113, -97, -28, -119, -99, 117, 5, -23, -24, -86, 46, 81, -49, 81, -2, 23, 19, -21, -56, 76, -18, 24, 69, 4, 8, -112, 7, 121, -10, -93, 5, 116, 53, 7, 91, 98, -123, -51, -7, 88, 77, -117, 124, 63, -28, -72, 33, -6, 98, 49, -70, 3, -105, 55, -49, 29, -85, -123, -45, 43, 39, -44, -116, 20, -119, -113, -30, 81, -79, -123, -66, 110, 126, 120, -118, 64, -15, 112, 8, 113, 30, 38, -26, -51, 89, 81, -111, -115, 37, -100, 42, -2, -106, -14, -71, 27, 62, -96, -93, -99, 45, -47, -37, -105, 7, 32, 67, -84, 86, 76, -128, -43, 106, 116, 14, -20, -114, -32, 76, 78, -65, -56, 11, -110, -51, -23, -126, 18, 107, -96, 7, 66, 47, -23, 63, -42, -55, -10, -78, 25, -103, 89, -75, -125, -34, 117, -113, -51, 40, -81, 99, 25, 81, -29, 67, 95, -110, 104, -44, 64, 104, 124, -17, -125, -83, -122, -3, -67, -11, 0, 55, -65};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.24177086158067418);
    msg.setSource(21305U);
    msg.setSourceEntity(72U);
    msg.setDestination(21510U);
    msg.setDestinationEntity(121U);
    msg.sys_src.assign("XIOCDMADQTTWUPRZKTOLWFGLZYADZLXEQYLRYBMYKAFQTBHBCFVWFJTTNOJJEGMLTBJXCRJECXBRFHFIJMNRDGUMYTEXVSBGZHZYPNXUYHAVFQHJUMHXJKNYDMQZXQSHRIVPLCIEEQNZAFLUSKKCJITDVCKIQBU");
    msg.sys_dst.assign("APXNQZGOFSKCIJTBMILNTJTXFEYLEVJETWDHFHSFPLQWMYKAETPYGHVPCPTHAAGRQRFQNGABRDLKBIYSUBZCGQXBVKNBHQEYNCUOISFMWXTWYCFJRVUZKXPILQRYWDCGVDNKIEXSJNOEBICELUMOOOUXPDQTYYBWWICAFZMJKJBNALZCNXHGMODRLUMRNDSYHKUFXMDOTZPJHORJXPLQURZSVUVBDOMTVEVUKIZAGEKAZWWDSQG");
    msg.flags = 171U;
    const signed char tmp_msg_0[] = {-11, 89, -7, 108, -75, 91, -81, -8, 1, 86, 23, -44, 83, 56, -31, 51, -12, 51, 4, 94, 67, -125, 99, -36, -39, -60, -71, -22, -115, -85, -62, 39, 43, 71, -37, -121, 88, -99, 25, -112, -68, 115, 17, 61, -78, 123, -25, -102, 75, 34, -38, -14, -128, 46, 7, -29, 63, -10, 67, -106, 84, -85, 47, -33, 14, -28, 118, -97, -52, -28, -33, 31, -27, -123, 39, -92, -20, -20, -118, 32, -9, 83, 121, 91, -6, 80, 10, -45, -126, -32, 77, 60, 71, 30, 102, -13};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.972589451973955);
    msg.setSource(3707U);
    msg.setSourceEntity(80U);
    msg.setDestination(4130U);
    msg.setDestinationEntity(216U);
    msg.sys_src.assign("SGRIWIUIDUVPZKKIQJLOPBKMZMXZRLCVBKKYHFXAPVHHUHZPYBCOSWRGYIVWSJJSXNNRYBGWTDXXLDAKRMHCHNFLRDJQGGZDCOYIMRJVQXEZMXCPEASOEGQNBXZLZCCHYLNSBMKVNXVWRTOEUCHROMYVDEWIENAQKPCFHEVQFIYTADXNFQFEALJEATOMUCQTGLASKJ");
    msg.sys_dst.assign("YFNTBEMZGWVOSHSOURGSBANRAWMTXQHQXQXKXPORJDUDFMETTFSZZCAGFIOCVIUPNDHEYWLPAOZWJCGGNTINFPNKAKYOQGTKXHNDMFJBREZBBEFAITQTVCHHSIVULRRTGQQPOCEKVXODBBSBIXIHDPUSWXLNMJFKZOVSYN");
    msg.flags = 51U;
    const signed char tmp_msg_0[] = {-111, -18, 27, -67, -55, 9, -29, 75, -36, -17, -71, 45, 67, 67, -90, 9, -106, -24, -75, 8, 51, -15, 117, -110, 120, 67, -55, 49, 39, -57, -106, 1, -26, 38, 37, -104, -37, 96, 83, 71, 25, -27, 46, -110, 31, 41, 22, -72, 44, -15, -119, -104, -128, 86, 78, -122, 8, -37, -14, -41, -54, -57, -82, -80, 10, -45, 29, -127, -76, 2, -109, -67, 17, 38, 110, 110, -122, 111, -126, -9, -52, 9, -46, 107, -29, -62, 17, -89, 46, 97, -104, 105, -55, -65, 119, 62, 96, 61, -34, 3, 106, -108, 69, -33, -20, -96, 81, -88, -18, 37, -66, 114, -104, -64, -26, -112, -39, 46, -71, -20, 21, 29, 83, 54, -26, 69, -114, -98, 87, -72, 112, 114, 5, -87, 74, -109, -5, 16, -60, -119, -17, 48, -62, 54, 12, 79, 115, 57, 104, -119, -97, -60, -37, -3, 114, 22, 107, -86, 55, -108, -13, 108, 13, 43, -44, -86, -124, -10, -100, 109, -99, -51, -27, 39, 77, 12, -96, -101, 51, 121, -61, 56, 21, 107, 99, 20, 75, -60, -99, 105, -77, -104, -2, -84, -128, -118, 31, -91, -39, -6, -50, 27, -113};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.7996484812256581);
    msg.setSource(34979U);
    msg.setSourceEntity(76U);
    msg.setDestination(53988U);
    msg.setDestinationEntity(224U);
    msg.sys_src.assign("JOFYSIJIWQAOWIDYWKGSPIQTGDYCHKYSBEQGRUDSZPHFULNCRVXLWUWYOEGCYXSPDXGLZBIINJKNUWHLDXHGVIMXOQZMKSOBTTJXBDCZAMEKZQVSYUABRMGBSVDCRKTPWDFRLTRCZMBPNJHPFXCKFUBETNTLHMSLFEPAZNVANVSVUBDIWQIKXANEOEDMJHTCZMFYUQCAJUPMMQJYRAGNFGNVYQRCRKHLOGVFHQAXTRTU");
    msg.sys_dst.assign("LLJMOZQAAHJZWTQKXWQBUIANORFOKPJKPDSNMGEWCWTNMLBZGHKGU");
    msg.flags = 149U;
    const signed char tmp_msg_0[] = {-85, -90, 53, -102, -23, 91, 31, -45, 71, -119, 85, 56, -81, -49, -68, 29, -98, 121, 47, 112, -110, -43, -106, 56, 23, -119, -80, -76, -105, 25, 3, -4, 112, 120, 27, -48, 20, 26, 61, 121, 21, 87, 102, -38, -69, 110, -36, -64, 73, 9, -29, -119, -89, 82, -108, 3, 126, -75, 45, -80, -75, 43, -115, 7, -106, 67, -103, 65, -90, -27, 93, 120, 96, -108, -122, -21, -83, -92, -28, 104, -116, -51, -128, 120, -1, 45, -121, -66, -39, 49, 92, 58, -30, -10, 10, -76, -21, -25, -40, 124, 59, -101, 63, -25, -8, -61, -77, -22, 43, 15, -75, -16, 35, 24, 118, -77, -8, 5, 120, 63, 67, -30, 19, 74, 125, 83, 121, 20, -123, 48, 91, 44, 118, 12, -48, -45, -113, 87, 28, 91, 47, 91, 65, 25, 74, 43, -43, 27, 43, 30, 95, -27, 95, -60, 56, 39, 102, 61, 43, -97, 67, -113, 49, -113, 86, -31, -46, 124, -104, -35, 94, -79, -65, 16, 58, -100, 1, 21, 83, 85, 116, -68, 76, -38, 16, 59, 91, -115, -107, 45, 2, 91, 88, -61, -47, -86, 94, -114, -69, 120, 79, -47, 72, -119, -91, -83, -73, 91, -91, -110, -76, -66, -49, -52, -108, -102, 54, 63, 105, 98, 109, 56, -115, -19, -102, 103, -49, 84, 19, 4, 91, -84, -33, -106, -26, -98, 101, 73, 47};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.38997619512896775);
    msg.setSource(8957U);
    msg.setSourceEntity(231U);
    msg.setDestination(3449U);
    msg.setDestinationEntity(209U);
    msg.seq = 44821U;
    msg.value = 35U;
    msg.error.assign("LXGYZSEJONQYSHKNLRFHBLHVSHOBPIJIIVXBZQDLGKPSEBWERJGDAFBOLMDMHQOQTKVZLWIPPMQXETSMNVDRRWACVUOUAXGNKJCAKJBVCOECYVRS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.13302787771809088);
    msg.setSource(6559U);
    msg.setSourceEntity(197U);
    msg.setDestination(51898U);
    msg.setDestinationEntity(131U);
    msg.seq = 16286U;
    msg.value = 135U;
    msg.error.assign("JAAHQIYZEJXS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.6604825357466912);
    msg.setSource(57616U);
    msg.setSourceEntity(195U);
    msg.setDestination(30012U);
    msg.setDestinationEntity(20U);
    msg.seq = 61849U;
    msg.value = 83U;
    msg.error.assign("KRQYGNHOTDSQBKXQESGNSJQEUOLHLDXVSCIMHWWIKHLCXVOIBCAIXGXGRTQJAEFPJJPVYFQDRNFFUYOSZPYURNMFBNTPHWYKXXJEDDKXYUHCVQTWGNMCIMCPIVAABMRJCSJCGNCXUUWKRNQAIDRAMHA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.2664687418146737);
    msg.setSource(56378U);
    msg.setSourceEntity(198U);
    msg.setDestination(8016U);
    msg.setDestinationEntity(150U);
    msg.seq = 14942U;
    msg.sys.assign("AYWWVMLDCSXHNSHTJKUMRBXVLZUFJFPTYCQFVYEHOZVQGGYPNXQPRIICWOQZRNJLCGKGNDHUCVHRANRABULEPKDSHKLQYSZMXPDUCJOZWUXSKPLLVEASZMJHTRIQNTKBUOJZGRIZMXFPLVXGDCNEEPBVNDOZFECOSXBTIIWDAWTEWBX");
    msg.value = 0.9376564442912373;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.8526606718902021);
    msg.setSource(17231U);
    msg.setSourceEntity(40U);
    msg.setDestination(8922U);
    msg.setDestinationEntity(219U);
    msg.seq = 51107U;
    msg.sys.assign("MWGXLJTHDSEGBCSGKASCAMFKJMLNUDHPPHMRVNNPTNVSXGGQWXTABFHVGWZKCJJDDCZBMDPBEUFCRUNUQDJGRISOLAGAHESBFZECZAIHVIKAVHTHPMMHNWOEYBOIIKIKQTWXXPFXJPYNKNKZVFGDTTELYRJLPWDWOBZFVUAQOQCMLSUZE");
    msg.value = 0.7667124060104069;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.5992283193536065);
    msg.setSource(61886U);
    msg.setSourceEntity(186U);
    msg.setDestination(52407U);
    msg.setDestinationEntity(163U);
    msg.seq = 64127U;
    msg.sys.assign("BPNQZFSWUJSWPBDHOYIGDTZVCEWJBBVFVKKXLWGQHNFNUKJTUUJMZAOPDPLIUNCUVLHETOMGRMVVDJHCNTOZLICAMWVNXIZUDILLEBODXBHIMGFFZBRJYCWDBXYHQMOTOPXTOLGAEGXGMXYOLMZKWZKCRIQUZHYKRBIFCQUVTEWKASEHKJRAAQYEPGANSSKSRVSQETAQHYGOJNGKQNPFYXAIVLEMTUSXPFDSDWCPIBCPWYRECRLQRJH");
    msg.value = 0.38549345617767294;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.0661327287408795);
    msg.setSource(20230U);
    msg.setSourceEntity(130U);
    msg.setDestination(42601U);
    msg.setDestinationEntity(67U);
    msg.seq = 34041U;
    msg.sys_dst.assign("PGGJZPLLQVIGHNKLQZISTLBKPQEMSYUWTYBMOZAMXIALRGSOSHYUWDABXDAEKFDESOJNHEXQABDWRCNNQTKEQHPDXEGCASRMQNBBRQJKCBLZGJGNDIHVSJNOCWAZUVKJKFIXFBLTMWSUCVRPCNVPWEMZBXUCUTOTWPHRYARPFAYJOVPDHDYPDVKHROTQFLSCGIFZFWHDTRZWXUNMJGIOIYMUXRZEG");
    msg.timeout = 0.12046485676085583;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.6486856230792352);
    msg.setSource(45535U);
    msg.setSourceEntity(71U);
    msg.setDestination(55413U);
    msg.setDestinationEntity(221U);
    msg.seq = 32328U;
    msg.sys_dst.assign("JCGWSSURPPTGDOIAQFHYGDZBGYNSGXPLFTIBYQZPNKYNURGDACIZVDAQXSKNUWRHSLEAIIILIRFFVFXLNOMHYXWYDQPKQASYSIBRKNOHVPACSOHPUJCBJTJTUEFTSVMOCQXGETMPMHCABTWCVNFHFQDBCWQABZDOMJZYJKLKETVRVWDWGXDUZMEXKYOAJKXKHQREEGWEBMLROQMHJZCJYPMWVHLR");
    msg.timeout = 0.7648176734288326;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.5854658797234586);
    msg.setSource(41628U);
    msg.setSourceEntity(27U);
    msg.setDestination(42502U);
    msg.setDestinationEntity(10U);
    msg.seq = 38590U;
    msg.sys_dst.assign("NVXAMHQQUNBYMRRZVAEMJSKKVOOZTNWVQTWRMPYZSDZDDGRSEUXNZQTHLNXFPQPYCJETZBVAXQHMNTIGWNBNCGIVALJFKAEUDHSKMAXXECXPCZDQINPAJDXDOCHVWJIICSWAGWBDKRLJULJVMEYSMLPUDCHDIZTISOLUTQPFBIUPWZGTTCGBYGJQBLIKOENFVEUFYZVORSLKKYHIOTYWXKYSERHOUMAF");
    msg.timeout = 0.7811669556274808;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.696134217642313);
    msg.setSource(59626U);
    msg.setSourceEntity(53U);
    msg.setDestination(7953U);
    msg.setDestinationEntity(146U);
    msg.action = 19U;
    msg.longain = 0.826299607329467;
    msg.latgain = 0.7123398962225439;
    msg.bondthick = 3102813701U;
    msg.leadgain = 0.3018463878402581;
    msg.deconflgain = 0.5429580566929214;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.5700049011414431);
    msg.setSource(45755U);
    msg.setSourceEntity(210U);
    msg.setDestination(19307U);
    msg.setDestinationEntity(170U);
    msg.action = 191U;
    msg.longain = 0.3461202122352195;
    msg.latgain = 0.8185041364035105;
    msg.bondthick = 3743790037U;
    msg.leadgain = 0.7214914477107838;
    msg.deconflgain = 0.9223278288559895;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.34246591107610613);
    msg.setSource(24528U);
    msg.setSourceEntity(160U);
    msg.setDestination(5428U);
    msg.setDestinationEntity(181U);
    msg.action = 149U;
    msg.longain = 0.6293247059319661;
    msg.latgain = 0.10981631404639236;
    msg.bondthick = 1749438462U;
    msg.leadgain = 0.5459002915351169;
    msg.deconflgain = 0.9076375614259874;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.5494025373646673);
    msg.setSource(20501U);
    msg.setSourceEntity(179U);
    msg.setDestination(35296U);
    msg.setDestinationEntity(246U);
    msg.err_mean = 0.3123111708663493;
    msg.dist_min_abs = 0.4480137032068152;
    msg.dist_min_mean = 0.2900211527868899;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.49933235893341366);
    msg.setSource(38211U);
    msg.setSourceEntity(201U);
    msg.setDestination(23515U);
    msg.setDestinationEntity(176U);
    msg.err_mean = 0.9290218777916078;
    msg.dist_min_abs = 0.6772669619126785;
    msg.dist_min_mean = 0.9763366316054594;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.7800359044236526);
    msg.setSource(49953U);
    msg.setSourceEntity(104U);
    msg.setDestination(12262U);
    msg.setDestinationEntity(89U);
    msg.err_mean = 0.8672262449131715;
    msg.dist_min_abs = 0.8712510236199871;
    msg.dist_min_mean = 0.5544908576676123;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.14438414301025282);
    msg.setSource(17024U);
    msg.setSourceEntity(72U);
    msg.setDestination(5615U);
    msg.setDestinationEntity(45U);
    msg.action = 137U;
    msg.lon_gain = 0.8916442469338826;
    msg.lat_gain = 0.13617062400488744;
    msg.bond_thick = 0.8486751685381333;
    msg.lead_gain = 0.2171690356914444;
    msg.deconfl_gain = 0.9530701311538086;
    msg.accel_switch_gain = 0.08152147854544833;
    msg.safe_dist = 0.15426847072111938;
    msg.deconflict_offset = 0.1651749042275007;
    msg.accel_safe_margin = 0.3738824999144742;
    msg.accel_lim_x = 0.24603905055658282;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.350763340867434);
    msg.setSource(23439U);
    msg.setSourceEntity(247U);
    msg.setDestination(50482U);
    msg.setDestinationEntity(217U);
    msg.action = 237U;
    msg.lon_gain = 0.4476335036874046;
    msg.lat_gain = 0.06791496879480063;
    msg.bond_thick = 0.5387215635034356;
    msg.lead_gain = 0.299654939142309;
    msg.deconfl_gain = 0.8491007202093545;
    msg.accel_switch_gain = 0.7846708476881591;
    msg.safe_dist = 0.6781668312929701;
    msg.deconflict_offset = 0.6923184335392086;
    msg.accel_safe_margin = 0.907879883630926;
    msg.accel_lim_x = 0.8213037600923809;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.9391364934596351);
    msg.setSource(235U);
    msg.setSourceEntity(33U);
    msg.setDestination(15604U);
    msg.setDestinationEntity(105U);
    msg.action = 146U;
    msg.lon_gain = 0.01812275336456637;
    msg.lat_gain = 0.7509630289183473;
    msg.bond_thick = 0.3215794603891181;
    msg.lead_gain = 0.8216190579297357;
    msg.deconfl_gain = 0.4138278031469188;
    msg.accel_switch_gain = 0.9366746474362514;
    msg.safe_dist = 0.5356905870895291;
    msg.deconflict_offset = 0.12002778416780346;
    msg.accel_safe_margin = 0.15555103633491763;
    msg.accel_lim_x = 0.21672760776112876;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.7980013312966071);
    msg.setSource(11874U);
    msg.setSourceEntity(219U);
    msg.setDestination(4344U);
    msg.setDestinationEntity(37U);
    msg.type = 176U;
    msg.op = 46U;
    msg.err_mean = 0.5419158769563452;
    msg.dist_min_abs = 0.06862991534381568;
    msg.dist_min_mean = 0.17510983975094618;
    msg.roll_rate_mean = 0.6944063838774234;
    msg.time = 0.29219107473630634;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 181U;
    tmp_msg_0.lon_gain = 0.08806013080409458;
    tmp_msg_0.lat_gain = 0.8931693904920293;
    tmp_msg_0.bond_thick = 0.7761900571200341;
    tmp_msg_0.lead_gain = 0.017821293657316883;
    tmp_msg_0.deconfl_gain = 0.013779888070193924;
    tmp_msg_0.accel_switch_gain = 0.15188096010928898;
    tmp_msg_0.safe_dist = 0.35449776328610216;
    tmp_msg_0.deconflict_offset = 0.8952254782267525;
    tmp_msg_0.accel_safe_margin = 0.8689297983049503;
    tmp_msg_0.accel_lim_x = 0.780977523481926;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.7100191168309532);
    msg.setSource(40540U);
    msg.setSourceEntity(50U);
    msg.setDestination(50469U);
    msg.setDestinationEntity(163U);
    msg.type = 55U;
    msg.op = 195U;
    msg.err_mean = 0.475213919546587;
    msg.dist_min_abs = 0.6514360579303408;
    msg.dist_min_mean = 0.19407904430877632;
    msg.roll_rate_mean = 0.39784910421286435;
    msg.time = 0.7143742669100528;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 87U;
    tmp_msg_0.lon_gain = 0.4672380103389031;
    tmp_msg_0.lat_gain = 0.3640047857137866;
    tmp_msg_0.bond_thick = 0.7174665118444034;
    tmp_msg_0.lead_gain = 0.4088261684216189;
    tmp_msg_0.deconfl_gain = 0.4624457322343979;
    tmp_msg_0.accel_switch_gain = 0.16481440253645008;
    tmp_msg_0.safe_dist = 0.8303156608702638;
    tmp_msg_0.deconflict_offset = 0.9392226191336736;
    tmp_msg_0.accel_safe_margin = 0.9849070224994715;
    tmp_msg_0.accel_lim_x = 0.16512791861096976;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.8774136233949476);
    msg.setSource(29024U);
    msg.setSourceEntity(104U);
    msg.setDestination(60705U);
    msg.setDestinationEntity(140U);
    msg.type = 146U;
    msg.op = 68U;
    msg.err_mean = 0.2933154744804818;
    msg.dist_min_abs = 0.8338705036636321;
    msg.dist_min_mean = 0.5085101619637409;
    msg.roll_rate_mean = 0.8866878950710365;
    msg.time = 0.2985225719037766;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 206U;
    tmp_msg_0.lon_gain = 0.3202426236781373;
    tmp_msg_0.lat_gain = 0.1170299595247063;
    tmp_msg_0.bond_thick = 0.5389453379500877;
    tmp_msg_0.lead_gain = 0.8907795470197994;
    tmp_msg_0.deconfl_gain = 0.3439957518253228;
    tmp_msg_0.accel_switch_gain = 0.23388173095360398;
    tmp_msg_0.safe_dist = 0.18541928968449684;
    tmp_msg_0.deconflict_offset = 0.31973806569808483;
    tmp_msg_0.accel_safe_margin = 0.3784315079515116;
    tmp_msg_0.accel_lim_x = 0.2747315842314626;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.1580507192095899);
    msg.setSource(64477U);
    msg.setSourceEntity(248U);
    msg.setDestination(10725U);
    msg.setDestinationEntity(57U);
    msg.lat = 0.5127451353181842;
    msg.lon = 0.7487815307805292;
    msg.eta = 681327773U;
    msg.duration = 26290U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.7118758010787801);
    msg.setSource(39529U);
    msg.setSourceEntity(230U);
    msg.setDestination(42232U);
    msg.setDestinationEntity(208U);
    msg.lat = 0.1517650001807116;
    msg.lon = 0.35894747284651196;
    msg.eta = 4053422985U;
    msg.duration = 33657U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.9868681781830131);
    msg.setSource(10498U);
    msg.setSourceEntity(223U);
    msg.setDestination(32444U);
    msg.setDestinationEntity(191U);
    msg.lat = 0.04538454385201418;
    msg.lon = 0.3431652270730218;
    msg.eta = 105409044U;
    msg.duration = 2901U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.2532768506550199);
    msg.setSource(33952U);
    msg.setSourceEntity(222U);
    msg.setDestination(64664U);
    msg.setDestinationEntity(86U);
    msg.plan_id = 7784U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.44214121082191205);
    msg.setSource(64834U);
    msg.setSourceEntity(168U);
    msg.setDestination(12417U);
    msg.setDestinationEntity(199U);
    msg.plan_id = 65139U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.8849854655122825);
    msg.setSource(61773U);
    msg.setSourceEntity(155U);
    msg.setDestination(7472U);
    msg.setDestinationEntity(78U);
    msg.plan_id = 45109U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.41594315978880547;
    tmp_msg_0.lon = 0.09263144854554906;
    tmp_msg_0.eta = 739592997U;
    tmp_msg_0.duration = 26986U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.9551641269508915);
    msg.setSource(16653U);
    msg.setSourceEntity(130U);
    msg.setDestination(39319U);
    msg.setDestinationEntity(147U);
    msg.type = 8U;
    msg.command = 151U;
    msg.settings.assign("UQBMVHSJYGIQKHWMATJQWTUAIVYXHRNPEXIMVXVBKHDFEQG");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 30403U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.06704737867446053;
    tmp_tmp_msg_0_0.lon = 0.747114744180871;
    tmp_tmp_msg_0_0.eta = 1099190487U;
    tmp_tmp_msg_0_0.duration = 53349U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("RXRGMDSOWRFNBWDEYDCSVAMXMLKLEHRNTNNIPOUOGBCJVCTVVFTYEIIDJAAFBMSYCAJFTJOYDXBVNQXQLZILQZGEYHZUFNZZQHKPAXELZCRNUJBBTBFRMUAMUSIOQFJIBVSCIRYBEJVXGUXLHGCHZJYSPPWYXKLALJZTCARGKVZXKWDYPITFVJURPWNQGLLSQFTVMUDSPMEDHMUIZBPAUOKPEQQOTKHPOGQWHSWWTRKCHNE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.3907673225989805);
    msg.setSource(18190U);
    msg.setSourceEntity(6U);
    msg.setDestination(63126U);
    msg.setDestinationEntity(24U);
    msg.type = 82U;
    msg.command = 175U;
    msg.settings.assign("KEHQVCKVLXJEYTZPLNASNYOMSMEHUUDDNUIRXFVEVJUFYNXWWXSPLCZMQKFSRNFKMGNHIDOGQNOVGXQUYOYORWHBRMUNGTBWSBMTWKGNTPKXZWXCKOBWLQEJEPZABLOUJFCBJSZSVKEFZTJRUUFCYDODWIPKAMHLZRWVVBACPMESQQMRXYTCHI");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 22253U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.41119892211938336;
    tmp_tmp_msg_0_0.lon = 0.6873343853814748;
    tmp_tmp_msg_0_0.eta = 151211409U;
    tmp_tmp_msg_0_0.duration = 18906U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("YFRAVCWVPZGYWTJTVHZRTYEGJNJYSEXFVENCRUMIGNBIUZOQMSHSUQLENMESYPUICTJAEHGGDDFCMZSJPKFXTOHBOHRXOMBCUCOJGWZZURMMLLQINEUILPPDDBJSBQBGLSYCDSFMHVSKXGCVGUSATDBCQNZLOKVHQKQLKNW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.5778045980387546);
    msg.setSource(56025U);
    msg.setSourceEntity(17U);
    msg.setDestination(62841U);
    msg.setDestinationEntity(12U);
    msg.type = 104U;
    msg.command = 77U;
    msg.settings.assign("MHFAJWSLRUULGGDPVJPKLAWSQCOTXKKDISRIEHDEYZHDCFMKNDJGRWKSIMXSDCOJUQIZEVTRNYYAXMHNANMTUIXMLFXWPAXAKUJRAJWEOHBFLZFBXGSEQCPEZGYQYROUZLPREBFQIPPZSGHHPRONZFUXUBNDQDNAWYVJZVLHYBVSMOJGTTKSTIZWPCNKQZAXOCMVBVGTHERBTNEYCCSUHBGQROYNYMKDGBOVWQVEWCXITJL");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 9458U;
    IMC::SoiWaypoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.lat = 0.7429328852940713;
    tmp_tmp_msg_0_0.lon = 0.26210354330793606;
    tmp_tmp_msg_0_0.eta = 11485849U;
    tmp_tmp_msg_0_0.duration = 11176U;
    tmp_msg_0.waypoints.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);
    msg.info.assign("NUYLMFPNFIIHSFULQGGGBKNPZCEHMADJTGPSLEU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.2115478394713275);
    msg.setSource(29299U);
    msg.setSourceEntity(56U);
    msg.setDestination(41518U);
    msg.setDestinationEntity(170U);
    msg.state = 152U;
    msg.plan_id = 9416U;
    msg.wpt_id = 235U;
    msg.settings_chk = 60259U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.5916850498026355);
    msg.setSource(14350U);
    msg.setSourceEntity(31U);
    msg.setDestination(48935U);
    msg.setDestinationEntity(176U);
    msg.state = 141U;
    msg.plan_id = 30208U;
    msg.wpt_id = 36U;
    msg.settings_chk = 11932U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.2884287307760951);
    msg.setSource(8140U);
    msg.setSourceEntity(52U);
    msg.setDestination(35603U);
    msg.setDestinationEntity(210U);
    msg.state = 217U;
    msg.plan_id = 5832U;
    msg.wpt_id = 128U;
    msg.settings_chk = 21645U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.8658377397931645);
    msg.setSource(50379U);
    msg.setSourceEntity(31U);
    msg.setDestination(36323U);
    msg.setDestinationEntity(235U);
    msg.uid = 148U;
    msg.frag_number = 45U;
    msg.num_frags = 140U;
    const signed char tmp_msg_0[] = {63, 96, -63, -84, 104, 13, 120, 92, -3, -81, -59, 87, 96, -38, 95, -99, 49, 75, 15, -93, 84, -101, -98, 78, -5, 92, 28, 61, 111, 124, -4, -111, -41, -19, -98, -112, 116, 40, 48, -120, -51, -116, 34, 2, -24, 22, 30, -22, 52, -50, -47, -16, -27, 22, -128, 97, 59, 98, 17, -125, -115, -100, -38, 2, -58, 90, 83, 50, 14, 126, -62, 26, -36, -13, -113, -48, -66, 57, -63, 21, 7, 33, -35, 118, 107, -65, -35, -10, -75, 44, 27, 80, 0, 106, 18, 5, -10, 58, -110, 60, -111, 49, -97, -35, 98, 120, 110, 115, -111, 38, -88, -19, 105, -30, 52, 41, 62, 35, 59, -12, 82, 68, -59, -63, -54, -38, -57, 117, -61, 126, -48, -124, 97, -102, 117, 95, 45, 87, -86, 6, 77, 17, -77, 114, 63, -50, -91, 12, 77, -97, -104, 23, 90, -82, 125, -85, 102, -114, -112, 65, -42, -9, -78, 34, 112, 47, 108, 16, -108, -106, -89, -62, -9, 118, -57, -4, -119, 100, -2, -18, -122, -76, 98, -128, 96, -85, 3, 52, -112, -49, 83, 29, 18, 92, -34, -87, 107, 97, 117, 119, 110, -95, 45, 6, 85, 34, -80, -69, -39, -4, -18, 59, -114, 75, -19, -103, -52, 74, -70, 24, -13, 10, 48, 88, 60, 79, 6, 81, -3, -61, 103, 71, -103, 106, 25, -99, 91, 26, -89, -36, -114, 110, -76, -87};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.2616163957506885);
    msg.setSource(58520U);
    msg.setSourceEntity(215U);
    msg.setDestination(13596U);
    msg.setDestinationEntity(182U);
    msg.uid = 75U;
    msg.frag_number = 106U;
    msg.num_frags = 114U;
    const signed char tmp_msg_0[] = {-123, -73, 13, -16, 2, -126, -91, 7, 26, -62, -63, 87, -43, -65, 70, -71, -70, 63, 58, -121, 72, -18, 95, 31, 4, -54, -36, -35, 8, -128, 24, 88, 93, 13, 107, 42, 31, -30, 123, -73, 76, -90, 76, -2, -109, -82, 88, 89, -79, 57, -65, -121, 0, 91, -89, 16, 61, -11, -66, 63, -93, 54, -119, 112, 80, 37, 65, -107, 111, 122, 100, 35, -106, 78, 69, -91, 66, -64, -111, -120, -79, 2, 70, 104, -54, 25, 45, 91, 117, 124, -69, 71, 84, -119, 124, -105, -72, 59, -104, 124, -78, 79, 62, -70, -8, 84, -113, 121, 108, -116, -69, -117, -19, 41, -21, -3, 64, -111, 15, 73, 2, 112, 19, -83, 56, -71, 25, -29, -54, 73, -114, -39, 94, -83, -1, 56, -68, -83, 45, 53, -103, 68, 4, -13, -53, 35, -90, 125, -123, 14, -3, 19, 89, 123, -10, 50, -58, 7, -68, 111, 82, -58, 111, -16, -82, 72, -117, 19, -115, 22, 113, -41, 33, -102, 74, -26, -128, 116, -68, -70, 78, 64, -20, 106, 4, 8, 14, -117, -115, 39, -101, -71, -13, -33, -13, -73, 126, -60, 49, 100, -106, 64, 18, -113, 6, 108, 5, -78, -25, 41, 7, 12, -101, 21, -75, -13, -67, -94, -84, -52, 107, 109};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.23422655784552082);
    msg.setSource(49754U);
    msg.setSourceEntity(200U);
    msg.setDestination(47148U);
    msg.setDestinationEntity(35U);
    msg.uid = 42U;
    msg.frag_number = 189U;
    msg.num_frags = 178U;
    const signed char tmp_msg_0[] = {79, -96, -113, 62, -54, -13, -43, 121, 108, 72, 35, 62, 93, 52, -61, -117, 2, -124, 126, 3, 115, -52, -108, -42, -53, 17, -41, 85, -24, 62, -14};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.5183301009415544);
    msg.setSource(23173U);
    msg.setSourceEntity(130U);
    msg.setDestination(10843U);
    msg.setDestinationEntity(156U);
    msg.content_type.assign("LDPKCMPUOSIJKDPFOOSCFEFSRIBKPAYSLNHGYWRYGOVWMVWMYQIMRTHGRRBGWLUBLIIEOQZTMHFACSEKFAVBQTOCFRNWPGVJBHDEREBIQSZZGXRATRFXHOASXKZNYIWDQJUPPLPCBYUDTLTPOZIFANHAAGNNHNUKYDVINLJJPXZXNQYJMBFXQJTZYACCRUGXOCUTULWETACSVOSL");
    const signed char tmp_msg_0[] = {13, -89, 116, -53, -1, 38, -110, -67, -66, 37, -127, 94, -19, 48, 52, -101, 42, 59, 33, -106, -21, -90, -106, 18, 58, 110, 84, -81, -61, -16, -10, 81, -115, -85, 118, 31, -26, 122, -109, -51, -63, -98, 64, -104, -65, -40, -125, 117, -66, 33, -76, 38, -111, 18, -40, -74, 65, -102, 15, 96, -112, 126, 74, -66, 58, -29, -103, 5, -105, 106, -72, 66, -121, 113, 59, -97, -46, -82, -29, 80, -72, 92, 60, -71, -107, -82, -3, 65, -107, -54, 76, -118, 58, -123, 122, -30, -5, -78, 64, 32, 125, -73, -48, 72, 46, -50, 109, 79, 35, -97, 125, -81, -20, 4, 25, -11, 124, 36, -27, -69, -32, 100, 59, 61, 82, -49, 122, 108, 41, 59, 101, -16, -54, -35, -6, -78, 106, 33, -20, 111, 73, 74, -100, -109, 63, -72, -112, 30, 66, 28, -124, -20, -104, -58, 113, -13, 100, -39, -44, 6, -5, -4, 82, -23, 77, -103, 68, 72, -35, -68, 111, -98, -72, -35, -70, 87, -34, 119, -16, -123, 92, -5, -58, -21, -39, 39, -16, -7, -29, 34, -8, -104, 97, -19, -32, 43, 123, -107, -49, 88, 66, 39, 62, -23, -128, 97, 16, 117, -86, 41, -126, -63, 64, -109, 56, -73, -99, 5, -86, -81, -48, 73, -41, 49, -24, 117, -87, -82, -70, 58, 58, -96, 41, 81, -104, 34, 56, 66, -86, 48, 19, 91};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.12726180352336425);
    msg.setSource(53110U);
    msg.setSourceEntity(176U);
    msg.setDestination(17658U);
    msg.setDestinationEntity(241U);
    msg.content_type.assign("AAYVBLOGEMLHONQGRXZZQWCZCFYDVRGZGERZWSDFPAWTHOHBHFMOJVJ");
    const signed char tmp_msg_0[] = {61, -121, 126, 41, 11, -42, 81, -71, 12, -112, -13, 56, 79, -67, -57, -9, -80, 122, -83, 46, 49, -91, 4, -15, -20, 106, -107, 10, -46, 16, 115, -92, 45, -1, -4, -3, 15, 17, -114, -66, -19, 43, -118, 50, 72, 2, 51, -69, 80, -22, -13, -5, -69, 96, -63, -42, 113, 82, -123, 119, -127, 63, 51, 41, 1, 66, -92, -7, 48, 116, -66, 108, 90, -120, -24, 87, -12, -62, -54, -38, -85, 53, 18, -67, -77, 102, 4, 120, 56, -24, -61, -21, -87, 105, 50, 30, -18, 70, 82, -50, -31, 36, 26, 98, -117, 46, 110, -73, -118, -112, -65, -52, -107, -106, -128, 120, 17, -13, -70, -77, 28, -95, 46, -98, 32, 81, 62, 62, -60, -36, 29, -58, 71, 115, 65, -25, -95, 108, -48, -69, -95, 17, 31, -57, 114, -73, -57, 91, 117, 0, -87, -122, 83, 15, -126, -15, 121, 30, -48, -93, -15, -106, -89, -52, 38, 70, -31, -110, -90, 111, 123, 89, -78, -53, 76, -55, 26, 72, 38, -25, -81, 20, -103, -23, -77, -119, 0, 55, 46, -70, 75, -17, 95, 40, -86, -116, 41, -37, 37, 72, 39, -71, 15, 11, 32};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.07107827847079684);
    msg.setSource(51761U);
    msg.setSourceEntity(30U);
    msg.setDestination(7203U);
    msg.setDestinationEntity(106U);
    msg.content_type.assign("ZEKKZGDDZNHHAABQPIDIUKVPSUQQEZUXKSGDRFMLWBLFQVRAMRTHZPFOMWDURAAEMMXWTJRVLTKVMSOORDCJGKVSTWOICCUGFJCREGFWOLPBNNYEOHYPQYXNPVQYKAGIXMNDTEWCISIKWFOTMLBRUJPCFJGNBPPMXUUTTJDUAMVXNBHHKAGAQHSSTR");
    const signed char tmp_msg_0[] = {-55, -53, 60, 52, 61, 87, 98, 13, 90, -113, 61, 11, 35, 112, -35, -98, 57, 97, -16, 22, -124, 102, 50, 84, 119, -127, 97, 43, 59, -29, -19, 46, -28, 123, 55, -106, 58, 87, 75, -16, 16, 21, -47, 119, 120, -101, 85, 7, -109, -110, 12, 67, 53, 27, -86, 43, -75, -51, -112, -57, 87, 27, -16, -60, -77, 49, -20, 95, -82, 73, 71, -9, -54, -91, 49, -112, 40, 81, -121, 27, 45, -69, 73, -28, 1, 31, -62, 102, -16, -67, -19, 80, -119, 118, 16, -118};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.4262253186408097);
    msg.setSource(30542U);
    msg.setSourceEntity(212U);
    msg.setDestination(23537U);
    msg.setDestinationEntity(195U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.07663133356647);
    msg.setSource(4334U);
    msg.setSourceEntity(229U);
    msg.setDestination(22712U);
    msg.setDestinationEntity(44U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.26961378621973076);
    msg.setSource(28925U);
    msg.setSourceEntity(245U);
    msg.setDestination(23926U);
    msg.setDestinationEntity(155U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.315453181914359);
    msg.setSource(3722U);
    msg.setSourceEntity(20U);
    msg.setDestination(48540U);
    msg.setDestinationEntity(80U);
    msg.target = 55768U;
    msg.bearing = 0.4740156725391126;
    msg.elevation = 0.8913347955507593;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.7217534000534468);
    msg.setSource(58585U);
    msg.setSourceEntity(27U);
    msg.setDestination(16540U);
    msg.setDestinationEntity(22U);
    msg.target = 8894U;
    msg.bearing = 0.5915234192109701;
    msg.elevation = 0.44144568925299177;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.15964486931102873);
    msg.setSource(21368U);
    msg.setSourceEntity(108U);
    msg.setDestination(52793U);
    msg.setDestinationEntity(54U);
    msg.target = 19630U;
    msg.bearing = 0.5418966861651774;
    msg.elevation = 0.31050720806147036;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.735164915752337);
    msg.setSource(20442U);
    msg.setSourceEntity(218U);
    msg.setDestination(26708U);
    msg.setDestinationEntity(4U);
    msg.target = 16524U;
    msg.x = 0.47615677891712793;
    msg.y = 0.31170054071628284;
    msg.z = 0.03858531000648047;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.4297848194027063);
    msg.setSource(20198U);
    msg.setSourceEntity(182U);
    msg.setDestination(43892U);
    msg.setDestinationEntity(52U);
    msg.target = 42438U;
    msg.x = 0.05414903469896715;
    msg.y = 0.1055629517158605;
    msg.z = 0.8929473188110304;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.8350185176507398);
    msg.setSource(28888U);
    msg.setSourceEntity(108U);
    msg.setDestination(34530U);
    msg.setDestinationEntity(168U);
    msg.target = 54023U;
    msg.x = 0.44387502768975473;
    msg.y = 0.46477505267011476;
    msg.z = 0.8079503053218144;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.9853881930421693);
    msg.setSource(58575U);
    msg.setSourceEntity(105U);
    msg.setDestination(351U);
    msg.setDestinationEntity(156U);
    msg.target = 40757U;
    msg.lat = 0.4098518104803447;
    msg.lon = 0.7822906837143329;
    msg.z_units = 245U;
    msg.z = 0.07539295209849417;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.2230490749044155);
    msg.setSource(49195U);
    msg.setSourceEntity(244U);
    msg.setDestination(58304U);
    msg.setDestinationEntity(126U);
    msg.target = 14087U;
    msg.lat = 0.8027447856857399;
    msg.lon = 0.5488610600438779;
    msg.z_units = 0U;
    msg.z = 0.6612933697780704;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.7497379811324926);
    msg.setSource(59132U);
    msg.setSourceEntity(37U);
    msg.setDestination(23942U);
    msg.setDestinationEntity(195U);
    msg.target = 48035U;
    msg.lat = 0.5197240547270896;
    msg.lon = 0.27673168161720296;
    msg.z_units = 223U;
    msg.z = 0.7484761869972719;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.846594198522148);
    msg.setSource(14330U);
    msg.setSourceEntity(21U);
    msg.setDestination(65218U);
    msg.setDestinationEntity(48U);
    msg.locale.assign("FVEVLHCPDTSOOJFYSYHIUHTMLZVPBYMDPTDSOEUDHTLLDHQENVWOTBCRQDFASAZJCBLWRNZJRIWYWSHNYBGRBOBJXKUZPDENAFUQWMMAYMUFBIJICSZOKGUFIVHZBCKWF");
    const signed char tmp_msg_0[] = {-78, -68, 29, -8, 113, 104, 27, 42, 3, 44, -123, -68, -98, 46, 2, -79, -116, 115, -91, 45, -2, -35, -128, 113, 56, -83, -56, 117, -104, -66, 53, 49, -36};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.8773815698343204);
    msg.setSource(41573U);
    msg.setSourceEntity(104U);
    msg.setDestination(43305U);
    msg.setDestinationEntity(71U);
    msg.locale.assign("KKVAVQOJJZOPNQVOXUBQMPFJIKGPKLSIHBTLFPSVTQOUATZAAJWLJVWDJMCZBCBKDURZEAUXYRFQRBQHMAFLOI");
    const signed char tmp_msg_0[] = {0, -114, -78, -28, -106, -107, 97, -79, -64, 24, 12, -104, -89, 69, 112, 106, 118, -110, 40, 64, -86, 33, 74, 11, 20, 14, 5, 73, -62, 70, -50, -38, -12, -115, -47, -50, 116, 23, 62, -82, -25, 32, -60, 12, 106, 94, 14, 54, -71, 29, 53, -122, -95, 39, -83, -5, 110, 91, 20, 91, -102, 77, -88, -74, -98, 7, 74, -117, 16, -26, 60, 53, -84, -98, -45, -12, -63, -35, -61, -84, -38, 70, 69, 98, 71, 69, -47, 77, -21, -70, -84, -37, -56, -64, -89, -110, -25, -64, 25, -109, -29, 126, 65, 65, -97, -44, 28, 94, 108, 67, 66, -73, 117, -17, -37, -29, 46, 40, 76, -124, 18, 88, 123, 4, -40, 79, -32, -57, -92, 97, 7, 46, -23, -115, 12, 80, 46, -1, 25, 51, 121, 29, -80, 4, 5, 104, 26, -68, -81, 95, 113, 70, -24, 38, 33, -28, 96, -55, 38, -111, 112, 61, 79, -44, -96, 51, -61, -22, -55, -14, 85, -69, -32, 20, -2, -128, -44, 101, 6, 97, -109, 48, -8, 89, 14, 5, 76, -69, -28, 91, -59, 96, 66, 121, 56, 39, 55, -108, -104, -12, 85, -118, 97, -85, -109, 66, 50, -115, 57, -34, 26, 33, -73, -66, 112, -108, 35, 54, -83, -107, 93, 14, -18, -89, 115, 6, -26, 55, -44, -78, 56, 46, -18, -48, 69, -89, 84, 54, 55};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.03292280176410067);
    msg.setSource(676U);
    msg.setSourceEntity(76U);
    msg.setDestination(50963U);
    msg.setDestinationEntity(128U);
    msg.locale.assign("GWMGBOZCGAABYTHZRKGVTWUSVBHRSBLZKVZJUHPHPRYWQKUFMFAKESEZUEXFTVCQMCDQIQQJHFDTJBMEWFLWAIXVPSOKKBFHLJJEIVPMDNSVKFKAIXSMOCCTAXGTIWFZXXLOBOHOQLJGSXARRWWLHWQSAGDHMPAYIOTNYERKZYRYTGLYCCJUBAUNNGPC");
    const signed char tmp_msg_0[] = {-90, -86, 76, 120, -17, -66, -118, 43, -109, 23, -42, 0, -77, 30, 90, -37, 37, -108, -37, 124, -27, 7, -121, 111, 105, -20, 34, 9, 0, 92, -99, -10, 48, 61, -104, 18, -79, -55, 87, 53, -114, -25, 58, -38, -97, 71, 74, 116, 84, 40, 47, -58, 80, -87, -15, 2, 64, 60, 115, 30, -120, -63};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.5981396295521914);
    msg.setSource(16857U);
    msg.setSourceEntity(245U);
    msg.setDestination(25478U);
    msg.setDestinationEntity(2U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.6110138586786582);
    msg.setSource(13377U);
    msg.setSourceEntity(12U);
    msg.setDestination(54438U);
    msg.setDestinationEntity(103U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.09775864821806668);
    msg.setSource(47799U);
    msg.setSourceEntity(38U);
    msg.setDestination(32455U);
    msg.setDestinationEntity(57U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.3716451182663689);
    msg.setSource(2451U);
    msg.setSourceEntity(232U);
    msg.setDestination(25862U);
    msg.setDestinationEntity(205U);
    msg.camid = 202U;
    msg.x = 57691U;
    msg.y = 10160U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.34056484643790697);
    msg.setSource(51130U);
    msg.setSourceEntity(246U);
    msg.setDestination(33962U);
    msg.setDestinationEntity(214U);
    msg.camid = 78U;
    msg.x = 35165U;
    msg.y = 55135U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.9113669617400465);
    msg.setSource(58458U);
    msg.setSourceEntity(131U);
    msg.setDestination(52235U);
    msg.setDestinationEntity(135U);
    msg.camid = 3U;
    msg.x = 17229U;
    msg.y = 22914U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.182415024029002);
    msg.setSource(58183U);
    msg.setSourceEntity(4U);
    msg.setDestination(44310U);
    msg.setDestinationEntity(113U);
    msg.camid = 101U;
    msg.x = 60183U;
    msg.y = 63037U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.9059097842625189);
    msg.setSource(5464U);
    msg.setSourceEntity(128U);
    msg.setDestination(16226U);
    msg.setDestinationEntity(104U);
    msg.camid = 215U;
    msg.x = 59958U;
    msg.y = 62660U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.8480020488932546);
    msg.setSource(2227U);
    msg.setSourceEntity(183U);
    msg.setDestination(46565U);
    msg.setDestinationEntity(151U);
    msg.camid = 162U;
    msg.x = 32540U;
    msg.y = 37341U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.22444097837921018);
    msg.setSource(59877U);
    msg.setSourceEntity(250U);
    msg.setDestination(55444U);
    msg.setDestinationEntity(62U);
    msg.tracking = 241U;
    msg.lat = 0.8586399261754823;
    msg.lon = 0.3680852410742602;
    msg.x = 0.9898186794391909;
    msg.y = 0.5620112946863839;
    msg.z = 0.6869960198338709;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.665850723796414);
    msg.setSource(60795U);
    msg.setSourceEntity(167U);
    msg.setDestination(7206U);
    msg.setDestinationEntity(157U);
    msg.tracking = 244U;
    msg.lat = 0.8300752592379075;
    msg.lon = 0.6951122789064965;
    msg.x = 0.7249460902896653;
    msg.y = 0.11782754386068761;
    msg.z = 0.013056693376986894;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.6032639351877214);
    msg.setSource(13589U);
    msg.setSourceEntity(132U);
    msg.setDestination(16354U);
    msg.setDestinationEntity(246U);
    msg.tracking = 15U;
    msg.lat = 0.8188607784020963;
    msg.lon = 0.41734320876661246;
    msg.x = 0.82127051862519;
    msg.y = 0.00813205741724976;
    msg.z = 0.6344999737300259;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.5671212555846057);
    msg.setSource(49212U);
    msg.setSourceEntity(168U);
    msg.setDestination(64975U);
    msg.setDestinationEntity(240U);
    msg.target.assign("GDMXLUHNKDGLWAR");
    msg.lbearing = 0.40367661236910346;
    msg.lelevation = 0.5094132957796489;
    msg.bearing = 0.7956569507123958;
    msg.elevation = 0.05624140809396383;
    msg.phi = 0.22495568912025543;
    msg.theta = 0.8234489237762064;
    msg.psi = 0.06585679090211927;
    msg.accuracy = 0.484751144471008;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.2083492765302173);
    msg.setSource(23022U);
    msg.setSourceEntity(249U);
    msg.setDestination(64925U);
    msg.setDestinationEntity(120U);
    msg.target.assign("YWMFMYHWDDRISURIXHFGEBLXXSFCZKVSYBBJVHVINROUCEDKGGNTJOIFBUITBULMQHYFJARZFLHGPKXZHLWEPXSSBQSWRJPTKXWCJEOKGBRVDCPTWEPTZDAAWESOVLCJNKTQSIRGFQTFXAMAIKMIYHGAIJQMTDZNGBZNELPFQPVCZNVZDGMYVCPEQCDBMAWMEQCMYSKWPTGHEIXLOOFJOJAQOBZRUOUNLVJDXRNU");
    msg.lbearing = 0.4413853520131922;
    msg.lelevation = 0.8408145288051303;
    msg.bearing = 0.4936290886556818;
    msg.elevation = 0.44161571617900286;
    msg.phi = 0.5168746180673045;
    msg.theta = 0.5811400411472649;
    msg.psi = 0.49415832205078014;
    msg.accuracy = 0.3768896885452355;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.18486856897362758);
    msg.setSource(657U);
    msg.setSourceEntity(76U);
    msg.setDestination(17529U);
    msg.setDestinationEntity(213U);
    msg.target.assign("QOKVAOUGRSPVQIGHVUXABDGZHNYFHZWKWJXFVPFDUTKLQNQKQWLMPCGUNMISPMQBCQRUBABEOVBYXDDTRLEABIZZJCXVUMXWCRAEUVPPDODMJPLKCTYYTNXLFIMWOEWEITQLGSKQBYBITLFZENGLGAUXCDSSJRYPSNGWEHMRLZYNDZSBUZVVCPFXXJFFKVLTMHNTJTIKYWAOWOZRHSSJXDFZYRICJHFRHRHBEKGMOHUINAEAWMCJI");
    msg.lbearing = 0.711458578935568;
    msg.lelevation = 0.0846853352635859;
    msg.bearing = 0.9070189432774447;
    msg.elevation = 0.011944085737895516;
    msg.phi = 0.6081332183843776;
    msg.theta = 0.35450317275050414;
    msg.psi = 0.9147927043471146;
    msg.accuracy = 0.32131046386183115;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.39338794027500656);
    msg.setSource(43700U);
    msg.setSourceEntity(47U);
    msg.setDestination(59058U);
    msg.setDestinationEntity(69U);
    msg.target.assign("FYRLVCGGWCIENKFOIENPWHAVXPUMVNTQAPDTEOVVNDJMMOKQWONLYKXFJTRDGQEIM");
    msg.x = 0.10150098166307886;
    msg.y = 0.614660523889859;
    msg.z = 0.9343385924255679;
    msg.n = 0.25158701870200895;
    msg.e = 0.43351869968030043;
    msg.d = 0.6469813772675742;
    msg.phi = 0.5550238353737116;
    msg.theta = 0.823785704907252;
    msg.psi = 0.6550707194148242;
    msg.accuracy = 0.43205218985337435;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.5301391161024224);
    msg.setSource(57161U);
    msg.setSourceEntity(196U);
    msg.setDestination(23392U);
    msg.setDestinationEntity(144U);
    msg.target.assign("BUVULHBJJWPVBUUHSSKGEDTXMMVNBASYJZNZXABQCYUIVRRQGNSPENFFOMLWMVDCYMYJCYNLP");
    msg.x = 0.08732104717919864;
    msg.y = 0.35219032037853903;
    msg.z = 0.27843427322590064;
    msg.n = 0.4196219325944155;
    msg.e = 0.21762345893948776;
    msg.d = 0.1439532672294559;
    msg.phi = 0.21551071735522287;
    msg.theta = 0.7421087051348575;
    msg.psi = 0.5298057624700959;
    msg.accuracy = 0.5709838997371882;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.3280189489061942);
    msg.setSource(7842U);
    msg.setSourceEntity(201U);
    msg.setDestination(53418U);
    msg.setDestinationEntity(90U);
    msg.target.assign("WUDPEAZPFTBFCNMTBNACXEOOBEJQNQKGWDAZRBIVFXFMDBLZBYWSWRABXEPWNDPFWRGUSJKVGYNMCVECJPTIVOHGZKUGITUMMXDNPFOGRNSQHBLIBHUEMODLZTJNSAVAAFZICANLORXZYMSWQBDYMIQHRYTJIIZ");
    msg.x = 0.13769142735781514;
    msg.y = 0.12371673145502504;
    msg.z = 0.08979140479636893;
    msg.n = 0.020538647399192644;
    msg.e = 0.67261014496983;
    msg.d = 0.17266615698593224;
    msg.phi = 0.9159521874421418;
    msg.theta = 0.11947906625191784;
    msg.psi = 0.5859215249861321;
    msg.accuracy = 0.039141846098768474;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.47402658902025274);
    msg.setSource(19436U);
    msg.setSourceEntity(136U);
    msg.setDestination(55199U);
    msg.setDestinationEntity(147U);
    msg.target.assign("CHUXCVFSRUQWTTNEHKBIQETDPMNWLWXFTDGIOMYDMSBGONUDEURFNANSZVOTWXKUYNBY");
    msg.lat = 0.7240648771583876;
    msg.lon = 0.6042881219655619;
    msg.z_units = 52U;
    msg.z = 0.012115160959888072;
    msg.accuracy = 0.5740640933786563;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.4031092858845965);
    msg.setSource(12452U);
    msg.setSourceEntity(246U);
    msg.setDestination(5121U);
    msg.setDestinationEntity(47U);
    msg.target.assign("SFLURZYDSYEIXORJBOAIXTCCEPQNDMWAMAVRXSAADEBEPYBLAGJBUDJUPKIYCDHNOITKHJOKXEISULMGZPMSMXIACGDGGLFWIFGRDLNZVGLKAZQHHMRPIKLBMQYUAZTVWVWTHOKFXNLSNBHNFLDWCWYATGFOZZPVMEJYWQLNBFJUJXJOSYRPDBRHQXCUMWRDBX");
    msg.lat = 0.6196678679166193;
    msg.lon = 0.346439588933254;
    msg.z_units = 249U;
    msg.z = 0.7871536497755037;
    msg.accuracy = 0.10805766236401038;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.24096311785262248);
    msg.setSource(121U);
    msg.setSourceEntity(169U);
    msg.setDestination(2517U);
    msg.setDestinationEntity(110U);
    msg.target.assign("IVQTUCCHSAMZPDGLKRHLJSEORITEOKJUFJNFNUSEOLRIULVYFOWHEXEVPTCOSZFRWEIILFUQRWYYIXRDXABKTWOMJJ");
    msg.lat = 0.5510798011751594;
    msg.lon = 0.9525104232539847;
    msg.z_units = 30U;
    msg.z = 0.06506885820014319;
    msg.accuracy = 0.7655824514934968;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.47502744334688474);
    msg.setSource(53365U);
    msg.setSourceEntity(121U);
    msg.setDestination(64722U);
    msg.setDestinationEntity(249U);
    msg.name.assign("ZTBNUZBRBLVXUCFXQHMGRNIJMMNEVVOSJFIDWECHLAESEPZSWTKRTNGVETFEWGGDQJLHDQTIMOWUFRRHAFXJRUWUMDBTIQDQDSWXWKUKXFGIUSYBZMMGXOORFECNKFTCANYBSVKHNPNBYNDGLAOYIMSHAARRMPYJQTDPKHKXZEBZWREZIJPYMVATPISBXFPCQLUPOLZD");
    msg.lat = 0.04112385350731329;
    msg.lon = 0.7634418653877543;
    msg.z = 0.8866399689514239;
    msg.z_units = 93U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.3728357399665687);
    msg.setSource(29710U);
    msg.setSourceEntity(115U);
    msg.setDestination(2185U);
    msg.setDestinationEntity(229U);
    msg.name.assign("VHXSDSZAQLSRXEFVOOWNUCZXFIXPYNNHHILBYXUKDDJBXODPKJGIULQATVCOIKORJCHDGWYMJRWYMVGLGDGSTIIGRHHUZAUQENZMURYYUKPFTLNLMZGAUXABVPVJPUPTEGVPKWTPTCRCB");
    msg.lat = 0.47218049846126575;
    msg.lon = 0.4762326812312586;
    msg.z = 0.278162955248878;
    msg.z_units = 76U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.39887623762276125);
    msg.setSource(56017U);
    msg.setSourceEntity(217U);
    msg.setDestination(27263U);
    msg.setDestinationEntity(27U);
    msg.name.assign("JGHGZDWDHLIXMWPCLQNZVFSVHKDWVBJRPERGTDNISZJEPVFJKBONLCZZEBQWYILAKQEFUEGAKZVUVHBYALMGOWSSCPWEDDXIOTHSBGRNPHACXPMDDQUZVKMRLQNTXNYXTYLNKPMRVDMWOUIKYJASCKQTMUAUVFZHGFFPWLTYROJEFYOBXTOSNEKKBRBTPYUNRXBSXGROHQJEXHSNRZDJTLCPHCCAMSUACGBYGW");
    msg.lat = 0.8475855207390479;
    msg.lon = 0.17214268324727866;
    msg.z = 0.4094444075165721;
    msg.z_units = 93U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.2216224523499073);
    msg.setSource(33993U);
    msg.setSourceEntity(149U);
    msg.setDestination(20849U);
    msg.setDestinationEntity(39U);
    msg.op = 124U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("JRIMBPOYPGWOLKSSEDRCCHFSWSTMDSYLSHEEZLBGQOLGLSXXMOARWSYWHZHTJFMGQAPVPOJLIEJMDKCPUIXMKODQPMDKTCIADGXEZFJBVRLDCUCTAPERHJZRYYM");
    tmp_msg_0.lat = 0.31908208313648134;
    tmp_msg_0.lon = 0.7430411099010319;
    tmp_msg_0.z = 0.4147059828733438;
    tmp_msg_0.z_units = 44U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.2541979233014141);
    msg.setSource(54322U);
    msg.setSourceEntity(25U);
    msg.setDestination(55542U);
    msg.setDestinationEntity(157U);
    msg.op = 170U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("RZRDDRPFJNALYYRZQNGNZLTUWWSSVVIJTJQXRNNFNSCDFZGYHWGPETGITWQBTMOVHDGXETVHEZPQBWAIRYOGHGRCBBEKHKPJFBFLJZFSDVSDOUMLFPXJHOIJUQBAKXUKGWKXYCIWCNQIWRZH");
    tmp_msg_0.lat = 0.8263531921423547;
    tmp_msg_0.lon = 0.008641057702655774;
    tmp_msg_0.z = 0.9883272728027596;
    tmp_msg_0.z_units = 239U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.8169831640074832);
    msg.setSource(1932U);
    msg.setSourceEntity(73U);
    msg.setDestination(1115U);
    msg.setDestinationEntity(155U);
    msg.op = 99U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.7752367728953897);
    msg.setSource(43819U);
    msg.setSourceEntity(144U);
    msg.setDestination(22195U);
    msg.setDestinationEntity(142U);
    msg.value = 0.05312603794803228;
    msg.type = 68U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.8484205460308532);
    msg.setSource(18426U);
    msg.setSourceEntity(254U);
    msg.setDestination(1503U);
    msg.setDestinationEntity(184U);
    msg.value = 0.9203938532110952;
    msg.type = 251U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.4268109490843741);
    msg.setSource(35850U);
    msg.setSourceEntity(100U);
    msg.setDestination(24978U);
    msg.setDestinationEntity(200U);
    msg.value = 0.4340364859743636;
    msg.type = 164U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.9666520037059905);
    msg.setSource(37110U);
    msg.setSourceEntity(0U);
    msg.setDestination(40899U);
    msg.setDestinationEntity(181U);
    msg.value = 0.8411089028909257;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.2756489958809788);
    msg.setSource(65490U);
    msg.setSourceEntity(209U);
    msg.setDestination(8702U);
    msg.setDestinationEntity(33U);
    msg.value = 0.1287552416120914;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.2927870035910919);
    msg.setSource(3849U);
    msg.setSourceEntity(80U);
    msg.setDestination(58398U);
    msg.setDestinationEntity(75U);
    msg.value = 0.23257606932300534;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.6208130710435146);
    msg.setSource(16647U);
    msg.setSourceEntity(107U);
    msg.setDestination(6438U);
    msg.setDestinationEntity(195U);
    msg.timestamp_last_service = 0.5529681124645882;
    msg.time_next_service = 0.42894229508892867;
    msg.time_motor_next_service = 0.9046944584218976;
    msg.time_idle_ground = 0.9844534813637825;
    msg.time_idle_air = 0.15888640998714765;
    msg.time_idle_water = 0.14713885187565545;
    msg.time_idle_underwater = 0.9975267108500887;
    msg.time_idle_unknown = 0.5178054140577589;
    msg.time_motor_ground = 0.006087273740993049;
    msg.time_motor_air = 0.4750245639372581;
    msg.time_motor_water = 0.5246088437120626;
    msg.time_motor_underwater = 0.12013831615892712;
    msg.time_motor_unknown = 0.8469139427563616;
    msg.rpm_min = -15119;
    msg.rpm_max = 16431;
    msg.depth_max = 0.3363023373653079;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.29339609919610254);
    msg.setSource(52042U);
    msg.setSourceEntity(215U);
    msg.setDestination(58165U);
    msg.setDestinationEntity(64U);
    msg.timestamp_last_service = 0.16470070698794748;
    msg.time_next_service = 0.25986423527374714;
    msg.time_motor_next_service = 0.513405630116496;
    msg.time_idle_ground = 0.9245094894116342;
    msg.time_idle_air = 0.6067003197951277;
    msg.time_idle_water = 0.19134158786988587;
    msg.time_idle_underwater = 0.3913776609993973;
    msg.time_idle_unknown = 0.4273523980804296;
    msg.time_motor_ground = 0.57596900918404;
    msg.time_motor_air = 0.5451539318534471;
    msg.time_motor_water = 0.49890131504910196;
    msg.time_motor_underwater = 0.09731097790985233;
    msg.time_motor_unknown = 0.6336319169143922;
    msg.rpm_min = -10733;
    msg.rpm_max = 20049;
    msg.depth_max = 0.017603917774565492;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.7161782612717338);
    msg.setSource(6423U);
    msg.setSourceEntity(197U);
    msg.setDestination(55688U);
    msg.setDestinationEntity(166U);
    msg.timestamp_last_service = 0.6281681316419183;
    msg.time_next_service = 0.5395289072252687;
    msg.time_motor_next_service = 0.6398806893957603;
    msg.time_idle_ground = 0.42111753404925545;
    msg.time_idle_air = 0.6573273409187975;
    msg.time_idle_water = 0.6753493775955965;
    msg.time_idle_underwater = 0.8363356268314228;
    msg.time_idle_unknown = 0.9361369668097181;
    msg.time_motor_ground = 0.9676508293276488;
    msg.time_motor_air = 0.6017374976929246;
    msg.time_motor_water = 0.008959174401481418;
    msg.time_motor_underwater = 0.429335658522378;
    msg.time_motor_unknown = 0.12713442706263856;
    msg.rpm_min = -10656;
    msg.rpm_max = -16100;
    msg.depth_max = 0.1450823011643958;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.042356180033261914);
    msg.setSource(32828U);
    msg.setSourceEntity(104U);
    msg.setDestination(46540U);
    msg.setDestinationEntity(24U);
    msg.severity = 143U;
    msg.text.assign("MFSDESRUUTAIHGBVIGKQOISJNLGLUDKEWVPBRRPAZTYZCUUXWQOHJXPWPCWIMQYVIVDPSDWHYZX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.27192459442894557);
    msg.setSource(46772U);
    msg.setSourceEntity(74U);
    msg.setDestination(35445U);
    msg.setDestinationEntity(92U);
    msg.severity = 52U;
    msg.text.assign("SACPUOXBJQAJGKAVEOZDYLERLRUFVYKQUNXTTRMQDKYRPLVALTDTNTHCRIOFBEYOINIKNSSDB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.5031496015461719);
    msg.setSource(36851U);
    msg.setSourceEntity(186U);
    msg.setDestination(34008U);
    msg.setDestinationEntity(160U);
    msg.severity = 90U;
    msg.text.assign("HKXNNIBCJEUKCAFQGEMARYTCXFOGOVMUHKMBZXJVIFWZURRVYJYTCOQAKSBNTMGBZYQZOEMLDDXASUOEOCPVPIUPYSTDEMEXYOCC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.855380371727759);
    msg.setSource(46385U);
    msg.setSourceEntity(34U);
    msg.setDestination(63107U);
    msg.setDestinationEntity(153U);
    msg.channel = -63;
    msg.value = 1408180390;
    msg.gain = 191U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.9714455228473928);
    msg.setSource(28111U);
    msg.setSourceEntity(219U);
    msg.setDestination(16374U);
    msg.setDestinationEntity(225U);
    msg.channel = -109;
    msg.value = -1211826699;
    msg.gain = 210U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.6145318287343876);
    msg.setSource(6124U);
    msg.setSourceEntity(214U);
    msg.setDestination(1768U);
    msg.setDestinationEntity(110U);
    msg.channel = -68;
    msg.value = 1032493720;
    msg.gain = 63U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.5686754949207912);
    msg.setSource(44532U);
    msg.setSourceEntity(20U);
    msg.setDestination(57328U);
    msg.setDestinationEntity(140U);
    msg.ch01 = 0.12170736972202056;
    msg.ch02 = 0.28391840089367915;
    msg.ch03 = 0.6988891819879758;
    msg.ch04 = 0.6788862838791145;
    msg.ch05 = 0.7725395969535198;
    msg.ch06 = 0.07351092677493276;
    msg.ch07 = 0.6155607838395328;
    msg.ch08 = 0.07644022102736991;
    msg.ch09 = 0.05811836557027783;
    msg.ch10 = 0.5256747039264485;
    msg.ch11 = 0.5130507024398169;
    msg.ch12 = 0.9971371224764897;
    msg.ch13 = 0.6647471273921995;
    msg.ch14 = 0.014627365357208544;
    msg.ch15 = 0.5083042199826973;
    msg.ch16 = 0.7803387685245015;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.09769916747590723);
    msg.setSource(58947U);
    msg.setSourceEntity(95U);
    msg.setDestination(15572U);
    msg.setDestinationEntity(106U);
    msg.ch01 = 0.027915975596199516;
    msg.ch02 = 0.6560032348247705;
    msg.ch03 = 0.5517552759379061;
    msg.ch04 = 0.8148041044799382;
    msg.ch05 = 0.9846921395041021;
    msg.ch06 = 0.2198796276521664;
    msg.ch07 = 0.6738348133975838;
    msg.ch08 = 0.5373589501557133;
    msg.ch09 = 0.29153454863974526;
    msg.ch10 = 0.21122986745544703;
    msg.ch11 = 0.2443905178324246;
    msg.ch12 = 0.8517861703502951;
    msg.ch13 = 0.4502656067604557;
    msg.ch14 = 0.6409785128913255;
    msg.ch15 = 0.7560785263575007;
    msg.ch16 = 0.4668247104933493;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.6631756061928054);
    msg.setSource(54419U);
    msg.setSourceEntity(16U);
    msg.setDestination(9942U);
    msg.setDestinationEntity(146U);
    msg.ch01 = 0.26374882116929155;
    msg.ch02 = 0.7936642938198585;
    msg.ch03 = 0.4364983106248089;
    msg.ch04 = 0.7809130401680522;
    msg.ch05 = 0.37996497257371;
    msg.ch06 = 0.7377900500230753;
    msg.ch07 = 0.760671743447987;
    msg.ch08 = 0.8081240023678166;
    msg.ch09 = 0.17279484338250772;
    msg.ch10 = 0.5577572351880704;
    msg.ch11 = 0.1658777253712066;
    msg.ch12 = 0.8926656432420836;
    msg.ch13 = 0.19509665271874999;
    msg.ch14 = 0.9941751094996711;
    msg.ch15 = 0.05670739537310021;
    msg.ch16 = 0.7866204349155049;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.10228198877190597);
    msg.setSource(6908U);
    msg.setSourceEntity(167U);
    msg.setDestination(12102U);
    msg.setDestinationEntity(252U);
    msg.op = 247U;
    msg.lat = 0.5409467917080389;
    msg.lon = 0.8918287424225717;
    msg.height = 0.13637725413567814;
    msg.depth = 0.0517404010437853;
    msg.alt = 0.26881823789894554;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.2860172528618953);
    msg.setSource(63276U);
    msg.setSourceEntity(217U);
    msg.setDestination(2042U);
    msg.setDestinationEntity(118U);
    msg.op = 246U;
    msg.lat = 0.6015321982827386;
    msg.lon = 0.7818286240766364;
    msg.height = 0.5630576219150543;
    msg.depth = 0.8956672654536143;
    msg.alt = 0.7475697433593051;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.8914132636242822);
    msg.setSource(10006U);
    msg.setSourceEntity(158U);
    msg.setDestination(54165U);
    msg.setDestinationEntity(243U);
    msg.op = 110U;
    msg.lat = 0.7092114843908764;
    msg.lon = 0.7063998081054631;
    msg.height = 0.7099636829277216;
    msg.depth = 0.35107740236449647;
    msg.alt = 0.3155480553847252;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.3007293578572482);
    msg.setSource(39805U);
    msg.setSourceEntity(28U);
    msg.setDestination(37193U);
    msg.setDestinationEntity(114U);
    msg.name.assign("GQKVGLCQWRIJHNAVVJMOEWVEMTM");
    msg.value = 185U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.5561021224588178);
    msg.setSource(23723U);
    msg.setSourceEntity(108U);
    msg.setDestination(38788U);
    msg.setDestinationEntity(144U);
    msg.name.assign("IPSTCPMFEJCNCKQRGZTOQBZRVNYDGNVWWGKDAONOONLNLZGQHORJMOXEXFSQCFUMVPDIIUJDGUVFGIMHZCDKBTAUNUWSLLZBIVXQSMYSWZVTJINRLTVFYALXSM");
    msg.value = 114U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.8196348749058096);
    msg.setSource(51884U);
    msg.setSourceEntity(184U);
    msg.setDestination(31257U);
    msg.setDestinationEntity(16U);
    msg.name.assign("RAOSYJGNHHEXOYRMNLKZDXUEQURHTDMQIPHKCKXBYLKQVHQIWN");
    msg.value = 19U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.6650261438168062);
    msg.setSource(34214U);
    msg.setSourceEntity(219U);
    msg.setDestination(16911U);
    msg.setDestinationEntity(52U);
    msg.name.assign("DFOXOHZRYVRYCLGDXTINVCABXFUGRVNDHLNKVY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.7385506752017281);
    msg.setSource(24255U);
    msg.setSourceEntity(41U);
    msg.setDestination(36659U);
    msg.setDestinationEntity(202U);
    msg.name.assign("SPRMOLDBBXVRSIOKTINFHJWRXWHKQLCEXZFBMVQFFWBIGPIMZBBOZTWGSXXVUCEQYHTABHCGPDJINHHVVPOUVFTNQVUWQTOOWBSRCJUAZLQNFLXIMSYUGMSKXPWMVYJNMDAXOCWGZNRULDWUODATPHGWITJZEJTTYNSI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.4334992460735797);
    msg.setSource(13086U);
    msg.setSourceEntity(109U);
    msg.setDestination(7379U);
    msg.setDestinationEntity(38U);
    msg.name.assign("JSBSYHQTBSZIZQXYMTTAXDRZKBPMXJRNNWGDGMNOPKFIVCHKBOYBSOSCNLUTJTQPREWRDXUQOBRDLFLCFYYEIGSREJYNPAKCZOGWAVHIOEMYCHEUAYDDSULQYFEAXLLOZJOIFKSVNJRXVWXIVTLQJGICQLZKWJCMAQKOFPXEAAHCRPWPHGKBHZWZXMDUSIULHEPDZGYWGMQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.39660501399708936);
    msg.setSource(35643U);
    msg.setSourceEntity(118U);
    msg.setDestination(36326U);
    msg.setDestinationEntity(126U);
    msg.name.assign("SJJVCDQHIQHNUGWXTVWAMYIJJKQBVAETNLQLGWEIIPBUCHMBQYNFNDROMXWRXVBUODZAGXTCFCPZSDSEVUYPRNHDVKOUSCCBJNYEOMRJKMBWXKBNXOMFWFIAHPEZKFYKMVIWRIQICXPOOAIZFCQBDSOLGTRTLNHEVNCQERAYZHHYXSJOSUGWRGJTKZACJDQRDDLQFZXIUESOVLUFPLXFSFZPGGYMAEPKLUYUMTTNRJGEWGKMLK");
    msg.value = 222U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.28364230033294957);
    msg.setSource(37703U);
    msg.setSourceEntity(101U);
    msg.setDestination(23032U);
    msg.setDestinationEntity(163U);
    msg.name.assign("OYMOJBQTLISUTHP");
    msg.value = 210U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.16663993397170473);
    msg.setSource(30298U);
    msg.setSourceEntity(125U);
    msg.setDestination(48294U);
    msg.setDestinationEntity(181U);
    msg.name.assign("HNTMWBPAFXGHPKAOREGDJPONUNDORUAZVXGYUMICGLSONTPRGCZNOBQWGAUIHJAEJEKUCPIYDLYMCSBTICELWHZILLYDMKRRSIVGYHBAQCDTZYUWEIIYVRWUAAERSOFWQTBMBBKXXTSXQDLQTNMGKDZDFSCLXSSOMJOBSEVHEWIHDZZKOPCXQJZKVJUAVZKXRMZFFXT");
    msg.value = 138U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.05555864358465923);
    msg.setSource(3928U);
    msg.setSourceEntity(100U);
    msg.setDestination(30413U);
    msg.setDestinationEntity(132U);
    msg.value = 0.3626032954067998;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.7778368584720228);
    msg.setSource(144U);
    msg.setSourceEntity(2U);
    msg.setDestination(52137U);
    msg.setDestinationEntity(80U);
    msg.value = 0.554572491314498;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.8557028710131854);
    msg.setSource(7190U);
    msg.setSourceEntity(167U);
    msg.setDestination(55800U);
    msg.setDestinationEntity(93U);
    msg.value = 0.7206696776733363;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.595664846136114);
    msg.setSource(21616U);
    msg.setSourceEntity(96U);
    msg.setDestination(46535U);
    msg.setDestinationEntity(99U);
    msg.value = 0.717131191457886;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.14611739064832896);
    msg.setSource(53210U);
    msg.setSourceEntity(195U);
    msg.setDestination(2604U);
    msg.setDestinationEntity(236U);
    msg.value = 0.30427109571403543;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.9575737504921213);
    msg.setSource(22235U);
    msg.setSourceEntity(11U);
    msg.setDestination(43087U);
    msg.setDestinationEntity(16U);
    msg.value = 0.3609141717263117;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.44874763114168315);
    msg.setSource(22370U);
    msg.setSourceEntity(158U);
    msg.setDestination(23586U);
    msg.setDestinationEntity(202U);
    msg.ampl = 0.6485411673573878;
    msg.dir = 0.3593010141162237;
    msg.freq = 0.7087725655130369;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.480545059974537);
    msg.setSource(18375U);
    msg.setSourceEntity(157U);
    msg.setDestination(32900U);
    msg.setDestinationEntity(115U);
    msg.ampl = 0.3934264179646815;
    msg.dir = 0.2323284446188053;
    msg.freq = 0.41210464177218875;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.22109720585930048);
    msg.setSource(24793U);
    msg.setSourceEntity(166U);
    msg.setDestination(51931U);
    msg.setDestinationEntity(70U);
    msg.ampl = 0.4524457407620791;
    msg.dir = 0.07333695430748066;
    msg.freq = 0.31675120118608013;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.5416727398205424);
    msg.setSource(36933U);
    msg.setSourceEntity(98U);
    msg.setDestination(42278U);
    msg.setDestinationEntity(143U);
    msg.value = 0.6955380145439847;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.6060602631910068);
    msg.setSource(26882U);
    msg.setSourceEntity(65U);
    msg.setDestination(20015U);
    msg.setDestinationEntity(153U);
    msg.value = 0.013135360007672015;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.7740770915070154);
    msg.setSource(5316U);
    msg.setSourceEntity(40U);
    msg.setDestination(16117U);
    msg.setDestinationEntity(139U);
    msg.value = 0.555499119645299;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.7641902644228152);
    msg.setSource(16008U);
    msg.setSourceEntity(53U);
    msg.setDestination(40829U);
    msg.setDestinationEntity(175U);
    msg.value = 0.485663870914114;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.3333462849947293);
    msg.setSource(28028U);
    msg.setSourceEntity(33U);
    msg.setDestination(37892U);
    msg.setDestinationEntity(97U);
    msg.value = 0.6699085839391213;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.6210946343661442);
    msg.setSource(50976U);
    msg.setSourceEntity(3U);
    msg.setDestination(17912U);
    msg.setDestinationEntity(124U);
    msg.value = 0.8887136088669619;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.11848477674429114);
    msg.setSource(19584U);
    msg.setSourceEntity(59U);
    msg.setDestination(49272U);
    msg.setDestinationEntity(33U);
    msg.value = 0.5039829348228744;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.22288065971690474);
    msg.setSource(8793U);
    msg.setSourceEntity(141U);
    msg.setDestination(62594U);
    msg.setDestinationEntity(155U);
    msg.value = 0.4373538276979413;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.7040293587565594);
    msg.setSource(63515U);
    msg.setSourceEntity(197U);
    msg.setDestination(18900U);
    msg.setDestinationEntity(180U);
    msg.value = 0.28229454694315337;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.8279606342010295);
    msg.setSource(47108U);
    msg.setSourceEntity(9U);
    msg.setDestination(44587U);
    msg.setDestinationEntity(133U);
    msg.id = -58;
    msg.state = 78;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.7880086065437364);
    msg.setSource(57099U);
    msg.setSourceEntity(157U);
    msg.setDestination(23450U);
    msg.setDestinationEntity(190U);
    msg.id = -24;
    msg.state = -32;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.11256333143805775);
    msg.setSource(6875U);
    msg.setSourceEntity(250U);
    msg.setDestination(35015U);
    msg.setDestinationEntity(44U);
    msg.id = 78;
    msg.state = -43;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.9475268069800745);
    msg.setSource(19467U);
    msg.setSourceEntity(38U);
    msg.setDestination(5554U);
    msg.setDestinationEntity(251U);
    msg.angle = 0.8155282163311705;
    msg.speed = 0.9000390908523491;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.08254005583010238);
    msg.setSource(29868U);
    msg.setSourceEntity(76U);
    msg.setDestination(54028U);
    msg.setDestinationEntity(37U);
    msg.angle = 0.2282810770193272;
    msg.speed = 0.2424403601541829;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.996776118797067);
    msg.setSource(440U);
    msg.setSourceEntity(214U);
    msg.setDestination(56735U);
    msg.setDestinationEntity(61U);
    msg.angle = 0.11762505762436448;
    msg.speed = 0.735561323295915;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.4985944615178787);
    msg.setSource(14853U);
    msg.setSourceEntity(150U);
    msg.setDestination(17039U);
    msg.setDestinationEntity(104U);
    msg.dir = 0.49741988013508665;
    msg.speed = 0.5487272578083908;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.6622403031798979);
    msg.setSource(20097U);
    msg.setSourceEntity(78U);
    msg.setDestination(61415U);
    msg.setDestinationEntity(4U);
    msg.dir = 0.6914167748728954;
    msg.speed = 0.2423431578412295;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.44656231588474216);
    msg.setSource(64993U);
    msg.setSourceEntity(201U);
    msg.setDestination(36417U);
    msg.setDestinationEntity(210U);
    msg.dir = 0.14546350045025358;
    msg.speed = 0.001231478238716499;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.4759699946024307);
    msg.setSource(60683U);
    msg.setSourceEntity(162U);
    msg.setDestination(16622U);
    msg.setDestinationEntity(194U);
    msg.x = 0.18889956962990861;
    msg.y = 0.16084424121524066;
    msg.z1 = 0.8600899619472898;
    msg.z2 = 0.6260765352808267;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.8453086156472019);
    msg.setSource(9987U);
    msg.setSourceEntity(99U);
    msg.setDestination(12551U);
    msg.setDestinationEntity(8U);
    msg.x = 0.9623523572162584;
    msg.y = 0.9269712045547643;
    msg.z1 = 0.1351067678211355;
    msg.z2 = 0.5920150260583243;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.05960468293848298);
    msg.setSource(4717U);
    msg.setSourceEntity(198U);
    msg.setDestination(11504U);
    msg.setDestinationEntity(46U);
    msg.x = 0.8753725507664477;
    msg.y = 0.4842031847218574;
    msg.z1 = 0.60425945384368;
    msg.z2 = 0.6011351149136264;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.7979353248801309);
    msg.setSource(39085U);
    msg.setSourceEntity(151U);
    msg.setDestination(5646U);
    msg.setDestinationEntity(199U);
    msg.mmsi.assign("AXPWUOUTMDYTPIOXQEYVBQIJFRKFNURVAICZTV");
    msg.lat = 0.6430034260303433;
    msg.lon = 0.7120525397256265;
    msg.x = 0.8204824894533254;
    msg.y = 0.6845023290712196;
    msg.speed = 0.16683995799124596;
    msg.course = 0.0738054691771689;
    msg.dist = 0.6169545591007599;
    msg.length = 0.3702595523817862;
    msg.width = 0.31975018968532665;
    msg.o_vect = 0.6820198179881101;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.05509299107886223);
    msg.setSource(10702U);
    msg.setSourceEntity(134U);
    msg.setDestination(61842U);
    msg.setDestinationEntity(86U);
    msg.mmsi.assign("YLQGBGKHFMOPLHLECSIRUQXSYIUNDAAXEXVMFTNSANIGPNSGYRCYREKZKQJVSJALZXWHVNQTWXEORSZVHJPPESPQM");
    msg.lat = 0.5146038516342917;
    msg.lon = 0.38305135114874234;
    msg.x = 0.2382836061069601;
    msg.y = 0.510147565334883;
    msg.speed = 0.544566040731499;
    msg.course = 0.4064348124686904;
    msg.dist = 0.732239311046218;
    msg.length = 0.32375095383514185;
    msg.width = 0.2234625493738439;
    msg.o_vect = 0.5134966196866382;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.7194944285009659);
    msg.setSource(11536U);
    msg.setSourceEntity(22U);
    msg.setDestination(9770U);
    msg.setDestinationEntity(155U);
    msg.mmsi.assign("BVIILZPZOWGVXHUHHPPCXTUFXTQXOWOCFSXASKCDRGUHUGIJORTSADLQBCPPIUCKYBTJXAHVLOKKQTDBDRYTQQGWUZEYVEIZWFVHWKSAWKCQMXMEYDVUTYVSTHIMRNMIORMJNUFZGIOEFCLOBZZKDKMLMVRJIBLXRAMLBSXMAFNNEEACQWUGNSGGJEPHCFSAJQYNDHOEL");
    msg.lat = 0.33957595118530426;
    msg.lon = 0.9606326039886347;
    msg.x = 0.505733558078353;
    msg.y = 0.6793855686154051;
    msg.speed = 0.20259422909977487;
    msg.course = 0.21800672518188968;
    msg.dist = 0.28860494612945053;
    msg.length = 0.9573519787949717;
    msg.width = 0.980292498784929;
    msg.o_vect = 0.7366866919382422;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.29115016293814255);
    msg.setSource(3362U);
    msg.setSourceEntity(250U);
    msg.setDestination(9972U);
    msg.setDestinationEntity(160U);
    msg.depth_at_loc.assign("HCDAUZCRYDAKJUBNXTGRRUSHTRFDHVVSNSSQVQDREFNEGXPBEOAPILCGQMOBTFIBACRAQYCTPTRPSLAKXBICTHPIUQUFWOPNHHWJKTULIBZNYNHNJVCKZSFAAPRWDZMOVXDJHDWVRSQLSSFVHOJLIZVTXGQHBGNDBFNJWZAOL");
    msg.danger.assign("AURPAKNZPDMNBYHHUWNSCVKGKCELTSITJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.2865334670876245);
    msg.setSource(14584U);
    msg.setSourceEntity(233U);
    msg.setDestination(12994U);
    msg.setDestinationEntity(250U);
    msg.depth_at_loc.assign("OMEIETHVCHNDYJCOHEQLUTECGTBHOXQFVAIZYBEDQSFQDTCLIKZTWTNMSVDQABQDDFKROOLYRMMNSREKYYF");
    msg.danger.assign("CNFAQLXZDSBONLZXKVLWQFPKEUQRFLJIIORRJHOFWVULSMMZAPMVSPUTTMBUHIJQGWRNWGZPXSGWXAPFDCPICMFDOIQONQSDKYDRAIVJDESUAMIJQETRMTNGXZWVMRVEQPJECJWNGYUJMBXYEHHHVGKHYCLSEFBS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.9029588043173282);
    msg.setSource(28742U);
    msg.setSourceEntity(180U);
    msg.setDestination(48748U);
    msg.setDestinationEntity(109U);
    msg.depth_at_loc.assign("RXKQBFOKUNUOUECDHEIKVEGYSJXMIMLYYEPJCTVNZPQOVBUQVXVHPWFBSKJOLHFIDDJZKMFEKRKNYBWWWADFCLESHFHSVUTRASQPNJWNHNHSQHHXEQCTOUMANIBMTPBZECKILZUADWT");
    msg.danger.assign("UGEPIFOJMSQPTNOTFYNHISKGUUVCNVSJNXHICFAYEQDIGBINRAVVNIZZLTNRCWPHEJRLHBITCKKYWBFBXPJVOHYRBOVJDMUSZZOZAGNNAOLRWTMHPVKAWBYMITCMLPAFEDSKV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.5473834010501125);
    msg.setSource(37508U);
    msg.setSourceEntity(44U);
    msg.setDestination(55422U);
    msg.setDestinationEntity(239U);
    msg.value = 0.48511353617085495;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.052154665903581976);
    msg.setSource(63138U);
    msg.setSourceEntity(109U);
    msg.setDestination(8300U);
    msg.setDestinationEntity(109U);
    msg.value = 0.6694883132042496;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.8190795163164974);
    msg.setSource(10284U);
    msg.setSourceEntity(79U);
    msg.setDestination(57664U);
    msg.setDestinationEntity(115U);
    msg.value = 0.3798377796897784;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.523218164400897);
    msg.setSource(929U);
    msg.setSourceEntity(109U);
    msg.setDestination(56983U);
    msg.setDestinationEntity(96U);
    msg.beam1 = 0.2964181996294464;
    msg.beam2 = 0.3573953094467578;
    msg.beam3 = 0.2017483413771991;
    msg.beam4 = 0.5251903148352401;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.5984337396878617);
    msg.setSource(60647U);
    msg.setSourceEntity(146U);
    msg.setDestination(50358U);
    msg.setDestinationEntity(40U);
    msg.beam1 = 0.13224596365973906;
    msg.beam2 = 0.496455088453586;
    msg.beam3 = 0.9583149319582973;
    msg.beam4 = 0.9729329399845059;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.9497508963209119);
    msg.setSource(4341U);
    msg.setSourceEntity(99U);
    msg.setDestination(54277U);
    msg.setDestinationEntity(153U);
    msg.beam1 = 0.9903021054709438;
    msg.beam2 = 0.1703773971484024;
    msg.beam3 = 0.8245895859596328;
    msg.beam4 = 0.3944882936579073;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.5640406668633522);
    msg.setSource(27680U);
    msg.setSourceEntity(251U);
    msg.setDestination(3986U);
    msg.setDestinationEntity(37U);
    msg.beam1 = 56U;
    msg.beam2 = 198U;
    msg.beam3 = 30U;
    msg.beam4 = 153U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.3872463708272048);
    msg.setSource(43661U);
    msg.setSourceEntity(152U);
    msg.setDestination(55322U);
    msg.setDestinationEntity(15U);
    msg.beam1 = 86U;
    msg.beam2 = 4U;
    msg.beam3 = 82U;
    msg.beam4 = 157U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.12169765434026658);
    msg.setSource(8628U);
    msg.setSourceEntity(236U);
    msg.setDestination(12435U);
    msg.setDestinationEntity(88U);
    msg.beam1 = 171U;
    msg.beam2 = 202U;
    msg.beam3 = 116U;
    msg.beam4 = 246U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.2902417092105357);
    msg.setSource(56887U);
    msg.setSourceEntity(249U);
    msg.setDestination(28622U);
    msg.setDestinationEntity(132U);
    msg.pos = 0.4701559004708493;
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.19281812949792176;
    tmp_msg_0.amp = 0.8657960187110494;
    tmp_msg_0.cor = 6U;
    msg.beams.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.4733869265268891);
    msg.setSource(33132U);
    msg.setSourceEntity(225U);
    msg.setDestination(8266U);
    msg.setDestinationEntity(177U);
    msg.pos = 0.6730765486782831;
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.494712642174187;
    tmp_msg_0.amp = 0.6077661540747664;
    tmp_msg_0.cor = 154U;
    msg.beams.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.7627402370097962);
    msg.setSource(41746U);
    msg.setSourceEntity(99U);
    msg.setDestination(29067U);
    msg.setDestinationEntity(122U);
    msg.pos = 0.09516993497293547;
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.9213003756789815;
    tmp_msg_0.amp = 0.7170503743947182;
    tmp_msg_0.cor = 133U;
    msg.beams.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.1756311999289275);
    msg.setSource(47462U);
    msg.setSourceEntity(34U);
    msg.setDestination(12820U);
    msg.setDestinationEntity(210U);
    msg.beams = 52U;
    msg.cells = 249U;
    msg.coord_sys = 46U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.6885955426847437);
    msg.setSource(5134U);
    msg.setSourceEntity(170U);
    msg.setDestination(31777U);
    msg.setDestinationEntity(159U);
    msg.beams = 50U;
    msg.cells = 68U;
    msg.coord_sys = 130U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.9154566857167369;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.8649518303758175;
    tmp_tmp_msg_0_0.amp = 0.5574998715196571;
    tmp_tmp_msg_0_0.cor = 241U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.8157319435167129);
    msg.setSource(65056U);
    msg.setSourceEntity(69U);
    msg.setDestination(32417U);
    msg.setDestinationEntity(160U);
    msg.beams = 63U;
    msg.cells = 36U;
    msg.coord_sys = 64U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.878479969036779;
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.6392393974634383);
    msg.setSource(22568U);
    msg.setSourceEntity(125U);
    msg.setDestination(57029U);
    msg.setDestinationEntity(69U);
    msg.vel = 0.26467792579286875;
    msg.amp = 0.08844834693519732;
    msg.cor = 25U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.8867784562634204);
    msg.setSource(58019U);
    msg.setSourceEntity(87U);
    msg.setDestination(14810U);
    msg.setDestinationEntity(213U);
    msg.vel = 0.3672708603053644;
    msg.amp = 0.664264285526888;
    msg.cor = 65U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.6719584895830222);
    msg.setSource(52462U);
    msg.setSourceEntity(143U);
    msg.setDestination(21482U);
    msg.setDestinationEntity(132U);
    msg.vel = 0.6937768475977837;
    msg.amp = 0.9381694105353807;
    msg.cor = 244U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.7954006252292923);
    msg.setSource(41290U);
    msg.setSourceEntity(232U);
    msg.setDestination(2057U);
    msg.setDestinationEntity(207U);
    msg.serial_no = 2548736890U;
    msg.unix_timestamp = 451785806U;
    msg.millis = 32012U;
    msg.trans_protocol = 10U;
    msg.trans_id = 2095366105U;
    msg.trans_data = 50406U;
    msg.snr = 226U;
    msg.trans_freq = 77U;
    msg.recv_mem_addr = 63727U;
    msg.lat = 0.1511445922020579;
    msg.lon = 0.8146586781496602;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.8886418169550194);
    msg.setSource(13088U);
    msg.setSourceEntity(112U);
    msg.setDestination(34173U);
    msg.setDestinationEntity(72U);
    msg.serial_no = 1727089119U;
    msg.unix_timestamp = 2892004569U;
    msg.millis = 37376U;
    msg.trans_protocol = 26U;
    msg.trans_id = 107882530U;
    msg.trans_data = 16291U;
    msg.snr = 39U;
    msg.trans_freq = 156U;
    msg.recv_mem_addr = 31122U;
    msg.lat = 0.3972222006596008;
    msg.lon = 0.3893830893812983;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.37123533254293595);
    msg.setSource(30748U);
    msg.setSourceEntity(16U);
    msg.setDestination(56406U);
    msg.setDestinationEntity(43U);
    msg.serial_no = 2269654888U;
    msg.unix_timestamp = 920042592U;
    msg.millis = 42614U;
    msg.trans_protocol = 78U;
    msg.trans_id = 1604700797U;
    msg.trans_data = 833U;
    msg.snr = 158U;
    msg.trans_freq = 12U;
    msg.recv_mem_addr = 44006U;
    msg.lat = 0.9386334312361896;
    msg.lon = 0.4134920470811366;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.13528771089692282);
    msg.setSource(26708U);
    msg.setSourceEntity(146U);
    msg.setDestination(63570U);
    msg.setDestinationEntity(43U);
    msg.serial_no = 4260488957U;
    msg.unix_timestamp = 3585235720U;
    msg.temperature = 0.15441503188257555;
    msg.avg_noise_level = 180U;
    msg.peak_noise_level = 79U;
    msg.recv_listen_freq = 28U;
    msg.recv_mem_addr = 37582U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.7436357991439311);
    msg.setSource(8859U);
    msg.setSourceEntity(177U);
    msg.setDestination(21650U);
    msg.setDestinationEntity(109U);
    msg.serial_no = 3244787364U;
    msg.unix_timestamp = 3420158693U;
    msg.temperature = 0.0910583470501789;
    msg.avg_noise_level = 61U;
    msg.peak_noise_level = 189U;
    msg.recv_listen_freq = 220U;
    msg.recv_mem_addr = 26501U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.8442441002487057);
    msg.setSource(54263U);
    msg.setSourceEntity(193U);
    msg.setDestination(36836U);
    msg.setDestinationEntity(219U);
    msg.serial_no = 265924838U;
    msg.unix_timestamp = 2126331845U;
    msg.temperature = 0.11252943034636353;
    msg.avg_noise_level = 250U;
    msg.peak_noise_level = 19U;
    msg.recv_listen_freq = 183U;
    msg.recv_mem_addr = 11302U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.22521281337481047);
    msg.setSource(59454U);
    msg.setSourceEntity(60U);
    msg.setDestination(36318U);
    msg.setDestinationEntity(15U);
    msg.frequency = 2022570092U;
    msg.info.assign("GYGWCXXADOEJBWJAREIECWMLHGI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.5753777136988094);
    msg.setSource(21795U);
    msg.setSourceEntity(84U);
    msg.setDestination(58036U);
    msg.setDestinationEntity(209U);
    msg.frequency = 967195442U;
    msg.info.assign("CFHXZLUGYOTZEBXPNXWXDRHIYUODPJCZXSGBJXLDBARWQZAFIRYTQSOGTPQVUVCAXJLDOZAVXGKXNIG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.6399283638319082);
    msg.setSource(30383U);
    msg.setSourceEntity(160U);
    msg.setDestination(18434U);
    msg.setDestinationEntity(37U);
    msg.frequency = 1332244386U;
    msg.info.assign("WZVCXZRBOBWKQRKJTSYNTOANXHOPCSVDFQZLVGMMPWQQOIHRGCYATMFAGMBGQVMMLAAIYQSOLSHRZVYDJUVMEYXVKNENGPDGNYQXSDDKXCQJLFJXBTASIOARKZBTKYRDIENLUSIPQWDJFFZJFLNKPPOVKGOLMXBYRHRLSFHHUJMJEOIMTDUUBCUVIERUNETHQWSKPGWHYGYZAFZRLNAPZNCWF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.8101003751645554);
    msg.setSource(64138U);
    msg.setSourceEntity(229U);
    msg.setDestination(49801U);
    msg.setDestinationEntity(201U);
    msg.restriction = 42U;
    msg.reason.assign("IQRXBGZYBFNNJCKBUHCFDIYRALTGPKBHXAOZYUCROAPFDZBTYZUCOEWANEUCJOMJZDMUXEXGDOBKSKSJNTKCSVRHUFFIPWPZHFYMQZIIJGVQJCLLTZJRXSSXZSSDWANMREXNVALCUQSONWGKQWAOD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.6604962471874726);
    msg.setSource(36395U);
    msg.setSourceEntity(48U);
    msg.setDestination(63117U);
    msg.setDestinationEntity(237U);
    msg.restriction = 210U;
    msg.reason.assign("CRLBFOGRPTSNH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.5606395632152525);
    msg.setSource(994U);
    msg.setSourceEntity(1U);
    msg.setDestination(55688U);
    msg.setDestinationEntity(130U);
    msg.restriction = 238U;
    msg.reason.assign("GWIQKTEWZOQUNXOWABPMOFGUYEEVGJKVVCSKYTWDRJRIOPMNCNVJILRCEBQVTMIQHLKKPFXPBEMHOPEBZLWGLUULGMHBCDSDSAUHIJEXFALYNIUBJIMZTRZZTMXWGRJCZKHQQC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.578441878373404);
    msg.setSource(7215U);
    msg.setSourceEntity(77U);
    msg.setDestination(42173U);
    msg.setDestinationEntity(232U);
    msg.adcp = 92;
    msg.adcp_dur = 85186986U;
    msg.adcp_fr = 845177335U;
    msg.ctd = -88;
    msg.ctd_dur = 3676683978U;
    msg.ctd_fr = 3047365713U;
    msg.opt = 54;
    msg.opt_dur = 3628784178U;
    msg.opt_fr = 2786011039U;
    msg.tbl = -24;
    msg.tbl_dur = 4241256044U;
    msg.tbl_fr = 3978384109U;
    msg.eco = 115;
    msg.eco_dur = 4105634136U;
    msg.eco_fr = 2172398236U;
    msg.par = -60;
    msg.par_dur = 511059662U;
    msg.par_fr = 1540885379U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.44530263454165697);
    msg.setSource(59322U);
    msg.setSourceEntity(168U);
    msg.setDestination(13441U);
    msg.setDestinationEntity(200U);
    msg.adcp = 33;
    msg.adcp_dur = 94210272U;
    msg.adcp_fr = 4216438616U;
    msg.ctd = 38;
    msg.ctd_dur = 3485912837U;
    msg.ctd_fr = 1085879552U;
    msg.opt = 87;
    msg.opt_dur = 1924055837U;
    msg.opt_fr = 1592023846U;
    msg.tbl = 12;
    msg.tbl_dur = 3301569349U;
    msg.tbl_fr = 4266067236U;
    msg.eco = -82;
    msg.eco_dur = 4166630585U;
    msg.eco_fr = 444997662U;
    msg.par = -13;
    msg.par_dur = 659484056U;
    msg.par_fr = 4108512178U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.14679526173468405);
    msg.setSource(41527U);
    msg.setSourceEntity(166U);
    msg.setDestination(65125U);
    msg.setDestinationEntity(45U);
    msg.adcp = -26;
    msg.adcp_dur = 707778112U;
    msg.adcp_fr = 4210037363U;
    msg.ctd = -118;
    msg.ctd_dur = 2482699957U;
    msg.ctd_fr = 3937989959U;
    msg.opt = 106;
    msg.opt_dur = 3740379005U;
    msg.opt_fr = 2031782456U;
    msg.tbl = -75;
    msg.tbl_dur = 4165701703U;
    msg.tbl_fr = 2096479621U;
    msg.eco = -30;
    msg.eco_dur = 2529555656U;
    msg.eco_fr = 33754374U;
    msg.par = 30;
    msg.par_dur = 1924976282U;
    msg.par_fr = 3098457818U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.5695582711416971);
    msg.setSource(29079U);
    msg.setSourceEntity(57U);
    msg.setDestination(33390U);
    msg.setDestinationEntity(130U);
    msg.adcp = -23;
    msg.adcp_dur = 1306585215U;
    msg.adcp_fr = 428343140U;
    msg.ctd = -17;
    msg.ctd_dur = 3922417570U;
    msg.ctd_fr = 2680079622U;
    msg.opt = 45;
    msg.opt_dur = 4194721997U;
    msg.opt_fr = 290988598U;
    msg.tbl = -119;
    msg.tbl_dur = 1858581499U;
    msg.tbl_fr = 24230449U;
    msg.eco = 74;
    msg.eco_dur = 1536691803U;
    msg.eco_fr = 4042913281U;
    msg.par = -119;
    msg.par_dur = 4024837690U;
    msg.par_fr = 2891169535U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.3777655676834122);
    msg.setSource(31352U);
    msg.setSourceEntity(104U);
    msg.setDestination(2514U);
    msg.setDestinationEntity(33U);
    msg.adcp = 11;
    msg.adcp_dur = 3434681946U;
    msg.adcp_fr = 2690438303U;
    msg.ctd = 111;
    msg.ctd_dur = 1117708695U;
    msg.ctd_fr = 1959763304U;
    msg.opt = -88;
    msg.opt_dur = 3990236387U;
    msg.opt_fr = 867421535U;
    msg.tbl = -42;
    msg.tbl_dur = 4133169438U;
    msg.tbl_fr = 3775753536U;
    msg.eco = 20;
    msg.eco_dur = 760806962U;
    msg.eco_fr = 2383956430U;
    msg.par = 102;
    msg.par_dur = 1041520013U;
    msg.par_fr = 1570338123U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.9621179953391106);
    msg.setSource(65527U);
    msg.setSourceEntity(217U);
    msg.setDestination(36471U);
    msg.setDestinationEntity(97U);
    msg.adcp = -102;
    msg.adcp_dur = 3868526008U;
    msg.adcp_fr = 3668713022U;
    msg.ctd = -93;
    msg.ctd_dur = 1609057573U;
    msg.ctd_fr = 2469414539U;
    msg.opt = 92;
    msg.opt_dur = 2243234117U;
    msg.opt_fr = 999806049U;
    msg.tbl = 74;
    msg.tbl_dur = 3715755404U;
    msg.tbl_fr = 4000748291U;
    msg.eco = 118;
    msg.eco_dur = 481435691U;
    msg.eco_fr = 3039811538U;
    msg.par = -13;
    msg.par_dur = 1321321075U;
    msg.par_fr = 24875443U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.976247503874945);
    msg.setSource(19728U);
    msg.setSourceEntity(26U);
    msg.setDestination(9906U);
    msg.setDestinationEntity(1U);
    msg.value = 0.8480071002260486;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.993073339902414);
    msg.setSource(42100U);
    msg.setSourceEntity(47U);
    msg.setDestination(38758U);
    msg.setDestinationEntity(213U);
    msg.value = 0.4764836671134628;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.5278734484723471);
    msg.setSource(59995U);
    msg.setSourceEntity(79U);
    msg.setDestination(34405U);
    msg.setDestinationEntity(95U);
    msg.value = 0.5747822768402774;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.6631967675735722);
    msg.setSource(33020U);
    msg.setSourceEntity(174U);
    msg.setDestination(58077U);
    msg.setDestinationEntity(253U);
    msg.lat = 0.40540527477155863;
    msg.lon = 0.7980056992197981;
    msg.depth.assign("ERTGCJQXNSUPRQSSD");
    msg.vel.assign("CATOJEDXKFWTXEUOHHSZIXCKUZMQHUVUUNCYNBKREGWHWGPDGQCWFLRBBAU");
    msg.dir.assign("MNPLHKPOQLNGRRDWOYOWGBNLYVSOIBHAXEHJFKCZUFJDIXTSUJPCBVRUYBQKWLBWAXPSRZZGUJHXCDSMHHTVALWBZUKOVETSMNJAUITBWIZYWGXAAZLICMKOXFVQEWMTOEDYKRXLZDRPNKAMIJPYOMEMHKJNVUREVWSQMKZTSRYDQSQVGXOKQGFDRYGVTBCJNPQUECIDFDFCHFGLRTJYSTIEBACCNIQOLEUFBGHVTLAFQXXWMHUSYNCEGZA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.14783934475626892);
    msg.setSource(62278U);
    msg.setSourceEntity(42U);
    msg.setDestination(36041U);
    msg.setDestinationEntity(166U);
    msg.lat = 0.6325470576687295;
    msg.lon = 0.8682938306094997;
    msg.depth.assign("VULLYTYVHPQKZNRAZNCUSXTJHWRPFKTJJEJNRH");
    msg.vel.assign("GFQHFLOFSXTDYAUEBZWCXJWGMWOFNURKKABZPZQXYFXYXUBOHLDMAVTLWUPKZDDBDGUZJZRYESINZQCFVAPRASTSMGSHBOIVVRHWLBLWUIVPNNICYBPPPYQIEHIEBRXIOTPJQVOOUBQMFTJZKKTPKITMOCSQKEMFAQCEMGJRSYLCGBHERDXGZVDJHMQWKTGCOSELNJNF");
    msg.dir.assign("UPHNQJSFLILJUQOECBHMCGPUDFZPZILTKFGGQEMSVCXYJHIAWBFXUQDMOLOJISUTAVXRFXZELUSTRDCVQWWSMQIALSSUXYOZDSYPFIHIDAZBVCTDNKMVKETGPNXJLXNEYQYEVMBIRPFJCPSBAYAXD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.42096304613874724);
    msg.setSource(37679U);
    msg.setSourceEntity(165U);
    msg.setDestination(64869U);
    msg.setDestinationEntity(191U);
    msg.lat = 0.20192486858496395;
    msg.lon = 0.03672448454931987;
    msg.depth.assign("VIWIXQSUFWBTGHIXDFNISHVJDHPXGZSUEXMMKIEWQTRWOSLJCSBMYLRFHBHBGRRQJYHRSDBWAKBQKXVYPDZVAGJQOZTUDNYNMCS");
    msg.vel.assign("NZCSELWQCEHYVXQSRCJRKBYUTEBIISTUCULOTRJMMGZQRATHGLDAZVBSYSFGBYDABJOQRAQTIEEQCATXNSUJYNHWHWKIHVBUJZPACRDNOXIGEEOGVYXQDPUKFOYKTKKFIJKVQN");
    msg.dir.assign("WVHIRVODRJWDNNAYUUXDINUOMGHLBIZLXXOYVRZIYSLKVYPRJAPXDGKLMDGSCTQB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.7811224833336617);
    msg.setSource(13048U);
    msg.setSourceEntity(98U);
    msg.setDestination(36320U);
    msg.setDestinationEntity(181U);
    msg.source.assign("EPMRKGUFAEQGCKZIDKHSARILALDTUYCDJPFPIZWVQJAYIEHBROKSBZTIUALFHPERBQJEAAAPGCJMNERMJXHCSCGYRDOJMNPWDVDVVHVVPONHWCQTCRXDEUIIEDLTESUNCXOTPJYBJGWSVZMNNNWJCVVKFMBGKQFFTMWALZYSSZUBUO");
    msg.lat = 0.9257556076513885;
    msg.lon = 0.9223502116958446;
    msg.sog = 0.9936529784981841;
    msg.uc = 0.6925484615314875;
    msg.depth = 0.25893459174868294;
    msg.value = 0.7358021956904472;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.43703194185871486);
    msg.setSource(29940U);
    msg.setSourceEntity(75U);
    msg.setDestination(59810U);
    msg.setDestinationEntity(30U);
    msg.source.assign("RXYEJMGRINUOHKGLBJZCCJGPJVJKGNRJUKUWIJFXEPMJSZOEHXTASVRSZIZCPTUPLFCBHSNDHIRDMVOXNYCWNWELMHIYTEGNSFPGEHOHUNZOOIBKBOUHUMOFRFPAYBGHZDBCADTFQQTVIYCFJENIPAEAPZRCTDRVAAAYQRZQZLMSPVQV");
    msg.lat = 0.12417687347547846;
    msg.lon = 0.13098272828599067;
    msg.sog = 0.011111085185176561;
    msg.uc = 0.5095206834368647;
    msg.depth = 0.28783443490008953;
    msg.value = 0.9369398677080141;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.052577572679570084);
    msg.setSource(22845U);
    msg.setSourceEntity(124U);
    msg.setDestination(25173U);
    msg.setDestinationEntity(84U);
    msg.source.assign("KZDTRPXERQOJWRPGFZILTMYOVOUIXYYJLMCUFGERDJLNVNGCPPKNKSWLEYFEQXOMTCXMTXGJIWHZUZMPRSQGFIKXFDUGCSOGMTVDBWOZWNWLBATHAKTTWPHOYWTKYDCYPQSMYVRMZQVBUPBIWUEHCPKEVNNSSANCILIGHLOSSARBFD");
    msg.lat = 0.679187705601511;
    msg.lon = 0.3500614401557579;
    msg.sog = 0.6673917534297289;
    msg.uc = 0.2726562371824376;
    msg.depth = 0.9902511848379908;
    msg.value = 0.3411170937489626;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.5430596452764079);
    msg.setSource(14309U);
    msg.setSourceEntity(40U);
    msg.setDestination(47872U);
    msg.setDestinationEntity(127U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.618176463630378;
    tmp_msg_0.x = 0.8520204060850225;
    tmp_msg_0.y = 0.3463768683957743;
    tmp_msg_0.z = 0.5321837172358203;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.8449141165130271;
    tmp_msg_1.x = 0.3487850362947228;
    tmp_msg_1.y = 0.9939398220992728;
    tmp_msg_1.z = 0.9658668478866121;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.6176858819629613;
    tmp_msg_2.value = 0.6984751992251796;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.44470758854932635);
    msg.setSource(31340U);
    msg.setSourceEntity(89U);
    msg.setDestination(47691U);
    msg.setDestinationEntity(27U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.04063244885879258;
    tmp_msg_0.x = 0.45669341318194434;
    tmp_msg_0.y = 0.09257304088373097;
    tmp_msg_0.z = 0.4300317616977849;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.6633619690343681;
    tmp_msg_1.x = 0.30048039023463946;
    tmp_msg_1.y = 0.42450122642819643;
    tmp_msg_1.z = 0.13552928701259415;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.8244602092782628;
    tmp_msg_2.value = 0.5194553746956965;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.7006214286970641);
    msg.setSource(12759U);
    msg.setSourceEntity(176U);
    msg.setDestination(27066U);
    msg.setDestinationEntity(240U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.1569698525393195;
    tmp_msg_0.x = 0.46159263932123196;
    tmp_msg_0.y = 0.46636966598822793;
    tmp_msg_0.z = 0.11684198060577433;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.0352223633671398;
    tmp_msg_1.x = 0.47585550834055057;
    tmp_msg_1.y = 0.6013054675048282;
    tmp_msg_1.z = 0.4026050134828435;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.07542311404328483;
    tmp_msg_2.value = 0.27334582663970086;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.9210207250580088);
    msg.setSource(34671U);
    msg.setSourceEntity(193U);
    msg.setDestination(24381U);
    msg.setDestinationEntity(218U);
    msg.gdop = 0.4084193879545355;
    msg.pdop = 0.7049782324057978;
    msg.tdop = 0.4688464207268318;
    msg.vdop = 0.2900332632000936;
    msg.hdop = 0.6749906762623328;
    msg.ndop = 0.6573816061872666;
    msg.edop = 0.43557232411583535;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.005201058088439958);
    msg.setSource(6799U);
    msg.setSourceEntity(141U);
    msg.setDestination(5470U);
    msg.setDestinationEntity(170U);
    msg.gdop = 0.0031223715206774028;
    msg.pdop = 0.9107649423984684;
    msg.tdop = 0.5042054170269554;
    msg.vdop = 0.8560088935554607;
    msg.hdop = 0.2855218940315236;
    msg.ndop = 0.8010683416946045;
    msg.edop = 0.48636323519833147;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.30029345793626494);
    msg.setSource(50342U);
    msg.setSourceEntity(33U);
    msg.setDestination(59561U);
    msg.setDestinationEntity(58U);
    msg.gdop = 0.6426306589611895;
    msg.pdop = 0.275265426411179;
    msg.tdop = 0.2136197312142627;
    msg.vdop = 0.3776974348008768;
    msg.hdop = 0.3959555058073033;
    msg.ndop = 0.6950500063959973;
    msg.edop = 0.36032890585106125;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.13471835204357108);
    msg.setSource(50366U);
    msg.setSourceEntity(34U);
    msg.setDestination(22715U);
    msg.setDestinationEntity(250U);
    msg.meanx = 0.7445633976285703;
    msg.meany = 0.13757479584391752;
    msg.meanz = 0.2181411577213852;
    msg.dur = 2518656388U;
    msg.meanacc = 0.7412951875191366;
    msg.obs = 3003698851U;
    msg.valid = 88U;
    msg.active = 173U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.9495689042951077);
    msg.setSource(38869U);
    msg.setSourceEntity(105U);
    msg.setDestination(43346U);
    msg.setDestinationEntity(123U);
    msg.meanx = 0.9125797863029657;
    msg.meany = 0.7911388138236245;
    msg.meanz = 0.5401237720209674;
    msg.dur = 605710442U;
    msg.meanacc = 0.9729204432352315;
    msg.obs = 1164655043U;
    msg.valid = 15U;
    msg.active = 173U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.23679266151543155);
    msg.setSource(673U);
    msg.setSourceEntity(59U);
    msg.setDestination(37702U);
    msg.setDestinationEntity(156U);
    msg.meanx = 0.9856021961477058;
    msg.meany = 0.83916793682545;
    msg.meanz = 0.9841518778353948;
    msg.dur = 1795431310U;
    msg.meanacc = 0.8526164304958784;
    msg.obs = 3353918404U;
    msg.valid = 152U;
    msg.active = 100U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.9539411010683289);
    msg.setSource(8346U);
    msg.setSourceEntity(37U);
    msg.setDestination(50540U);
    msg.setDestinationEntity(201U);
    msg.gpsfixtype = 195U;
    msg.flags = 211U;
    msg.diffcorr = 137U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.8016359950585383);
    msg.setSource(42034U);
    msg.setSourceEntity(121U);
    msg.setDestination(36449U);
    msg.setDestinationEntity(201U);
    msg.gpsfixtype = 221U;
    msg.flags = 111U;
    msg.diffcorr = 251U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.22320233390047095);
    msg.setSource(11072U);
    msg.setSourceEntity(134U);
    msg.setDestination(34103U);
    msg.setDestinationEntity(72U);
    msg.gpsfixtype = 155U;
    msg.flags = 226U;
    msg.diffcorr = 190U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.21344131070097416);
    msg.setSource(32175U);
    msg.setSourceEntity(101U);
    msg.setDestination(40845U);
    msg.setDestinationEntity(66U);
    msg.gnssid = 207U;
    msg.svid = 160U;
    msg.sigid = 216U;
    msg.freqid = 148U;
    msg.prres = 0.913734478589347;
    msg.cno = 120U;
    msg.qualityind = 49U;
    msg.corrsource = 164U;
    msg.ionomodel = 109U;
    msg.health = 251U;
    msg.sigflags = 202U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.8094704029122832);
    msg.setSource(405U);
    msg.setSourceEntity(120U);
    msg.setDestination(4315U);
    msg.setDestinationEntity(222U);
    msg.gnssid = 230U;
    msg.svid = 8U;
    msg.sigid = 35U;
    msg.freqid = 225U;
    msg.prres = 0.15650997961305957;
    msg.cno = 86U;
    msg.qualityind = 113U;
    msg.corrsource = 34U;
    msg.ionomodel = 85U;
    msg.health = 176U;
    msg.sigflags = 7U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.22906892035307824);
    msg.setSource(28211U);
    msg.setSourceEntity(179U);
    msg.setDestination(8140U);
    msg.setDestinationEntity(212U);
    msg.gnssid = 138U;
    msg.svid = 156U;
    msg.sigid = 56U;
    msg.freqid = 135U;
    msg.prres = 0.14495692090939283;
    msg.cno = 9U;
    msg.qualityind = 50U;
    msg.corrsource = 127U;
    msg.ionomodel = 234U;
    msg.health = 38U;
    msg.sigflags = 3U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.7552641878402317);
    msg.setSource(62323U);
    msg.setSourceEntity(237U);
    msg.setDestination(30404U);
    msg.setDestinationEntity(205U);
    msg.numsigs = 45U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 157U;
    tmp_msg_0.svid = 158U;
    tmp_msg_0.sigid = 88U;
    tmp_msg_0.freqid = 12U;
    tmp_msg_0.prres = 0.2053174701571795;
    tmp_msg_0.cno = 71U;
    tmp_msg_0.qualityind = 156U;
    tmp_msg_0.corrsource = 192U;
    tmp_msg_0.ionomodel = 99U;
    tmp_msg_0.health = 200U;
    tmp_msg_0.sigflags = 224U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.30844681402366914);
    msg.setSource(1524U);
    msg.setSourceEntity(131U);
    msg.setDestination(52046U);
    msg.setDestinationEntity(152U);
    msg.numsigs = 146U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 55U;
    tmp_msg_0.svid = 125U;
    tmp_msg_0.sigid = 21U;
    tmp_msg_0.freqid = 15U;
    tmp_msg_0.prres = 0.8636162117249928;
    tmp_msg_0.cno = 77U;
    tmp_msg_0.qualityind = 23U;
    tmp_msg_0.corrsource = 35U;
    tmp_msg_0.ionomodel = 195U;
    tmp_msg_0.health = 237U;
    tmp_msg_0.sigflags = 89U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.7087359013334907);
    msg.setSource(19743U);
    msg.setSourceEntity(202U);
    msg.setDestination(40113U);
    msg.setDestinationEntity(214U);
    msg.numsigs = 64U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.3531571411671728);
    msg.setSource(27551U);
    msg.setSourceEntity(163U);
    msg.setDestination(49114U);
    msg.setDestinationEntity(11U);
    msg.gnssid = 91U;
    msg.svid = 162U;
    msg.elev = 0.5065562569648684;
    msg.azim = 0.16698319873098966;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.7104749386493492);
    msg.setSource(42591U);
    msg.setSourceEntity(97U);
    msg.setDestination(17672U);
    msg.setDestinationEntity(94U);
    msg.gnssid = 99U;
    msg.svid = 61U;
    msg.elev = 0.8532869607254091;
    msg.azim = 0.8301740178105634;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.27393029484465814);
    msg.setSource(20316U);
    msg.setSourceEntity(211U);
    msg.setDestination(61643U);
    msg.setDestinationEntity(232U);
    msg.gnssid = 59U;
    msg.svid = 236U;
    msg.elev = 0.09644238831712804;
    msg.azim = 0.7283953552313696;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.08770342816251575);
    msg.setSource(7707U);
    msg.setSourceEntity(133U);
    msg.setDestination(4920U);
    msg.setDestinationEntity(79U);
    msg.numsvs = 46U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.8066036440230541);
    msg.setSource(12527U);
    msg.setSourceEntity(87U);
    msg.setDestination(60380U);
    msg.setDestinationEntity(247U);
    msg.numsvs = 29U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 110U;
    tmp_msg_0.svid = 254U;
    tmp_msg_0.elev = 0.014977648135925059;
    tmp_msg_0.azim = 0.9867821004051053;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.3503209676606469);
    msg.setSource(1813U);
    msg.setSourceEntity(3U);
    msg.setDestination(21156U);
    msg.setDestinationEntity(207U);
    msg.numsvs = 25U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.9531934547358082);
    msg.setSource(7469U);
    msg.setSourceEntity(240U);
    msg.setDestination(51592U);
    msg.setDestinationEntity(173U);
    msg.refstationid = 15991U;
    msg.itow = 1274860079U;
    msg.relposn = 0.7711951954859123;
    msg.relpose = 0.459637412632124;
    msg.relposd = 0.41637994920155064;
    msg.relposlength = 0.32796086749153575;
    msg.relposheading = 0.9561005978408444;
    msg.accn = 0.4138508624009215;
    msg.acce = 0.2422064884186258;
    msg.accd = 0.744651631270386;
    msg.acclength = 0.2761360319311589;
    msg.accheading = 0.8145638853057667;
    msg.gnssfixok = 231U;
    msg.diffsoln = 100U;
    msg.relposvalid = 162U;
    msg.ismoving = 246U;
    msg.refposmiss = 22U;
    msg.refobsmiss = 7U;
    msg.relposheadingvalid = 47U;
    msg.carrsoln = 3U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.3768086458806046);
    msg.setSource(37833U);
    msg.setSourceEntity(242U);
    msg.setDestination(63703U);
    msg.setDestinationEntity(225U);
    msg.refstationid = 318U;
    msg.itow = 3027655369U;
    msg.relposn = 0.7751758111077689;
    msg.relpose = 0.49692767337108046;
    msg.relposd = 0.9579041264847754;
    msg.relposlength = 0.13047821325886866;
    msg.relposheading = 0.8705472214992587;
    msg.accn = 0.790447084802236;
    msg.acce = 0.5783706217719612;
    msg.accd = 0.9016896903844746;
    msg.acclength = 0.7236660535885027;
    msg.accheading = 0.7213001845774746;
    msg.gnssfixok = 209U;
    msg.diffsoln = 157U;
    msg.relposvalid = 166U;
    msg.ismoving = 209U;
    msg.refposmiss = 117U;
    msg.refobsmiss = 104U;
    msg.relposheadingvalid = 190U;
    msg.carrsoln = 0U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.3457473860860334);
    msg.setSource(23323U);
    msg.setSourceEntity(200U);
    msg.setDestination(6411U);
    msg.setDestinationEntity(211U);
    msg.refstationid = 18405U;
    msg.itow = 249146402U;
    msg.relposn = 0.4920216019885638;
    msg.relpose = 0.10323195779764416;
    msg.relposd = 0.5462305413695859;
    msg.relposlength = 0.17320947157485778;
    msg.relposheading = 0.9697011727831882;
    msg.accn = 0.9640097975013496;
    msg.acce = 0.0018682438586803407;
    msg.accd = 0.2646557296828823;
    msg.acclength = 0.513369913927964;
    msg.accheading = 0.20157622685103538;
    msg.gnssfixok = 123U;
    msg.diffsoln = 189U;
    msg.relposvalid = 52U;
    msg.ismoving = 110U;
    msg.refposmiss = 195U;
    msg.refobsmiss = 126U;
    msg.relposheadingvalid = 38U;
    msg.carrsoln = 132U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.885594510327403);
    msg.setSource(63355U);
    msg.setSourceEntity(29U);
    msg.setDestination(45162U);
    msg.setDestinationEntity(177U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.8876385628783595);
    msg.setSource(51405U);
    msg.setSourceEntity(148U);
    msg.setDestination(63551U);
    msg.setDestinationEntity(237U);
    IMC::CollisionAvoidance tmp_msg_0;
    tmp_msg_0.mmsi.assign("ZNXOSXRBUWWIMNOJNSNQWGZIYAEBFLMAAWKNPQIGXFVCBYFADLHKMKJLUVHLVWUKEGHKXAEMSLXPRVPYIXOOSSRISDCBJTEAHBGTSCGJBNZJWQXPRGCFHGQRYYMRUJHUCMOETDVDYKVQTOWLWLZJOLPLTMWZCUDICBNUCQPR");
    tmp_msg_0.lat = 0.5417102117387975;
    tmp_msg_0.lon = 0.41819589984169026;
    tmp_msg_0.x = 0.7578545982909362;
    tmp_msg_0.y = 0.41577920607212726;
    tmp_msg_0.speed = 0.12698272833429958;
    tmp_msg_0.course = 0.15913413048573388;
    tmp_msg_0.dist = 0.7286565797765467;
    tmp_msg_0.length = 0.4464431040157826;
    tmp_msg_0.width = 0.12734211988242816;
    tmp_msg_0.o_vect = 0.7135732357667046;
    msg.obstacles.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.4573916024693475);
    msg.setSource(52966U);
    msg.setSourceEntity(127U);
    msg.setDestination(13878U);
    msg.setDestinationEntity(88U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.8065328500285502);
    msg.setSource(25284U);
    msg.setSourceEntity(223U);
    msg.setDestination(40026U);
    msg.setDestinationEntity(200U);
    msg.mmsi.assign("NHBVTXLDNHBCARLIBWXUSFNPTMLFNRZUGRWHBDFKFVHIJZQPMXGJGDYNEALUAREPQCAVRLD");
    msg.cog_int = 0.49593840844807413;
    msg.sog_int = 0.8146267886278408;
    msg.state = 54U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.9084830482610761);
    msg.setSource(17654U);
    msg.setSourceEntity(97U);
    msg.setDestination(7088U);
    msg.setDestinationEntity(35U);
    msg.mmsi.assign("VPZBJPMZNVLAONFVGBHYIRYOIO");
    msg.cog_int = 0.5626894870621416;
    msg.sog_int = 0.21882527798174278;
    msg.state = 77U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.13987933094269422);
    msg.setSource(53959U);
    msg.setSourceEntity(81U);
    msg.setDestination(48900U);
    msg.setDestinationEntity(199U);
    msg.mmsi.assign("LKAPMETFRARWMHGGNSYHKGBIJJGEVYVUOOWNFHALDOKWEHTDZWQJIUTVZJSPZYGZNIJIFEAMMBEZMOROTKSHNYAXCVYGPD");
    msg.cog_int = 0.3929096127633238;
    msg.sog_int = 0.7058002867020191;
    msg.state = 47U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationMsgLog msg;
    msg.setTimeStamp(0.8868336255766118);
    msg.setSource(37370U);
    msg.setSourceEntity(66U);
    msg.setDestination(58941U);
    msg.setDestinationEntity(254U);
    msg.mmsi.assign("XTVCEWNEEPFRYARVNBWVBLYITOKVHJLAFVDYFCPETEXADOZVCNCDWARKMPVOKDXIQOIFRQJCYAMUWTGUOTXSSXANKPRJLFQWYQQ");
    msg.msg_in = 118U;
    msg.msg_out = 27U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationMsgLog #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationMsgLog msg;
    msg.setTimeStamp(0.8213178174714326);
    msg.setSource(4786U);
    msg.setSourceEntity(3U);
    msg.setDestination(54171U);
    msg.setDestinationEntity(180U);
    msg.mmsi.assign("YRWNBCSDIUVNIPVZHQOIAXJNISIZMKWINAOXUOFWUVEYVAWZDNRXZCAEYPELMIVNNPQRYTBOJYBBCVQILBLDOUPQDQZRGFOYYZRVVSCEZXAYBFUGVDXKDPJDGWLPCGFPHMDXBOMMHYKQZFXWGKELIHJBRRAWPHJQMQK");
    msg.msg_in = 220U;
    msg.msg_out = 122U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationMsgLog #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationMsgLog msg;
    msg.setTimeStamp(0.94471112544643);
    msg.setSource(36948U);
    msg.setSourceEntity(11U);
    msg.setDestination(23627U);
    msg.setDestinationEntity(36U);
    msg.mmsi.assign("TQZCESWGIUUKDWFFEIHRDUPBTSWFJEUDTZNZNYFEPXVDYSVZGFAZYIHCVJLRKQRZKYJOJAOEICNMOXSWXUYBLCTDYRTFMHKXXJVAULHPHRYAAQVIHGXLOKOWTNQZPHXFKEUSGAOQISMKLRPLONXOCPVEEJBWHVTEJGQ");
    msg.msg_in = 74U;
    msg.msg_out = 231U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationMsgLog #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  return test.getReturnValue();
}
