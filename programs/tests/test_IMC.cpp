//***************************************************************************
// Copyright 2007-2023 Universidade do Porto - Faculdade de Engenharia      *
// Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                  *
//***************************************************************************
// This file is part of DUNE: Unified Navigation Environment.               *
//                                                                          *
// Commercial Licence Usage                                                 *
// Licencees holding valid commercial DUNE licences may use this file in    *
// accordance with the commercial licence agreement provided with the       *
// Software or, alternatively, in accordance with the terms contained in a  *
// written agreement between you and Faculdade de Engenharia da             *
// Universidade do Porto. For licensing terms, conditions, and further      *
// information contact lsts@fe.up.pt.                                       *
//                                                                          *
// Modified European Union Public Licence - EUPL v.1.1 Usage                *
// Alternatively, this file may be used under the terms of the Modified     *
// EUPL, Version 1.1 only (the "Licence"), appearing in the file LICENCE.md *
// included in the packaging of this file. You may not use this work        *
// except in compliance with the Licence. Unless required by applicable     *
// law or agreed to in writing, software distributed under the Licence is   *
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF     *
// ANY KIND, either express or implied. See the Licence for the specific    *
// language governing permissions and limitations at                        *
// https://github.com/LSTS/dune/blob/master/LICENCE.md and                  *
// http://ec.europa.eu/idabc/eupl.html.                                     *
//***************************************************************************
// Author: Ricardo Martins                                                  *
//***************************************************************************
// Automatically generated.                                                 *
//***************************************************************************
// IMC XML MD5: feead2f5ef68963728f09deea5b4dbdd                            *
//***************************************************************************

// DUNE headers.
#include <DUNE/DUNE.hpp>

using DUNE_NAMESPACES;

#include "Test.hpp"

int
main(void)
{
  Test test("IMC Serialization/Deserialization");

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.6733380628857311);
    msg.setSource(41657U);
    msg.setSourceEntity(17U);
    msg.setDestination(4345U);
    msg.setDestinationEntity(206U);
    msg.state = 144U;
    msg.flags = 243U;
    msg.description.assign("NGZMAKRUFAJDTVIJFBNUTWUYEQWJCPKWFSFRMXCGNLHOOZZNYZPGOARKCTKGLEQGVYJHWZPAEEVRPHDU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.581263149623559);
    msg.setSource(58517U);
    msg.setSourceEntity(101U);
    msg.setDestination(22568U);
    msg.setDestinationEntity(66U);
    msg.state = 150U;
    msg.flags = 39U;
    msg.description.assign("XIHOUTRIGZXRGGESPKNDWZMAEFOMJUHCAZYPTRXSKLXWWJRAXHEDLRAFXHJANOYWIKYYMVVCFMNSZVTNLBHGHOPWFERVCTSABEDRVN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityState msg;
    msg.setTimeStamp(0.13637072447344212);
    msg.setSource(48763U);
    msg.setSourceEntity(50U);
    msg.setDestination(60392U);
    msg.setDestinationEntity(199U);
    msg.state = 14U;
    msg.flags = 108U;
    msg.description.assign("RBVRMAKWIKYUBCADTUZNZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.4915806632733932);
    msg.setSource(60167U);
    msg.setSourceEntity(62U);
    msg.setDestination(10074U);
    msg.setDestinationEntity(197U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.5703272457243248);
    msg.setSource(43646U);
    msg.setSourceEntity(184U);
    msg.setDestination(56263U);
    msg.setDestinationEntity(97U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityState msg;
    msg.setTimeStamp(0.13869181484946302);
    msg.setSource(7330U);
    msg.setSourceEntity(20U);
    msg.setDestination(20669U);
    msg.setDestinationEntity(50U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.2442253032665469);
    msg.setSource(48310U);
    msg.setSourceEntity(184U);
    msg.setDestination(25991U);
    msg.setDestinationEntity(156U);
    msg.id = 158U;
    msg.label.assign("FFMCIDIDZAGDRLUHVVJFROANAWBGVGKRNLDRXQCKGENIILUWOYHVHJMBXHZSWJKFLYGOPPNYEAGPVPKSYBNXRWJMUHYKTMARGHLUBYZETWDBITYCKFYCEIPFIQOQEFIJZXHKOVWNTOWQNFCXJUQUWMQYLMGIHAQRCXBNSUPDDLSRWWVTKBEPMXXRZCPAMUSBQSZZBPGJXNKS");
    msg.component.assign("KHEFGCGOCVFPECRBUYWOTFDXDSEUQBGKPXUXPIRQMSTTFLSCNMFFZHGWCUUQOSKBVXRPYRHJYLXVZTCGEBLKJKDVUUOYWBRQJVFPAKERTJSUSVPCVFEAJBETBMDUSPSIZQHPKDLWYCJITNOYWZRYAIIPEVKTLIXITDJHUNBGEOZAHVAWNAFPNXFQLQYXRJAIHYIZASCMKZVAZBDDLW");
    msg.act_time = 32987U;
    msg.deact_time = 64901U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.8778813758448353);
    msg.setSource(42873U);
    msg.setSourceEntity(133U);
    msg.setDestination(11855U);
    msg.setDestinationEntity(196U);
    msg.id = 11U;
    msg.label.assign("GNJTZCUYLMWDRWLLBZGJTXOCIGPJ");
    msg.component.assign("RSKEJNKPSUWRHWAOBINCLVYGHILOXGQFBWNQHPQGBLAAYVMCAYLGZEMVBXEZYFQMTBQFHLDFYIBDUYMKHHISPLKRTGOPTMWPFNEKDODMKJTJOTVFPREUCAUCNRBUTVXGIPVEPQEJSHJNWZZWNSCUICOVEBVRACLYMWANIIKXVHZXGUHKDFRJTTCJCSDKXNSXFWURS");
    msg.act_time = 42121U;
    msg.deact_time = 31469U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityInfo msg;
    msg.setTimeStamp(0.2729181911208627);
    msg.setSource(49428U);
    msg.setSourceEntity(22U);
    msg.setDestination(20585U);
    msg.setDestinationEntity(36U);
    msg.id = 134U;
    msg.label.assign("NVIQEZIQGNBBFLXGJMBZNUCQHBSTAFQISMR");
    msg.component.assign("KGSBPBEIUVIOBEZKURTKRSMUZDJQCAQRYYFLPZLAOHQNVCZWMHV");
    msg.act_time = 30379U;
    msg.deact_time = 13202U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.19793067188510705);
    msg.setSource(13588U);
    msg.setSourceEntity(103U);
    msg.setDestination(34866U);
    msg.setDestinationEntity(105U);
    msg.id = 208U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.6955040454894913);
    msg.setSource(57802U);
    msg.setSourceEntity(24U);
    msg.setDestination(49650U);
    msg.setDestinationEntity(146U);
    msg.id = 24U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityInfo msg;
    msg.setTimeStamp(0.7824762854434668);
    msg.setSource(32629U);
    msg.setSourceEntity(184U);
    msg.setDestination(20779U);
    msg.setDestinationEntity(159U);
    msg.id = 40U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.04614333845672247);
    msg.setSource(8502U);
    msg.setSourceEntity(211U);
    msg.setDestination(28167U);
    msg.setDestinationEntity(179U);
    msg.op = 233U;
    msg.list.assign("TKCLCWDJHZUMPAWPDYQNXUUYINHFGVQKWYCFAJYCTMBEVZSUXNYDVFEOBRKHEUWMILVKINQJX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.9993341319729657);
    msg.setSource(52307U);
    msg.setSourceEntity(58U);
    msg.setDestination(27159U);
    msg.setDestinationEntity(168U);
    msg.op = 172U;
    msg.list.assign("HCIULCLDNMKCVHFFYIQGAJETOZWFWNCSFLPQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityList msg;
    msg.setTimeStamp(0.7600532247711705);
    msg.setSource(58039U);
    msg.setSourceEntity(47U);
    msg.setDestination(2452U);
    msg.setDestinationEntity(38U);
    msg.op = 182U;
    msg.list.assign("JTEJFYNETNQQGTYIZOYSLRCWBDOZUYSKVDRHPSNPGKDANYVBJWQKIMLMNXFLLVXUQYXFRIFBCCZBFUHJEXIDWHCCLKINCJYGREIPIRUVTLHHZYAPXEOQXGAAYEWPXXEVUXWLTPMFIZOKLKSPDBQMOGMGSJNPWWSONZBDCTOIZSVOOURJJNGMRRFTBHALAQMZGEBUWXGFRHEPKDSKHUTSQNMJWUBZTZYMFQIODCCVBQRJGFU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.17610350590565327);
    msg.setSource(39231U);
    msg.setSourceEntity(28U);
    msg.setDestination(33694U);
    msg.setDestinationEntity(71U);
    msg.value = 253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.9076172129912492);
    msg.setSource(275U);
    msg.setSourceEntity(82U);
    msg.setDestination(34375U);
    msg.setDestinationEntity(14U);
    msg.value = 187U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CpuUsage msg;
    msg.setTimeStamp(0.06934573126772348);
    msg.setSource(23466U);
    msg.setSourceEntity(145U);
    msg.setDestination(35383U);
    msg.setDestinationEntity(115U);
    msg.value = 140U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CpuUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.5404334806716308);
    msg.setSource(61215U);
    msg.setSourceEntity(235U);
    msg.setDestination(51353U);
    msg.setDestinationEntity(22U);
    msg.consumer.assign("NXIIYOFBGDLXYSXTQCXILAEZOKJKJCOAOYJNLYTFCYBUNBSDVRVPCZBWQKMLDNQRZMOXJPBLUTIKGRUENMPVATFPBILFORGGJKXVQSZRAWSSEPEEUVXCQVSYOWKU");
    msg.message_id = 18668U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.37638785450449885);
    msg.setSource(27282U);
    msg.setSourceEntity(251U);
    msg.setDestination(43969U);
    msg.setDestinationEntity(44U);
    msg.consumer.assign("FXWIIZYQEZYJTSIFSBMVXBXGJBTPBSAOQUHUUDAISSPNHPLNLVRVODXYMTNOCJHJHEAHWWNPDZZJHZKRDRQGIWJECTVNAAJVSDEMRPVDGCPJCUQIFJXCWSCMOAMWQVKGRYBNQEAKRZBOKPPPBTOEUKWLULGFBXKYWZMDCNKIXQSLIITINYQRHUGUQCQHZRMLA");
    msg.message_id = 26115U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransportBindings msg;
    msg.setTimeStamp(0.9175665986519869);
    msg.setSource(8007U);
    msg.setSourceEntity(247U);
    msg.setDestination(45034U);
    msg.setDestinationEntity(4U);
    msg.consumer.assign("CSKJZWJQTXQINMKZTPTPQHPHIXCUMOUYASDPRKUBYRZBGXFKDFBUZJCOYWTAGCZGAXOCGEHR");
    msg.message_id = 3631U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransportBindings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.49797676405480984);
    msg.setSource(57896U);
    msg.setSourceEntity(200U);
    msg.setDestination(19498U);
    msg.setDestinationEntity(155U);
    msg.type = 250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.010836969084757841);
    msg.setSource(43734U);
    msg.setSourceEntity(42U);
    msg.setDestination(25142U);
    msg.setDestinationEntity(225U);
    msg.type = 84U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RestartSystem msg;
    msg.setTimeStamp(0.7021736294097269);
    msg.setSource(5974U);
    msg.setSourceEntity(159U);
    msg.setDestination(73U);
    msg.setDestinationEntity(198U);
    msg.type = 139U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RestartSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.9896950743652737);
    msg.setSource(9058U);
    msg.setSourceEntity(112U);
    msg.setDestination(32450U);
    msg.setDestinationEntity(135U);
    msg.op = 179U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.1965670858023455);
    msg.setSource(59630U);
    msg.setSourceEntity(187U);
    msg.setDestination(55961U);
    msg.setDestinationEntity(30U);
    msg.op = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationControl msg;
    msg.setTimeStamp(0.6177926220919459);
    msg.setSource(9700U);
    msg.setSourceEntity(101U);
    msg.setDestination(2362U);
    msg.setDestinationEntity(201U);
    msg.op = 183U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.23643878481229652);
    msg.setSource(60275U);
    msg.setSourceEntity(90U);
    msg.setDestination(24325U);
    msg.setDestinationEntity(222U);
    msg.total_steps = 178U;
    msg.step_number = 151U;
    msg.step.assign("BNDDCOFYKLCDVUJWSQISATGWOYNBRRVSGLBWHKPERIYBHTNLCMRJDJIEGYKDWTWIRA");
    msg.flags = 176U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.8227501536211793);
    msg.setSource(1527U);
    msg.setSourceEntity(155U);
    msg.setDestination(65022U);
    msg.setDestinationEntity(201U);
    msg.total_steps = 44U;
    msg.step_number = 29U;
    msg.step.assign("YFZNHNHEGCGYTSRMFCAIVNNLAPVZDHZXJJIDALWIZXFCJGHBOCMUPNIBRTLVLGGPDRFXXXIMYMUSDVPFBWUXKTRSQBTIGXEVDHRQSDMKUCKQHTOQZXLPXVOZKIWYMNJNWYHEOBQAEWIOOQFFRUKCOQLGHKA");
    msg.flags = 16U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevCalibrationState msg;
    msg.setTimeStamp(0.39441733073738305);
    msg.setSource(48747U);
    msg.setSourceEntity(152U);
    msg.setDestination(10768U);
    msg.setDestinationEntity(91U);
    msg.total_steps = 83U;
    msg.step_number = 209U;
    msg.step.assign("BMPFXXGCXHAHYA");
    msg.flags = 30U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevCalibrationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.8506206561427408);
    msg.setSource(62385U);
    msg.setSourceEntity(48U);
    msg.setDestination(50268U);
    msg.setDestinationEntity(165U);
    msg.state = 140U;
    msg.error.assign("JHQOKBZNNUDIVRBROUHZQTGKNURAZGKWCIXBKVPJRWHWYUXWVTEGOQUMMYXBNLEQTPXDCPFIFLIVBYAJHSJCMYDLCINGKGSELFBHZBUMCQAUXHAJEVEUFNPGXRFRNHNTMIPZAFIJFSTMVLNXDIKETAKZALGBKDZTCOWYDSCRKSHMVTVSEJWQVYSWFS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.28919772464467197);
    msg.setSource(15295U);
    msg.setSourceEntity(9U);
    msg.setDestination(56990U);
    msg.setDestinationEntity(113U);
    msg.state = 221U;
    msg.error.assign("QIZEDGFLOQCVNNQRVPLFBWCOMKDDWRSITFCFWZYYJMYPNQAJTIHEUOCXKILKGMUEYKNDPLFODLZCRLWBCZBLWBZBXSHRJKBCXZPOUQZVUGEDEJEADGYVPIUMWSNBJTKMCFSDLZZSZXXAMKTINIUQGCMYTSXOHJXAEIBWQUNJVYGOUJRFADMQK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityActivationState msg;
    msg.setTimeStamp(0.6317027508450893);
    msg.setSource(21769U);
    msg.setSourceEntity(161U);
    msg.setDestination(62510U);
    msg.setDestinationEntity(39U);
    msg.state = 137U;
    msg.error.assign("MVBSOEDTWKIFVBBSZFYJVYFARVYXYXQJCBDIZECLZKDIYKDVIRCSHUZHQMFQCGAQGKEKRVBPSGGLHPNDJJZWWEQAZLIHFKUMEMIYRPYGNBGXKUORENJEOKTPNASUMSZYPDLUPJGNAAZQDXSHOGAFDQXFNGHQTRLYAHXUSMUWZHFIMCCPUXXOOCJVLUGTNEUTXWKWIFT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.657531336515624);
    msg.setSource(55935U);
    msg.setSourceEntity(252U);
    msg.setDestination(57653U);
    msg.setDestinationEntity(254U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.74810442113162);
    msg.setSource(64860U);
    msg.setSourceEntity(176U);
    msg.setDestination(49057U);
    msg.setDestinationEntity(31U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityActivationState msg;
    msg.setTimeStamp(0.7472793251984882);
    msg.setSource(60699U);
    msg.setSourceEntity(232U);
    msg.setDestination(49497U);
    msg.setDestinationEntity(126U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityActivationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.26965189532086054);
    msg.setSource(6472U);
    msg.setSourceEntity(27U);
    msg.setDestination(39537U);
    msg.setDestinationEntity(240U);
    msg.op = 10U;
    msg.speed_min = 0.7413432612672705;
    msg.speed_max = 0.9115631905271128;
    msg.long_accel = 0.5266320604326784;
    msg.alt_max_msl = 0.9489605736538138;
    msg.dive_fraction_max = 0.8561234112884935;
    msg.climb_fraction_max = 0.2943427279296025;
    msg.bank_max = 0.5226444988604575;
    msg.p_max = 0.6528533082407867;
    msg.pitch_min = 0.04361118882401205;
    msg.pitch_max = 0.8992436351454647;
    msg.q_max = 0.6219652446321356;
    msg.g_min = 0.16009924045761426;
    msg.g_max = 0.509190883907775;
    msg.g_lat_max = 0.8409296253777638;
    msg.rpm_min = 0.6019166123160241;
    msg.rpm_max = 0.324061910385408;
    msg.rpm_rate_max = 0.8910060352144207;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.6888792250706279);
    msg.setSource(62546U);
    msg.setSourceEntity(105U);
    msg.setDestination(17505U);
    msg.setDestinationEntity(254U);
    msg.op = 41U;
    msg.speed_min = 0.6256527710137525;
    msg.speed_max = 0.9962401590564641;
    msg.long_accel = 0.015760562718449944;
    msg.alt_max_msl = 0.6382065977848604;
    msg.dive_fraction_max = 0.4348846987661217;
    msg.climb_fraction_max = 0.2596578532962077;
    msg.bank_max = 0.42460691391462657;
    msg.p_max = 0.24097929117024686;
    msg.pitch_min = 0.017606759063245936;
    msg.pitch_max = 0.2629095396345693;
    msg.q_max = 0.5213610191289014;
    msg.g_min = 0.1841695084384083;
    msg.g_max = 0.5286313391121604;
    msg.g_lat_max = 0.5595869648808339;
    msg.rpm_min = 0.9189028266090923;
    msg.rpm_max = 0.7960415149993033;
    msg.rpm_rate_max = 0.07952568017551886;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleOperationalLimits msg;
    msg.setTimeStamp(0.007487815725795599);
    msg.setSource(13689U);
    msg.setSourceEntity(5U);
    msg.setDestination(23934U);
    msg.setDestinationEntity(218U);
    msg.op = 248U;
    msg.speed_min = 0.6474209641377328;
    msg.speed_max = 0.8874994761333428;
    msg.long_accel = 0.46490065976722816;
    msg.alt_max_msl = 0.6241089935957815;
    msg.dive_fraction_max = 0.7810011341922806;
    msg.climb_fraction_max = 0.6262920839441836;
    msg.bank_max = 0.49403889012911706;
    msg.p_max = 0.6236447485057148;
    msg.pitch_min = 0.0840877531644647;
    msg.pitch_max = 0.8534805449180909;
    msg.q_max = 0.8445426657118028;
    msg.g_min = 0.6761714645940955;
    msg.g_max = 0.20275147605479182;
    msg.g_lat_max = 0.31954927524817567;
    msg.rpm_min = 0.9583610802232423;
    msg.rpm_max = 0.9501585319436486;
    msg.rpm_rate_max = 0.20251252504702466;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.15884242540127647);
    msg.setSource(54826U);
    msg.setSourceEntity(89U);
    msg.setDestination(32796U);
    msg.setDestinationEntity(84U);
    IMC::HistoricSonarData tmp_msg_0;
    tmp_msg_0.altitude = 0.791317530748226;
    tmp_msg_0.width = 0.6619880766203107;
    tmp_msg_0.length = 0.5019011016092739;
    tmp_msg_0.bearing = 0.24751877158570335;
    tmp_msg_0.pxl = -26414;
    tmp_msg_0.encoding = 152U;
    const signed char tmp_tmp_msg_0_0[] = {-94, -3, -32, 68, -73, -53, 46, -81, 89, 67, -89, 36, -48, 77, 83, -63, -61, 40, 112, 103, 37, 83, -89, -107, -117, -73, -28, 56, 44, 9, 0, 83, 77, -29, 3, 72, -126, 20, -44, -124, -19, 110, -72, 125, -52, 40, 66, -56, 9, -44, -38, 100, -71, -51, -38, -67, -77, 69, -113, 73, -78, -56, -5, -115, 44, -95, -103, 122, -30, 62, 90, 13, -52, -95, -87, -54, -6, -58, 48, -38, -33, -9, -116, -82, -34, 99, 123, 115, -59, 107, -62, -118, 31, -8, -37, -70, -9, -23, 69, -58, -120, -76, -67, -54, 9, -128, -126, 24, 96, -3, -24, -73, 70, -12, -125, -94, -22, 77, -90, -106, -117, -95, 13, -40, -93, -14, 65, 27, 12, 123, -40, 9, 73, 17, -118, 82, 124, 124, 112, -53, 101, 122, -98, 69, -98, 7, -108, 89, 72, -85, 51, -81, 50, 65, -28, 0, 69, -10, -117, -69, -95, -105, 94, 121, 80, -124, -74, 96, -11, -68, 120, -5, -85, 44, 40, 87, 76, -29, 11, 91, -86, 0, 106, 10, 59, -5, 11, 92, -45, 52, -74, 83, -110, -48, 86, -115, 77, -1, 35, -2, 63, -107};
    tmp_msg_0.sonar_data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.3443642011087663);
    msg.setSource(15443U);
    msg.setSourceEntity(243U);
    msg.setDestination(42213U);
    msg.setDestinationEntity(73U);
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("EDANSXYSAANQOTTNIGQTUEKZSZNJAUYTVDVPJEXWMPEYHWTLRZKNRVYMFCJDRZFWGZFMPPZXHLAFAVJROHFSHVQWEUHDAGXJPIOSL");
    tmp_msg_0.sys_type = 133U;
    tmp_msg_0.owner = 18039U;
    tmp_msg_0.lat = 0.830086586393776;
    tmp_msg_0.lon = 0.6410391520054792;
    tmp_msg_0.height = 0.32634865409630975;
    tmp_msg_0.services.assign("SJYXFXEKRZTOPVPQNNNLIAYGGMVTGCELQFBEUEZZDUNAIBDQKDNDYDLMYMLEIWWOJSRJKBZKBJZYXQWZULUDFEHCHPKWHGFQTWMTUCAPVRHMIOAFRVHPWKJUWXOFOTIAAQRCGMPTPXMRTYNEBCKFHXVAFNMUYBBJIAXRSLCSRNOMNACCIIISDFQZSAGOKLS");
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MsgList msg;
    msg.setTimeStamp(0.15233948067174075);
    msg.setSource(44453U);
    msg.setSourceEntity(26U);
    msg.setDestination(53505U);
    msg.setDestinationEntity(173U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.5428382404749081;
    tmp_msg_0.x = 0.22137682932112845;
    tmp_msg_0.y = 0.7431619699865304;
    tmp_msg_0.z = 0.6008868714434291;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MsgList #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.09794917878411369);
    msg.setSource(42221U);
    msg.setSourceEntity(200U);
    msg.setDestination(350U);
    msg.setDestinationEntity(140U);
    msg.lat = 0.7132000458225611;
    msg.lon = 0.36129517010761303;
    msg.height = 0.0021916824930032774;
    msg.x = 0.8647263408597066;
    msg.y = 0.7284224867376092;
    msg.z = 0.032609698016080824;
    msg.phi = 0.731640471020882;
    msg.theta = 0.40265306127958445;
    msg.psi = 0.7902835951243555;
    msg.u = 0.7045281850487818;
    msg.v = 0.3763170570397819;
    msg.w = 0.3915808910253249;
    msg.p = 0.2437582302541812;
    msg.q = 0.4735187629705624;
    msg.r = 0.04123257054139573;
    msg.svx = 0.33229968320997416;
    msg.svy = 0.9413111108707727;
    msg.svz = 0.9848627694874906;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.2415713072183331);
    msg.setSource(42296U);
    msg.setSourceEntity(147U);
    msg.setDestination(33547U);
    msg.setDestinationEntity(15U);
    msg.lat = 0.18142295116423723;
    msg.lon = 0.8619060172779478;
    msg.height = 0.9788424378553935;
    msg.x = 0.21395334432522195;
    msg.y = 0.10586077156533558;
    msg.z = 0.06325590590660668;
    msg.phi = 0.3767073955476724;
    msg.theta = 0.10829893436128846;
    msg.psi = 0.892946924035977;
    msg.u = 0.4032789060603471;
    msg.v = 0.49215071761512397;
    msg.w = 0.24924553875218614;
    msg.p = 0.6930658655436993;
    msg.q = 0.31338215176229245;
    msg.r = 0.7391522486633753;
    msg.svx = 0.7859592043325084;
    msg.svy = 0.13622678637443264;
    msg.svz = 0.043171763653262696;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimulatedState msg;
    msg.setTimeStamp(0.49809167918294994);
    msg.setSource(27323U);
    msg.setSourceEntity(133U);
    msg.setDestination(56753U);
    msg.setDestinationEntity(137U);
    msg.lat = 0.2402569586334673;
    msg.lon = 0.2943026355832963;
    msg.height = 0.5253696166473875;
    msg.x = 0.5448944669545971;
    msg.y = 0.5301035875411692;
    msg.z = 0.3346191867136751;
    msg.phi = 0.16119503378540034;
    msg.theta = 0.08930380788963832;
    msg.psi = 0.8184082269994156;
    msg.u = 0.13619598665067612;
    msg.v = 0.308624505194795;
    msg.w = 0.9041133935064832;
    msg.p = 0.943897176463888;
    msg.q = 0.17548242075201181;
    msg.r = 0.08137884762884462;
    msg.svx = 0.6223166787001878;
    msg.svy = 0.17423828605038738;
    msg.svz = 0.8730639653121027;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimulatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.7979298880237247);
    msg.setSource(45710U);
    msg.setSourceEntity(213U);
    msg.setDestination(36178U);
    msg.setDestinationEntity(47U);
    msg.op = 141U;
    msg.entities.assign("DAMZPFRCATQNSWLFAYKTQUWHGROPMLTTOBFTGDRLRMGBHPOGZWJEJLRSRLFJZWD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.2852836071052207);
    msg.setSource(3443U);
    msg.setSourceEntity(140U);
    msg.setDestination(3166U);
    msg.setDestinationEntity(190U);
    msg.op = 185U;
    msg.entities.assign("DDGBGGQIFDOXSPYFQIWHTVJWARLCXMKWSDLTNNMBKCDYFTHYIQWOILMGPVVZILUZLNEUUAUBGIQAGOBAXROYERBIUZJNBCMEVEAORDTKCFTARUGVZWPVVKLXBHBMMVPQEMSQFXKIFDJSTIHHYAJPYUXMYEHEHZRKWWQUNFAJMRBFWDVSHMOXAORXECZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeakSimulation msg;
    msg.setTimeStamp(0.6332245316369173);
    msg.setSource(39665U);
    msg.setSourceEntity(240U);
    msg.setDestination(48615U);
    msg.setDestinationEntity(131U);
    msg.op = 225U;
    msg.entities.assign("KQHALQHNJPFEGHLKPJNECUBXEGNBIRKAYTNOFSUXZVCOLVKTFYRWJOZILWLFCDDPAGVZYCLPYUTRQVEJEWUFAHE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeakSimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.28050150645552097);
    msg.setSource(45780U);
    msg.setSourceEntity(196U);
    msg.setDestination(11733U);
    msg.setDestinationEntity(178U);
    msg.type = 101U;
    msg.speed = 25237U;
    const signed char tmp_msg_0[] = {7, -123, -36, -92, 47, 58, -80, -84, -87, -117, -16, 95, -116, -127, 40, -96, -38, -93, -30, -17, 117, -56, -122, -82, -65, 20, -18, 52, -90, -108, -50, 9, 43, 106, -48, 13, -13, -92, -6, 118, 5, -76, 104, -79, 4, 92, 90, 46, 62, 8, -71, -83, -122, 60, 77, 41, -85, -99, 103, 68, 73, 67, 22, 115, -53, -36, 57, 8, 59, -112, -39, 55, -29, -71, -31, 58, 36, 113, 107, 77, 109, -106, -128, -13, -87, -86, -49, 95, -13, -91, 58, -116, -22, -49, -6, 34, 99, 73, -36, 71, 1, 7, -60, -17, 53, -63, 16, 16, 3, 0, -103, -85, 86, 86, -91, 106, 75, -31, 64, -78, 60, -124, 33, 47, 40, -93, -104, 107, -77, -75, -102, -26, -44, -118, -118, 104, 22, -117, 67, 114, -20, 89, 14, -20, -119, -102, 110, -56, 32, 13, -37, -94, 109, 112, 78, 31, 49, 63, 95, -40, 80, -100, 107, -59, -19, -69, -89, -109, 54, 109, 52, -107, -95, -18, 53, -53, 63, 42, 47, 113, 66, 119, -51, 21, 34, 36, 92, 52, -87, -127, -107, -8, 65, 99, -108, 98, -40, 93, 106, 6, -85, -90, 79, 120, 125, 126, 116};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.8054175557937869);
    msg.setSource(14162U);
    msg.setSourceEntity(87U);
    msg.setDestination(37164U);
    msg.setDestinationEntity(237U);
    msg.type = 165U;
    msg.speed = 39669U;
    const signed char tmp_msg_0[] = {17, 44, -98, 48, -1, 120, -97, -59, -102, -11, -15, -20, -22, -77, -127, -127, 30, 85, -55, 117, -68, -27, -31, -117, -76, -110, 100, 120, 110, 110, 26, -99, -87, -51, 113, 29, -37, 112, 32, 118, -14, 57, -57, -22, 14, 87, 6, 1, 32, 26, 78, 95, 26, -103, -91, -75, -77, -69, 126, 64, -75, 5, -113, 109, -101, -77, 23, 26, 122, 72, -3, -9, -30, 28, -69, 92, -25, 92, 82, 120, 88, -126, 120, 124, 82, -38, 56, 70, -33, -100, 40, -116, 100, -106, -47, 82, -86, 13, -85, -127, 46, 76, -28, -88, 90, 94, -31, 43, 82, -43, -116, 84, -118, -91, -24, -44, -113, 101, -76, -22, 80, -79, -81, -94, 1, -117, -68, 12, 96, -111, -113, 84, -12, -89, 104, 37, 91, 8, -115, 10, -41, 78, -91, -72, -123, 120, -10, -75, -101, 34, 41, -17, -6, -114, 108, 31, -65, 115, -86, -117};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UASimulation msg;
    msg.setTimeStamp(0.8357349020669613);
    msg.setSource(11227U);
    msg.setSourceEntity(55U);
    msg.setDestination(25743U);
    msg.setDestinationEntity(250U);
    msg.type = 190U;
    msg.speed = 33995U;
    const signed char tmp_msg_0[] = {-105, -36, -37, -44, -121, 91, 84, 115, -41, 10, -3, -55, -56, 88, -5, -75, -115, 92, 62, 21, 47, 21, 113, -98, 59, -44, 82, -104, -8, 34, -68, -61, -4, -119, -125, 71, 22, -15, 27, 44, -121, -45, -115, 96, -105, -108, -24, -104, -21, -107, 20, 1, 85, -102, -90, 12, -101, 70, 4, 56, 112, 1, 53, -71, -63, -70, -98, 28, -106, 57, 61, 3, 35, 86, 4, 71, -95, 102, -23, -80, -36, 113, 103, -18, -127, 5, -53, -23, -107, -42, 91, -101, -58, -7, -97, 86, -17, -63, -71, -65, -112, 50, -46, 71, 47, 117, 23, 65, -67, 111, -112, 120, 72, -9, 18, 121, -42, -51, 40, 99, 37, -49, -49, -36, -48, -8, -11, 126, -119, -92, 2, -96, -59, 115, 2, 29, 43, 53, 92, 111, 53, -28, 52, -128, -77, -127, 74, 3, -93, 42, -13, 25, 118, -90, 30, -9, -91, -32, 114, -115, 125, -51, 44, -42};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UASimulation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.7524035597720876);
    msg.setSource(35597U);
    msg.setSourceEntity(74U);
    msg.setDestination(8140U);
    msg.setDestinationEntity(101U);
    msg.op = 120U;
    msg.tas2acc_pgain = 0.5429100924735352;
    msg.bank2p_pgain = 0.7114562425864116;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.7876022425724574);
    msg.setSource(56001U);
    msg.setSourceEntity(197U);
    msg.setDestination(56856U);
    msg.setDestinationEntity(4U);
    msg.op = 169U;
    msg.tas2acc_pgain = 0.38930717661258885;
    msg.bank2p_pgain = 0.01720577975105264;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynamicsSimParam msg;
    msg.setTimeStamp(0.3779625550948781);
    msg.setSource(24962U);
    msg.setSourceEntity(93U);
    msg.setDestination(63538U);
    msg.setDestinationEntity(230U);
    msg.op = 245U;
    msg.tas2acc_pgain = 0.31630033538784397;
    msg.bank2p_pgain = 0.9142202396566211;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynamicsSimParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.24342794179839722);
    msg.setSource(26331U);
    msg.setSourceEntity(64U);
    msg.setDestination(51645U);
    msg.setDestinationEntity(102U);
    msg.available = 277207738U;
    msg.value = 93U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.5745828072436766);
    msg.setSource(36100U);
    msg.setSourceEntity(142U);
    msg.setDestination(54654U);
    msg.setDestinationEntity(77U);
    msg.available = 1168547220U;
    msg.value = 197U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StorageUsage msg;
    msg.setTimeStamp(0.6239453460140622);
    msg.setSource(45570U);
    msg.setSourceEntity(56U);
    msg.setDestination(1307U);
    msg.setDestinationEntity(189U);
    msg.available = 3629698266U;
    msg.value = 101U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StorageUsage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.9808041757262677);
    msg.setSource(59887U);
    msg.setSourceEntity(154U);
    msg.setDestination(61445U);
    msg.setDestinationEntity(240U);
    msg.op = 164U;
    msg.snapshot.assign("EJIBLGBXKNBPVATIXMQCBNGDXBMLESWRTMRVRKBKJYJGUGXZGEWBASKFMTPDEYVVMQFQJZLTX");
    IMC::GroupStreamVelocity tmp_msg_0;
    tmp_msg_0.x = 0.543652194433125;
    tmp_msg_0.y = 0.9812691349734572;
    tmp_msg_0.z = 0.08775514065806012;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.3777621796655548);
    msg.setSource(6364U);
    msg.setSourceEntity(46U);
    msg.setDestination(62395U);
    msg.setDestinationEntity(241U);
    msg.op = 134U;
    msg.snapshot.assign("JYFHVEFPJGUTDYWSNUUPKRSQXOLBRAWBWVSZCKNHOAJTUTYEHGHEVEDCUDYCZTWKWBADMVPHHNPLSYINLXRZXSTFXJBUZVGQCHOGEBSPGMZIAFQKQGUXLM");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("IDSRKMCSFOXQSBSFQAQQNBNUJRKLPZWDTXHCPKXJOVLJEDWROLYAKJOXNKAADTPGGYCZUUFETWZINOZELKBFSNKVYZEFPEKVRJGUWHJVDRDAARUPGBCOAIZEMLMTHABHSGTJWSLSMREMIEVBGUTOGVLFJCIFHLAXTQIYRGWNKSRWH");
    tmp_msg_0.predicate.assign("IWAUMAIFNBCUJYVCJKVHJWMWPFBOFGRZBXWRJTCMURZNGNQXGBIWDKHUEYXKPOVTCKMAGYLEHZQHVRKNJGTSIXNLGLYWYPEBHZBDTJSKOQYAFPVYCZCYKTTUADEJSDKUJQUPDXWBCRMBKRLPZUOHHA");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CacheControl msg;
    msg.setTimeStamp(0.6916054727683668);
    msg.setSource(51601U);
    msg.setSourceEntity(219U);
    msg.setDestination(11197U);
    msg.setDestinationEntity(165U);
    msg.op = 162U;
    msg.snapshot.assign("CSBNAFUHVOSDMGRVQCYMICUEPZEBHJQWFWSOAEHGQTHXKAVWVBLFLNAVXIFQROZYDHMJABXNUZJCLDIPPPCMECPOBMECNOYYUPGWRFITATJAMYRLZNCGYXMFENXJZRUCSLFSUVWRWBGZDVJDOXDDWQVJQHGJPXRKJEXSNIGHEDTKGOFCHMIKNQUHKYIFTWVVJRTBTLILYFKQTARGISMTOKW");
    IMC::Launch tmp_msg_0;
    tmp_msg_0.timeout = 57477U;
    tmp_msg_0.lat = 0.7166674192896373;
    tmp_msg_0.lon = 0.7624140690336196;
    tmp_msg_0.z = 0.08309145493281922;
    tmp_msg_0.z_units = 67U;
    tmp_msg_0.speed = 0.5873014957446112;
    tmp_msg_0.speed_units = 18U;
    tmp_msg_0.custom.assign("TGSVVANUIJZYPFBBMSPLKOPJFWHXZZJKLFAURXVFDKLTOLGZTNFM");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CacheControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.0981747500745942);
    msg.setSource(24945U);
    msg.setSourceEntity(13U);
    msg.setDestination(20806U);
    msg.setDestinationEntity(95U);
    msg.op = 190U;
    msg.name.assign("YKNIZEEKMUVPBBAGUNSABXPZXRALFPBQPHDSBGGWYLUXHULQUMVYYVACSJVJMIHKYKLGRSGDRWPKZNVQJMWLZZGDBWMDOCLFOTNDKJOCJYYFEFHZYZBSHEWXZQXIWSMQDXUTIWOLGCLUEFJKAPESIIAMLRCRJQERWLXAKFVGDOBNBEHPXOCPHWCQXGXTOHIPTQTCNSJEWMHVKPNVIJACFVOSBADRURTNMTJZRSTDNQFYOYVMGHITUFCK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.016249687337303143);
    msg.setSource(55773U);
    msg.setSourceEntity(189U);
    msg.setDestination(194U);
    msg.setDestinationEntity(126U);
    msg.op = 6U;
    msg.name.assign("AJVSENHGWDTCLZTFMWHWDZNSSSARYJXVVMSCFLCSADGSAQBMTPNTZEANOJEOKEZHXAITKKYLOPMLHDTFLXRWOBKHALDRQQYACJUHZYGHIVFIWTJERN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LoggingControl msg;
    msg.setTimeStamp(0.5620755181502246);
    msg.setSource(49576U);
    msg.setSourceEntity(170U);
    msg.setDestination(22346U);
    msg.setDestinationEntity(232U);
    msg.op = 155U;
    msg.name.assign("MBTNIOPWOANLOZYJAKFWUYEOAUONIIXBMAHHQNFXZGLVLFCDCQHFDFWQUJPVYEHDOKEMOLWRYEDSEXTTPBPFLQCTUCCJIQXNTSTAHZSYOBONXJVFWGDMACRWNGXRSKKUJVJYTRLNCCJZVVRKIUTEMXZCEZIMJEVQYSQYZIGZRZMPHTPBQCDVSDFHWANXHVIBLMDXPHGBBGTPKLBRRALSIIKSZKODWESH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LoggingControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.7695891007921687);
    msg.setSource(52443U);
    msg.setSourceEntity(52U);
    msg.setDestination(21514U);
    msg.setDestinationEntity(56U);
    msg.type = 133U;
    msg.htime = 0.14802495452793485;
    msg.context.assign("BRTKFSYAMUROLAIKEMRWXHVKQYQDPACCHWXDDWIYUCFNVDRFDTGFBCZNYBFEOXMNLXZKGMHMUAPGVBJGQMUJBIPIBWQXKYEOYLVOCRLOOJUNLW");
    msg.text.assign("PZRWGENTYZFOPBWJUNJEKORGZSCSVLHNVSNAWVDYGCMAYQFUUUGYWMXBLKYAHOVZCUDQISQGRMQPUELLWPXQNZVTXSKTBHCMMLCIIMXKZOTCUGYHFIAJBIYGFWHZFDRSTMCEXMLOQCFLRNXHWPDAJNIBIPEXOVRGDMJFQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.8979629882434899);
    msg.setSource(13988U);
    msg.setSourceEntity(101U);
    msg.setDestination(46230U);
    msg.setDestinationEntity(207U);
    msg.type = 215U;
    msg.htime = 0.14301198642743118;
    msg.context.assign("QTOHPVCKINVXCDGXQMLKTNKQSDIYDAMWLHNPFHVRKVCOHNFKJZUOJATASOBQOUARUHCPXFRUAZRFVHWDPQLKYDXJM");
    msg.text.assign("TSISOQYZWUFAPJMNFTXZDETDNFZWWFFEUPHUMPRDRVNLYZOVXGLZRQVGBIIYUWGGWADXJQHYMJAIYYGQMQHFHE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookEntry msg;
    msg.setTimeStamp(0.9415514549307525);
    msg.setSource(20347U);
    msg.setSourceEntity(149U);
    msg.setDestination(55913U);
    msg.setDestinationEntity(87U);
    msg.type = 252U;
    msg.htime = 0.23417566150123792;
    msg.context.assign("RZNEVJIRGWLEYZIUYBAMQITSOXUODYRQWKMANMSMMSQNVHGJZIWVYVYAWOWIVEAHGZIPGEAUMZSQDXTPOVTJOXFNKAJNZNFB");
    msg.text.assign("SDUMIUMZQAKYZZMXFWCUTPLVWOKVPPWRGPYFIDNDZXJWLQNELDTLGZBQQXPRZVCDYJFINHHJUILNJHCECNHEROGPBBMITLURDFGXTUODHAAMCWMYRKSACWGVBGJCCEPRSZIKSNXBREVJLJAALQBYPBFXNKWFCONSEPVWGYBOTGKSPQJIAGOITXXHETEFOOUXQSFZXUKVMUFDDKMBRYSIJLYSIOKVYGA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookEntry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.7885467958827528);
    msg.setSource(1556U);
    msg.setSourceEntity(187U);
    msg.setDestination(2508U);
    msg.setDestinationEntity(135U);
    msg.command = 120U;
    msg.htime = 0.3054069627508835;
    IMC::LogBookEntry tmp_msg_0;
    tmp_msg_0.type = 173U;
    tmp_msg_0.htime = 0.0012191709188020816;
    tmp_msg_0.context.assign("XZONALSMNTMPEONTDQMPLBLZEJNUSLLQFSKSQDRMYARVFWQINRDLJGTTAZJIUKOAUVBFJKJWPUTIQXRWPIRJXZZDCZIQEIBNSSTRGUQVEBCKCKVMVBEXDFVXDDOLOUOKGWTHWCXIBHAGGOWAZZFVVOSGVDRVAROQEBYNGHPWAPNCMHKPJBETFWHMEHLJYB");
    tmp_msg_0.text.assign("POVKRPOLUAEXQGOKYHVSBOCHFJDMNHPZLCPZFBUJILIROEJKYZHPIOSJNMZGPOGECWWVDNOOHRCQBZIBXUQEPXSHYKZSUTNJMQYFVARQLV");
    msg.msg.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.6778083739146344);
    msg.setSource(10672U);
    msg.setSourceEntity(74U);
    msg.setDestination(4846U);
    msg.setDestinationEntity(104U);
    msg.command = 7U;
    msg.htime = 0.6875272825722519;
    IMC::LogBookEntry tmp_msg_0;
    tmp_msg_0.type = 8U;
    tmp_msg_0.htime = 0.829463242139516;
    tmp_msg_0.context.assign("FXLDQIFEBQAXOMSMZHMBUFKYIUAOLATKEYGXESJDVCVFILLTDPDNFYHWZWXUPRBYPQDUXANEYVNVJBNRMUIHZVKKQEZRGLCBIVAHSCRJXDGZLTIFDGCVVAZHXAEGCOVFSTWYGXTEMWOLJKJKPOWTBUGBVYNOPNJQQKSELOCTPRNPWNSAJCKCWQMEYHQHZZRHBRRMHPOAGJTRE");
    tmp_msg_0.text.assign("PWONRULYNTDFBUFUGZXUVUCVWOOHGAX");
    msg.msg.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LogBookControl msg;
    msg.setTimeStamp(0.17103583747408924);
    msg.setSource(11484U);
    msg.setSourceEntity(13U);
    msg.setDestination(32365U);
    msg.setDestinationEntity(83U);
    msg.command = 57U;
    msg.htime = 0.8005881758738558;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LogBookControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.48301373857532603);
    msg.setSource(41576U);
    msg.setSourceEntity(119U);
    msg.setDestination(40292U);
    msg.setDestinationEntity(32U);
    msg.op = 130U;
    msg.file.assign("UUXNAETCYLFCKFHQQEPFVTMROSIATNPUWWEGJZAMDQLMIFIWOUYGVCACHAFRLPXLPVOLJWVOFQPWBFMZVDWQCUCPAGVWRJSQJRFDOXXSQWJRNSZRVYYUGVHBJMWZXKCMYZNTDRJBQIHUHLRLZFOUUQBEYYMTISMXKUEXCEXOOIDOIGNZQRXIANWSTNJLYPNZCTGTYGPLHABZNBVSBSSGTYVJKOBE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.8016839479938617);
    msg.setSource(42226U);
    msg.setSourceEntity(167U);
    msg.setDestination(18680U);
    msg.setDestinationEntity(11U);
    msg.op = 137U;
    msg.file.assign("VFQDZDINGUOMWCSTQLDZJOCMPNSGISPHJJWWMZXNWCUURMQBWLIUZIUGCGDPAQTSVFWBVRPMUYPLCSABJJYNYRFTWRBPDAAVHHQRGGBVIAAATJKY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReplayControl msg;
    msg.setTimeStamp(0.562596304619658);
    msg.setSource(44225U);
    msg.setSourceEntity(3U);
    msg.setDestination(54692U);
    msg.setDestinationEntity(88U);
    msg.op = 190U;
    msg.file.assign("XGGAWKQZTHFAERENLTIRGWVYWTTVCZKGFFAEWBMMTOLPJOXSYBHUNIHJFPQVECKQALEKZVUQXKXOKDRRTXLLSVIZTSAPFTIYUYLYJQWJFBVZVPHUBEOCAHIMWMMBGIVBHIPD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReplayControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.03095767905979674);
    msg.setSource(8105U);
    msg.setSourceEntity(9U);
    msg.setDestination(4991U);
    msg.setDestinationEntity(89U);
    msg.op = 102U;
    msg.clock = 0.052971762885724916;
    msg.tz = -63;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.6087135431261544);
    msg.setSource(51204U);
    msg.setSourceEntity(162U);
    msg.setDestination(27251U);
    msg.setDestinationEntity(140U);
    msg.op = 50U;
    msg.clock = 0.8791860176943583;
    msg.tz = -94;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ClockControl msg;
    msg.setTimeStamp(0.39136785281757613);
    msg.setSource(48417U);
    msg.setSourceEntity(65U);
    msg.setDestination(22395U);
    msg.setDestinationEntity(245U);
    msg.op = 235U;
    msg.clock = 0.22696598176959004;
    msg.tz = -105;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ClockControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.46087513300691263);
    msg.setSource(1335U);
    msg.setSourceEntity(208U);
    msg.setDestination(51278U);
    msg.setDestinationEntity(221U);
    msg.conductivity = 0.8910333065237879;
    msg.temperature = 0.880871601777896;
    msg.depth = 0.8942252860745878;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.07358244340621034);
    msg.setSource(50209U);
    msg.setSourceEntity(193U);
    msg.setDestination(1067U);
    msg.setDestinationEntity(157U);
    msg.conductivity = 0.931260910080019;
    msg.temperature = 0.6867497755462297;
    msg.depth = 0.0872521885448646;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricCTD msg;
    msg.setTimeStamp(0.5549768113037797);
    msg.setSource(27798U);
    msg.setSourceEntity(12U);
    msg.setDestination(5535U);
    msg.setDestinationEntity(119U);
    msg.conductivity = 0.6747514277155584;
    msg.temperature = 0.15359623916364173;
    msg.depth = 0.7917719499894558;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricCTD #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.6648924954243762);
    msg.setSource(54457U);
    msg.setSourceEntity(144U);
    msg.setDestination(20699U);
    msg.setDestinationEntity(152U);
    msg.altitude = 0.7966696017760967;
    msg.roll = 15867U;
    msg.pitch = 47069U;
    msg.yaw = 24465U;
    msg.speed = 31602;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.11175567464153557);
    msg.setSource(15526U);
    msg.setSourceEntity(151U);
    msg.setDestination(47165U);
    msg.setDestinationEntity(74U);
    msg.altitude = 0.621017046102138;
    msg.roll = 34054U;
    msg.pitch = 65162U;
    msg.yaw = 8087U;
    msg.speed = -20305;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricTelemetry msg;
    msg.setTimeStamp(0.6028809541947991);
    msg.setSource(19959U);
    msg.setSourceEntity(26U);
    msg.setDestination(6191U);
    msg.setDestinationEntity(162U);
    msg.altitude = 0.5844450606171822;
    msg.roll = 45332U;
    msg.pitch = 26149U;
    msg.yaw = 53468U;
    msg.speed = -21147;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricTelemetry #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.11240858070303617);
    msg.setSource(13880U);
    msg.setSourceEntity(91U);
    msg.setDestination(59949U);
    msg.setDestinationEntity(252U);
    msg.altitude = 0.634647358105096;
    msg.width = 0.1937908657858035;
    msg.length = 0.3617435324901078;
    msg.bearing = 0.2793275277760311;
    msg.pxl = 14378;
    msg.encoding = 39U;
    const signed char tmp_msg_0[] = {9, -67, -31, 90, 53, -117, 62, -39, 5, -116, 84, 31, 18, -92, 66, -97, 40, -41, -6, 97, -86, -48, 54, -105, 83, 17, 9, 52, 17, 5, -106, -65, -30, 29, 47, 123, 11, 37, -46, -21, 31, -56, 22, -74, 87, 62, 57, -11, -38, 74, 24, -117, -4, 37, -20, -4, 24, -103, -30, -119, -8, 10, 101, 123, -34, 102, -38, 29, 61, 56, -56, -55, -102, -116, -117, -28, 18, 18, 43, -126, -50, 104, -31, -81, 124, -6, -59, 100, 36, 78, 22, 16, -117, -119, -2, 2, -51, 80, -16, -5, 39, -110, 24, 25, -63, 71, -28, 93, -68, 95, -95, -17, 106, 34, 42, 83, 80, 44, 76, -60, -26, -20, -96, 39, -125, -59, -93, -107, 35, -94, 2, 110, 63, -114, -11, -97, -97, -36, 109, -3, -88, -120, 27, 116, -73, 37, 35, 8, 43, -51, 46, -87, 96, 17, 119, 118, 74, -57, -69, -18, -58, -102, 50, 14, 43, -100, -66, 115, 99, -115, 88, -72, -33, -96, 75, -4, 88, 109, 69, 122, -99, 83, -75, -104, 124, 79, 123, 59, 40, -67, -45, 95, 120, -76, -52, -41, 1, 41, -16};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.9714978685372062);
    msg.setSource(42439U);
    msg.setSourceEntity(7U);
    msg.setDestination(62288U);
    msg.setDestinationEntity(214U);
    msg.altitude = 0.11145234578269003;
    msg.width = 0.041012165624740304;
    msg.length = 0.27766198031996725;
    msg.bearing = 0.5435237362868406;
    msg.pxl = -12194;
    msg.encoding = 236U;
    const signed char tmp_msg_0[] = {-99, 121, 117, -17, -46, -93, -116, -41, 24, 61, -57, -76, -73, 58, 7, -35};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSonarData msg;
    msg.setTimeStamp(0.14948298787785896);
    msg.setSource(51679U);
    msg.setSourceEntity(152U);
    msg.setDestination(4655U);
    msg.setDestinationEntity(147U);
    msg.altitude = 0.06209696361080619;
    msg.width = 0.12883498096661117;
    msg.length = 0.4429858516467037;
    msg.bearing = 0.9799003970252743;
    msg.pxl = -2508;
    msg.encoding = 78U;
    const signed char tmp_msg_0[] = {-117, -20, 77, -71, -1, 16, 85, 108, -72, 32, 67, 66, 106, 19, 126, -45, -112, -61, 63, -57, -81, 114, 104, -25, 63, -46, 48, 7, -45, 31, -90, -115, -39, -35, -108, 16, 44, 7, -90, 71, 48, 109, -84, 49, 13, 55, -95, -57, -93, -45, -43, 122, 107, 68, 25, -57, 48, 71, 44, -80, 91, 35, 37, -103, -35, 2, 25, 64, 33, 82, 34, -6, -122, -39, -117, -57, 72, 74, -118, -54, -113, -97, 29, -117, 49, -127, 34, -12, -8, -106, 80, 92, -81, 63, -6, 16, -99, 93, 36, 105, -72, 75, 59, 31, 2, 49, 118, -57, -92, -56, 35, 4, 21, -73, 55, 102, -77, -89, -18, 16, -5, -2, 117, -95, -20, 35, -110, 9, -34, 59, 1, -49};
    msg.sonar_data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.6587311573109448);
    msg.setSource(13726U);
    msg.setSourceEntity(51U);
    msg.setDestination(21823U);
    msg.setDestinationEntity(241U);
    msg.text.assign("XEXDVFXOGKAAKRZGZHWHZKGNUNHIACCFMXRKAZAFHY");
    msg.type = 43U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.06290047459089831);
    msg.setSource(8459U);
    msg.setSourceEntity(36U);
    msg.setDestination(29057U);
    msg.setDestinationEntity(162U);
    msg.text.assign("DCUFNZHWSNUYIBXQUPCOSDDVUNGRAWANRZBGXHLIQLRFCPKBJFVMAESVKJNAIKWBSWRJCHACEGONWEMOPRAAPNQTTDZIGMATLHLCMIZDLDVJLGTVCGOJABBHOUWJHLQFQDWJRSPFMYXYWYUECXRIUXUFBSRNYMHFYZFZELYOIJRKFEXYKDOZUWQXOBGPERTBIPDXVKSTHSMIDXKZ");
    msg.type = 49U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricEvent msg;
    msg.setTimeStamp(0.7780155343423119);
    msg.setSource(25001U);
    msg.setSourceEntity(139U);
    msg.setDestination(28526U);
    msg.setDestinationEntity(242U);
    msg.text.assign("NICRPRQPMO");
    msg.type = 1U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.1445843811552633);
    msg.setSource(29627U);
    msg.setSourceEntity(204U);
    msg.setDestination(60991U);
    msg.setDestinationEntity(160U);
    msg.parameter = 3U;
    msg.numsamples = 58U;
    msg.lat = 0.7331157767096204;
    msg.lon = 0.7161758961272787;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.4384902995975202);
    msg.setSource(9073U);
    msg.setSourceEntity(222U);
    msg.setDestination(20285U);
    msg.setDestinationEntity(74U);
    msg.parameter = 56U;
    msg.numsamples = 250U;
    msg.lat = 0.5411735222702472;
    msg.lon = 0.7170976178743923;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VerticalProfile msg;
    msg.setTimeStamp(0.7870182056741182);
    msg.setSource(1963U);
    msg.setSourceEntity(12U);
    msg.setDestination(3560U);
    msg.setDestinationEntity(91U);
    msg.parameter = 71U;
    msg.numsamples = 175U;
    msg.lat = 0.4219773422060008;
    msg.lon = 0.1840387830465654;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VerticalProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.8918319835897092);
    msg.setSource(8281U);
    msg.setSourceEntity(207U);
    msg.setDestination(37185U);
    msg.setDestinationEntity(55U);
    msg.depth = 17331U;
    msg.avg = 0.6463875245636549;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.9381931508912786);
    msg.setSource(38460U);
    msg.setSourceEntity(230U);
    msg.setDestination(49185U);
    msg.setDestinationEntity(225U);
    msg.depth = 36372U;
    msg.avg = 0.30705247780485745;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ProfileSample msg;
    msg.setTimeStamp(0.9178199718167339);
    msg.setSource(31329U);
    msg.setSourceEntity(113U);
    msg.setDestination(9262U);
    msg.setDestinationEntity(203U);
    msg.depth = 23421U;
    msg.avg = 0.6348644938511073;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ProfileSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.5705874548418831);
    msg.setSource(24328U);
    msg.setSourceEntity(238U);
    msg.setDestination(59260U);
    msg.setDestinationEntity(114U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.8685315943503509);
    msg.setSource(26992U);
    msg.setSourceEntity(121U);
    msg.setDestination(61431U);
    msg.setDestinationEntity(187U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heartbeat msg;
    msg.setTimeStamp(0.19521982745192623);
    msg.setSource(61481U);
    msg.setSourceEntity(83U);
    msg.setDestination(31651U);
    msg.setDestinationEntity(35U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heartbeat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.0241124727574068);
    msg.setSource(37289U);
    msg.setSourceEntity(107U);
    msg.setDestination(474U);
    msg.setDestinationEntity(111U);
    msg.sys_name.assign("ZPWKEZYUMVWGNGYVGMYSUOVXWHBNRFDCCWDBEHTVHAQQHKFGKLQUFDGJMJZIJTPQYXHRNEMGF");
    msg.sys_type = 209U;
    msg.owner = 10762U;
    msg.lat = 0.946102374642521;
    msg.lon = 0.4936121920539064;
    msg.height = 0.4814011931520642;
    msg.services.assign("PQJUMVLZOVFGHRSTILTSYMBZWFMAKNEQSUXZANJYQROESJPXOPFZHGABJDCXWMKPXLVRYAQCBOURBVXYPIGNAVNHLKUPIDGNIRJXOFKGXTLMEAIRBEHIDWFSCMEXVDCNLPUHZAUSEKDWFJBUDCDNOTCTQDGGRWJUYCJKQHBTIMPKMZUSROCPLXJCFEAHATZSKMIDNYZQLPEVEWFIYGFNOYWQBTBVNQYRZDAEGHXSFGWIRVTSY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.7025535751832891);
    msg.setSource(6190U);
    msg.setSourceEntity(135U);
    msg.setDestination(19125U);
    msg.setDestinationEntity(133U);
    msg.sys_name.assign("VCWAWEEDHKRIYLFRQTFQLVGUIFTKSMFEVXEFFXTKZSZHLHKRMLMSWVIHONOCNIRZMUDZMEXGKGOOJJDOGFQZUGXZBJRUIDPCLUQDSOVBLATPKHTINYJWLXBZTZXDWYSHGRDEARTYKGPOVCNIIMPHXYNTBLURQYQTAJYVMUEPSSYXMJAWBGUDAPNZVONCWJBARAPKOQBWHPEGDHLAFQEZNPBGD");
    msg.sys_type = 182U;
    msg.owner = 40082U;
    msg.lat = 0.3816249399689452;
    msg.lon = 0.39791275458652087;
    msg.height = 0.823538479862655;
    msg.services.assign("VLQAQRKPWTGFUQXYQZHAJPKWESRRPANHIWPPFYWIBJBUQUZMUSPXQKOSMTVCNBZVLZDRJVLVVVPTITMDMQYBNRJCZIPSFSXADYWMDAXICUXXCIYJTZILLGBJNBEMXFANLCHD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Announce msg;
    msg.setTimeStamp(0.0023674119915031433);
    msg.setSource(59723U);
    msg.setSourceEntity(87U);
    msg.setDestination(8112U);
    msg.setDestinationEntity(218U);
    msg.sys_name.assign("LOFAPLIHESBYGYIIBNHAXIVVJNHRUECCZRNBZWYEOSOTZVQYYVQEJZDOPBZNOXLXJWUHCBAMXZOTANCCPCL");
    msg.sys_type = 54U;
    msg.owner = 1528U;
    msg.lat = 0.7783227788648696;
    msg.lon = 0.6512411368148601;
    msg.height = 0.2788503717544919;
    msg.services.assign("ITMBSZERFPQWOTZYZAVSORLOOUXUOFGLEVKLYAYNITBBXGI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Announce #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.16052910914009821);
    msg.setSource(61349U);
    msg.setSourceEntity(79U);
    msg.setDestination(36443U);
    msg.setDestinationEntity(185U);
    msg.service.assign("GLIKDQHVBEZRUEKOMFUVGYEXEQBAPRFWRODORMTFNISNJQADXRLWZXOQBIDEXCSCDLNDSMLDPJZYGMZMTYUPJWZPLKEJYUIBSPPCGDUUTSJUKWFSYWCVQPHKHZRXZEJOTYHXTKGBUCETVQMIIJDQIYCSHYLERXWKAFLRPTWIVAHVEFMQUIZIGARBCGJ");
    msg.service_type = 184U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.6782319266997858);
    msg.setSource(31465U);
    msg.setSourceEntity(1U);
    msg.setDestination(53946U);
    msg.setDestinationEntity(196U);
    msg.service.assign("ZETRBLTLCXECXAOFUMETJKKJYLILIRPEDKSHCEPPNGTZKSIUFMWZTQQXZSNQEAFXHJODREDOIVCUMLXFZIMLHBVSAQFJSOYMBEGZLPUBYNNDRGDQQEWAVBZUCOARVWXKCYWUVRKKIYUSZPZVBDWJIYBMWGHDWUHTURHYJFNNTOI");
    msg.service_type = 243U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AnnounceService msg;
    msg.setTimeStamp(0.022215260098379375);
    msg.setSource(50675U);
    msg.setSourceEntity(252U);
    msg.setDestination(53564U);
    msg.setDestinationEntity(102U);
    msg.service.assign("TWVQZPCVNDTSSEFHYYDTRRCXGFHHWTUAVIUGEHPLODQIFABRRNKZJHZKUMNPXIYBZSKDLJWHYESXLQCBZESMGNOXWCTJFNZCFAPWFWCSOEVXKVMKLZESUDXHIUBITHIQURDUWWYQFJQJOGQMRZLJSRNHRXUVVPDNBBHAKLDLFMIITEYKQOWJUCTBPALYAFOBMXUPNCPLJABSXJICD");
    msg.service_type = 104U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AnnounceService #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.9276743195454145);
    msg.setSource(33329U);
    msg.setSourceEntity(142U);
    msg.setDestination(7781U);
    msg.setDestinationEntity(25U);
    msg.value = 0.9274087013722415;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.07808616435638283);
    msg.setSource(31559U);
    msg.setSourceEntity(156U);
    msg.setDestination(16365U);
    msg.setDestinationEntity(12U);
    msg.value = 0.09951283520941823;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RSSI msg;
    msg.setTimeStamp(0.9232264179956702);
    msg.setSource(3017U);
    msg.setSourceEntity(82U);
    msg.setDestination(17692U);
    msg.setDestinationEntity(104U);
    msg.value = 0.14539361238498638;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.7658254439247978);
    msg.setSource(44150U);
    msg.setSourceEntity(202U);
    msg.setDestination(3426U);
    msg.setDestinationEntity(73U);
    msg.value = 0.016336965795507807;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.350521019647428);
    msg.setSource(31984U);
    msg.setSourceEntity(3U);
    msg.setDestination(21461U);
    msg.setDestinationEntity(22U);
    msg.value = 0.538652321504465;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VSWR msg;
    msg.setTimeStamp(0.7947035676755422);
    msg.setSource(22480U);
    msg.setSourceEntity(236U);
    msg.setDestination(32808U);
    msg.setDestinationEntity(135U);
    msg.value = 0.29318416059650676;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VSWR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.009903485528915512);
    msg.setSource(31975U);
    msg.setSourceEntity(198U);
    msg.setDestination(12419U);
    msg.setDestinationEntity(91U);
    msg.value = 0.007540632538714509;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.20397717170179197);
    msg.setSource(28344U);
    msg.setSourceEntity(50U);
    msg.setDestination(26001U);
    msg.setDestinationEntity(243U);
    msg.value = 0.9883611219436825;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLevel msg;
    msg.setTimeStamp(0.1538236272231357);
    msg.setSource(46737U);
    msg.setSourceEntity(220U);
    msg.setDestination(33838U);
    msg.setDestinationEntity(59U);
    msg.value = 0.1152986964704803;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.4886823418098293);
    msg.setSource(43838U);
    msg.setSourceEntity(79U);
    msg.setDestination(31177U);
    msg.setDestinationEntity(241U);
    msg.number.assign("JDOOVKFDBVLGBFYPMSCIKWQCIJUGNUEDWLIDZFUYJSDYKKTQSRIFKCIRHLJZLWOXWGMDDQLHBXPWCGSPJECYZXYWYEYKOXRRWTVVGYCUXKAVNEBKTJMHXTPHJNAIVIAPRBPTYN");
    msg.timeout = 53282U;
    msg.contents.assign("ENQYDVLZAIFUOACGMOFUEBNFKHBHWGNECQXFABSVQFBOWYOVVWJHGOJTUWNLXPZAHBPVSRLNROCRUZMXVGYTJADDQMPJNHSHIRGZCTOKMPTYTYPXAPLNTDSZUVREUKKQKLGSDJLKPMGMQYLPEMZMEITWCISXXWHIUWLTEEGXDFXVSUIMFFKKQOYHCHRKGWYWPUDNCAEJDACDNBCRZIZBNRVDKB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.27453736050548394);
    msg.setSource(25690U);
    msg.setSourceEntity(93U);
    msg.setDestination(57069U);
    msg.setDestinationEntity(10U);
    msg.number.assign("RLVZBYRSNDTJBQCGPQUUDAVFKMYPUEQPPJTLEMT");
    msg.timeout = 41501U;
    msg.contents.assign("GQIHJVTYCSODNFIIZYHUXNYKBZJUBDSOKXJPTIOQPNKCBYNEPZFJBANPXJIWYPNTDCBFGLUMHWASEVMHCGKQLWZALVAUHONKH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sms msg;
    msg.setTimeStamp(0.5608213414652609);
    msg.setSource(9890U);
    msg.setSourceEntity(169U);
    msg.setDestination(10503U);
    msg.setDestinationEntity(76U);
    msg.number.assign("UFRSJENEYLMVYRXGKFDLLDBXSXWOJYZKBDBFLWUDZLTRVFAWZCNKUJEVURUYPJAOBQVYGRCQSKXTYSZ");
    msg.timeout = 25162U;
    msg.contents.assign("WKVYDLMCFAAGTDGJRCZTICEXZJJUIMGCDRFTHTFDIDWNPMVYXHCKBIOZJNKXEOHLGQJEHOQWLSDAQQDEMUXZOSOPTPWOGBSTJWMYQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sms #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.3108275163647576);
    msg.setSource(17872U);
    msg.setSourceEntity(178U);
    msg.setDestination(31012U);
    msg.setDestinationEntity(116U);
    msg.seq = 1835374858U;
    msg.destination.assign("AZGCSWMOROPRBZLUNUZXUWYJXYYEVTMINCQSEPGULIAHIZUUJMJWNNFOFRQTDIGKDKH");
    msg.timeout = 19640U;
    const signed char tmp_msg_0[] = {-82, -124, 14, -10, 47, 28, -60, -86, -67, 13, -127, -71, 34, 107, -16, -103, -24, -109, -53, -117, 83, -46, 79, 42, -121, -79, -38, -106, 96, -103, -123, 105, 85, -104, 36, 56, 9, 26, -126, -119, 70, -20, 55, 5, -87, 105, 78, 117, -115, -32, -52, -35, -74, 97, 48, 104, 67, 35, -1, -47, 109, -43, 84, 69, -113, -107, -50, 21, -25, 108, -117, 54, 119, -32, 47, 102, -5, 8, 56, -14, 18, 113, 110, -2, 78, -125, 82, -71, -79, -106, -3, -49, 45, -1, -16, 14, 35, -20, 1, -81, -58, -25, 57, -28, 72, -33, 9, 21, 103, -40, 78, -65, 74, 123, 29, 90, -27, -25, -47, 22, -28, 22, 73, 64, -91, 60, 108, -86, 120, 30, 54, 22, 11, 108, -59, 2, 106, 110, -93, -25, 117, -79, 102, -17, 15, -43, -126, 73, 11, -126, -57, 6, -113, 73, 108, -55, 75, -73, 16, 20, 67, 65, 16, 71, -23, -45, -125, 57, -48, -47, 9, 67, -5, 70, -22, -113, 10, -119, 43, -24, -36, 22, 125, -18, -86, -40, -41, 109, 78, -3, 73, -106, 104, 66, -53, -74, -106, 98, -125, -125, 50, 91, 29, -20, -52, -27, -104, -78, 51, -17};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.5577867189610931);
    msg.setSource(2443U);
    msg.setSourceEntity(208U);
    msg.setDestination(62268U);
    msg.setDestinationEntity(51U);
    msg.seq = 352516230U;
    msg.destination.assign("MZTHTQLYSJMQKZRZFPKTYMQUMREPCUTBCLBSAIABDQUXCDYXHFDCGIHCOGGIT");
    msg.timeout = 56840U;
    const signed char tmp_msg_0[] = {-66, -96, -40, -58, 87, 98, 96, -120, 43, 14, -62, 69, -123, 28, -2, 56, -67, -13, -40, 121, -89, -32, 98, 110, -55, 63, -122, 56, -62, -29, -111, 52, 123, 51, 72, 122, 69, 40, -102, 49, -127, 121, 55, 27, -76, -57, 26, 77, -86, 72, 125, -33, -92, 47, 36, -85, -36, -87, 72, -64, 78, 40, 67, 115, 67, 114, 54, 90, -118, -52, -29, -57, -101, 19, 106, -76, 125, 58, -40, 122, -49, 64, -88, 45, -19, 27, 79, -9, -2, -7, -67, 33, -106, -35, 52, -30, -110, -29, -19, -114, -28, 63, 36, -114, 96, 84, 76, -63, 0, 10, 20, -71, -57, -62, -91, 1, 108, -100, -8, 30, 54, -114, -52, 1, -88, 28, 21, -85, 14, 95, 27, -122, -116, -49, 71, 60, 36, -42, -120, 101, 62, -64, -71, 69, 109, 57, -105, 64, 22, -46, -7, -84, 75, 42, 94, 72, 101, 108, -105, -99, 74, -72, 83, 113, -35, 22, 124, -103, 23, 60, -105, -18, 103, -88, -7, -72, -54, -78, -30, 77, 59, 69, 62, -2, -92, 126, -65, 92, 122, 93, 85, 18, 83, 26, -42, 118, -92, -60, -39, 13, 19, -90, 80, -26, 33, -102, -37, -60, 104, -103, -55, 87, 36, 121, -76, 53, -119, 10, -117, -84, -62, -22, 10, -59, -43, 91, 124, -4, 115, -116, 4, 13, -75, -33, -100, 103, 87, 78, 47, -67, 47};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsTx msg;
    msg.setTimeStamp(0.7845593707774898);
    msg.setSource(5084U);
    msg.setSourceEntity(31U);
    msg.setDestination(35301U);
    msg.setDestinationEntity(5U);
    msg.seq = 2591192633U;
    msg.destination.assign("IAUMDAHBMVZTZSKFHSTGBWNWMKPNKXOYYEQGKJEOMNJROKZPSYYVGJMKGVCAPNLLHTRIXNEMSTYYJGRJVCPSJFDYSYBBXURQDCQVUCEKNEAPFNTJDIDUZPRIDBLORHUTUXXFOWLLCGMZHLGAQCUIQQFRXAAGAXVDHUXOZWONTPOPIZSSPBNHFWHWGJQTWLCEFMMRIKJILUZDVTVLIDCSOXGRQFBIKFPWUYEFNZYJECSDZEV");
    msg.timeout = 57123U;
    const signed char tmp_msg_0[] = {-27, 6, -53, -110, -85, -40, -118, -21, 117, -122, 107, 5, 37, -87, 99, -116, 60, -62, 78, -79, -39, 104, 17, 47, 96, -4, -56, 57, 58, -18, -102, 59, -1, 26, -25, -97, 54, -112, -89, 28, 15, -58, -107, -122, -110, -34, 103, 106, -35, -36, -19, 6, -1, -38, -128, 13, 60, 6, -97, 70, -116, -75, 31, 64, -44, -70, -82, 29, 72, 15, -56, -6, -116, 43, 82, -6, 122, 62, -71, 4, 64, -41, 8};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.8676648819407887);
    msg.setSource(31795U);
    msg.setSourceEntity(94U);
    msg.setDestination(56607U);
    msg.setDestinationEntity(215U);
    msg.source.assign("WPTHUFQMTUXAYWMVYWMSEQLXBHDLVLSUDDWCJZYDDLDAPDGCRJJVHFLAGBRPBGBAPJVTIFYRREADCHRZOIIOGRRCZNYKWZBAIKMYSMNIRQ");
    const signed char tmp_msg_0[] = {60, 47, -5, -80, -2, -32, 47, 97, -55, -17, -123, 107, -126, -46, -119, 46, 55, 115, -7, -27, 52, 39, 16, -90, 17, 117, -69, 1, -7, 30, -106, -82, -108, 89, -98, -87, -114, -74, 65, 91, -99, -122, -78, 121, 11, -37, 109, -107, -53, -66, 51, 40, -65, 49, 6, 47, -112, -38, 35, 75, 88, -43, 58, 2, -57, 27, -76, 17, 31, -57, 75, 91, 16, 47, -71, 106, 21, 57, -121, 122, -125, 91, 38, 20, -57, -82, -51, -104, -23, -87, 45, 79, -124, 86, 26, 56, -56, 112, 76, 122, 62, -96, 77, 55, 79, 48, -89, -127, 107, -4, -83, 52, 61, 19, 113, -70, -97, 53, -22, 1, -46, 36, -85, -5, -43, 8, 16, -11, 45, 91, -110, 74, -11, 97, 92, 4, 60, 78, -96, 7, -39, 73, -28, 119, -31, 45, 63, -77, 38, -97, -102, -23, -48};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.47436286031950803);
    msg.setSource(15745U);
    msg.setSourceEntity(81U);
    msg.setDestination(38853U);
    msg.setDestinationEntity(93U);
    msg.source.assign("NPLIGDECLZXVEEWCQWPDUZPLPDYPUDLYKWNPYUBVSSCSKFSJRXIXYFYEDOAUQJQZFVGUBWVAWBVVEHOXBCMSGNFTRQPAGZICOALPUXYIODTTIKOKZRBOKJQEHBPDJWHHKAQKESTYTQMOBILXEMIVNMCCITTCBSNWMCBUTLFSMJFGKALHNJWJGXARORHKRHHFYVRHWAUZWGXTZFBNRSDDGRTUFEFHRXQMVMQVNZANEXZKQUYJLZN");
    const signed char tmp_msg_0[] = {-73, 47, -47, -50, 59, 14, -46, 88, 4, -122, 120, 125, -69, -29, 81, 38, 109, -11, 4, -59, -74, 53, -116, 85, 113, -66, -73, 111, -37, -61, -15, -68, -90, -105, -61, -123, -49, 115, -14, -13, 57, -98, -87, 82, 76, 39, -9, 86, 69, 12, -79, 83, -52, -112, 125, -102, 6, 57, 9, -57, 108, 38, -29, 24, -40, -92, -46, -59, -52, -8, -37, 120, -30, -82, -69, -44, 14, 107, 45, -3, 55, -91, -120, -73, 87, -57, -55, 106, 56, -90, -40, 32, 23, 88, -30, 4, -125, 99, -78, 46, 108, -8, -46, -22, -115, 71, -108, -64, 122, -90, -88, -62, -119, -4, 20, -19, -22, -24, -71, 32, -13, -9, -75, -106, 46, -23, -108, 119, -118, -110, -61, 85, 100, -66, -87, -109, -125, -66, 125, -39, 94, 91, 3};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRx msg;
    msg.setTimeStamp(0.6088811076927814);
    msg.setSource(49272U);
    msg.setSourceEntity(106U);
    msg.setDestination(37656U);
    msg.setDestinationEntity(218U);
    msg.source.assign("WFBSXIKSYKTLYWBYLRAQIQUMCOXWNXVDLZZOXFZDIQVUWBLIMJNAGINYMSHNHUFLPVDEVXNKJXJQPNTUSTIAJAMQKFYRPMWJDEHOKRMMOCJFZBALYOFRXNTOVRRYHRIFBNVYLGSSTAECHXCBCVLMZAZCJPVKDKUZGSPOUOBWERPGFDCUIEQCLSLXGJHDNUGDHGPFWWPZTINXYJEWHRBEM");
    const signed char tmp_msg_0[] = {-70, 63, 81, 109, 53, 107, 42, -45, -74, 50, -25, 43, -60, 34, 77, -126, -2, 86, -77, -114, 90, 34, 32, 1, 15, -64, -47, -113, 49, 122, -19, 117, 96, -92, 78, 90, 32, 122, 37, -4, -24, -33, 79, -82, -77, 3, -116, 58, 54, -124, -35, -15, 45, 63, 108, -47, -69, 116, 87, -89, 7, -83, -70, -101, 14, -114, -2, 115, 55, 110, 83, -34, 110, 9, -47, 100, -25, -15, -128, 90, -49, 54, 108, -1, 121, 92, 92, -40, -60, -15, 69, 125, -114, 76, -62, 30, -83, 31, 17, -40, -42, 115, 5, 40, 102, -104, 10, -105, -65, 99, -83, -92, 59, 21, 27, 94, -4, -22, 61, 119, -128, -117, 100, 58, -113, -71, 96, 96, -67, -16, -101, -44, -108, -25, 112, 58, -102};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.15842988146143433);
    msg.setSource(26682U);
    msg.setSourceEntity(177U);
    msg.setDestination(35137U);
    msg.setDestinationEntity(60U);
    msg.seq = 2079082762U;
    msg.state = 107U;
    msg.error.assign("EWDPEIGMJSBHM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.33399374149391603);
    msg.setSource(27057U);
    msg.setSourceEntity(182U);
    msg.setDestination(15745U);
    msg.setDestinationEntity(171U);
    msg.seq = 1092438444U;
    msg.state = 123U;
    msg.error.assign("MZKGKVPCPLCQXZBWJIJSZRXTYWHGCIDCGRKDBDOELIVNFFTEJWONMOYLRWAVRXKSFWQEXZQKLPKHUTBGSEVGVZBPTSLXMOHARBEUDDWFSOQCYPJUQMSZPPFCANBPPKNLNZSSOINUGWNUYMHRRAGAEFXXEGTXJQBKWZFOTIBFDDFAVQLHNRAMAXTIRMUYNQPLACUIIHEHOCUOHBJYYTRMAFLKGJSZUIJGBUODH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsState msg;
    msg.setTimeStamp(0.4074063582231263);
    msg.setSource(18218U);
    msg.setSourceEntity(80U);
    msg.setDestination(61118U);
    msg.setDestinationEntity(63U);
    msg.seq = 4236141292U;
    msg.state = 130U;
    msg.error.assign("TELOCAJLQMDVQGVQUBOWJCFHHTCFGRTCNYKXZSDXIDITZNKVGUURYCRTAJGWWXPBJFZAWCPHNYFGXDTJMWMIXRYSGDIRXUPLRZDKQEDMNVBNMWFQYLEHSVFLVTVPLVYZCMYANWEJLWJAKZKYK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.34112255560559224);
    msg.setSource(65166U);
    msg.setSourceEntity(159U);
    msg.setDestination(64443U);
    msg.setDestinationEntity(1U);
    msg.origin.assign("TNXLXLTJXUWNRGGCCZLRTQOUSSWFVNHMFJJLYAXCBWQYMVRZCBMXEJIDJYNYYGCEGRVBRADDEEQUFUAREIUKMMPQIMINSTFEWYQAPRENXDKZDTHUTSITZIKDZBZBYHKMHOWEITCQHKLZAEFLJJNJGQMFIZPWVHCVVSVXKWAVDXSQV");
    msg.text.assign("UYOMYRTFSTGPZTJYGJETMFSJESKZQCFCLYCKDQIWBPRUQXJSCWNLGBTKFUOBDBDAAVFFHHXWHHGBUPYGQVETGLLJJJRMPKHMHRWAIWCPTOEAVXXZMQASMDOYOXTDCVUKEXUBEXRLVPADYHUUIXEKZCPDLZGKZOBIZEIIVCQYQTLGQFIQYHAWDFLVHSNGVOAXZXW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.7789266565035607);
    msg.setSource(23080U);
    msg.setSourceEntity(240U);
    msg.setDestination(2068U);
    msg.setDestinationEntity(170U);
    msg.origin.assign("YJRGBFQKMZILCMAJNHISPKXPRQJWIKOPJAAZLBLVOMFLSNJPGMHNCTBBVUVTCNECXWYXWKBEDAQECUVBOQMDKGRPXIGWVSUTDTANABUGJBULYWGSMYGZXIYQTCRSNINZOPHGGPQOQUMHUEFTLEJASXWZWSDX");
    msg.text.assign("AQXAWXZPPVEAXIXLXLFTRGFWOBCGDNRQVULCMURYQJTOBOSTEMMNTA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TextMessage msg;
    msg.setTimeStamp(0.48481468473287703);
    msg.setSource(37890U);
    msg.setSourceEntity(8U);
    msg.setDestination(38874U);
    msg.setDestinationEntity(133U);
    msg.origin.assign("PFEXUKXYKMMNLQCSFXPNBZJURXTBCKZFZGVVHUSYBIBHWWOTCNOZRQCXRIQFAHFVXAKYKACKLSHDVXDYVOGFOSBQTGIWOWYWFRIMDYAJDVATLDVJILJTUIINNLWYEEATTBGXLUTFBPME");
    msg.text.assign("ZNSZRHJNLJOEKWJNUFIKOGVXJKUHKHTHBNDLDSUPIYOXKWFYTXWQQAVXDCYJUEABBYOOGOVWSPNGFZDAZPHUWIYQLGTLTHVEZXXVVQUDOWCMWWEPRIFTYYCNPGTJKSBEOHXKCEUIDLISCMPNRSJABRGUTPPRCGRIBDAZKHSGGFRMIAYPYCMFNPWXSAMMCOENRZZXNM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TextMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.4753851920379977);
    msg.setSource(26120U);
    msg.setSourceEntity(167U);
    msg.setDestination(54605U);
    msg.setDestinationEntity(31U);
    msg.origin.assign("BWANIDKZDPIOPMYSGZJUPXZKDCHERVGUYMTSVNEHYJEJIWLILSPXKLGVBWMNPELERWADUIQTLETXFDWXCIVAGTAHVSAT");
    msg.htime = 0.2683844888159501;
    msg.lat = 0.18074400365404952;
    msg.lon = 0.21883483206627674;
    const signed char tmp_msg_0[] = {24, -111, 87, -69, 4, 118, -102, 41, -61, 46, 48, -30, -46, 82, -126, 79, 107, 110, 83, 119, 29, -8, -93, -8, -75, 24, 41, -60, -26, 111, -36, -57, 97, 81, -117, 81, -110, -49, 74, -67, 54, 102, 5, -26, 72, -71, -85, -90, -59, 45, -1, 95, -5, 14, 93, 115, 84, 8, -43, 86, -127, 85, -35, 56, 93, 102, -14, 54, 41, -94, 95, 65, 17, 69, 48, -21, -107, 108, 101, -103, -66, -21, -91, -98, 23, -81, 54, 118, -20, 52, 102, 38, 78, -4, 7, 19, -113, 29, -10, 92, -122, -94, 96};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.3899225884045935);
    msg.setSource(52100U);
    msg.setSourceEntity(124U);
    msg.setDestination(10563U);
    msg.setDestinationEntity(241U);
    msg.origin.assign("DYUXHAGEGTOYJVJUFPFKTTACWPYSSITIBPERGNLPEEFINPZKGNCENUDTBGARTLDJNDUCPTBMIOFOSNQGCXZYBSRJIXVBLBLCZCXFULQGHZEYENZIFMGUOLRNCWQUHTLFUNRYDQRODVAVPOKKXSSQKWHABVMF");
    msg.htime = 0.5475588694203439;
    msg.lat = 0.16667618545512708;
    msg.lon = 0.6775009337870109;
    const signed char tmp_msg_0[] = {-48, 95, 33, -23, -62, -68, -12, 23, -25, 85, -25, 102, -72, 8, 76, -98, 56, -91, -102, -40, 2, 12, 120, 0, -85, -29, 103, 85, -117, 44, -107, -21, -30, -82, 47, 27, -109, -15, 15, -125, 74, -60, 51, -84, 125, -105, 99, 84, -40, -116, -72, -82, -11, 48, 104, 6, 83, -127, -37, 73, -92, -61, -27, 18, -100, -72, -28, 4, 93, -53, 102, -17, 114, -114, -58, -110, -117, -113, -46, -70, 76, 5, -71, -10, 110, -91, -95, -104, 69, 50, 55, 116, -120, -54, -18, -6, 70, -23, -16, 70, 69, 6, -105, 71, -22, 79, -37, 18, 12, 59, 93, -28, -123, -89, 125, 94, 2, -78, -16, -10, 55, 34, 109, -52, -41, 65, -19, 63, 19, 39, -62, -57, -128, 19, 41, -72, 98, -78, 8, 105, -73, 13, 22, 115, 100, 116, -122, 115, -82, -52, -117, 88, -99, 53, 108, -120, -44, 73, 81, -58, -66, -59, 56, -61, 119, -84, -30, 120, 71, 104, 90, -106, 68, -69, 42, 114, -108, -5, -113, -43, -88, 46, 28, -43, 6, -21, 89, 20, -94, 34, 26, -116, 9, 98, -68, 105, -71, -95, -120, 14, 109, 31, -5, 5, 12, 62, 79, -32, 124, 64, 108, 5, 53, 45, 93, -56, 111, -15, 120, 85, 7, 94, -31, -35, 77, -103, -97, -119};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgRx msg;
    msg.setTimeStamp(0.45586383420769705);
    msg.setSource(39274U);
    msg.setSourceEntity(53U);
    msg.setDestination(11136U);
    msg.setDestinationEntity(0U);
    msg.origin.assign("VMJRTLXAURQWUYVRKLKNMQHAZTDDHEFJVQYEBJDLSMFGSNQHFKPBMMUYEVTWLSSOBNOVKRLEUTDMXRUBOAEFKSACITPNQFXIRCHPWTIQMKIXOZJXJFIFZPKHOZCFTGBVHCWHNYTPCSGRFHCKGZQIQYNUYDQOIZ");
    msg.htime = 0.18761052103999942;
    msg.lat = 0.36568232717798255;
    msg.lon = 0.4929655199318055;
    const signed char tmp_msg_0[] = {99, 6, 53, 84, -80, -107, -55, -14, 111, -110, 51, 57, 121, 88, 84, 104, -113, -75, -113, 103, -69, -86, 87, 101, 28, 23, 38, -69, 80, 21, -7, 113, -122, 113, -40, 91, -123, 32, 63, -100, -12, -35, -127, 33, -83, -82, -106, 106, -77, -118, 124, -68, -71, -25, 74, 110, 83, 96, -85, 98, -52, -73, 64, 16, 10, -107, 16, 34, 46, -22, 7, 61, 98, -95, -10, -34, -91, 31, -84, 56, 101, -97, -39, 91, 75};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgRx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.823554301685392);
    msg.setSource(55079U);
    msg.setSourceEntity(23U);
    msg.setDestination(8316U);
    msg.setDestinationEntity(66U);
    msg.req_id = 60331U;
    msg.ttl = 17912U;
    msg.destination.assign("HLADWALYUZYJJQICLIOF");
    const signed char tmp_msg_0[] = {-89, 108, -124, 27, 115, 83, 89, -123, 44, -18, 103, -44, 82, 4, -19, 84, -75, 10, 19, 32, 19, -47, 125, 113, 57, 72, -108, -59, -30, -77, 65, 91, -83, 29, 3, -128, 16, 24, 122, 14, -76, 63, 50, 105, 121, 34, 102, 62, -110, -73, 7, 24, 33, 126, -39, -17, -126, 5, 83, -12, -49, -127, 78, 59, -104, -124, -103, -90, 86, -115, 101, 104, 82, 21, -17, 15, 92, 123, -46, 75, 79, 58, 59, -2, 122, 110, 126, 117, -33, 91, 89, 51, -110, -24, 32, -116, 47, 113, -119, -111, 3, -80, 82, -71, 90, 27, 87, 118, -42, 126, -83, -35, -92, 59, -78, -95, -28, -126, -37, -35, 30, 118, -9, -115, 6, -123, 88, 14, -20, 105, -34, 92, -31, -27, -95, 124, 93, -12, -66, -71, -1, -30, -23, -80, 108, -81, -10, -102, 45, -73, 109, -59, -11, -94, 111, -111, 12, 35, 4, 67, -99, 43, -106, -56, 4, 52, -109, -86, 123, 66, 108, -80, -124, 102, -108, 22, -125, -102, -42, 61, -3, 95, 73, -6, 1, -21, 44, -114, -36, -110, -80, -61, 117, -7, -3, -110, 24, 58, -121, -36, 100, -103, 58, 95, -90, -81, 41, -39, 103, 13, 18, 97, -61, -60, -49, -115, 117, -114, -55};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.9269964748616735);
    msg.setSource(13875U);
    msg.setSourceEntity(152U);
    msg.setDestination(13595U);
    msg.setDestinationEntity(56U);
    msg.req_id = 58795U;
    msg.ttl = 65470U;
    msg.destination.assign("EBNLNYLRXRCMXVDPLOOLZMTGEFJTYPUITNOEYMVVWBSXVXEOMSEAJHHPQVERQOASPLUVKKZYPTWVUPDQKRGIPTTHVCTUQWSJSGGISFDWASFDKAZNJWYYHYHMBRGIRTSFFMNJBWXFOROKKQGKDKBZEINQXGMDIXRLZEZBSOIDEUSDGWCBJMANJN");
    const signed char tmp_msg_0[] = {-8, 1, -51, -95, -29, -110, -1, -87, 26, 18, -84, -124, -107, -128, 52, 122, 66, -64, -114, 49, -62, 26, -99, 72, 58, -12, -10, 69, 3, 1, 4, 73, -126, -100, 83, 16, -13, -37, -105, -39, 80, 52, 122, -36, -51, -50, -105, 64, 115, 50, 15, 89, 17, -15, 50, 112, -54, 85, 67, -16, -49, 91, 92, 39, -83, -118, 112, 109, 76, 4, -117, -29, -124, 96, 60, 92, 14, 90, -110, -96, 17, -30, 0, 73, 120, -44, -37, -102, 92, 5, -6, -128, 22, -18, -36, -4, -82, -17, -33, -42, 72, 9, -54, 51, 121, 51, -123, -113, -35, 64, -39, 7, 101, -15, 92, -126, -28, -47, -121, -17, -70, -118, 67, -106, -52, -67, 31, -119, -24, -19, 113, -57, 58, -51, -39, 7, 40, -98, 7, 53, -50, -11, -34, -51, 84, 47, 112, -19, 72, 20, -76, -114, -12, 64, -44, -106, -33, -24, 66, 15, 93, 18, -42, -127, -116, 19, -83, -6, 1, -67, 52, -91, -17, -81, 23, 110, 51, 25, 73, -80, -12, 15, 70, 61, -102, 121, -38, 75, -123, -81, -6, 76, -50, 18, -38, 105, -11, -47, 113, 88, 60, -85, 27, -101, 43, -80, 88, -6, -44, -105, -25, -5, -87, -42, -56, -63, 125};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumMsgTx msg;
    msg.setTimeStamp(0.003440889058251906);
    msg.setSource(18064U);
    msg.setSourceEntity(85U);
    msg.setDestination(51726U);
    msg.setDestinationEntity(58U);
    msg.req_id = 34130U;
    msg.ttl = 44949U;
    msg.destination.assign("HRCPEJMPJWZSNCTITHYUDAGGXZWNOJACLBAVFNQBKPTHSPXDYXJLSBSQSRCZILWOYNZQLXGFKD");
    const signed char tmp_msg_0[] = {-88, -11, 13, 5, 15, -82, -14, 71, -36, -4, -28, -63, 105, 34, 63, 102, 41, -112, -108, 30, 112, 61, 53, 16, -69, -47, -109, -16, 36, -76, -113, 100, 97, -65, 96, -57, 113, 85, -54, 10, 49, 16, -1, -86, -121, -96, -78, 31, 125, -104, -63, -96, -96, -20, 60, -8, 38, -37, -105, -8, -48, 94, -65, -25, -112, -25, 26, -32, 10, -75, -65, -62, -112, -70, -33, -93, -54, -70, 96, 24, -64, 49, -113, -3, -71, -4, 84, -22, -59, -23, 116, -82, 51, -54, -126, 0, 74, -60, 79, 108, 47, 79, -101, 69, 21, -33, 71, -123, -103, -84};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumMsgTx #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.706482608165509);
    msg.setSource(28U);
    msg.setSourceEntity(179U);
    msg.setDestination(61148U);
    msg.setDestinationEntity(182U);
    msg.req_id = 4614U;
    msg.status = 118U;
    msg.text.assign("YCAQXMDBNGJRRWSWMZGOKLNFBVWHPLFUDNKQRQYIVSTAVUMJWANDQEBTQWXMMKXRKGYEAJSDJBZPJVOPNEYFZJVSHMIMHJWDFBKLTRVGHOMCSFZCT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.7323989651958484);
    msg.setSource(24946U);
    msg.setSourceEntity(126U);
    msg.setDestination(10284U);
    msg.setDestinationEntity(1U);
    msg.req_id = 39681U;
    msg.status = 107U;
    msg.text.assign("VAPOZVNKFWOCIVRQCPLPTARLJGSOVFNCMGWMPFDGFZQAVIBXKSWJWRBKMIYILMZLEYGEZCUWHHCTDJTURJFAXHPPNPNRBMESQRUTLWBFBHELQSSRHDVZDFKTJDXEKVXMKYWQUWESNFTDLREINUYYLKMCNAIDGMHUBDEHSGZQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumTxStatus msg;
    msg.setTimeStamp(0.09251490220817471);
    msg.setSource(33568U);
    msg.setSourceEntity(9U);
    msg.setDestination(65136U);
    msg.setDestinationEntity(98U);
    msg.req_id = 6111U;
    msg.status = 244U;
    msg.text.assign("DBJGNBDKRTXBDGBLHCMRVMOSXFMYICIEWUODTSRFNNQSDICJLYRUQNEJAQZNEXMLXHBTYZDHGXWNFLLODTBAWHWTGUBPJZFNXBZEVKAJVVIAIPQPBJNCPMZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.3495905622993589);
    msg.setSource(29391U);
    msg.setSourceEntity(96U);
    msg.setDestination(15362U);
    msg.setDestinationEntity(224U);
    msg.group_name.assign("KWETPGNRZTTNMEYQ");
    msg.links = 2896213645U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.9694271734726781);
    msg.setSource(46733U);
    msg.setSourceEntity(83U);
    msg.setDestination(23002U);
    msg.setDestinationEntity(237U);
    msg.group_name.assign("DQLUBUXQHGMBVPMSEUOTDBLODFJKSNPRFIBJPKOHUSFNSTWINJGNM");
    msg.links = 2159759225U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupMembershipState msg;
    msg.setTimeStamp(0.9802179744776216);
    msg.setSource(2492U);
    msg.setSourceEntity(230U);
    msg.setDestination(64458U);
    msg.setDestinationEntity(178U);
    msg.group_name.assign("OHTPXLQVAVAXUWFWZEWDXHVNRFTHOPENKNGMBYIGAFMJAASNQZRJLCIXWRVRLDSXGDRODOAWKLKJPQAZBYKBDXUYUCKOCPFWMONPXUVFRRZYZIDYWFCUEKAAHEIJKLDBL");
    msg.links = 2309180389U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupMembershipState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.8375732135060964);
    msg.setSource(64611U);
    msg.setSourceEntity(162U);
    msg.setDestination(370U);
    msg.setDestinationEntity(65U);
    msg.groupname.assign("HEIWFBVRBYLWXGLEZVVKFCWYOFTMPQJLCPWOYKJDFSNSROSTQCRTNDDPVOTMULWFPZHTSVUCDBINRMBEXYQPRLUBGWJRRMMZBYADJEMMDHAIUXOXCYHCSUMSLBSI");
    msg.action = 1U;
    msg.grouplist.assign("EJDONVQKSTUVSXUQSBLYWVAXMAFPMTAEXQJVEOFVINLCIOEAZOEHKRAFCZEDNFUVFQSHBWQGNIYQIYKRBJKFKVMUPNJPZTXIKZTKPZMCGYXDOLKFPBDFHTYXTQRMNIPBCRWFSGHQFYMYCHMRHLGLQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.24394664945856004);
    msg.setSource(1373U);
    msg.setSourceEntity(248U);
    msg.setDestination(7820U);
    msg.setDestinationEntity(213U);
    msg.groupname.assign("AGYXHUTCESUKTZXTZVBCUWDSTTEBMHGUOMKRPZBHFQELDKNSMDANQXNVOZUPVIVCOBJZZHDOKIEVECRHYJLZXHIIIYCPHSDRSIDFQBJ");
    msg.action = 210U;
    msg.grouplist.assign("FNJDGLBIEHLJPRXYAADVWHZBITODOSICEWZXXBLTGJRNXEMZDXFNJSFNVBITMMHUUOSDICRFOPKTWVGLHUABETNKXYRURHOBYIEJQWVVFRGDJQPOMZASUDSAICPXQDECORZWYGEGEKRHZFZKYYGOUKMOACDXHFAYJVCZQLMRMMWXAGGKQUCZTKTVBAXIMBNHLBLQTFJOKSEYTZYSPFADYNHWWQNIGQNUWJMSPPVKCQVCBHTSPWLRNP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SystemGroup msg;
    msg.setTimeStamp(0.18257095097066278);
    msg.setSource(45392U);
    msg.setSourceEntity(31U);
    msg.setDestination(6026U);
    msg.setDestinationEntity(51U);
    msg.groupname.assign("LDNTPQFTFCDQMLJAPYIWHKEKVVKFDVQIYMACKQWOBFMZXHMGPICWXVECDRFUNLMKQBTGZMOHUWEPVSHJRQCEAQASYSBAXPPBHADZFVENGZKKFLGORNHVIEXOMJO");
    msg.action = 102U;
    msg.grouplist.assign("GQAXZZBSZGACPLDRSDVROQIPJGFKKCEYWVKNEOSTPHUPQTFICRCFNIKQWHAJBGEVBTKMJHLZOCWYOOUMGQEKYEMZRLIOZAQBJQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SystemGroup #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.8801412574094365);
    msg.setSource(43975U);
    msg.setSourceEntity(120U);
    msg.setDestination(10974U);
    msg.setDestinationEntity(47U);
    msg.value = 0.8640342125678983;
    msg.sys_src = 49337U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.142231084980748);
    msg.setSource(3539U);
    msg.setSourceEntity(71U);
    msg.setDestination(64521U);
    msg.setDestinationEntity(17U);
    msg.value = 0.903411461597748;
    msg.sys_src = 58801U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LinkLatency msg;
    msg.setTimeStamp(0.5297619580574052);
    msg.setSource(27004U);
    msg.setSourceEntity(70U);
    msg.setDestination(14206U);
    msg.setDestinationEntity(236U);
    msg.value = 0.8117905068547264;
    msg.sys_src = 50617U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LinkLatency #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.28962807970502125);
    msg.setSource(38141U);
    msg.setSourceEntity(5U);
    msg.setDestination(26081U);
    msg.setDestinationEntity(140U);
    msg.value = 0.7863679474582683;
    msg.units = 153U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.16712464505516944);
    msg.setSource(54594U);
    msg.setSourceEntity(202U);
    msg.setDestination(31832U);
    msg.setDestinationEntity(233U);
    msg.value = 0.47700930047596224;
    msg.units = 150U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExtendedRSSI msg;
    msg.setTimeStamp(0.8098603756516685);
    msg.setSource(63113U);
    msg.setSourceEntity(108U);
    msg.setDestination(6997U);
    msg.setDestinationEntity(18U);
    msg.value = 0.47088215965443847;
    msg.units = 86U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExtendedRSSI #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.6290115894074307);
    msg.setSource(30810U);
    msg.setSourceEntity(207U);
    msg.setDestination(28117U);
    msg.setDestinationEntity(94U);
    msg.base_lat = 0.9703424498265193;
    msg.base_lon = 0.3708903828456743;
    msg.base_time = 0.37787709725131013;
    IMC::RemoteCommand tmp_msg_0;
    tmp_msg_0.original_source = 34219U;
    tmp_msg_0.destination = 57637U;
    tmp_msg_0.timeout = 0.2259886427920128;
    IMC::UamTxFrame tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.seq = 28641U;
    tmp_tmp_msg_0_0.sys_dst.assign("ISBOPUVTYAQQUJAONISOEMFVWCKDLIHOBVILFLOEBIWMMEJNNAIVAGDRBPFTJXEHBDCRGXW");
    tmp_tmp_msg_0_0.flags = 190U;
    const signed char tmp_tmp_tmp_msg_0_0_0[] = {93, 114, -34, -75, -112, -44, 95, 102, 56, -46, 15, -15, 7, 47, -83, 103, -54, -52, 107, -44, -1, -10, -54, -81, 60, 73, 40, -125, 34, -120, -108, 116, -105, -66, -123, -64, -125, -34, -12, -63, -33, -109, 11, -71, 114, -111, -54, 46, -53, 29, 119, -123, -11, -72, -46, 21, -126, 126, -23, 107, 10, -82, -91, -88, 60, 91, -5, -60, -116, 76, -70, -51, 94, 94, 34, 31, 72, -19, 38, -51, 36, -84, -9, 76, 72, -33, 111, 80, 47, 115, 61, 5, -125, -72, -34, 47, 36, 112, 52, -118, -98, 36, -66, 57, 48, -29, -100};
    tmp_tmp_msg_0_0.data.assign(tmp_tmp_tmp_msg_0_0_0, tmp_tmp_tmp_msg_0_0_0 + sizeof(tmp_tmp_tmp_msg_0_0_0));
    tmp_msg_0.cmd.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.9990902523672873);
    msg.setSource(56477U);
    msg.setSourceEntity(104U);
    msg.setDestination(3269U);
    msg.setDestinationEntity(164U);
    msg.base_lat = 0.8763432751372875;
    msg.base_lon = 0.25235564872180016;
    msg.base_time = 0.041772398370526376;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricData msg;
    msg.setTimeStamp(0.9221865742122762);
    msg.setSource(16980U);
    msg.setSourceEntity(130U);
    msg.setDestination(16910U);
    msg.setDestinationEntity(81U);
    msg.base_lat = 0.7863623288651788;
    msg.base_lon = 0.9209320787413144;
    msg.base_time = 0.2142740189107819;
    IMC::HistoricSample tmp_msg_0;
    tmp_msg_0.sys_id = 38722U;
    tmp_msg_0.priority = -107;
    tmp_msg_0.x = 1575;
    tmp_msg_0.y = -1808;
    tmp_msg_0.z = -8207;
    tmp_msg_0.t = 4490;
    IMC::LowLevelControl tmp_tmp_msg_0_0;
    IMC::DesiredPath tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.path_ref = 815885250U;
    tmp_tmp_tmp_msg_0_0_0.start_lat = 0.5803423770732096;
    tmp_tmp_tmp_msg_0_0_0.start_lon = 0.272336902007704;
    tmp_tmp_tmp_msg_0_0_0.start_z = 0.899230146176403;
    tmp_tmp_tmp_msg_0_0_0.start_z_units = 131U;
    tmp_tmp_tmp_msg_0_0_0.end_lat = 0.08017072959923965;
    tmp_tmp_tmp_msg_0_0_0.end_lon = 0.5611593775455694;
    tmp_tmp_tmp_msg_0_0_0.end_z = 0.6136556233445858;
    tmp_tmp_tmp_msg_0_0_0.end_z_units = 222U;
    tmp_tmp_tmp_msg_0_0_0.speed = 0.26245716989276946;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 169U;
    tmp_tmp_tmp_msg_0_0_0.lradius = 0.39475980021383916;
    tmp_tmp_tmp_msg_0_0_0.flags = 35U;
    tmp_tmp_msg_0_0.control.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_tmp_msg_0_0.duration = 49390U;
    tmp_tmp_msg_0_0.custom.assign("URQFRPTEGFIQTJYPXYATPOBSEKTAMLEKNGDJGCCHBIAIKMCPLFUZHHVFJLZZJQRUHOFPACRHSWUXNMYKCLYYAMWLKHAD");
    tmp_msg_0.sample.set(tmp_tmp_msg_0_0);
    msg.data.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.668338657861366);
    msg.setSource(4173U);
    msg.setSourceEntity(174U);
    msg.setDestination(36559U);
    msg.setDestinationEntity(135U);
    msg.base_lat = 0.9353988190283816;
    msg.base_lon = 0.6622343234339512;
    msg.base_time = 0.5945184215674316;
    const signed char tmp_msg_0[] = {-50, -85, 114, -84, 53, 75, 101, 94, -40, -122, 75, -26, 18, 121, -32, -84, 126, -101, 5, 44, 53, 32, 19, 123, -6, -61, -19, 74, -100, 25, -46, -18, -58, -116};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.6118860380232163);
    msg.setSource(12940U);
    msg.setSourceEntity(74U);
    msg.setDestination(47296U);
    msg.setDestinationEntity(0U);
    msg.base_lat = 0.7963678780209851;
    msg.base_lon = 0.7103524625387063;
    msg.base_time = 0.3867723619645054;
    const signed char tmp_msg_0[] = {-44, 3, -95, 5, 65, -61, 53, 14, -75, -85, 69, 12, -1, 44, -37, -2, 125, 48, -18, 89, 117, 13, -22, 83, -103, 70, -106, 45, 58, 6, 111, -64, -76, -95, -19, -106, 94, -119, 113, 94, 35, -56, -33, 21, 83, 39, -126, -19, 69, -24, -110, -43, -122, 19, -61, -100, -88, -109, 20, 78, -90, 34, 92, -44, 43, 113, -68, -15, -46, -71, -50, -61, -2, -68, 27, 28, 57, 38, 77, -24, 21, -124, -87, 99, 70, -78, -63, 113, 31, -53, 8, -37, 123, 0, 40, -24, 77, -70, 31, -58, -33, -73, -42, 10, 54, 50, -120, 115, 28, 18, -81, 42, 23, 17, 53, 3, 51, 24, 9, 88, 45, -110, 27, -36, 19, -52, -43, 108, -114, 121, -71, -110, -111, -38, 9, 69, -70, 53, 58, -80, 14, 120, -19, 5, 33, -43, -56, -103, -40, -58, -27, -20, 45, 104, -6, 112, 68, 120, -122, -111, -36, -117, 52, -63, -9, 71, 123, -30, -7, -54, -10, 50, 34, -95, 34, -37, 23, 109, 5, 48, -89, 49, 79, 3, 116, -115, -2, -50, -35, 86, 20, -116, 2, 36, -6, 73, 57, 38, 103, -82, 61, 58, -112, -74, 20, -17, -116, 95, -65, 101, -59, 110, -97, 103, 26, -99, 45, 12, -6, 22, -102, 39, 50, -63, 16, -109, 11, 75, 73};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedHistory msg;
    msg.setTimeStamp(0.37469207799199933);
    msg.setSource(36000U);
    msg.setSourceEntity(192U);
    msg.setDestination(40965U);
    msg.setDestinationEntity(194U);
    msg.base_lat = 0.5343108476500543;
    msg.base_lon = 0.7689689435605426;
    msg.base_time = 0.8305849203344776;
    const signed char tmp_msg_0[] = {-17, -13, -125, 109, 117, 103, 88, -88, -37, 37, 43, -44, 118, 37, -104, 103, 23, -59, 119, 66, 12, 39, 23, -44, 62, -125, -48, 116, -43, 119, -42, -120, 85, -34, -34, -103, 7, -22, 49, 70, 124, 80, -124, 44, 21, 16, -12, 40, 52, 116, 61, -86, -114, 13, -75, -44, 18, 60, -34, 4, 120, -45, -111, -124, 69, -86, -25, -86, 95, -86, 119, 30, -40, -107, -70, 109, -110, -29, 45, -99, -35, 66, -44, -38, -72, 44, 115, 122, -108, 56, -128, 55, 92, 112, 104, 126, -74, -66, -75, -110, -94, -46, -95, 64, 84, 4, 91, 23, 76, 104, 90, 112, 111};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedHistory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.4962622325256285);
    msg.setSource(28755U);
    msg.setSourceEntity(221U);
    msg.setDestination(37897U);
    msg.setDestinationEntity(142U);
    msg.sys_id = 16915U;
    msg.priority = 17;
    msg.x = 13584;
    msg.y = -23746;
    msg.z = -29494;
    msg.t = 20986;
    IMC::QueryEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("BGEWCYFMEMHJLFCDZOIDDVUCJICXOZADTPQUYHXQVESRKUVCEIVCQQKRGRWNQXWASUBHIJKNNJNRGTLBHILPGBBFLKGTOAXMIPUSDSZWFRFFSUGRPPWVBXILZZWYBDWUDQSQPMAHLHMBMCHMXKXVVRUSOEYFTQNJOFZKTTGO");
    tmp_msg_0.visibility.assign("CTXWDZIIBNVEINQQEVFSEQTOHZWWHVOCFBEXWMIDAAZZMFLPBEGRYJAJTRSFPKLJMKHCLDQTUXEUCQKXQQYJRHHVNINGYTXOXLRVXDZMIKRZKCMGXSUCYEYFKHUVTHAFOPKITMPOWLJQSBFQBUGDJGYBPIWNFDAIELTWZRETNIOASPBKZCTGPXZYSYHNKUEFDMWRSLJDSJXRB");
    tmp_msg_0.scope.assign("EWCZHGVCANBPVQSOTWVQDOWXMKPIIDUFBQBZKQIUAAMBQRXFHCNMEZUFXIDSRQJQOHIKXBUTCYZJODFLYIDIMNPECGUVDKAEJEFUWHCJEFZRYQHAUMPTZZPGCNTRASYCOHOMT");
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.5406995777336491);
    msg.setSource(41372U);
    msg.setSourceEntity(93U);
    msg.setDestination(20109U);
    msg.setDestinationEntity(86U);
    msg.sys_id = 52537U;
    msg.priority = 125;
    msg.x = -32679;
    msg.y = 27131;
    msg.z = 14611;
    msg.t = -12151;
    IMC::HistoricCTD tmp_msg_0;
    tmp_msg_0.conductivity = 0.1811037155260522;
    tmp_msg_0.temperature = 0.7890065309021869;
    tmp_msg_0.depth = 0.7873576894514823;
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricSample msg;
    msg.setTimeStamp(0.36419438654720526);
    msg.setSource(29931U);
    msg.setSourceEntity(77U);
    msg.setDestination(5593U);
    msg.setDestinationEntity(146U);
    msg.sys_id = 36729U;
    msg.priority = 62;
    msg.x = -23614;
    msg.y = 26690;
    msg.z = -20208;
    msg.t = -2664;
    IMC::SmsTx tmp_msg_0;
    tmp_msg_0.seq = 328153318U;
    tmp_msg_0.destination.assign("WXSGWMVKXNMZUEDCITWRLGJBDGOUVYTICRBMPQYUTHWFINCUYGXBARQKQIYSRFUGTFFUJABSRKDNYCRUALKPLSGZRDBJZMQTHYBRBFLAWEXGNQVLFFVGHSZ");
    tmp_msg_0.timeout = 4463U;
    const signed char tmp_tmp_msg_0_0[] = {-63, 17, -20, -64, 52, 83, -75, -62, 45, -79, -95, -71, -80, 26, -125, -99, -5, -99, -41, -114, -53, -82, -110, 79, 87, -104, 44, -54, 50, -83, -82, 125, -124, -98, -119, 6, -29, -97, -100, 89, 20, 114, -27, -104, 119, 26, 30, 73, 60, -38, 41, 47, 89, -84, -12, -120, 101, -93, 95, -78, 85, 67, 64, -66, -113, -21, 34, 40, -83, 29, 119, -75, -111, -26, 79, -55, -100, -70, -32, 98, 1, -102, -111, -42, -7, -14, 115, -17, 22, 66, 26, 122, 19, 38, 18, -17, -32, -44, -110, -122, 28, 70, -48, 16, 111, 56, -103, -39, -98, -65, -102, 25, -34, -115, -94, 22, 17, -113, -94, 29, -34, 28, 68, 115, -114, 59, -100, -112, -20, -121, 59, -46, 84, 110, 1, -103, 23, -56, 59, 35, 70, -32, 19, 113, 116, 111, 115, 57, -96, -29, -88, -22, 83, -51, 82, 22, -55, 110, 75, 69, -29, 4, 9, -6, 74, -12, 16, -111, 60, 94, 41, 74, 109, -33, 28, 111, 22, -91, 80, -6, 75, -24, 1, 20, -117, -93, 108, 61, -101, -44, -19, 48, -84, 5, 82};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.sample.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricSample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.6842092898597687);
    msg.setSource(44722U);
    msg.setSourceEntity(164U);
    msg.setDestination(38402U);
    msg.setDestinationEntity(223U);
    msg.req_id = 35948U;
    msg.type = 238U;
    msg.max_size = 42840U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.19606915602412267;
    tmp_msg_0.base_lon = 0.1304063503657562;
    tmp_msg_0.base_time = 0.7124387637859976;
    IMC::HistoricSample tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.sys_id = 14678U;
    tmp_tmp_msg_0_0.priority = 72;
    tmp_tmp_msg_0_0.x = -19138;
    tmp_tmp_msg_0_0.y = 4371;
    tmp_tmp_msg_0_0.z = -1025;
    tmp_tmp_msg_0_0.t = 28398;
    IMC::GpsFixRtk tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.validity = 58658U;
    tmp_tmp_tmp_msg_0_0_0.type = 208U;
    tmp_tmp_tmp_msg_0_0_0.tow = 3683159316U;
    tmp_tmp_tmp_msg_0_0_0.base_lat = 0.7343049612344633;
    tmp_tmp_tmp_msg_0_0_0.base_lon = 0.13798365446780125;
    tmp_tmp_tmp_msg_0_0_0.base_height = 0.36540012218385765;
    tmp_tmp_tmp_msg_0_0_0.n = 0.03267515363171658;
    tmp_tmp_tmp_msg_0_0_0.e = 0.07466098703499946;
    tmp_tmp_tmp_msg_0_0_0.d = 0.08498286815114153;
    tmp_tmp_tmp_msg_0_0_0.v_n = 0.0034942989486228537;
    tmp_tmp_tmp_msg_0_0_0.v_e = 0.23271648094257613;
    tmp_tmp_tmp_msg_0_0_0.v_d = 0.016894454903287115;
    tmp_tmp_tmp_msg_0_0_0.satellites = 147U;
    tmp_tmp_tmp_msg_0_0_0.iar_hyp = 38878U;
    tmp_tmp_tmp_msg_0_0_0.iar_ratio = 0.833177832921241;
    tmp_tmp_msg_0_0.sample.set(tmp_tmp_tmp_msg_0_0_0);
    tmp_msg_0.data.push_back(tmp_tmp_msg_0_0);
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.6619784544587141);
    msg.setSource(22064U);
    msg.setSourceEntity(112U);
    msg.setDestination(30777U);
    msg.setDestinationEntity(83U);
    msg.req_id = 21482U;
    msg.type = 225U;
    msg.max_size = 8985U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.05206222647866898;
    tmp_msg_0.base_lon = 0.23955647846590455;
    tmp_msg_0.base_time = 0.6155434930493147;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HistoricDataQuery msg;
    msg.setTimeStamp(0.19588207939028301);
    msg.setSource(25852U);
    msg.setSourceEntity(77U);
    msg.setDestination(35233U);
    msg.setDestinationEntity(22U);
    msg.req_id = 59213U;
    msg.type = 96U;
    msg.max_size = 25792U;
    IMC::HistoricData tmp_msg_0;
    tmp_msg_0.base_lat = 0.16237970605916485;
    tmp_msg_0.base_lon = 0.8797256983198422;
    tmp_msg_0.base_time = 0.8215223834059255;
    msg.data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HistoricDataQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.025007641049435536);
    msg.setSource(26974U);
    msg.setSourceEntity(86U);
    msg.setDestination(41045U);
    msg.setDestinationEntity(56U);
    msg.original_source = 55934U;
    msg.destination = 19419U;
    msg.timeout = 0.9510243463903517;
    IMC::Goto tmp_msg_0;
    tmp_msg_0.timeout = 17340U;
    tmp_msg_0.lat = 0.48179896633288166;
    tmp_msg_0.lon = 0.9304559841583301;
    tmp_msg_0.z = 0.2105450833637399;
    tmp_msg_0.z_units = 246U;
    tmp_msg_0.speed = 0.037323852575658956;
    tmp_msg_0.speed_units = 184U;
    tmp_msg_0.roll = 0.8149073808462881;
    tmp_msg_0.pitch = 0.29502013256669857;
    tmp_msg_0.yaw = 0.026311727824379627;
    tmp_msg_0.custom.assign("HFVWCIFNXFQOUYJOBBZPWPPXTLPSFJOCGUBJGQPXSBUMHKHYAWVRLLQKCEVBJWQJARNWTRTUDHRZNXLJSQTZZLIYSNBZGSCSKYMHKKLPVIKMMEVYADKSVEOROHACCNEMQGTANYGDIUBVPACUETRYJIMOLWHGXEQOUEBDVBSDYKXUOFPKFFZPTSDPEDXETQLMFNIRWH");
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.46144349016918174);
    msg.setSource(43567U);
    msg.setSourceEntity(47U);
    msg.setDestination(29335U);
    msg.setDestinationEntity(243U);
    msg.original_source = 23090U;
    msg.destination = 10208U;
    msg.timeout = 0.1256277165361266;
    IMC::Drop tmp_msg_0;
    tmp_msg_0.timeout = 659U;
    tmp_msg_0.lat = 0.14533014709084524;
    tmp_msg_0.lon = 0.37220126108685514;
    tmp_msg_0.z = 0.1270850393919204;
    tmp_msg_0.z_units = 94U;
    tmp_msg_0.speed = 0.6337023962653724;
    tmp_msg_0.speed_units = 183U;
    tmp_msg_0.custom.assign("GKQFSVXTRXLGWSQNTRWVSTANBJRHEHCXEAXRIWMRRBCMUNVUMETFZDAYZLJYORFBUQNWMWFIXNJTGILUSIEIADGTAGYIBWAKCMTVHMKYBUKJFAQPIFMNZOPLWKCGTWFHEGZOPJYBLBPDURJIZKSGGUCBDNRHYEVCSEYAFDDJYGQVVCJKKTVSTHLVQPWIXWHPDPJKNYQMAVOMOOOAKLZNHCXSEYQHDBELLZZMNX");
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteCommand msg;
    msg.setTimeStamp(0.4973422417481772);
    msg.setSource(47647U);
    msg.setSourceEntity(83U);
    msg.setDestination(28643U);
    msg.setDestinationEntity(156U);
    msg.original_source = 24028U;
    msg.destination = 53879U;
    msg.timeout = 0.46449664554745274;
    IMC::CompressedImage tmp_msg_0;
    tmp_msg_0.frameid = 187U;
    const signed char tmp_tmp_msg_0_0[] = {-34, -4, -103, -125, 57, 91, 123, 71, -114, -47, 88, 4, -72, 105, -7, 115, -89, -92, 36, 88, -19, 22, 88, -48, -112, -23, -81, 102, 34, -99, 89, 68, 21, -79, -20, -30, -105, -88, 70, -104, -118, 77, 18, -2, 27, -54, -102, -112, -69, 125, -118, -82, 45, 21, -47, 72, -71, 105, 8, 31, -108, 57, 69, 122, -114, -15, 53, 91, -37, 90, -103, -38, 8, -62, 53, 60, -19, 78, 112, -86, 92, 5, -14, -25, 126, 89, -29, -92, -32, -69, -63, -23, 88, 8, 91, -128, -91, 63, 18, -114, 38, -12, 91, 111, -38, -93, -20, -100, -107, 117, -128, -53, 7, 52, -14, -12, 90, 30, -8, -59, 3, -124, 27, -10, -40, 96, 40, 3, -44, 107, -25, -20, -17, -109, -104, 25, -75, -108, 39, -107, 58, -16, -2, -68, 69, -7, -88, 106, -86, 17, -15, -53, 74, 93, -22, 60, -62, -28, 80, -72, -127, -38, -26, -61, -25, -53, 104, 52, 80, 17, -120, 109, 126, -27, -93, -105, 79, -33, 123, -112, -74, 68, -32, 124, 54, 1, -47, 80, -56, -36, 34, 106, 24, 87, 57, -11, 94, -91, 74, -2, -85, 65, 19, -120, -17, -46, -90, 87, -128, 44};
    tmp_msg_0.data.assign(tmp_tmp_msg_0_0, tmp_tmp_msg_0_0 + sizeof(tmp_tmp_msg_0_0));
    msg.cmd.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.9771214397419747);
    msg.setSource(42899U);
    msg.setSourceEntity(88U);
    msg.setDestination(19194U);
    msg.setDestinationEntity(138U);
    msg.type = 38U;
    msg.comm_interface = 27357U;
    msg.model = 48887U;
    msg.list.assign("VJAUCVBLBVWDFGRKGPCMSWJLMFSGBUHWPMEJILFOSPASLZRRWEYQEZRDARMQVIIGBUHCXONFWBIVYLGOOYKNHDVLZNIOBERMTHGQYTGSEHNPPAUWOLYUHXYMAVSNSJXWETOKHQFDQCVYAAOZYCZXQPUSCNJBZLCHNGJIZKIEUAVDQWXKXKJUAJMDXKF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.07132425001702847);
    msg.setSource(474U);
    msg.setSourceEntity(173U);
    msg.setDestination(56360U);
    msg.setDestinationEntity(33U);
    msg.type = 41U;
    msg.comm_interface = 18366U;
    msg.model = 58615U;
    msg.list.assign("MMANGSUJXDFBFXTCQDTHWKYZWKFJTFLDIICJMLQCOJDVYNIUHRQAFDLQAEZMBRXGTLCPTHJZVFJSCNFPVIREGURNEAFCXGGNTARSSLBEPZRGXUBVONQTRTALBSEKBOZWYLHVUYSCZJZHWIRWSLJXGDNGPKRCCWUUXQDIEPXOBHMURQNQTQVMOSOHQPJEYEVVMWKLBWOVKAWFLIUEEUIZYMNOFOVDNYOYPKWKDHKGAPHPIJX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommSystemsQuery msg;
    msg.setTimeStamp(0.9069623124554369);
    msg.setSource(6316U);
    msg.setSourceEntity(87U);
    msg.setDestination(57782U);
    msg.setDestinationEntity(18U);
    msg.type = 239U;
    msg.comm_interface = 58269U;
    msg.model = 46433U;
    msg.list.assign("QGXMOWJZGAAPNUYZOWUONCCVKFEHRRNKGAIDIIUVEKBHKFSVKGTZPKLXVFUMSTOTFBTAIQSXPSHAPZTIIDBHGMQPDWPCTDGNGLEEYQLRBPY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.9888208332914942);
    msg.setSource(62099U);
    msg.setSourceEntity(189U);
    msg.setDestination(7408U);
    msg.setDestinationEntity(197U);
    msg.type = 23U;
    msg.req_id = 3471561572U;
    msg.ttl = 856U;
    msg.code = 222U;
    msg.destination.assign("YTCLYHNPQTBBIZDVJCUHPRUFF");
    msg.source.assign("GUDUVUMKXTDBCILBFRLVTKQDNBJJQZ");
    msg.acknowledge = 129U;
    msg.status = 140U;
    const signed char tmp_msg_0[] = {124, -69, -15, -88, -47, -29, 55, -73, -122, 98, 52, -128, -77, -19, 2, -10, -117, -56, -33, -70, -113, -13, 96, -77, -34, -15, 31, 16, -2, 80, -61, 12, -119, -55, -82, 126, -54, -45, 124, 54, 113, 52, -61, -48, -9, 86, 116, 82, -116, -72, -47, -14, 13, -104, 85, -106, 82, -9, 109, 64, 3, -63, 36, 7, -41, 60, 25, 115, -47, -41, 41, 77, 32, -58, -88, 26, 46, -34, -38, -56, -29, -113, -12, -43, 55, 89, 100, 87, -115, -94, -14, 48, 9, -105, 27, -111, 6, 23, -22, 103, 7, -113, 67, -69, -64, -98, 100, 60, -29, -111, 6, -31, -11, -7, -116, -45, 107, 33, 100, -53, 56, -2, -105, 88, 5, -90, -125, -47, -30, 9, 125, 110, 67, -85, 39, -128, 64, 107, 57, -57, 37, -123, -102, 92, -101, -72, -69, -23, 60, -22, 76, 73, 110, -92, -56, 76, 36, -17, -127, 46, -111, -40, -79, 56, 63, -64, 89, -44, -91, -3, 54, -123, 51, 53, 15, 81, -96, -112, -83, -15, 37, -81, -121, -43, 19, -34, 116, -14, 98, 34, 99, 47, 87, 90, 75, 87, 15, -58, 19, -20, 86, -79, 57, -68, 47, -124, 94, 64, -70, -55, 102, -61, -34, 120, -82, 58, 83, -122, 21, -119, -88, 37, -1, -113, 77, 21};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.6566847904872036);
    msg.setSource(9758U);
    msg.setSourceEntity(193U);
    msg.setDestination(39678U);
    msg.setDestinationEntity(180U);
    msg.type = 230U;
    msg.req_id = 2199713280U;
    msg.ttl = 37452U;
    msg.code = 120U;
    msg.destination.assign("MIYRLITGVUMGNDPXLDKWOUKUXJXUXSWCCEQZPCPAGYITQWQRESHGQEMOSAEHVUQIJSRMAGMXPLFVQZNVALVSNYOKSAKOMWKABWDKGNJRBCUXLBFFIXAOERUQDWBEOKOWFFKRNRJBAODBJODPPOYCCBSZTAESZVFXHQVTBLFIBNDYZVDTSZJCJJZYNIMZGPTYVLETUHNHMFPZFTXSELHHTQGMHCWLYBLCWQDDPIVR");
    msg.source.assign("ZVSYHOOEJXNIAFGNIAQVAMBHBPLBNDPANLHUVBGSVQNORYDWCDFMXYTPQTGSPGSJLLVKZDEPDMETUOZAKFRQKMWOASCBJMGDMUWRCIINWABERIDZEQSFVIKFFZDYACGMHVFKZTXOGLBPWTVSIOKITQXFCZIRZLBDTEPAVLEBYNQNHPHXTQRCROXJUDUJYANURVJKUCWUMKLIYCCCPWOGEHSNGTXHWYQHPXXTLZFJOGB");
    msg.acknowledge = 230U;
    msg.status = 152U;
    const signed char tmp_msg_0[] = {43, 121, 121, 22, -6, 86, -33, -28, -120, -117, -90, -112, -69, 83, -117, -65, -28, 59, 110, -50, 51, 94, -23, -98, -3, -61, 126, -38, -80, -31, 30, 114, -58, 83, -120, 70, -115, -89, 12, 61, 104, -2, -108, 120, -96, -18, -47, -56, -21, 90, -95, -57, -18, 113, -11, -29, 116, 2, -74, -118, -105, 81, -69, -76, 121, 44, 21, 105, -92, 97, -35, -40, -97, 91, 118, 28, 108, -126, 113, 31, -30, -121, 20, -56, 83, 52, -44, 42, -48, 86, -4, -19, 41, -56};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TelemetryMsg msg;
    msg.setTimeStamp(0.16096964592666974);
    msg.setSource(41579U);
    msg.setSourceEntity(247U);
    msg.setDestination(36789U);
    msg.setDestinationEntity(79U);
    msg.type = 97U;
    msg.req_id = 1310961082U;
    msg.ttl = 33477U;
    msg.code = 153U;
    msg.destination.assign("MDHIYMNTJUORZEXUXZHCLXFZQDAGZYEDMBUKNSAREKRHAFZ");
    msg.source.assign("AXUGFMDNDADKSFPPMDPYCHSVJYZBBTKEXYNBJJITPDGKIEHTDCODQHODZUUPFJMOLCHQGTYUIHXQZBVLEWSRNJGEJVRSVWLSNWBBQHITCXMSQYAVCJCRROCYZIXXZIIKYHTZAUTAEUFLTIREAQKFEHMFSLRPMSDGENJFQHGZFPAZRZVNXSBFXTLOJWIMOBQRKCNTVLBOEOKLKUWGKWOMVXOPSCQQMYACJNEBAIWMKRYF");
    msg.acknowledge = 113U;
    msg.status = 236U;
    const signed char tmp_msg_0[] = {-66, 120, -78, -126, 29, 115, 16, -126, -25, -67, 61, -78, -41, -38, 67, 26, 0, 70, -97, 118, 124, -55, -5, 18, 23, 25, -122, -5, 70, -96, 65, -54, -35, 116, 80, 30, -26, 48, -2, -73, -112, 100, -96, -78, 86, 98, -23, -83, 9, -20, -117, 68, -37, 101, 16, 46, -44, 64, -122, -17, 43, -14, -97, 11, -106, -116, 120, 61, 33, 71, -26, -68, -53, -8, 7, 42, 78, -26, 16, 25, 76, -79, -54, 123, -101, -124, -51, 4, -10, -12, -34, -89, -123, -90, -120, -66, 35, -60, -104, -24, -124, 125, -82, 58, 80, -41, 108, 94, -39, -103, 63, 72, -115, -68, -68, -68, -43, -21, 16, 0, -70, -40, 45, -22, -123, 73, -78, 112, -49, -93, -78, 62, -125, 67, 82, 80, -51, -56, -42, -115, -43, -89, 58, -98, 126, -47, -12, 82, 49, -86, -126, -23, 25, 37, -72, -92, -55, -21, -89, 24, -120, -97, 124, -58, 50, -107, -21, 103, -7, -83, 27, 54, -76, 12, -29, -38, -8, -123, 108, -55, -121, -125, -7, 16, -53, 87, -82, -19, -40, 33, 39, 25, -49, 13, -6, -26, 95, -88, 113, 102, 110, 76, -65, 106, 37, 7, -59, 82, 85, 87, 106, 10, -62, -31, 40, -93};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TelemetryMsg #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.7985357374289598);
    msg.setSource(46411U);
    msg.setSourceEntity(130U);
    msg.setDestination(36890U);
    msg.setDestinationEntity(46U);
    msg.id = 12U;
    msg.range = 0.8534923881512219;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.7102315006208657);
    msg.setSource(9678U);
    msg.setSourceEntity(158U);
    msg.setDestination(27186U);
    msg.setDestinationEntity(27U);
    msg.id = 248U;
    msg.range = 0.11002267641862917;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRange msg;
    msg.setTimeStamp(0.04259337667517071);
    msg.setSource(4715U);
    msg.setSourceEntity(66U);
    msg.setDestination(8351U);
    msg.setDestinationEntity(102U);
    msg.id = 213U;
    msg.range = 0.08518505821672184;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.0356080600444888);
    msg.setSource(41995U);
    msg.setSourceEntity(84U);
    msg.setDestination(4718U);
    msg.setDestinationEntity(77U);
    msg.beacon.assign("EQYICKQDFCGCZNMLNVEBSSOKWGMFOCIGXTWVRXKYYPELTFRRFLBLCMBMATWJPYBOVOZWIHHEKFSPOUTWGIIFJGXHTXXMUMQCUUSEWHLWCOYLCKNMZEWSELBNMURAZNKAPKSWJDOCUDD");
    msg.lat = 0.10196819284007941;
    msg.lon = 0.6356217163524778;
    msg.depth = 0.7591881962566225;
    msg.query_channel = 112U;
    msg.reply_channel = 148U;
    msg.transponder_delay = 113U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.44156687576172426);
    msg.setSource(27315U);
    msg.setSourceEntity(161U);
    msg.setDestination(31463U);
    msg.setDestinationEntity(63U);
    msg.beacon.assign("KFCMIZVBZBRANZJWATUDHATIYXLUEXYUZPJKOXBYKPEGKNSWSOUDFFNGIRQPRMSYWGGBDSRELRUMONIDCMVFXFKLUHGANTADNNMFIEOWYLBLVQAZYJWQFPJNDFRWHQYTWODVMSQCMVZISPPKJBDKUYTQXZEOGWCHJSBOPBPVORYCGCGXWSFZATGJRRPCVMHGHIVXEDTETUQMKXOOFUSQELNAHILEZKVVXEYMCHCKRQHATBPADSXU");
    msg.lat = 0.8728500209554781;
    msg.lon = 0.396256691628472;
    msg.depth = 0.5928659060461409;
    msg.query_channel = 252U;
    msg.reply_channel = 172U;
    msg.transponder_delay = 209U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblBeacon msg;
    msg.setTimeStamp(0.538444345552121);
    msg.setSource(7405U);
    msg.setSourceEntity(35U);
    msg.setDestination(24778U);
    msg.setDestinationEntity(154U);
    msg.beacon.assign("MOHHYUZLKZUAHSXUTVDYCGGTHMOEKHIVKQACDAYFQFMUMZSGHNORJMXQAFJLGPEYBRAEJPPEDFLYNSQCEYUXFTCZNSFBWYHUDNWYTPLLQDRRLKGCZIFDDSTXNXNBJWSAFJXEVGMFKEEECIWMHXVLZTBOQFICPJVTGHJVWUQYXOIWR");
    msg.lat = 0.20465972581811775;
    msg.lon = 0.433856116314426;
    msg.depth = 0.18586537074730047;
    msg.query_channel = 194U;
    msg.reply_channel = 151U;
    msg.transponder_delay = 101U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblBeacon #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.20419257191418871);
    msg.setSource(23307U);
    msg.setSourceEntity(183U);
    msg.setDestination(50840U);
    msg.setDestinationEntity(150U);
    msg.op = 65U;
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("SCXJRWAGXMYQYPHADRWXRGRPQDNHTQCTQVCEPEBFAHZYLKMIBWSJQPUVYOAOXAXOBLDUNIMESLFHIDHYEEWONJZSIPSUNWDCPYTTNFNVICQKXYBQGVIREGXUAKQELVBJEDZLGBTUYCGWHASJLXKMKHMMSGWJOWVFBXIEFUUFJPGJLCMRBRYLTYLRBLGMQHFEFNPCPNZMZNDAHJKPBUKVV");
    tmp_msg_0.lat = 0.9677219120234541;
    tmp_msg_0.lon = 0.841762975617851;
    tmp_msg_0.depth = 0.028586038854007123;
    tmp_msg_0.query_channel = 237U;
    tmp_msg_0.reply_channel = 11U;
    tmp_msg_0.transponder_delay = 99U;
    msg.beacons.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.1860602911971292);
    msg.setSource(7323U);
    msg.setSourceEntity(162U);
    msg.setDestination(12743U);
    msg.setDestinationEntity(171U);
    msg.op = 28U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblConfig msg;
    msg.setTimeStamp(0.7741113818628038);
    msg.setSource(46761U);
    msg.setSourceEntity(80U);
    msg.setDestination(40753U);
    msg.setDestinationEntity(99U);
    msg.op = 80U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.3161229825110292);
    msg.setSource(43069U);
    msg.setSourceEntity(72U);
    msg.setDestination(13669U);
    msg.setDestinationEntity(136U);
    IMC::TrexCommand tmp_msg_0;
    tmp_msg_0.command = 34U;
    tmp_msg_0.goal_id.assign("TUHFLVZKULGBIVIZB");
    tmp_msg_0.goal_xml.assign("EWNPLCQTKAIYMKDLZHE");
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.38054282846509546);
    msg.setSource(4212U);
    msg.setSourceEntity(39U);
    msg.setDestination(56591U);
    msg.setDestinationEntity(103U);
    IMC::VehicleOperationalLimits tmp_msg_0;
    tmp_msg_0.op = 11U;
    tmp_msg_0.speed_min = 0.6762022068724319;
    tmp_msg_0.speed_max = 0.20731677825110362;
    tmp_msg_0.long_accel = 0.05900743215676241;
    tmp_msg_0.alt_max_msl = 0.3735241913077073;
    tmp_msg_0.dive_fraction_max = 0.47742578526301893;
    tmp_msg_0.climb_fraction_max = 0.29627661136333583;
    tmp_msg_0.bank_max = 0.4227885792823952;
    tmp_msg_0.p_max = 0.815977836382177;
    tmp_msg_0.pitch_min = 0.17087650458922599;
    tmp_msg_0.pitch_max = 0.8435398676734586;
    tmp_msg_0.q_max = 0.6544736033015278;
    tmp_msg_0.g_min = 0.8043841186932178;
    tmp_msg_0.g_max = 0.20539780658740425;
    tmp_msg_0.g_lat_max = 0.18518582738515188;
    tmp_msg_0.rpm_min = 0.862673717447179;
    tmp_msg_0.rpm_max = 0.5910661353930877;
    tmp_msg_0.rpm_rate_max = 0.5323989947337603;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticMessage msg;
    msg.setTimeStamp(0.10688025688290204);
    msg.setSource(17770U);
    msg.setSourceEntity(55U);
    msg.setDestination(63008U);
    msg.setDestinationEntity(130U);
    IMC::AcousticLink tmp_msg_0;
    tmp_msg_0.peer.assign("EDGFFFVUAWPMFOQPWUKNOYHKIREEGZYTGAHIPJSZLASFBZYVALRVLUUNWJSBNASHCMCTBYSIGWCXCBRNME");
    tmp_msg_0.rssi = 0.7659724251537583;
    tmp_msg_0.integrity = 20409U;
    msg.message.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.5518949201911341);
    msg.setSource(49660U);
    msg.setSourceEntity(61U);
    msg.setDestination(10514U);
    msg.setDestinationEntity(122U);
    msg.lat = 0.23658632348653752;
    msg.lon = 0.34774088371482725;
    msg.depth = 0.3281797661639947;
    msg.sentence.assign("YACTKISFUGAZOKZMZIQNEDLFBRFCXNGDOCXILPRRHVBKAUJGJITVTJWFSXGIGNJPAQJMMJQRSBBGVWVWQTDRIZWDNHKULQMBAQFHYKDZATWEHJPGUOJHENISMXYHRXXHEYWLKMOXSDPXVDTTEFXQMOEVLTVQWZBHMBFRQBBFUNWLAOEDSURQRWDPAHVCGBPNXLYIKZVNJPFNLDWFPKPCSMCLZMKKGCCOIYIUSUTOOEJN");
    msg.txtime = 0.014483831979250517;
    msg.modem_type.assign("MWUIKJQMDGHAMOPADAAPCQRGCPYLVPEUURUVLWGWUBSHZDWJRROTIZUZHXSFZFHHACJWXQRKMDDKBRYYYEFUDDEVMNBXCKHDQGZSZZTYNXTKSEPTYMLMMLAOJLVPWNLKFSWEVIXLSJTUKIFNPOBFKLZOYCNAJZAXTHJIBTTJYONYMXBMHVQBSBITEPQHLJIJFZOUBRRKVONXGAXFEIGPDQVGOQCIQFWSCGACKN");
    msg.sys_src.assign("KDXYFVHTQNLVVULXYQVYPMZHMJABSFRWKWBIHDRXKMUZVMTKSYLQBFUHZPTIAAFPAZJFNZBCPDEBNCXVXQLMYCNSKDKNMSIOGOCWPRPZOGDYAQQSUFSWEJQUPJOMMELCXEVYBXCGCFJVERLIZMSBWXCATDSHTATIHGDGKDEFYIYZMUEFJOJAEOPXWGWRDOTSKONWLQJQHCTKFRRIER");
    msg.seq = 23344U;
    msg.sys_dst.assign("DILUQYHCGYRANCBKEFPJDJTVJOHLHTZMQWFZESVDVMAIOOHGWKCUJGLCUIRXBQJTFPSBPUXWPBORNSPSJZHQJYGNGEHHNVKGUAKSGAFBLKNDDLMQKCWZTAROIYZAMYAOQXGSPJVEGXBVWIUWIQWIJRSZXOSMLLNDEFQCSBEACPKXNRTYNYMEFTVHUDCBFPEPBUNZIMRYYLWKZKXUWDTTCVA");
    msg.flags = 170U;
    const signed char tmp_msg_0[] = {-90, 12, -72, 25, -90, -62, -72, 68, 86, -44, 25, -48, 125, -72, -81, -72, -83, 77, -85, 44, -39, -52, 38, -29, -55, 96, 0, 5, 104, 105, 94, -70, -30, -15, -13, -12, -12};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.6290749705266895);
    msg.setSource(63653U);
    msg.setSourceEntity(247U);
    msg.setDestination(7087U);
    msg.setDestinationEntity(122U);
    msg.lat = 0.13422261618037445;
    msg.lon = 0.35649158135110814;
    msg.depth = 0.41322823327973657;
    msg.sentence.assign("WYZOHWQMRTKBMPXWACBYWUSLHXLVXQTGSDTLPMVIRJJISONFHKTOQEZRUOVETFDZFXXKFASAUKDODMZNZEKBHATGSEGD");
    msg.txtime = 0.2847188265919387;
    msg.modem_type.assign("DCADOZQWKTACEDHCTUIJTFZJUSDZSYZFTFZLPHOPRWIHKWUGZLOPGLGNFPMUXAAGISTXUDHBQOUCSJK");
    msg.sys_src.assign("BACJAGNJDQNEFNBMKPTVJLRITAGYXEEJGQTOHYOIUBCWUAIWGEKQWUHYLVLBIXFJXZTPZEZVDDKALVVDDCDZHYTCKECVSQLWHYYOFCABIYXGRWLSEAINBVYTUFOXRPQYHZZKFRFRERCQCUJMMBIJHPVKDUBWESPWTHKJYXWKSOWNQRWTFJRTMMMQPUZNSOEULODRPNMPKQNFPODIXLXUZIGUVFNAAF");
    msg.seq = 24492U;
    msg.sys_dst.assign("NPYGYQKMLKFUJFXTNSTCFCFMUUTAPYHCGYIXFSWKXOFLOALWRIDQJZTEQSECJLMRVFHPBKGPDUYRERBTCSYQGWCQKWNCONSSEZCLDAZUHKQCBIVAPGDCIUONZXXRNQNIKRVSZIHUXMDJIHZWJGBPBPPVEPIVMIELKAOU");
    msg.flags = 229U;
    const signed char tmp_msg_0[] = {34, 124, 32, 108, 70, -91, -117, -89, -113, -56, 57, -63, 116, 122, -120, -115, 18, -121, 87, 115, -14, -113, -128, -40, 71, 17, -105, 89, -44, -23, 126, -22, -60, -39};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SimAcousticMessage msg;
    msg.setTimeStamp(0.419623741861367);
    msg.setSource(45311U);
    msg.setSourceEntity(89U);
    msg.setDestination(9041U);
    msg.setDestinationEntity(10U);
    msg.lat = 0.33450553130796035;
    msg.lon = 0.07476349623403311;
    msg.depth = 0.5692554978688708;
    msg.sentence.assign("ZNTMBBCQVTSCCWROUZHEZLZGLJJLRDRMKALYQIDLZWEQVTIJPCMUPITOCNVPJIIUEIHWMGLIDCZPAZRWHYYRGQUXIDAYEFM");
    msg.txtime = 0.24803659478922602;
    msg.modem_type.assign("SACDIISGWPPCWD");
    msg.sys_src.assign("XMCLIKRXYZIOPUAZMOEQUBFAFKNVRCECLFQHXGYLBTJPRDNZVOYLHSSGXLWVTTXFSNOMSZJYBPJGVZLKEIFDGKSJNAMEVSTDQKRAGUSPNBNRANXSJBYWXIDHWZPEKVIRSUAYB");
    msg.seq = 56017U;
    msg.sys_dst.assign("TRDUGMLLCDDTAPNREKKTPWDITZVMSZPBLSLDRRMROWAQLEIUMJQHUJBHIBFKHOUFMUVSTVWMAHOSPXFBFFXDBXVGNIAGMAIRZZQLYFRYZPICMRGKEQDNUYGYKHWQVWGXEVTKKNSKVJTXZZYRCEDOBXZPDENTNOQABJMJLCHPWESGAOOEKAUOTPAVJQIUCQTFBSXLYCNJSENOVSYCNEKBHNYXWWXXLYGCWFLUJQJBIUM");
    msg.flags = 241U;
    const signed char tmp_msg_0[] = {-36, -49, 103, -14, 68, -86, -12, -23, -55, -101, 31, -16, -113, 117, -63, 48, 18, 8, 43, -86, -85, -116, -35, 41, 103, -115, 30, -110, -51, -7, -85, 48, -95, 62, -52, -75, -61, 86, 7, 86, 51, -124, 113, -71, -128, 45, -31, 22, 90, -121, -62, -88, -26, -97, -39, -41, -108, -50, -92, -36, -117, 59, 82, 42, 110, 51, -127, -2, -80, -122, -34, 86, -125, 34, 17, 46, -105, 103, -50, 102, -115, 0, 83, -67, 49, 5, 92, 89, 86, 36, 44, 23, -33, 3, -24, 111, -60, 122, 6};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SimAcousticMessage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.9732236677506981);
    msg.setSource(43022U);
    msg.setSourceEntity(141U);
    msg.setDestination(61410U);
    msg.setDestinationEntity(236U);
    msg.op = 208U;
    msg.system.assign("KMHPVZWFVRIUNNCBYFDHHAUOZLLEQFYYNYMWGQBGVCIP");
    msg.range = 0.31192013419665876;
    IMC::PopEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("UGCZWYURTCUNVKUOFQJKMRAXPYYUBTEPENANUPSOFBKLDBPTICPVCZKYMJDHMTFJWEWJZEGPBFKWCDUSIDMTIEEJQLWYGRKGWVJQ");
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.49341210534829816);
    msg.setSource(34169U);
    msg.setSourceEntity(219U);
    msg.setDestination(21154U);
    msg.setDestinationEntity(211U);
    msg.op = 49U;
    msg.system.assign("ACNEHBLSBQYIXZJDIPMIJJIUOCGSXZIEKRCAMHRMNAJWJHVWHPFFTFLWSFCMROXPKOWZUCOOZZTBPOUGSSGYXAGXBKSHZNIDJVVVCTCNGIQBWMNPTTBYVYAHNGJATECQRTNZKYRYFJVT");
    msg.range = 0.48068386029686094;
    IMC::VSWR tmp_msg_0;
    tmp_msg_0.value = 0.48745413205801735;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticOperation msg;
    msg.setTimeStamp(0.4103238589949807);
    msg.setSource(26787U);
    msg.setSourceEntity(177U);
    msg.setDestination(38272U);
    msg.setDestinationEntity(211U);
    msg.op = 198U;
    msg.system.assign("BJKHPMUOZSIEKWFHCKSBNAQCMGDFUXWQYHMCELUEEBSJPGYUBGENEHMWYXMBBRAOWXRRCKNANCCMPLATVIKVHOJJYWMXZLZVOVIDGHLHQGZSIJQRFHUUPAGZODG");
    msg.range = 0.27226700215228605;
    IMC::PlanStatistics tmp_msg_0;
    tmp_msg_0.plan_id.assign("VDBOPXOAEXGAHDFGJVJVXQRNPBNDASZGDHCLSACLNZYBKUWNHZUJDINIIWAM");
    tmp_msg_0.type = 32U;
    tmp_msg_0.properties = 227U;
    tmp_msg_0.durations.assign("MATDDVMAROMPAKMGLWXRYETDXZVCWYAFIFHEZKGIIOWCJYBJZXORTECIDHTBGKUXYWTLBPTZHSBSSRZAPYIKFQTCKNSJWZMQPNNUNJRWLFDYPMSSQJHQFPCVNNPREHOKI");
    tmp_msg_0.distances.assign("JPVBTMJAQKALOGHIXCCTOPKOUNOAUMLFXQPJLGIYBJGCJEMUZYXFCLEDVPQNIJNVNFYYSAXUMKWFZKOFGABQJVAUZPNFZOUSHSYHEFHBWPMKXSHAWMDEPGDMKRXEECHZBJNSVPFJQ");
    tmp_msg_0.actions.assign("QLGAFAJNSJZRMOMVJXUJNEPCV");
    tmp_msg_0.fuel.assign("NRCMBGVFWXXKTSARNDPOHAQGSXXFVMFBVXAIDIFYOXWMIEACHKBFGOBCUHJALRADOJPYKUGGHZUUEVSMCCPUYDTNQBWABBJAQZSEDUPSXLOSTMHEHRNHIZPEJLLFBTTSNLTKLIZLVQYZDTPCUMHKQVKNUJXEWQ");
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.05313277806426475);
    msg.setSource(19339U);
    msg.setSourceEntity(187U);
    msg.setDestination(51617U);
    msg.setDestinationEntity(12U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.7894219280441316);
    msg.setSource(49318U);
    msg.setSourceEntity(171U);
    msg.setDestination(44600U);
    msg.setDestinationEntity(12U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystemsQuery msg;
    msg.setTimeStamp(0.6981169205736049);
    msg.setSource(44616U);
    msg.setSourceEntity(199U);
    msg.setDestination(39527U);
    msg.setDestinationEntity(227U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystemsQuery #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.4372599694410245);
    msg.setSource(17106U);
    msg.setSourceEntity(0U);
    msg.setDestination(46094U);
    msg.setDestinationEntity(12U);
    msg.list.assign("FPNNIKEEGGPBBCYXALAOIEPSKRVEDGSYXFNSURQWGMMMQSBXOOWVAKIKQPZWDYYZZLIUJJXDUUHERACHSGETXUCXVTCIVHONESZSCPYAFWFWLDODPHJSQKAJQLGOLBPNZVIJTMHVELCWNXCBONJRJFIZTYILRASZQZAHEDWMTDWBFFX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.2752578921897667);
    msg.setSource(20459U);
    msg.setSourceEntity(46U);
    msg.setDestination(35508U);
    msg.setDestinationEntity(13U);
    msg.list.assign("TNAHJQRFNSFLGYGFDOUFCUWZEQVNZRFZPZDVWIYMDGRBPEINMXDQBYVKTZFMCVVVAFELBJLUKNBPCDXTTBNRXRKXKQKYUOWWHILBHPSTWSADEDOJHMXRNOHEKEDREJLBGGXYSR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticSystems msg;
    msg.setTimeStamp(0.2968657009419985);
    msg.setSource(26797U);
    msg.setSourceEntity(202U);
    msg.setDestination(48278U);
    msg.setDestinationEntity(121U);
    msg.list.assign("LLKUXPGJQPWHQVWWNHXHKOXUEZMNPKFEOIMEFLYAETYZBLWQUKLQIBAALINOPCICVTJUVSEKVXXMGAHRNYUJQTALRZBZBJKPYRISVHRTFNAPWPGFUDGZSDJJNONUSROSVZEY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticSystems #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.9671990101660811);
    msg.setSource(16881U);
    msg.setSourceEntity(236U);
    msg.setDestination(46549U);
    msg.setDestinationEntity(101U);
    msg.peer.assign("QFIOYWZQJSTOIJHDHZVFPDVUMQNE");
    msg.rssi = 0.19417868755044632;
    msg.integrity = 63357U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.7526983822218143);
    msg.setSource(6708U);
    msg.setSourceEntity(253U);
    msg.setDestination(2182U);
    msg.setDestinationEntity(54U);
    msg.peer.assign("NMSXZPURGYSFKMSTURCFTWQRBKLLVUTHZSFFTTTSBARFRHWIOGQBEJCVAXKSOFEPHOLHGMXYBPMDJZJZ");
    msg.rssi = 0.5329427165676732;
    msg.integrity = 14956U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticLink msg;
    msg.setTimeStamp(0.5532733119541314);
    msg.setSource(30480U);
    msg.setSourceEntity(151U);
    msg.setDestination(56755U);
    msg.setDestinationEntity(66U);
    msg.peer.assign("PRFGWSBZPYRWNHKWMSNUVWXOZZOJSMGODBLQOICUSCJJYPLKBZFEPVWZXJ");
    msg.rssi = 0.6471757031651406;
    msg.integrity = 47266U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticLink #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.773898869044565);
    msg.setSource(41211U);
    msg.setSourceEntity(76U);
    msg.setDestination(34427U);
    msg.setDestinationEntity(252U);
    msg.req_id = 16793U;
    msg.destination.assign("CCGIUQGWWAHMKVJFABQDFBLSZVLBTUXZZNCHSDKLQLBDOTOCZWRKJXPFZDNPPQIJNKWHNGYKNYIGMTYAFMKREDOFVFBEEOHEQGAZTBGEHMVCHIGXOBJIVAUAYTFGANGVDNMJDSTYQCDSEKHJRAU");
    msg.timeout = 0.8500755180773408;
    msg.range = 0.8523943051845991;
    msg.type = 53U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.503213303746661;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.7764803083177453);
    msg.setSource(57844U);
    msg.setSourceEntity(87U);
    msg.setDestination(19043U);
    msg.setDestinationEntity(97U);
    msg.req_id = 4635U;
    msg.destination.assign("LKXCFNBCNVYMKTAJNHAUFQDQPEEYOLXRABLSNPFELYDXBYCWDJQUIZBQCBMFJUKLRHXVOPHIZTAJGHPVTVWNDSFEQQUAOKMEADHEQCGYAEMOPOXIENIKGRBILMLQRWKTCTIGFIVGBVGRPTJZ");
    msg.timeout = 0.224588860501584;
    msg.range = 0.09558968069060925;
    msg.type = 147U;
    IMC::AcousticStatus tmp_msg_0;
    tmp_msg_0.req_id = 31333U;
    tmp_msg_0.type = 212U;
    tmp_msg_0.status = 185U;
    tmp_msg_0.info.assign("WGBBCKLHUYZQUHPLINMUODGRHTEQGDHMXKXBYEWSDIAAASITPJPHRCNDPHBZCEFJRXKXZJVFTSCTGMOFITLVQAACHELHKSIDMCSSPYSZYPNJCSWZOAFNONXCKIZVGKEBOVMPVMYDWNAYRRGDTPZFVGWQYCNRUWPYYXBOOXYDMQQJFRQLZOQMBAGWUUWDDVOVESJFNXPFTLELLBIQKBSIIOJACRNUQXMZEITRGWLWGNVRUFJTXVFTUZKE");
    tmp_msg_0.range = 0.2624217331646739;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRequest msg;
    msg.setTimeStamp(0.39961850128022647);
    msg.setSource(61534U);
    msg.setSourceEntity(202U);
    msg.setDestination(51063U);
    msg.setDestinationEntity(72U);
    msg.req_id = 36337U;
    msg.destination.assign("LLDOGWUNHPTUJKNPSZNDDRNYXCPKEMDIVVXYBEGBIIHYLOMNCRTAUUSXMCZAHHWWWKYIHDGOVYFAEAXSOTGFAHOQGPJHLERAKDHBXKJIWBCRGRQCVQAIMKJCIZCPSGFRNGKMZTNTEYDSUSDKBUOQJBXXVIEMFYOTNQUTRUBHTWQLMZXYPCQRLEZGPZBSNXLJPKVDFLBUWESVBQMZOCEJGVWWPOSRYIHJCFVFYJLPAALKTJU");
    msg.timeout = 0.825303631588345;
    msg.range = 0.8462042391325156;
    msg.type = 204U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.08772064328081275;
    tmp_msg_0.lon = 0.7569495131087427;
    tmp_msg_0.eta = 1237363099U;
    tmp_msg_0.duration = 26973U;
    msg.msg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.22520382900542868);
    msg.setSource(14233U);
    msg.setSourceEntity(27U);
    msg.setDestination(9777U);
    msg.setDestinationEntity(232U);
    msg.req_id = 55305U;
    msg.type = 204U;
    msg.status = 124U;
    msg.info.assign("MMVICEWWUXGQKDHOFMTDPFDDCFGBZZMPHZUGOGEFBUPEPFELSCJCALWNZJIJAWPLPRLJSQFZPCXKHMBHHRMYUSNWBONJZQKTLSXGVNTERLBLXUYAJSHVTRRQVMUIDCZHTXBXNOIDEOIYNNJLAAZSNRYKOITYWSWENMLQUTPXDLDQWSATMRXKYJYAPAUROCFIHDOTEKGYDTMXKQPRNJGCBQQYBQVGCFBOVCEUZFOUIR");
    msg.range = 0.026293203545069477;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.5561872517712803);
    msg.setSource(35339U);
    msg.setSourceEntity(189U);
    msg.setDestination(49287U);
    msg.setDestinationEntity(142U);
    msg.req_id = 56784U;
    msg.type = 89U;
    msg.status = 48U;
    msg.info.assign("VAPGWFRJKKLOOJGZXEBMWZXEUHXCKUSPYJ");
    msg.range = 0.8849829268553417;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticStatus msg;
    msg.setTimeStamp(0.9257183714840683);
    msg.setSource(44681U);
    msg.setSourceEntity(26U);
    msg.setDestination(36745U);
    msg.setDestinationEntity(167U);
    msg.req_id = 29468U;
    msg.type = 157U;
    msg.status = 177U;
    msg.info.assign("UAYWFNIAJUKWJJGJPZFNOQHUCMOBXQTDZIIPHNPBVHLDGHSQGEITTFOHTSHUWCFUAFLAPSBROXZCNFDRKV");
    msg.range = 0.9919075014687652;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.4557610580207311);
    msg.setSource(21823U);
    msg.setSourceEntity(193U);
    msg.setDestination(43026U);
    msg.setDestinationEntity(112U);
    msg.system.assign("RDNCBKMUSMJSWJDLLTHFMUCUXXEFGYSMPRTSXNSZSTEOFQAYSGZZLNUIXJVBTEWDCVBTPWVHJIPGMKSOFTWCHUQIIPVZWXNSANVCFGZUSKRYTEGAKGONXCWFWRUDZWQIEOACJILXINDBHOAETQRAXWOXHXAQHQYRTWDBBJVKHUVQVARPAKM");
    msg.op = 102U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.4594278623088779);
    msg.setSource(51988U);
    msg.setSourceEntity(171U);
    msg.setDestination(65477U);
    msg.setDestinationEntity(57U);
    msg.system.assign("BXDWSXHCDUMGFQNQXKOXABBTYLVOOXSCDHZNGAWKTKTKINNQZCYPPWTICPPHWLDGXYSRRUPFAHISILZIUFWPQLURCMHNKEAFZNEPDKSXJDDMQDVMVWBRMNEJGZXTTLSNSOYYQHFBUEBRKJQRJTWCNZAJFHEXGMCQRSUKPTPMBGLYVQGDVEFJCOVOAXIFBRTIJEQKDCUJMIJZMWAOSYGGOULVATJLNCYLFLRWHHZPVUEEBOGHSMAIYAVE");
    msg.op = 184U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticRelease msg;
    msg.setTimeStamp(0.8363863917896054);
    msg.setSource(55526U);
    msg.setSourceEntity(38U);
    msg.setDestination(36900U);
    msg.setDestinationEntity(224U);
    msg.system.assign("RCCLKTRGGOOTWZLFPIXNULONLBCAYVVJJDILNUVMENHZPIRJDOEFDVUULGDLWWAAUCJJVGFZMJNOIXMTHAPUHSYEPSTMJODCGOTQRPFGEFZMJTHOHRGVWNLQSCICGZSLVYAYUNABECTKBHKTPYSWRTHZKMBQSBNIXWOAAXJMEYCMEFPJOIBKBQYHDKQQKDFVBLYMXQS");
    msg.op = 232U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticRelease #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.6255130960657621);
    msg.setSource(34333U);
    msg.setSourceEntity(7U);
    msg.setDestination(61739U);
    msg.setDestinationEntity(13U);
    msg.value = -24557;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.04007408449752392);
    msg.setSource(55111U);
    msg.setSourceEntity(247U);
    msg.setDestination(882U);
    msg.setDestinationEntity(231U);
    msg.value = 10725;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rpm msg;
    msg.setTimeStamp(0.843595615520219);
    msg.setSource(39743U);
    msg.setSourceEntity(185U);
    msg.setDestination(21665U);
    msg.setDestinationEntity(198U);
    msg.value = 8828;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rpm #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.6283855961184608);
    msg.setSource(38009U);
    msg.setSourceEntity(185U);
    msg.setDestination(42938U);
    msg.setDestinationEntity(87U);
    msg.value = 0.8521146731998739;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.9006854030450755);
    msg.setSource(48384U);
    msg.setSourceEntity(110U);
    msg.setDestination(523U);
    msg.setDestinationEntity(17U);
    msg.value = 0.7607565319158636;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Voltage msg;
    msg.setTimeStamp(0.3598852449178189);
    msg.setSource(21260U);
    msg.setSourceEntity(221U);
    msg.setDestination(19568U);
    msg.setDestinationEntity(178U);
    msg.value = 0.802934079829626;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Voltage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.33999354130210324);
    msg.setSource(14404U);
    msg.setSourceEntity(209U);
    msg.setDestination(34863U);
    msg.setDestinationEntity(135U);
    msg.value = 0.28879228101332566;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.6797317733405664);
    msg.setSource(23665U);
    msg.setSourceEntity(42U);
    msg.setDestination(61834U);
    msg.setDestinationEntity(171U);
    msg.value = 0.7742344508660328;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Current msg;
    msg.setTimeStamp(0.10883951497687427);
    msg.setSource(11793U);
    msg.setSourceEntity(178U);
    msg.setDestination(8736U);
    msg.setDestinationEntity(222U);
    msg.value = 0.2743972405584627;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Current #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.3716315062248152);
    msg.setSource(59702U);
    msg.setSourceEntity(152U);
    msg.setDestination(10286U);
    msg.setDestinationEntity(146U);
    msg.validity = 42119U;
    msg.type = 133U;
    msg.utc_year = 60711U;
    msg.utc_month = 54U;
    msg.utc_day = 238U;
    msg.utc_time = 0.4780929533771401;
    msg.lat = 0.3231398600907869;
    msg.lon = 0.4567253334737499;
    msg.height = 0.8273873069371787;
    msg.satellites = 40U;
    msg.cog = 0.5954435707090521;
    msg.sog = 0.2631963254799936;
    msg.hdop = 0.40863618663242096;
    msg.vdop = 0.12009978052440862;
    msg.hacc = 0.557447852692401;
    msg.vacc = 0.03835622351730228;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.6808190047979793);
    msg.setSource(7636U);
    msg.setSourceEntity(207U);
    msg.setDestination(62663U);
    msg.setDestinationEntity(68U);
    msg.validity = 9767U;
    msg.type = 74U;
    msg.utc_year = 57524U;
    msg.utc_month = 150U;
    msg.utc_day = 192U;
    msg.utc_time = 0.9977083296373087;
    msg.lat = 0.571222449230576;
    msg.lon = 0.4543631535890781;
    msg.height = 0.6284901780424637;
    msg.satellites = 51U;
    msg.cog = 0.49810367116790155;
    msg.sog = 0.27958567981808125;
    msg.hdop = 0.870370860969599;
    msg.vdop = 0.7903643996335018;
    msg.hacc = 0.4437486629465075;
    msg.vacc = 0.7083721033034172;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFix msg;
    msg.setTimeStamp(0.9275766486542957);
    msg.setSource(13869U);
    msg.setSourceEntity(78U);
    msg.setDestination(43988U);
    msg.setDestinationEntity(213U);
    msg.validity = 13051U;
    msg.type = 54U;
    msg.utc_year = 20069U;
    msg.utc_month = 145U;
    msg.utc_day = 173U;
    msg.utc_time = 0.5109384775804134;
    msg.lat = 0.9970227530102707;
    msg.lon = 0.8772516922586278;
    msg.height = 0.23912003871372256;
    msg.satellites = 218U;
    msg.cog = 0.6606743440011795;
    msg.sog = 0.712757748044755;
    msg.hdop = 0.384025326265358;
    msg.vdop = 0.5361527470733293;
    msg.hacc = 0.15689309812113827;
    msg.vacc = 0.2869657305369342;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.8779593439193476);
    msg.setSource(36292U);
    msg.setSourceEntity(12U);
    msg.setDestination(1041U);
    msg.setDestinationEntity(232U);
    msg.time = 0.16079264430026763;
    msg.phi = 0.9287264398343476;
    msg.theta = 0.7454762919084362;
    msg.psi = 0.8245420391105723;
    msg.psi_magnetic = 0.4655078610354577;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.8520317814426711);
    msg.setSource(16416U);
    msg.setSourceEntity(150U);
    msg.setDestination(18249U);
    msg.setDestinationEntity(38U);
    msg.time = 0.49783307447472;
    msg.phi = 0.024947531484747043;
    msg.theta = 0.2577273051610435;
    msg.psi = 0.8813032236790781;
    msg.psi_magnetic = 0.20269650913611237;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAngles msg;
    msg.setTimeStamp(0.5341080179814629);
    msg.setSource(47709U);
    msg.setSourceEntity(58U);
    msg.setDestination(15980U);
    msg.setDestinationEntity(54U);
    msg.time = 0.6303105729448524;
    msg.phi = 0.4552153707038369;
    msg.theta = 0.0961195182572151;
    msg.psi = 0.7807263278076751;
    msg.psi_magnetic = 0.1320457610633512;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.5368005513444443);
    msg.setSource(4912U);
    msg.setSourceEntity(78U);
    msg.setDestination(19271U);
    msg.setDestinationEntity(169U);
    msg.time = 0.1070920204145912;
    msg.x = 0.9284283169051297;
    msg.y = 0.5800048345993692;
    msg.z = 0.7238114150257073;
    msg.timestep = 0.4079857975914385;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.7734436544181514);
    msg.setSource(35200U);
    msg.setSourceEntity(22U);
    msg.setDestination(13226U);
    msg.setDestinationEntity(19U);
    msg.time = 0.27463547175787817;
    msg.x = 0.5636061847008089;
    msg.y = 0.4369150821033446;
    msg.z = 0.3478520969420984;
    msg.timestep = 0.9521920144485825;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EulerAnglesDelta msg;
    msg.setTimeStamp(0.005514289444683018);
    msg.setSource(38267U);
    msg.setSourceEntity(228U);
    msg.setDestination(24911U);
    msg.setDestinationEntity(183U);
    msg.time = 0.008682207072119641;
    msg.x = 0.1497993829100409;
    msg.y = 0.3709588819153947;
    msg.z = 0.08151265765830473;
    msg.timestep = 0.31242103365762885;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EulerAnglesDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.2747827037422276);
    msg.setSource(56046U);
    msg.setSourceEntity(217U);
    msg.setDestination(56828U);
    msg.setDestinationEntity(25U);
    msg.time = 0.747438153358347;
    msg.x = 0.7423963495208002;
    msg.y = 0.7730827121547565;
    msg.z = 0.8990070113014342;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.5642898989356467);
    msg.setSource(60424U);
    msg.setSourceEntity(131U);
    msg.setDestination(7546U);
    msg.setDestinationEntity(215U);
    msg.time = 0.7560752088404689;
    msg.x = 0.7137998898600999;
    msg.y = 0.10876943509728298;
    msg.z = 0.9969937374973724;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AngularVelocity msg;
    msg.setTimeStamp(0.5309474448689337);
    msg.setSource(61731U);
    msg.setSourceEntity(41U);
    msg.setDestination(13150U);
    msg.setDestinationEntity(63U);
    msg.time = 0.5290300040004632;
    msg.x = 0.956706731796431;
    msg.y = 0.43785370928197154;
    msg.z = 0.5787402514020703;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AngularVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.1515741703705249);
    msg.setSource(59147U);
    msg.setSourceEntity(184U);
    msg.setDestination(28029U);
    msg.setDestinationEntity(90U);
    msg.time = 0.895111239314364;
    msg.x = 0.9772604446553631;
    msg.y = 0.6680884033803147;
    msg.z = 0.4910402184263867;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.9030314664488848);
    msg.setSource(41744U);
    msg.setSourceEntity(114U);
    msg.setDestination(25437U);
    msg.setDestinationEntity(102U);
    msg.time = 0.5563298904652366;
    msg.x = 0.9769941918729222;
    msg.y = 0.9054580906843728;
    msg.z = 0.934417775347279;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Acceleration msg;
    msg.setTimeStamp(0.27392324752084074);
    msg.setSource(54097U);
    msg.setSourceEntity(157U);
    msg.setDestination(26578U);
    msg.setDestinationEntity(17U);
    msg.time = 0.6446814591594464;
    msg.x = 0.28897480717741386;
    msg.y = 0.04760050118952586;
    msg.z = 0.4309921993482292;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Acceleration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.056339546937524076);
    msg.setSource(34618U);
    msg.setSourceEntity(220U);
    msg.setDestination(39581U);
    msg.setDestinationEntity(201U);
    msg.time = 0.5276415749853;
    msg.x = 0.25400158066120104;
    msg.y = 0.062176412029592565;
    msg.z = 0.194171694044723;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.49889716560000075);
    msg.setSource(7089U);
    msg.setSourceEntity(142U);
    msg.setDestination(33465U);
    msg.setDestinationEntity(98U);
    msg.time = 0.8814845513785121;
    msg.x = 0.47107535387853894;
    msg.y = 0.14994376799310905;
    msg.z = 0.8820194665859035;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MagneticField msg;
    msg.setTimeStamp(0.5074223871572281);
    msg.setSource(3640U);
    msg.setSourceEntity(73U);
    msg.setDestination(51638U);
    msg.setDestinationEntity(224U);
    msg.time = 0.048037884952230936;
    msg.x = 0.9992714155630843;
    msg.y = 0.3215206880887107;
    msg.z = 0.5942980151407375;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MagneticField #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.14113906853300917);
    msg.setSource(11286U);
    msg.setSourceEntity(33U);
    msg.setDestination(51289U);
    msg.setDestinationEntity(104U);
    msg.validity = 144U;
    msg.x = 0.6334570361425795;
    msg.y = 0.2953665619926866;
    msg.z = 0.25865389570616526;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.982077737931572);
    msg.setSource(1413U);
    msg.setSourceEntity(93U);
    msg.setDestination(60609U);
    msg.setDestinationEntity(129U);
    msg.validity = 234U;
    msg.x = 0.8367636813396732;
    msg.y = 0.7783936797211637;
    msg.z = 0.8130726692381471;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroundVelocity msg;
    msg.setTimeStamp(0.2498050109448795);
    msg.setSource(52068U);
    msg.setSourceEntity(158U);
    msg.setDestination(35517U);
    msg.setDestinationEntity(231U);
    msg.validity = 55U;
    msg.x = 0.28538989630268996;
    msg.y = 0.9797216334163937;
    msg.z = 0.3031786233182554;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroundVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.8084164007494617);
    msg.setSource(61519U);
    msg.setSourceEntity(6U);
    msg.setDestination(28237U);
    msg.setDestinationEntity(80U);
    msg.validity = 36U;
    msg.x = 0.5323017400526162;
    msg.y = 0.13130501702122066;
    msg.z = 0.21406416820723007;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.3748409212318441);
    msg.setSource(4303U);
    msg.setSourceEntity(101U);
    msg.setDestination(13824U);
    msg.setDestinationEntity(237U);
    msg.validity = 82U;
    msg.x = 0.5342815210527564;
    msg.y = 0.6185971557594396;
    msg.z = 0.29433884452001513;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterVelocity msg;
    msg.setTimeStamp(0.37996196229942225);
    msg.setSource(26351U);
    msg.setSourceEntity(144U);
    msg.setDestination(40076U);
    msg.setDestinationEntity(252U);
    msg.validity = 155U;
    msg.x = 0.9076797529883992;
    msg.y = 0.5455384785548835;
    msg.z = 0.1888628636838996;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.8835832941122901);
    msg.setSource(45767U);
    msg.setSourceEntity(139U);
    msg.setDestination(53740U);
    msg.setDestinationEntity(245U);
    msg.time = 0.06052036371151559;
    msg.x = 0.8931739898237993;
    msg.y = 0.28329805395587115;
    msg.z = 0.8135479642119726;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.9154101526906557);
    msg.setSource(13338U);
    msg.setSourceEntity(211U);
    msg.setDestination(60834U);
    msg.setDestinationEntity(180U);
    msg.time = 0.4025711134639518;
    msg.x = 0.6262922387642929;
    msg.y = 0.4276247898903891;
    msg.z = 0.9590341945815087;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VelocityDelta msg;
    msg.setTimeStamp(0.5320043311611876);
    msg.setSource(50012U);
    msg.setSourceEntity(254U);
    msg.setDestination(34004U);
    msg.setDestinationEntity(33U);
    msg.time = 0.7124798888817833;
    msg.x = 0.5501093631180926;
    msg.y = 0.39943972544709716;
    msg.z = 0.9480195773672891;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VelocityDelta #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.9841169627021773);
    msg.setSource(35255U);
    msg.setSourceEntity(178U);
    msg.setDestination(34648U);
    msg.setDestinationEntity(1U);
    msg.validity = 225U;
    IMC::DeviceState tmp_msg_0;
    tmp_msg_0.x = 0.9336871214730021;
    tmp_msg_0.y = 0.2742617911936548;
    tmp_msg_0.z = 0.3296230146985425;
    tmp_msg_0.phi = 0.7095988896405554;
    tmp_msg_0.theta = 0.212628612222179;
    tmp_msg_0.psi = 0.5068868961566891;
    msg.location.push_back(tmp_msg_0);
    IMC::BeamConfig tmp_msg_1;
    tmp_msg_1.beam_width = 0.8254297687596083;
    tmp_msg_1.beam_height = 0.4351368998823053;
    msg.beam_config.push_back(tmp_msg_1);
    msg.value = 0.25946874406210363;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.9130574648597038);
    msg.setSource(5564U);
    msg.setSourceEntity(87U);
    msg.setDestination(28049U);
    msg.setDestinationEntity(89U);
    msg.validity = 12U;
    IMC::DeviceState tmp_msg_0;
    tmp_msg_0.x = 0.992898845771506;
    tmp_msg_0.y = 0.5133621556395465;
    tmp_msg_0.z = 0.7114813510023543;
    tmp_msg_0.phi = 0.2062063599317182;
    tmp_msg_0.theta = 0.8817048983018272;
    tmp_msg_0.psi = 0.8983895603344616;
    msg.location.push_back(tmp_msg_0);
    msg.value = 0.1542724406297138;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Distance msg;
    msg.setTimeStamp(0.6136253248072254);
    msg.setSource(64927U);
    msg.setSourceEntity(205U);
    msg.setDestination(50709U);
    msg.setDestinationEntity(3U);
    msg.validity = 177U;
    msg.value = 0.6406318581148828;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Distance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.14567279807970956);
    msg.setSource(45584U);
    msg.setSourceEntity(82U);
    msg.setDestination(39181U);
    msg.setDestinationEntity(18U);
    msg.time = 0.8476623108922263;
    msg.value = 0.9610788735983844;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.6108576979575651);
    msg.setSource(8488U);
    msg.setSourceEntity(199U);
    msg.setDestination(8359U);
    msg.setDestinationEntity(197U);
    msg.time = 0.46444231312520534;
    msg.value = 0.8278544071928322;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Temperature msg;
    msg.setTimeStamp(0.1298784709542149);
    msg.setSource(8368U);
    msg.setSourceEntity(195U);
    msg.setDestination(32452U);
    msg.setDestinationEntity(126U);
    msg.time = 0.9830574136638061;
    msg.value = 0.053204108991307564;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Temperature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.20957525130730625);
    msg.setSource(9012U);
    msg.setSourceEntity(80U);
    msg.setDestination(63766U);
    msg.setDestinationEntity(162U);
    msg.value = 0.9291741073661651;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.9917028035068016);
    msg.setSource(28042U);
    msg.setSourceEntity(25U);
    msg.setDestination(13470U);
    msg.setDestinationEntity(214U);
    msg.value = 0.1473269669118099;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pressure msg;
    msg.setTimeStamp(0.5936111471462135);
    msg.setSource(18578U);
    msg.setSourceEntity(155U);
    msg.setDestination(26330U);
    msg.setDestinationEntity(37U);
    msg.value = 0.23592532059894422;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pressure #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.9186925016698454);
    msg.setSource(37014U);
    msg.setSourceEntity(136U);
    msg.setDestination(18538U);
    msg.setDestinationEntity(121U);
    msg.value = 0.005324045000163369;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.981909309456277);
    msg.setSource(38806U);
    msg.setSourceEntity(186U);
    msg.setDestination(18680U);
    msg.setDestinationEntity(63U);
    msg.value = 0.354689784623765;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Depth msg;
    msg.setTimeStamp(0.2640002629008259);
    msg.setSource(25968U);
    msg.setSourceEntity(118U);
    msg.setDestination(28583U);
    msg.setDestinationEntity(87U);
    msg.value = 0.6126045203381767;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Depth #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.14825790451332088);
    msg.setSource(50105U);
    msg.setSourceEntity(11U);
    msg.setDestination(44074U);
    msg.setDestinationEntity(145U);
    msg.value = 0.42984989505093707;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.7942583191874728);
    msg.setSource(21507U);
    msg.setSourceEntity(210U);
    msg.setDestination(19911U);
    msg.setDestinationEntity(177U);
    msg.value = 0.05978847682637878;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DepthOffset msg;
    msg.setTimeStamp(0.5882570976321481);
    msg.setSource(24361U);
    msg.setSourceEntity(61U);
    msg.setDestination(48898U);
    msg.setDestinationEntity(166U);
    msg.value = 0.5179984429247813;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DepthOffset #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.4570582996527496);
    msg.setSource(64459U);
    msg.setSourceEntity(169U);
    msg.setDestination(36955U);
    msg.setDestinationEntity(229U);
    msg.value = 0.7894208083843108;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.20427786264058212);
    msg.setSource(29836U);
    msg.setSourceEntity(185U);
    msg.setDestination(42722U);
    msg.setDestinationEntity(3U);
    msg.value = 0.5004804218299349;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoundSpeed msg;
    msg.setTimeStamp(0.7332176964244596);
    msg.setSource(23747U);
    msg.setSourceEntity(254U);
    msg.setDestination(51721U);
    msg.setDestinationEntity(250U);
    msg.value = 0.7210670276998565;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoundSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.8677429776383966);
    msg.setSource(54681U);
    msg.setSourceEntity(174U);
    msg.setDestination(1586U);
    msg.setDestinationEntity(137U);
    msg.value = 0.977631571311931;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.35484252688229145);
    msg.setSource(14546U);
    msg.setSourceEntity(82U);
    msg.setDestination(42612U);
    msg.setDestinationEntity(54U);
    msg.value = 0.278599166376598;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaterDensity msg;
    msg.setTimeStamp(0.5510959900550442);
    msg.setSource(6719U);
    msg.setSourceEntity(191U);
    msg.setDestination(27026U);
    msg.setDestinationEntity(185U);
    msg.value = 0.4460596673893443;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaterDensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.909303118921841);
    msg.setSource(4244U);
    msg.setSourceEntity(223U);
    msg.setDestination(31827U);
    msg.setDestinationEntity(106U);
    msg.value = 0.17406678966018307;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.4007618999025403);
    msg.setSource(57378U);
    msg.setSourceEntity(191U);
    msg.setDestination(9881U);
    msg.setDestinationEntity(0U);
    msg.value = 0.01817530741548201;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Conductivity msg;
    msg.setTimeStamp(0.3162333854020747);
    msg.setSource(45745U);
    msg.setSourceEntity(232U);
    msg.setDestination(43598U);
    msg.setDestinationEntity(85U);
    msg.value = 0.898669130937053;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Conductivity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.5956300225033739);
    msg.setSource(59805U);
    msg.setSourceEntity(69U);
    msg.setDestination(45859U);
    msg.setDestinationEntity(15U);
    msg.value = 0.6996505369789149;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.43811954496265915);
    msg.setSource(17832U);
    msg.setSourceEntity(174U);
    msg.setDestination(12256U);
    msg.setDestinationEntity(247U);
    msg.value = 0.48761112185025046;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Salinity msg;
    msg.setTimeStamp(0.317427098968763);
    msg.setSource(34186U);
    msg.setSourceEntity(244U);
    msg.setDestination(38731U);
    msg.setDestinationEntity(125U);
    msg.value = 0.9941513570528452;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Salinity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.2343302038234062);
    msg.setSource(61196U);
    msg.setSourceEntity(72U);
    msg.setDestination(5627U);
    msg.setDestinationEntity(30U);
    msg.direction = 0.029168196196760365;
    msg.speed = 0.7558901751980265;
    msg.turbulence = 0.7112990401718197;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.7823202496910477);
    msg.setSource(51290U);
    msg.setSourceEntity(252U);
    msg.setDestination(24811U);
    msg.setDestinationEntity(190U);
    msg.direction = 0.5473785158528875;
    msg.speed = 0.8668670451657315;
    msg.turbulence = 0.21483399194510755;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WindSpeed msg;
    msg.setTimeStamp(0.13243579379254156);
    msg.setSource(44404U);
    msg.setSourceEntity(28U);
    msg.setDestination(48907U);
    msg.setDestinationEntity(97U);
    msg.direction = 0.5911097331305307;
    msg.speed = 0.6317957888388689;
    msg.turbulence = 0.41013451140161583;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WindSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.9157557230993549);
    msg.setSource(34941U);
    msg.setSourceEntity(144U);
    msg.setDestination(44550U);
    msg.setDestinationEntity(64U);
    msg.value = 0.5705738510983447;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.4561978868025255);
    msg.setSource(29622U);
    msg.setSourceEntity(216U);
    msg.setDestination(9833U);
    msg.setDestinationEntity(2U);
    msg.value = 0.5325472277877287;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeHumidity msg;
    msg.setTimeStamp(0.4419449201480464);
    msg.setSource(32477U);
    msg.setSourceEntity(88U);
    msg.setDestination(55646U);
    msg.setDestinationEntity(135U);
    msg.value = 0.1124064726451175;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeHumidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.27303490990045476);
    msg.setSource(64378U);
    msg.setSourceEntity(77U);
    msg.setDestination(62295U);
    msg.setDestinationEntity(112U);
    msg.value.assign("YONRNJHEXMRHLBVRQHSQJMAIVHJQEZWMLGGRUPGCUKZPMKKPDDDLBPACDAWJQTDVYPKRNRVGTAFOWXNPTTGRGSJQZOKTFOTMQEFUGNUZDOMLXVRXCCRKKOZLXYCSBLDTWITFJWIMAASYEDBHUXBNSBCBELQWRHHAUFCALJLOHFVJCIKETIEII");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.7817719200098145);
    msg.setSource(47367U);
    msg.setSourceEntity(253U);
    msg.setDestination(5213U);
    msg.setDestinationEntity(171U);
    msg.value.assign("HTMJAKLAGWZVYPOCPODFFMMOGKZFLWICUVTSAHJYBKWCDQZTAVSKFUJEQOONXRPVEZIRQLZJXRMZPSRKMEWFBCFUMQOCCJRBDJHWUKHEIZQJRCWPYIIIDGEXQAODALETMGYDNCLMGVSGYBVJENHPBGETNBRDQSNUHBQXXBRHFCULLIIGSWVNRPLFTIZNIXRHYPENAJLXMZOFVYXMY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataText msg;
    msg.setTimeStamp(0.4265701341763829);
    msg.setSource(4950U);
    msg.setSourceEntity(119U);
    msg.setDestination(42165U);
    msg.setDestinationEntity(183U);
    msg.value.assign("BAUNVRZQLNKOKLNAHHBMGFFDJIFAUCLYEQVCRICNBYGNCEHXQMWKLVZZCHVOWLXMTKKPYJEEZOMOHHCDDGNITYTDNARDNKAHQKGWSXOESUIXXWSMLUTJZTPSJKAQZY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataText #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.2752540512324201);
    msg.setSource(33181U);
    msg.setSourceEntity(70U);
    msg.setDestination(65498U);
    msg.setDestinationEntity(225U);
    const signed char tmp_msg_0[] = {64, 118, 48, 22, 21, 67, -76, -80, -122, 10, 100, -70, -35, 4, 41, -25, -115, -54, 110, -106, 71, -26, 110, -81, 57, -124, 113, 29, 81, 76, 14, -31, 41, -92, 86, 65, -15, -106, 62, 23, -26, 11, 55, -113, -58, -19, 33, -78, -56, -87, 29, 47, 29, 74, -118, -102, -19, -4, -123};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.11539926685642421);
    msg.setSource(30775U);
    msg.setSourceEntity(204U);
    msg.setDestination(37242U);
    msg.setDestinationEntity(167U);
    const signed char tmp_msg_0[] = {-19, 56, -50, 31, 59, -97, 118, 47, 70, -99, 120, 98, -26, 21, 12, 87, -127, 29, -81, 9, -50, -122, -96, -41, 124, -3, -107, -51, -23, 36, -25, -23, 119, 55, -91, 58, 28, -7, 34, -38, 80, 70, -48, 9, 62, -126, -107, -62, 69, 87, 115, 91, -96, -3, 9, 109, 40, -74, -38, -104, -15, -15, 126, 125, -24, -99, 77, 5, 33, -58, 12, 26, 125, -121, 58, -104, -2, 25, 8, -96, -87, -84, -65, 40, -45, 47, 57, -25, -66, 28, -53, -54, -30, -99, 2, 77, -58, -43, 126, -48, -28, 49, -104, -65, -26, 46, 83, -78, -45, 77, -9, -122, 34, -85, -94, -50, 85, 24, 89, 90, 77, 73, -123, 82, 32, 48, -22};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DevDataBinary msg;
    msg.setTimeStamp(0.39686827842632677);
    msg.setSource(61717U);
    msg.setSourceEntity(33U);
    msg.setDestination(19968U);
    msg.setDestinationEntity(35U);
    const signed char tmp_msg_0[] = {-30, 98, 87, -127, 65, 79, -32, -41, -63, 30, 38, -45, -9, 25, 86, 96, 67, 81, 8, 53, 3, 27, 42, 89, -9, -103, -117, -114, 76, -68, -35, 91, -108, -18, 106, 44, 23, 123, -59, 119, -41, 14, -50, 112, 83, -106, 27, 82, -5, -121, 54, -126, -82, -111, 56, -105, 12, 47, -39, -106, -67, -118, 26, -119, -85, 57, -94, -24, -116, 94, 46, -43, 100, -74, -35, -58, -32, 50, -70, -26, 6, -89, 120, -42, -19, -121, 21, -43, -110, -93, -115, -63, -128, 54, -77, 13, 45, -119, -113, 13, -23, -57, -69, -121, 20, -116, 119, 51, 7, 3, -58, 84, -69, -92, -16, -93, -93, -55, -109, 8, 62, -1, 119, 41, 97, -90, -57, -49, -31, 118, -2, 72, 105, -86, -86, 93, 48, 72, 125, -26, 38, 120, 41, -77, -14, -94, -9, -20, 91, -17, 119, 32, 101, -40, -11, 91, -6, 59, 52, -88, 21, -51, -121, -66, -15, -59, -108, -112, -41, -109, -33, 112, 99, 59, 67, -74};
    msg.value.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DevDataBinary #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.1342229118597098);
    msg.setSource(48034U);
    msg.setSourceEntity(32U);
    msg.setDestination(30083U);
    msg.setDestinationEntity(251U);
    msg.value = 0.004054668619770663;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.6427889138339866);
    msg.setSource(46105U);
    msg.setSourceEntity(144U);
    msg.setDestination(57526U);
    msg.setDestinationEntity(36U);
    msg.value = 0.3754043036546283;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Force msg;
    msg.setTimeStamp(0.3731864997475479);
    msg.setSource(12721U);
    msg.setSourceEntity(250U);
    msg.setDestination(19281U);
    msg.setDestinationEntity(100U);
    msg.value = 0.18008520773392733;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Force #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.19698395738269436);
    msg.setSource(23093U);
    msg.setSourceEntity(0U);
    msg.setDestination(12449U);
    msg.setDestinationEntity(82U);
    msg.type = 197U;
    msg.frequency = 887897459U;
    msg.min_range = 54719U;
    msg.max_range = 40940U;
    msg.bits_per_point = 6U;
    msg.scale_factor = 0.44793052963045865;
    const signed char tmp_msg_0[] = {30, -39, 38, 19, -83, 68, 25, 106, 97, -33, -63, 99, 96, -53, -2, 96, 118, 61, 4, -67, 123, 34, -118, -116, 104, 55, -14, -116, 124, -63, 120, 51, -121, -68, -90, 23, -96, 123, 97, 26, 57, -113, 26, 84, 35, -34, -19, 41, 23, 72, 61, -108, 77, -127, 51, -46, 56, 79, -99, 112, -53, -58, 122, 106, 90, -93, -109, -113, -90, -127, 71, -17, 96, 103, 88, -6, 73, -110, -92, 108, -125, 38, -108, 30, -54, -27, 118, 7, -100, -95, -31, 44, -29, 104, -124, -65, -15, 75, -87, 52, -29, 69, -78, -65, -111, 8, -42, 94, 64, 49, 125, -85, -44, -35, 8, 2, 18, -26, -124, -26, -10, 75, -125, 41, -92, 75, 56, 54, -66, -45, 98, 19, 2, 104, 113, 96, 52, 72, 105, 45, -98};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.11238042297243311);
    msg.setSource(46198U);
    msg.setSourceEntity(154U);
    msg.setDestination(10781U);
    msg.setDestinationEntity(56U);
    msg.type = 151U;
    msg.frequency = 2970197997U;
    msg.min_range = 55949U;
    msg.max_range = 13234U;
    msg.bits_per_point = 39U;
    msg.scale_factor = 0.5753915653483996;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.6416335653088197;
    tmp_msg_0.beam_height = 0.5221828691167343;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {31, -11, -73, 70, 16, 95, 90, -65, 1, -112, -18, 75, 1, -23, 97, 85, -103, 3, -58, 123, 74, -113, -27, -101, 25, -105, 12, 104, 13, 118, -15, 76, -90, -96, -110, 43, 123, -47, 13, -23, -12, 25, 46, -84, 117, 125, -73, -26, -126, 5, 3, 64, 28, -75, 30, 43, 93, 52, -86, -96, 48, -65, 83, -96, -106, -124, 50, 95, 123, -5, -15, 97, 100, 97, 102, 15, -18, -27, 26, 103, -67, -1, -93, 90, 75, 16, -24, -82, 88, 117, -74, -18, -101, -105, 99, -46, 13, -7, 20, -26, -33, 27, 103, -102, 123, -65, -1, -38, 24, 10, 25, -121, -114, 78, -97, 14, 8, 110, 78, 70, -36, 51, 39, -43, -125, 89, -122};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SonarData msg;
    msg.setTimeStamp(0.3759790124320783);
    msg.setSource(6443U);
    msg.setSourceEntity(210U);
    msg.setDestination(9728U);
    msg.setDestinationEntity(76U);
    msg.type = 64U;
    msg.frequency = 2721281185U;
    msg.min_range = 59999U;
    msg.max_range = 22505U;
    msg.bits_per_point = 124U;
    msg.scale_factor = 0.867926766759486;
    IMC::BeamConfig tmp_msg_0;
    tmp_msg_0.beam_width = 0.3300673485079185;
    tmp_msg_0.beam_height = 0.877599794424379;
    msg.beam_config.push_back(tmp_msg_0);
    const signed char tmp_msg_1[] = {75, -64, 64, -69, 66, 82, 74, 62, 112, -99, -77, 3, 26, -109, -70, -75, 3, -78, 79, 16, -6, -101, 29, -83, -50, 88, 116, 79, 20, -21, -107, 79, 119, -122, -63, -37, 46, -111, 92, -103, -104, -102, -107, -60, 76, -128, -40, -47, 101, -125, 26, 95, -117, -14, 116, 26, 115, -52, -127, 24, -93, -21, 126, 10, -121, 0, -32, 98, -1, 119, 91, -15, -46, 117, 69, -4, 84, -108, 65, -113, -64, 39, 86, -107, 73, -67, 86, -114, -7, -68, -94, -27, -57, 3, -95, -98, 77, -82, -61, -71, 47, -32, 10, 0, 71, 4, 50, 14, 68, -18, -57, 94, 1, 99, -17, -4, 105, 104, 85, 101, -53, -60, -85, -38, -115, 17, 18, 19, 20, -79, -21, 118, -20, -86, -64, 61, 47, -41, -41, 58, -87, -13, 48, 79, 36, -74, 116, 76, 96, 75, 86, -56, -127, -23, 42, -24, -113, 47, -67, 0, -76, -55, 49, 6, 113, 30, 63, 126, 44, 43, 36, -115, -123, -115, 36, -5, 58, -25, 59, 0, -46, 75, -52, -35, -85, -26, -93, -58, -107, 29, 60, -11, -25, 81, -75, 67, -30, 46, 105, -127, 114, -14, -113, -58, -125, -38, -7, -115, -85, -95, -34, 34, 115, 119, -112, -105, -121, -85, -93, -37, -100, 57, -31, -91, -92, -10, -117, 53, 82, 105, 38, -107, 116};
    msg.data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SonarData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.5773758654130884);
    msg.setSource(43580U);
    msg.setSourceEntity(201U);
    msg.setDestination(52290U);
    msg.setDestinationEntity(163U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.33036698195682224);
    msg.setSource(20591U);
    msg.setSourceEntity(130U);
    msg.setDestination(47292U);
    msg.setDestinationEntity(22U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Pulse msg;
    msg.setTimeStamp(0.011983101026712073);
    msg.setSource(41505U);
    msg.setSourceEntity(200U);
    msg.setDestination(62757U);
    msg.setDestinationEntity(49U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Pulse #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.15012116270267206);
    msg.setSource(39237U);
    msg.setSourceEntity(169U);
    msg.setDestination(43444U);
    msg.setDestinationEntity(27U);
    msg.op = 159U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.747749798057097);
    msg.setSource(7880U);
    msg.setSourceEntity(100U);
    msg.setDestination(39013U);
    msg.setDestinationEntity(213U);
    msg.op = 16U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PulseDetectionControl msg;
    msg.setTimeStamp(0.9117631051883898);
    msg.setSource(35768U);
    msg.setSourceEntity(64U);
    msg.setDestination(19218U);
    msg.setDestinationEntity(83U);
    msg.op = 138U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PulseDetectionControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.02766341301314479);
    msg.setSource(58515U);
    msg.setSourceEntity(11U);
    msg.setDestination(11737U);
    msg.setDestinationEntity(40U);
    msg.value = 0.4089302572210538;
    msg.confidence = 0.4810376589232398;
    msg.opmodes.assign("FQVBLBREBCPXZZOQXYDPJDPMFRXNDQWZXTDZFTGJVVBXSMYUHEDKISBCHLZLEUTWBCQMHQRBHVHYPTQAPVALIOGAFMQNCKICRFEUDXMPAGRUAROCEJJSZNDKAWYGNEIIAOWMLJGTX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.13703615281707993);
    msg.setSource(17441U);
    msg.setSourceEntity(47U);
    msg.setDestination(8066U);
    msg.setDestinationEntity(190U);
    msg.value = 0.8958120491735028;
    msg.confidence = 0.2350756656427634;
    msg.opmodes.assign("MRUDHZJVDBJAPHEYEBORMNOMQF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FuelLevel msg;
    msg.setTimeStamp(0.08518359834138967);
    msg.setSource(27085U);
    msg.setSourceEntity(83U);
    msg.setDestination(12317U);
    msg.setDestinationEntity(32U);
    msg.value = 0.18602226736764305;
    msg.confidence = 0.12596998934279113;
    msg.opmodes.assign("WHLJJARQZFHAQDVGUMMCHIIDMWAEESDPBVQTDKKKGJMPKPAWMJUUAIAFSXXTVKFNBZYOLDZZWQASRVNESHCWCRXEBRMEUWAEPBCWNNLTEHPNWXNHQFFCYVZFGAFZUCJTKMBQOTVPRHHBOJBNEDIQOUBYXLIPVBKAXTGUQSYGEGUDGZMPRRDYFLPTCKEVOWGOYLINYJXHD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FuelLevel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.8469304354901843);
    msg.setSource(49696U);
    msg.setSourceEntity(126U);
    msg.setDestination(63158U);
    msg.setDestinationEntity(199U);
    msg.itow = 3216554421U;
    msg.lat = 0.45370053701466573;
    msg.lon = 0.4771999030434746;
    msg.height_ell = 0.24969318912180116;
    msg.height_sea = 0.5500573579290786;
    msg.hacc = 0.2709172546101116;
    msg.vacc = 0.21854473181978606;
    msg.vel_n = 0.4195886572766636;
    msg.vel_e = 0.6540566684442137;
    msg.vel_d = 0.7890207516993865;
    msg.speed = 0.6769126700877856;
    msg.gspeed = 0.22233383979673305;
    msg.heading = 0.7132681460910714;
    msg.sacc = 0.8401253923726962;
    msg.cacc = 0.9072966797328252;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.15427598186379143);
    msg.setSource(8200U);
    msg.setSourceEntity(135U);
    msg.setDestination(6773U);
    msg.setDestinationEntity(171U);
    msg.itow = 3936053673U;
    msg.lat = 0.38247071059824844;
    msg.lon = 0.035063355979337185;
    msg.height_ell = 0.6926424141303131;
    msg.height_sea = 0.8692286192599568;
    msg.hacc = 0.9266731445893167;
    msg.vacc = 0.8934972215707082;
    msg.vel_n = 0.33236579733369276;
    msg.vel_e = 0.6157125653359501;
    msg.vel_d = 0.1510547772212093;
    msg.speed = 0.9766979644600826;
    msg.gspeed = 0.034645503956425516;
    msg.heading = 0.24896614812389162;
    msg.sacc = 0.2606683356172713;
    msg.cacc = 0.4780635050032307;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsNavData msg;
    msg.setTimeStamp(0.24744833889516626);
    msg.setSource(57152U);
    msg.setSourceEntity(28U);
    msg.setDestination(52506U);
    msg.setDestinationEntity(60U);
    msg.itow = 4063436757U;
    msg.lat = 0.4591995235376011;
    msg.lon = 0.5444762251869764;
    msg.height_ell = 0.8132136369151972;
    msg.height_sea = 0.3545329112150788;
    msg.hacc = 0.2838035243533902;
    msg.vacc = 0.8919260205860177;
    msg.vel_n = 0.877683501912228;
    msg.vel_e = 0.802925718893787;
    msg.vel_d = 0.22915891963992074;
    msg.speed = 0.050709288259073615;
    msg.gspeed = 0.34950096301645817;
    msg.heading = 0.10517920626003752;
    msg.sacc = 0.031908661743112354;
    msg.cacc = 0.3725604222182801;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.2865348615124981);
    msg.setSource(54420U);
    msg.setSourceEntity(66U);
    msg.setDestination(6797U);
    msg.setDestinationEntity(126U);
    msg.id = 34U;
    msg.value = 0.09347474069612571;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.9959188825020039);
    msg.setSource(11842U);
    msg.setSourceEntity(193U);
    msg.setDestination(28710U);
    msg.setDestinationEntity(102U);
    msg.id = 152U;
    msg.value = 0.329327851099384;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ServoPosition msg;
    msg.setTimeStamp(0.3653290520740845);
    msg.setSource(55994U);
    msg.setSourceEntity(245U);
    msg.setDestination(40873U);
    msg.setDestinationEntity(237U);
    msg.id = 126U;
    msg.value = 0.6981022925520537;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.5193075622626475);
    msg.setSource(51538U);
    msg.setSourceEntity(230U);
    msg.setDestination(20967U);
    msg.setDestinationEntity(60U);
    msg.x = 0.2611658418949895;
    msg.y = 0.5422878604130442;
    msg.z = 0.19645399826367638;
    msg.phi = 0.32929460609135497;
    msg.theta = 0.7269716560514583;
    msg.psi = 0.9882338841520558;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.4988883148277006);
    msg.setSource(4548U);
    msg.setSourceEntity(228U);
    msg.setDestination(38942U);
    msg.setDestinationEntity(110U);
    msg.x = 0.6894894574916384;
    msg.y = 0.4454109462948438;
    msg.z = 0.10019809551391334;
    msg.phi = 0.2729872730492595;
    msg.theta = 0.8575057657990516;
    msg.psi = 0.17151968233609227;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DeviceState msg;
    msg.setTimeStamp(0.21511889139244644);
    msg.setSource(13748U);
    msg.setSourceEntity(86U);
    msg.setDestination(36616U);
    msg.setDestinationEntity(67U);
    msg.x = 0.59505595755668;
    msg.y = 0.7553048957841421;
    msg.z = 0.6184288007849491;
    msg.phi = 0.3845277790382978;
    msg.theta = 0.03054968367481381;
    msg.psi = 0.5956526947354761;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DeviceState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.6965442683161173);
    msg.setSource(45935U);
    msg.setSourceEntity(242U);
    msg.setDestination(37780U);
    msg.setDestinationEntity(47U);
    msg.beam_width = 0.16306287055656865;
    msg.beam_height = 0.9781302670619613;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.3289491865667806);
    msg.setSource(38555U);
    msg.setSourceEntity(251U);
    msg.setDestination(6065U);
    msg.setDestinationEntity(150U);
    msg.beam_width = 0.15129075534979397;
    msg.beam_height = 0.08787709548797507;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::BeamConfig msg;
    msg.setTimeStamp(0.37549039032769393);
    msg.setSource(57237U);
    msg.setSourceEntity(27U);
    msg.setDestination(8903U);
    msg.setDestinationEntity(46U);
    msg.beam_width = 0.09973754962212644;
    msg.beam_height = 0.0539511535454108;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("BeamConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.03724425579199919);
    msg.setSource(4289U);
    msg.setSourceEntity(211U);
    msg.setDestination(36144U);
    msg.setDestinationEntity(229U);
    msg.sane = 111U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.5425525165809617);
    msg.setSource(47158U);
    msg.setSourceEntity(225U);
    msg.setDestination(35209U);
    msg.setDestinationEntity(10U);
    msg.sane = 184U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DataSanity msg;
    msg.setTimeStamp(0.2038454736298715);
    msg.setSource(36195U);
    msg.setSourceEntity(41U);
    msg.setDestination(31062U);
    msg.setDestinationEntity(222U);
    msg.sane = 208U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DataSanity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.0680339270646576);
    msg.setSource(36926U);
    msg.setSourceEntity(222U);
    msg.setDestination(23892U);
    msg.setDestinationEntity(248U);
    msg.value = 0.6625280580307372;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.21145023749037883);
    msg.setSource(35971U);
    msg.setSourceEntity(125U);
    msg.setDestination(44140U);
    msg.setDestinationEntity(136U);
    msg.value = 0.389105440637195;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RhodamineDye msg;
    msg.setTimeStamp(0.33881458555278454);
    msg.setSource(58230U);
    msg.setSourceEntity(154U);
    msg.setDestination(56367U);
    msg.setDestinationEntity(232U);
    msg.value = 0.6797120521844116;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RhodamineDye #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.20588721610623073);
    msg.setSource(34006U);
    msg.setSourceEntity(171U);
    msg.setDestination(17931U);
    msg.setDestinationEntity(43U);
    msg.value = 0.20450860465689147;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.6111151179755236);
    msg.setSource(5057U);
    msg.setSourceEntity(176U);
    msg.setDestination(58127U);
    msg.setDestinationEntity(240U);
    msg.value = 0.5242029420542835;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CrudeOil msg;
    msg.setTimeStamp(0.8220475785949259);
    msg.setSource(868U);
    msg.setSourceEntity(152U);
    msg.setDestination(38475U);
    msg.setDestinationEntity(70U);
    msg.value = 0.232769914444372;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CrudeOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.8474369851350435);
    msg.setSource(12710U);
    msg.setSourceEntity(64U);
    msg.setDestination(1644U);
    msg.setDestinationEntity(45U);
    msg.value = 0.5993616888481366;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.2869798169348795);
    msg.setSource(11317U);
    msg.setSourceEntity(27U);
    msg.setDestination(59674U);
    msg.setDestinationEntity(77U);
    msg.value = 0.6901032291861589;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FineOil msg;
    msg.setTimeStamp(0.9858356726939433);
    msg.setSource(54380U);
    msg.setSourceEntity(100U);
    msg.setDestination(63728U);
    msg.setDestinationEntity(171U);
    msg.value = 0.8530225836165612;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FineOil #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.9628974066281456);
    msg.setSource(55456U);
    msg.setSourceEntity(208U);
    msg.setDestination(29800U);
    msg.setDestinationEntity(157U);
    msg.value = 0.31828862394050983;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.8147554107773006);
    msg.setSource(44713U);
    msg.setSourceEntity(214U);
    msg.setDestination(14828U);
    msg.setDestinationEntity(72U);
    msg.value = 0.38499694025834397;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Turbidity msg;
    msg.setTimeStamp(0.54369010587292);
    msg.setSource(7759U);
    msg.setSourceEntity(202U);
    msg.setDestination(25477U);
    msg.setDestinationEntity(133U);
    msg.value = 0.37926627659074796;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Turbidity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.4714789655845806);
    msg.setSource(55358U);
    msg.setSourceEntity(187U);
    msg.setDestination(88U);
    msg.setDestinationEntity(194U);
    msg.value = 0.5484516398514357;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.6141598334787336);
    msg.setSource(64621U);
    msg.setSourceEntity(13U);
    msg.setDestination(62535U);
    msg.setDestinationEntity(29U);
    msg.value = 0.5277679228947504;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Chlorophyll msg;
    msg.setTimeStamp(0.6874097348198606);
    msg.setSource(16854U);
    msg.setSourceEntity(20U);
    msg.setDestination(33938U);
    msg.setDestinationEntity(129U);
    msg.value = 0.1064689161633291;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Chlorophyll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.9136501132003562);
    msg.setSource(58726U);
    msg.setSourceEntity(25U);
    msg.setDestination(2254U);
    msg.setDestinationEntity(35U);
    msg.value = 0.6055676292992165;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.5032119467639767);
    msg.setSource(37321U);
    msg.setSourceEntity(53U);
    msg.setDestination(16132U);
    msg.setDestinationEntity(36U);
    msg.value = 0.3523453339154369;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Fluorescein msg;
    msg.setTimeStamp(0.2523473945139314);
    msg.setSource(4940U);
    msg.setSourceEntity(110U);
    msg.setDestination(15033U);
    msg.setDestinationEntity(119U);
    msg.value = 0.9981760877973191;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Fluorescein #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.9941830412977054);
    msg.setSource(63906U);
    msg.setSourceEntity(246U);
    msg.setDestination(40421U);
    msg.setDestinationEntity(30U);
    msg.value = 0.9509281108846506;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.6283288746407137);
    msg.setSource(44863U);
    msg.setSourceEntity(106U);
    msg.setDestination(24773U);
    msg.setDestinationEntity(129U);
    msg.value = 0.10868756666175872;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycocyanin msg;
    msg.setTimeStamp(0.8379144360782148);
    msg.setSource(40958U);
    msg.setSourceEntity(146U);
    msg.setDestination(17933U);
    msg.setDestinationEntity(153U);
    msg.value = 0.18430805239336578;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycocyanin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.33860513331532516);
    msg.setSource(18703U);
    msg.setSourceEntity(88U);
    msg.setDestination(29143U);
    msg.setDestinationEntity(109U);
    msg.value = 0.5663823985130144;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.8713295298988636);
    msg.setSource(49272U);
    msg.setSourceEntity(100U);
    msg.setDestination(29292U);
    msg.setDestinationEntity(245U);
    msg.value = 0.18261614671295512;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Phycoerythrin msg;
    msg.setTimeStamp(0.6785925937680343);
    msg.setSource(37117U);
    msg.setSourceEntity(225U);
    msg.setDestination(18465U);
    msg.setDestinationEntity(156U);
    msg.value = 0.33426030363232695;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Phycoerythrin #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.587500439364091);
    msg.setSource(20207U);
    msg.setSourceEntity(176U);
    msg.setDestination(40068U);
    msg.setDestinationEntity(70U);
    msg.validity = 47035U;
    msg.type = 74U;
    msg.tow = 456755404U;
    msg.base_lat = 0.11972085643889374;
    msg.base_lon = 0.3214324326088698;
    msg.base_height = 0.09192014318808983;
    msg.n = 0.7891037109839485;
    msg.e = 0.558917157288126;
    msg.d = 0.8446999377020463;
    msg.v_n = 0.8430774010301145;
    msg.v_e = 0.20866370566305437;
    msg.v_d = 0.8482714713204274;
    msg.satellites = 245U;
    msg.iar_hyp = 30325U;
    msg.iar_ratio = 0.9314325802305041;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.17376960848258916);
    msg.setSource(11176U);
    msg.setSourceEntity(124U);
    msg.setDestination(35855U);
    msg.setDestinationEntity(188U);
    msg.validity = 19317U;
    msg.type = 228U;
    msg.tow = 2833223491U;
    msg.base_lat = 0.031278944051018054;
    msg.base_lon = 0.5064138066609009;
    msg.base_height = 0.20506082313744034;
    msg.n = 0.5841282438949661;
    msg.e = 0.4024721693237021;
    msg.d = 0.7978639854094364;
    msg.v_n = 0.5863999279541084;
    msg.v_e = 0.7048686572791858;
    msg.v_d = 0.12721451743300427;
    msg.satellites = 55U;
    msg.iar_hyp = 53954U;
    msg.iar_ratio = 0.025053411111118695;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRtk msg;
    msg.setTimeStamp(0.4725373485532385);
    msg.setSource(29911U);
    msg.setSourceEntity(123U);
    msg.setDestination(45191U);
    msg.setDestinationEntity(45U);
    msg.validity = 33218U;
    msg.type = 37U;
    msg.tow = 4213546589U;
    msg.base_lat = 0.9565943202591205;
    msg.base_lon = 0.8045843103319766;
    msg.base_height = 0.26913453219370376;
    msg.n = 0.09717038389784605;
    msg.e = 0.2560043900789748;
    msg.d = 0.9784866170995612;
    msg.v_n = 0.5382138421007412;
    msg.v_e = 0.3433099179100001;
    msg.v_d = 0.3579077917605822;
    msg.satellites = 49U;
    msg.iar_hyp = 36591U;
    msg.iar_ratio = 0.37657241990434076;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRtk #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.134772901441789);
    msg.setSource(3292U);
    msg.setSourceEntity(159U);
    msg.setDestination(60866U);
    msg.setDestinationEntity(104U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.9690499117763516;
    tmp_msg_0.lon = 0.5204322907575084;
    tmp_msg_0.height = 0.5835436294757347;
    tmp_msg_0.x = 0.10673147299537644;
    tmp_msg_0.y = 0.636100753377627;
    tmp_msg_0.z = 0.3833655595319987;
    tmp_msg_0.phi = 0.47817919470366343;
    tmp_msg_0.theta = 0.4413183817640538;
    tmp_msg_0.psi = 0.16585890575746465;
    tmp_msg_0.u = 0.47753848417642564;
    tmp_msg_0.v = 0.6427442076024112;
    tmp_msg_0.w = 0.780018924155003;
    tmp_msg_0.vx = 0.9924689914958889;
    tmp_msg_0.vy = 0.7301355187411032;
    tmp_msg_0.vz = 0.9313761112875762;
    tmp_msg_0.p = 0.8784828101121097;
    tmp_msg_0.q = 0.3007309301299663;
    tmp_msg_0.r = 0.007478841150619697;
    tmp_msg_0.depth = 0.8686406043384556;
    tmp_msg_0.alt = 0.2283269906209805;
    msg.state.set(tmp_msg_0);
    msg.type = 159U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.8309751241883351);
    msg.setSource(64624U);
    msg.setSourceEntity(67U);
    msg.setDestination(30084U);
    msg.setDestinationEntity(101U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.28315066290735236;
    tmp_msg_0.lon = 0.2810176731279237;
    tmp_msg_0.height = 0.4027304662663648;
    tmp_msg_0.x = 0.7110658711784156;
    tmp_msg_0.y = 0.6658033145242215;
    tmp_msg_0.z = 0.8384944801459613;
    tmp_msg_0.phi = 0.5997641193132908;
    tmp_msg_0.theta = 0.09961229954323203;
    tmp_msg_0.psi = 0.6542715826602128;
    tmp_msg_0.u = 0.11276592107985217;
    tmp_msg_0.v = 0.6925000468825183;
    tmp_msg_0.w = 0.6941043313454514;
    tmp_msg_0.vx = 0.37344384462301916;
    tmp_msg_0.vy = 0.6378928222752316;
    tmp_msg_0.vz = 0.9949319906809755;
    tmp_msg_0.p = 0.04867422062500548;
    tmp_msg_0.q = 0.6049256449233855;
    tmp_msg_0.r = 0.4010698176152898;
    tmp_msg_0.depth = 0.7265073357237691;
    tmp_msg_0.alt = 0.7889476825042642;
    msg.state.set(tmp_msg_0);
    msg.type = 44U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ExternalNavData msg;
    msg.setTimeStamp(0.39020642969895214);
    msg.setSource(29908U);
    msg.setSourceEntity(216U);
    msg.setDestination(63721U);
    msg.setDestinationEntity(168U);
    IMC::EstimatedState tmp_msg_0;
    tmp_msg_0.lat = 0.2775077407099499;
    tmp_msg_0.lon = 0.7056188160131773;
    tmp_msg_0.height = 0.8849153910775228;
    tmp_msg_0.x = 0.11783275236783886;
    tmp_msg_0.y = 0.45920869713948653;
    tmp_msg_0.z = 0.48855231201189153;
    tmp_msg_0.phi = 0.34800360747534775;
    tmp_msg_0.theta = 0.38257723022011514;
    tmp_msg_0.psi = 0.20054579791689742;
    tmp_msg_0.u = 0.6311519289707147;
    tmp_msg_0.v = 0.4618478569610638;
    tmp_msg_0.w = 0.03823813991459002;
    tmp_msg_0.vx = 0.555272731217674;
    tmp_msg_0.vy = 0.8802230763794616;
    tmp_msg_0.vz = 0.18767899687289447;
    tmp_msg_0.p = 0.051761867580990106;
    tmp_msg_0.q = 0.5907462720144606;
    tmp_msg_0.r = 0.022785163626794835;
    tmp_msg_0.depth = 0.4693032958585508;
    tmp_msg_0.alt = 0.6855770998897238;
    msg.state.set(tmp_msg_0);
    msg.type = 178U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ExternalNavData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.6974139774051085);
    msg.setSource(65196U);
    msg.setSourceEntity(82U);
    msg.setDestination(4304U);
    msg.setDestinationEntity(6U);
    msg.value = 0.5492216656021808;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.0860770404284853);
    msg.setSource(44988U);
    msg.setSourceEntity(52U);
    msg.setDestination(62241U);
    msg.setDestinationEntity(198U);
    msg.value = 0.37527962952233607;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOxygen msg;
    msg.setTimeStamp(0.3489507765919131);
    msg.setSource(49296U);
    msg.setSourceEntity(6U);
    msg.setDestination(59846U);
    msg.setDestinationEntity(97U);
    msg.value = 0.6831351682600522;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOxygen #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.34378480450540494);
    msg.setSource(34730U);
    msg.setSourceEntity(97U);
    msg.setDestination(43948U);
    msg.setDestinationEntity(126U);
    msg.value = 0.2417204100541367;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.18487982498113786);
    msg.setSource(57590U);
    msg.setSourceEntity(115U);
    msg.setDestination(3195U);
    msg.setDestinationEntity(83U);
    msg.value = 0.6595761265703328;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AirSaturation msg;
    msg.setTimeStamp(0.1646729295940207);
    msg.setSource(49387U);
    msg.setSourceEntity(188U);
    msg.setDestination(47580U);
    msg.setDestinationEntity(185U);
    msg.value = 0.6290440380784601;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AirSaturation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.8709857910675242);
    msg.setSource(16500U);
    msg.setSourceEntity(93U);
    msg.setDestination(30437U);
    msg.setDestinationEntity(154U);
    msg.value = 0.04512739794951515;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.9486880662382395);
    msg.setSource(18263U);
    msg.setSourceEntity(83U);
    msg.setDestination(23463U);
    msg.setDestinationEntity(94U);
    msg.value = 0.28284809101828245;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Throttle msg;
    msg.setTimeStamp(0.06751473100466687);
    msg.setSource(46053U);
    msg.setSourceEntity(75U);
    msg.setDestination(46545U);
    msg.setDestinationEntity(204U);
    msg.value = 0.14246091134103034;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Throttle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.09890469998368223);
    msg.setSource(62752U);
    msg.setSourceEntity(120U);
    msg.setDestination(6257U);
    msg.setDestinationEntity(166U);
    msg.value = 0.08323336245123625;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.011145843708936787);
    msg.setSource(32410U);
    msg.setSourceEntity(227U);
    msg.setDestination(3243U);
    msg.setDestinationEntity(130U);
    msg.value = 0.035983022547812826;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PH msg;
    msg.setTimeStamp(0.8508995671918951);
    msg.setSource(39495U);
    msg.setSourceEntity(33U);
    msg.setDestination(47715U);
    msg.setDestinationEntity(245U);
    msg.value = 0.8903157852577335;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PH #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.47264482712903644);
    msg.setSource(12483U);
    msg.setSourceEntity(126U);
    msg.setDestination(60808U);
    msg.setDestinationEntity(251U);
    msg.value = 0.6817602308558234;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.04294214653105055);
    msg.setSource(11911U);
    msg.setSourceEntity(59U);
    msg.setDestination(25484U);
    msg.setDestinationEntity(1U);
    msg.value = 0.31679820914225054;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Redox msg;
    msg.setTimeStamp(0.6205158725141688);
    msg.setSource(44459U);
    msg.setSourceEntity(43U);
    msg.setDestination(58454U);
    msg.setDestinationEntity(188U);
    msg.value = 0.9270969005455482;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Redox #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.779218747130132);
    msg.setSource(31721U);
    msg.setSourceEntity(176U);
    msg.setDestination(17789U);
    msg.setDestinationEntity(68U);
    msg.id = 124U;
    msg.zoom = 98U;
    msg.action = 1U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.5278205891057276);
    msg.setSource(31673U);
    msg.setSourceEntity(136U);
    msg.setDestination(24151U);
    msg.setDestinationEntity(209U);
    msg.id = 85U;
    msg.zoom = 44U;
    msg.action = 216U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CameraZoom msg;
    msg.setTimeStamp(0.6541729470980827);
    msg.setSource(24660U);
    msg.setSourceEntity(38U);
    msg.setDestination(42898U);
    msg.setDestinationEntity(54U);
    msg.id = 162U;
    msg.zoom = 208U;
    msg.action = 41U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CameraZoom #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.6588998083129701);
    msg.setSource(41494U);
    msg.setSourceEntity(224U);
    msg.setDestination(44682U);
    msg.setDestinationEntity(216U);
    msg.id = 54U;
    msg.value = 0.38438342626763;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.6880753630661227);
    msg.setSource(48694U);
    msg.setSourceEntity(160U);
    msg.setDestination(23228U);
    msg.setDestinationEntity(30U);
    msg.id = 136U;
    msg.value = 0.7889710387361658;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetThrusterActuation msg;
    msg.setTimeStamp(0.6464088758873777);
    msg.setSource(52316U);
    msg.setSourceEntity(188U);
    msg.setDestination(60667U);
    msg.setDestinationEntity(103U);
    msg.id = 170U;
    msg.value = 0.6864073157968538;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetThrusterActuation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.864988321465552);
    msg.setSource(8195U);
    msg.setSourceEntity(44U);
    msg.setDestination(7704U);
    msg.setDestinationEntity(99U);
    msg.id = 178U;
    msg.value = 0.20404846540329058;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.13104004932705748);
    msg.setSource(18459U);
    msg.setSourceEntity(239U);
    msg.setDestination(44956U);
    msg.setDestinationEntity(150U);
    msg.id = 129U;
    msg.value = 0.25860494678327595;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetServoPosition msg;
    msg.setTimeStamp(0.050466240920782224);
    msg.setSource(63105U);
    msg.setSourceEntity(232U);
    msg.setDestination(42702U);
    msg.setDestinationEntity(30U);
    msg.id = 141U;
    msg.value = 0.34500964033593406;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetServoPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.03140045692022142);
    msg.setSource(40661U);
    msg.setSourceEntity(170U);
    msg.setDestination(32393U);
    msg.setDestinationEntity(131U);
    msg.id = 184U;
    msg.angle = 0.14749140676355044;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.38202392054372325);
    msg.setSource(27545U);
    msg.setSourceEntity(165U);
    msg.setDestination(47697U);
    msg.setDestinationEntity(242U);
    msg.id = 165U;
    msg.angle = 0.1228979365813837;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetControlSurfaceDeflection msg;
    msg.setTimeStamp(0.2968860996663507);
    msg.setSource(41692U);
    msg.setSourceEntity(57U);
    msg.setDestination(35603U);
    msg.setDestinationEntity(196U);
    msg.id = 139U;
    msg.angle = 0.7486481798414847;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetControlSurfaceDeflection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.8196222654241799);
    msg.setSource(22397U);
    msg.setSourceEntity(5U);
    msg.setDestination(48677U);
    msg.setDestinationEntity(22U);
    msg.op = 214U;
    msg.actions.assign("WNFXKEBLXMWKNAHAXPTHLCVIRQAYHYDHGMJFESAGUPUJNLNNWAZYJUWFWCA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.5283346243226462);
    msg.setSource(52991U);
    msg.setSourceEntity(79U);
    msg.setDestination(33320U);
    msg.setDestinationEntity(227U);
    msg.op = 84U;
    msg.actions.assign("CIPILHSPBQZAHZMYNTXDGCHOCJEMNALWFXAGMLHUBQRNNRSSIVTFGUINHPTMCQA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActionsRequest msg;
    msg.setTimeStamp(0.9209404021674923);
    msg.setSource(3663U);
    msg.setSourceEntity(111U);
    msg.setDestination(15543U);
    msg.setDestinationEntity(32U);
    msg.op = 180U;
    msg.actions.assign("XFEQBIKTGXTFQHOZDWKZSETDUGSHTOPZZWWEAUOOXRXCLDAUOGAKNVAFENYCOUWRZWVHHXUNWVYIBDZLYCGSTNGDQHZBZQOFXMHCTWKTMHECSDVRUKPUUMWNGYRLKDVDYNHQWEGYNQPLFLQJPSRKVZPSLYYCMQLKNISKRRTDSIINHLFFARCJMXIVMBCTZPGMJAXEVORIQOI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActionsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.6516981244306705);
    msg.setSource(53011U);
    msg.setSourceEntity(46U);
    msg.setDestination(24948U);
    msg.setDestinationEntity(133U);
    msg.actions.assign("NOCTBJHKVHRODGKPOREFZENSGTJECLEVMRQQJGHXQKHFXIUVMHRDRZDPXZCFKRAOSRTWLIWFEEJOLDYOSSCPJNPNATIKBFGBHUMNACDLETMKADQMQGIYJEBZGMAVBMHOZRAEVLICWUIPKJYSPARTWIJATHYLGQSX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.3884679559568419);
    msg.setSource(16879U);
    msg.setSourceEntity(157U);
    msg.setDestination(3514U);
    msg.setDestinationEntity(195U);
    msg.actions.assign("BBGCWOZUWXOFPURBFCILVMZYAITVWLLVDMTNPHSOKQVUPYYXHZKKMOQISRWAXWIYUAGRTOENZABDNQWEDLXCWQONNLGPUQQCUUZUNKKHEAJSILMPSLTGZJVTDPKDKFIFQABVXGJSGFFZIXVCYRJDBLYEWMJJEJVJSZAXOXT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteActions msg;
    msg.setTimeStamp(0.4884213673366814);
    msg.setSource(58127U);
    msg.setSourceEntity(224U);
    msg.setDestination(47433U);
    msg.setDestinationEntity(125U);
    msg.actions.assign("CSQZVABFWWPLMAXZMWHVGQXNGGEMTCOGMVDHQELBKHCFRXBTCSYF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteActions #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.983305157807474);
    msg.setSource(20694U);
    msg.setSourceEntity(155U);
    msg.setDestination(12785U);
    msg.setDestinationEntity(37U);
    msg.button = 200U;
    msg.value = 133U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.10272171669880703);
    msg.setSource(54854U);
    msg.setSourceEntity(27U);
    msg.setDestination(9658U);
    msg.setDestinationEntity(100U);
    msg.button = 151U;
    msg.value = 117U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ButtonEvent msg;
    msg.setTimeStamp(0.5292263595421671);
    msg.setSource(2103U);
    msg.setSourceEntity(81U);
    msg.setDestination(36662U);
    msg.setDestinationEntity(64U);
    msg.button = 93U;
    msg.value = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ButtonEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.603938210988885);
    msg.setSource(3937U);
    msg.setSourceEntity(212U);
    msg.setDestination(44038U);
    msg.setDestinationEntity(180U);
    msg.op = 97U;
    msg.text.assign("PBHLKYTKZKMQZTASEUUOIPQUCJVNRLFOAQVNNKHUNIKFTPPKROGMDFLZALZACMXDEAGJSFKMAZWDTMFPOFQJLFUXMMVUYNWHYYWVQXVDXZWNWYIKLTVJFZIOHXVBEWIHRHGELEBDSCDNIY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.35387381517925354);
    msg.setSource(5608U);
    msg.setSourceEntity(40U);
    msg.setDestination(43847U);
    msg.setDestinationEntity(45U);
    msg.op = 73U;
    msg.text.assign("GHZCSUYDQYIUSRJGWKMELKINRBHXXPAKNJKUGACCPMZTQMIOBYSIRMKCQPVTHDPUVWMVEGQVCNKRZOEMQGYLFLADOJLGLJTFVYROSRTFVEZCZTLTXZTYYQWXWWGQCPYEFUHAMIVBTZMBVDQOSWFGLNUYPXAZRTHYBIIIPKRNMDFNXWNZVXJXSGFIOHPCWDOOJPUFUNRHUNXXFSLARKAQMB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LcdControl msg;
    msg.setTimeStamp(0.3666482880803318);
    msg.setSource(60375U);
    msg.setSourceEntity(225U);
    msg.setDestination(34667U);
    msg.setDestinationEntity(142U);
    msg.op = 224U;
    msg.text.assign("SRIYOASIFMRXDXZCUJJEFSQMPDSCIJQHYXOABVALVPGGKXJMFMEAACYXFOPOBBWUOQNCKXTBGUDLIBFMKVWDYL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LcdControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.2291196982167666);
    msg.setSource(45096U);
    msg.setSourceEntity(25U);
    msg.setDestination(61159U);
    msg.setDestinationEntity(47U);
    msg.op = 77U;
    msg.time_remain = 0.08885036393254342;
    msg.sched_time = 0.40945809146520606;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.28865626095677266);
    msg.setSource(17394U);
    msg.setSourceEntity(239U);
    msg.setDestination(14284U);
    msg.setDestinationEntity(56U);
    msg.op = 60U;
    msg.time_remain = 0.6061731939762908;
    msg.sched_time = 0.7611983319852798;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerOperation msg;
    msg.setTimeStamp(0.20728691775485686);
    msg.setSource(7107U);
    msg.setSourceEntity(129U);
    msg.setDestination(56241U);
    msg.setDestinationEntity(224U);
    msg.op = 44U;
    msg.time_remain = 0.05557915224842647;
    msg.sched_time = 0.9951520175900838;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.14505816760940315);
    msg.setSource(32166U);
    msg.setSourceEntity(10U);
    msg.setDestination(24681U);
    msg.setDestinationEntity(32U);
    msg.name.assign("IXEKJGXQXRBHOWUFGZUSRROJTLCEGEZOCZQAWEHMIBYYDTPKPMSVBJSIVVQRGCXLNTOHYBXKAHBFJCTSLPALWYTOUVEFMVKKF");
    msg.op = 241U;
    msg.sched_time = 0.9755579877600656;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.27130804893653515);
    msg.setSource(29285U);
    msg.setSourceEntity(167U);
    msg.setDestination(7545U);
    msg.setDestinationEntity(87U);
    msg.name.assign("RRWXOBUDRDZBKOPMKYPIKKPYUUTCJJLCGLKBGDAMNHGRALCRWEAOEUZKPX");
    msg.op = 112U;
    msg.sched_time = 0.005579866278750956;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelControl msg;
    msg.setTimeStamp(0.20072591250675564);
    msg.setSource(26783U);
    msg.setSourceEntity(12U);
    msg.setDestination(9308U);
    msg.setDestinationEntity(251U);
    msg.name.assign("FDZZIJDLXSYKCEYGHCCGESFWLXPZVRKPZHWRKJCXGVQHVCOHQKQOXTLJBKYPTRGGVQEBMUBLIDFISOQMIBDXSFMF");
    msg.op = 56U;
    msg.sched_time = 0.994593016491028;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.3725469829164214);
    msg.setSource(24238U);
    msg.setSourceEntity(242U);
    msg.setDestination(56156U);
    msg.setDestinationEntity(32U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.7106227766640648);
    msg.setSource(21584U);
    msg.setSourceEntity(61U);
    msg.setDestination(18071U);
    msg.setDestinationEntity(170U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryPowerChannelState msg;
    msg.setTimeStamp(0.6898313117398861);
    msg.setSource(8544U);
    msg.setSourceEntity(155U);
    msg.setDestination(40135U);
    msg.setDestinationEntity(225U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryPowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.7644544884825981);
    msg.setSource(705U);
    msg.setSourceEntity(215U);
    msg.setDestination(9393U);
    msg.setDestinationEntity(76U);
    msg.name.assign("DMYLYQPKUJZBFKNIOPZFQICKJHURBAOYOMZNJXCWBOEJIZSGDPAOAHUYCILFHDYQBLXLZEPQKMRKHB");
    msg.state = 35U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.9129322995470063);
    msg.setSource(33842U);
    msg.setSourceEntity(48U);
    msg.setDestination(9318U);
    msg.setDestinationEntity(103U);
    msg.name.assign("KZNMJGTJDKDMAJNMTCLPCASKBARLGOSOWWADUEXZTAPMIKYWCMWDACVHLVFXZQFGEHPMPZEUQIWUEWNTJMDOPIDSJFQUCXEXYQYYZOATRATUCTBXZDOUNGVWWUJQEBHOZYNVBTFRIRYFGKGVHJOGDVHOCYGVQRGFIVYXRNSLHSTWPKWPMEKQJOUFPVXFCBN");
    msg.state = 121U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PowerChannelState msg;
    msg.setTimeStamp(0.5792163720019083);
    msg.setSource(61839U);
    msg.setSourceEntity(161U);
    msg.setDestination(59053U);
    msg.setDestinationEntity(155U);
    msg.name.assign("LZPBVXQUEBNHDEBHPOZVPBNUXFTOEUMZAKVNNYIQGMSQYTHUJCAPRFXLTP");
    msg.state = 246U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PowerChannelState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.021081175894643756);
    msg.setSource(10494U);
    msg.setSourceEntity(118U);
    msg.setDestination(14857U);
    msg.setDestinationEntity(197U);
    msg.name.assign("HJBRRIRLDCVYLDFWIGJTWOBRBPMKSTHKPADUFZMCGYFDVRAGRHOIPECNPQBCEPWPSKOSNGDXHLOBULRXXPB");
    msg.value = 16U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.7571758632930965);
    msg.setSource(9466U);
    msg.setSourceEntity(112U);
    msg.setDestination(21295U);
    msg.setDestinationEntity(6U);
    msg.name.assign("KQMBDDPBFWBRORTVJXNVJOGMHKITBUENMJCMKGOGTJMZPFMXWDYHTUSIHVMZYSSQJFQJPPCNIRUSUMDLLEGKOSSWKOGQFUQKVENNJAYOGERCPRQZTQEJHHXXEUSNFDHYRBJCAPULQZTIQWXJHCAKWMWLFCUDIBZYCALHASAMVWBOEOZKWDLNLFTRBVVXUEDACOIQSVWFLYCZYHPLYICXTVANLPZIYPXGDGIFRREAZXNG");
    msg.value = 196U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LedBrightness msg;
    msg.setTimeStamp(0.697341099126961);
    msg.setSource(52682U);
    msg.setSourceEntity(109U);
    msg.setDestination(46841U);
    msg.setDestinationEntity(24U);
    msg.name.assign("PRNTPHFSNXRDR");
    msg.value = 3U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.6401934988345277);
    msg.setSource(5965U);
    msg.setSourceEntity(126U);
    msg.setDestination(42797U);
    msg.setDestinationEntity(74U);
    msg.name.assign("NJMSXCSXLSIEQTGMVXARNFJPMOWMBBUQETPBJFWQNOLQKDOMHJRZDUZRNDTYV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.012922107864182242);
    msg.setSource(10055U);
    msg.setSourceEntity(94U);
    msg.setDestination(37104U);
    msg.setDestinationEntity(198U);
    msg.name.assign("PUCOTOTPMJQHWXHHDDXMUJRRCXMILOQNSATZGYFGZDHKKLFFVXKGUBGUZEXKRXIHSQYASVTHISNTBCOWICRMAZVNSDQFRRIKPTVVJMUENBIENMHLBWFCIIQGLVEFYVAYCXHQBOPYDTJFXSJDUAJELCKPNCCAFYPFOG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryLedBrightness msg;
    msg.setTimeStamp(0.3518917617592092);
    msg.setSource(36437U);
    msg.setSourceEntity(29U);
    msg.setDestination(64139U);
    msg.setDestinationEntity(117U);
    msg.name.assign("NCXLADAUEDOFKLKD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.8716444106552174);
    msg.setSource(15834U);
    msg.setSourceEntity(234U);
    msg.setDestination(15396U);
    msg.setDestinationEntity(228U);
    msg.name.assign("ZWHDCDTJXVNARMAIGFNYMQHQHKUFDPBKSTMZTYRCJYATFGVYCUEWYJVMLJRMYTZTYWESKRJIMWSFOZNCALZXPYUASEKGQBKBOQCHUUKEBVWSZUIFT");
    msg.value = 30U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.8212873874231641);
    msg.setSource(43950U);
    msg.setSourceEntity(221U);
    msg.setDestination(55801U);
    msg.setDestinationEntity(210U);
    msg.name.assign("UACWXRVVWHINJJGXEOMWRCIZYAHHOGYBBLOKDYLKWMUSZDAKSVTQNDKBMHRITXKPGTSMPUCYWBD");
    msg.value = 107U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetLedBrightness msg;
    msg.setTimeStamp(0.5759176373270363);
    msg.setSource(39295U);
    msg.setSourceEntity(250U);
    msg.setDestination(7988U);
    msg.setDestinationEntity(114U);
    msg.name.assign("ALNPJIJYOOXFETO");
    msg.value = 106U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetLedBrightness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.976757213631118);
    msg.setSource(50535U);
    msg.setSourceEntity(185U);
    msg.setDestination(63097U);
    msg.setDestinationEntity(27U);
    msg.id = 97U;
    msg.period = 3428097232U;
    msg.duty_cycle = 2887205144U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.8227660082241002);
    msg.setSource(25648U);
    msg.setSourceEntity(108U);
    msg.setDestination(12306U);
    msg.setDestinationEntity(252U);
    msg.id = 233U;
    msg.period = 702809318U;
    msg.duty_cycle = 352934353U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetPWM msg;
    msg.setTimeStamp(0.8792286844954386);
    msg.setSource(20100U);
    msg.setSourceEntity(1U);
    msg.setDestination(29613U);
    msg.setDestinationEntity(71U);
    msg.id = 148U;
    msg.period = 3848041318U;
    msg.duty_cycle = 1528973819U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetPWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.8035266080807337);
    msg.setSource(56366U);
    msg.setSourceEntity(236U);
    msg.setDestination(9532U);
    msg.setDestinationEntity(71U);
    msg.id = 220U;
    msg.period = 2510075577U;
    msg.duty_cycle = 3793814669U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.16936743101604257);
    msg.setSource(56586U);
    msg.setSourceEntity(126U);
    msg.setDestination(40117U);
    msg.setDestinationEntity(146U);
    msg.id = 35U;
    msg.period = 1259936407U;
    msg.duty_cycle = 1289167646U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PWM msg;
    msg.setTimeStamp(0.06893165950618152);
    msg.setSource(52824U);
    msg.setSourceEntity(213U);
    msg.setDestination(46461U);
    msg.setDestinationEntity(169U);
    msg.id = 146U;
    msg.period = 2787119817U;
    msg.duty_cycle = 4232431100U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PWM #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.82771116845846);
    msg.setSource(40339U);
    msg.setSourceEntity(193U);
    msg.setDestination(57137U);
    msg.setDestinationEntity(217U);
    msg.lat = 0.662945659898192;
    msg.lon = 0.5877278609058944;
    msg.height = 0.2979573035330585;
    msg.x = 0.12094214912889112;
    msg.y = 0.7377647168185006;
    msg.z = 0.33390395677723717;
    msg.phi = 0.22752372687253486;
    msg.theta = 0.3349403580466602;
    msg.psi = 0.6554475399121208;
    msg.u = 0.9302820761328615;
    msg.v = 0.6650780361349349;
    msg.w = 0.8296025538945304;
    msg.vx = 0.8155373281626274;
    msg.vy = 0.7367101107538557;
    msg.vz = 0.27887369528974215;
    msg.p = 0.2960877492130346;
    msg.q = 0.15182207232839984;
    msg.r = 0.6185991889166791;
    msg.depth = 0.18608140417074803;
    msg.alt = 0.6722394911201475;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.3789530184111183);
    msg.setSource(22718U);
    msg.setSourceEntity(209U);
    msg.setDestination(16037U);
    msg.setDestinationEntity(206U);
    msg.lat = 0.45645382511495547;
    msg.lon = 0.3819319307593958;
    msg.height = 0.14468975961342612;
    msg.x = 0.19896340693876513;
    msg.y = 0.15665106994616662;
    msg.z = 0.7826230856948289;
    msg.phi = 0.6102893017822464;
    msg.theta = 0.9211672577130502;
    msg.psi = 0.8195673467207905;
    msg.u = 0.9020649631197881;
    msg.v = 0.1780943496669346;
    msg.w = 0.1487228237289131;
    msg.vx = 0.44829157243211737;
    msg.vy = 0.13170712034895815;
    msg.vz = 0.19159971101771422;
    msg.p = 0.6482633525266838;
    msg.q = 0.8512216460659779;
    msg.r = 0.7204327801871552;
    msg.depth = 0.3357878965579376;
    msg.alt = 0.6317561654878248;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedState msg;
    msg.setTimeStamp(0.0853351132439889);
    msg.setSource(56415U);
    msg.setSourceEntity(187U);
    msg.setDestination(14024U);
    msg.setDestinationEntity(74U);
    msg.lat = 0.06421863203043365;
    msg.lon = 0.7513816381344333;
    msg.height = 0.2795260864680945;
    msg.x = 0.2087082767688676;
    msg.y = 0.6879596871918657;
    msg.z = 0.22017766288245655;
    msg.phi = 0.6774798952438132;
    msg.theta = 0.16377095665575536;
    msg.psi = 0.9371764422161065;
    msg.u = 0.18346434471478323;
    msg.v = 0.07738725401921887;
    msg.w = 0.770895828988186;
    msg.vx = 0.5837655398640814;
    msg.vy = 0.46872414751885005;
    msg.vz = 0.7198621692418036;
    msg.p = 0.18864577090685664;
    msg.q = 0.1014489678456365;
    msg.r = 0.11205620534860339;
    msg.depth = 0.5088767225094699;
    msg.alt = 0.09525038765897387;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.5814435779751794);
    msg.setSource(15074U);
    msg.setSourceEntity(58U);
    msg.setDestination(22440U);
    msg.setDestinationEntity(196U);
    msg.x = 0.1778724059647242;
    msg.y = 0.6475349931735834;
    msg.z = 0.46040781003002795;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.4002065843248859);
    msg.setSource(32121U);
    msg.setSourceEntity(158U);
    msg.setDestination(39611U);
    msg.setDestinationEntity(120U);
    msg.x = 0.23495731727160662;
    msg.y = 0.7837108975975728;
    msg.z = 0.1804712207954835;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedStreamVelocity msg;
    msg.setTimeStamp(0.49836344650541387);
    msg.setSource(63700U);
    msg.setSourceEntity(128U);
    msg.setDestination(6712U);
    msg.setDestinationEntity(9U);
    msg.x = 0.013780220274283939;
    msg.y = 0.5608896123331327;
    msg.z = 0.1383039619070442;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.19393547949449252);
    msg.setSource(34002U);
    msg.setSourceEntity(254U);
    msg.setDestination(40910U);
    msg.setDestinationEntity(1U);
    msg.value = 0.770186057176792;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.665334943269581);
    msg.setSource(3298U);
    msg.setSourceEntity(197U);
    msg.setDestination(17073U);
    msg.setDestinationEntity(223U);
    msg.value = 0.7779894835831487;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IndicatedSpeed msg;
    msg.setTimeStamp(0.21238075384075827);
    msg.setSource(34787U);
    msg.setSourceEntity(156U);
    msg.setDestination(22842U);
    msg.setDestinationEntity(106U);
    msg.value = 0.7210904679945184;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IndicatedSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.9866553251926347);
    msg.setSource(28620U);
    msg.setSourceEntity(152U);
    msg.setDestination(53677U);
    msg.setDestinationEntity(195U);
    msg.value = 0.3061729373625456;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.05969067451036392);
    msg.setSource(29379U);
    msg.setSourceEntity(169U);
    msg.setDestination(17247U);
    msg.setDestinationEntity(197U);
    msg.value = 0.47977617000379946;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrueSpeed msg;
    msg.setTimeStamp(0.31525138846087963);
    msg.setSource(13418U);
    msg.setSourceEntity(8U);
    msg.setDestination(32151U);
    msg.setDestinationEntity(182U);
    msg.value = 0.07085112170028629;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrueSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.38562094197445707);
    msg.setSource(44157U);
    msg.setSourceEntity(232U);
    msg.setDestination(27458U);
    msg.setDestinationEntity(154U);
    msg.x = 0.3891157675939396;
    msg.y = 0.5050562266703558;
    msg.z = 0.6270275214415869;
    msg.phi = 0.9097538128930367;
    msg.theta = 0.06207241001195318;
    msg.psi = 0.2813605466639896;
    msg.p = 0.2984996244640894;
    msg.q = 0.5760753409839087;
    msg.r = 0.8310914967109087;
    msg.u = 0.6600857772320406;
    msg.v = 0.4177533923165053;
    msg.w = 0.07401571839465404;
    msg.bias_psi = 0.6393807999085875;
    msg.bias_r = 0.32999161017560985;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.46315276022399143);
    msg.setSource(29998U);
    msg.setSourceEntity(170U);
    msg.setDestination(23575U);
    msg.setDestinationEntity(176U);
    msg.x = 0.9288632373306185;
    msg.y = 0.9270456172554411;
    msg.z = 0.5679281178010445;
    msg.phi = 0.5035808073050996;
    msg.theta = 0.3835105609873183;
    msg.psi = 0.6555406383436103;
    msg.p = 0.8974711121621795;
    msg.q = 0.4556290825999596;
    msg.r = 0.5128953571680228;
    msg.u = 0.14488124144322623;
    msg.v = 0.7914083944918374;
    msg.w = 0.4553003279382145;
    msg.bias_psi = 0.8381841159119449;
    msg.bias_r = 0.408078606096411;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationUncertainty msg;
    msg.setTimeStamp(0.3029048864217233);
    msg.setSource(17672U);
    msg.setSourceEntity(51U);
    msg.setDestination(43993U);
    msg.setDestinationEntity(198U);
    msg.x = 0.860647747308794;
    msg.y = 0.7094993538662274;
    msg.z = 0.08007403399582302;
    msg.phi = 0.7054196974601628;
    msg.theta = 0.8573315191161464;
    msg.psi = 0.17515176664384557;
    msg.p = 0.8329896215308874;
    msg.q = 0.24824312371772073;
    msg.r = 0.3208202494224073;
    msg.u = 0.38968071865431264;
    msg.v = 0.733147003814317;
    msg.w = 0.6370842933744848;
    msg.bias_psi = 0.27283868519493526;
    msg.bias_r = 0.835957275882659;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationUncertainty #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.4384599118107392);
    msg.setSource(32249U);
    msg.setSourceEntity(38U);
    msg.setDestination(6234U);
    msg.setDestinationEntity(251U);
    msg.bias_psi = 0.33410383892120754;
    msg.bias_r = 0.18982755663793838;
    msg.cog = 0.4291874626095167;
    msg.cyaw = 0.6285332865969762;
    msg.lbl_rej_level = 0.7980266688684488;
    msg.gps_rej_level = 0.5091936170336862;
    msg.custom_x = 0.2182523878287368;
    msg.custom_y = 0.8855280896366605;
    msg.custom_z = 0.8380655165281868;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.859416471313867);
    msg.setSource(55318U);
    msg.setSourceEntity(214U);
    msg.setDestination(44108U);
    msg.setDestinationEntity(121U);
    msg.bias_psi = 0.7078387408027655;
    msg.bias_r = 0.25542222206952114;
    msg.cog = 0.2165573082180937;
    msg.cyaw = 0.26232712360811117;
    msg.lbl_rej_level = 0.5276293290127494;
    msg.gps_rej_level = 0.26112205399666044;
    msg.custom_x = 0.7911893784330878;
    msg.custom_y = 0.4021628948584989;
    msg.custom_z = 0.7488037893635878;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NavigationData msg;
    msg.setTimeStamp(0.8331404981436991);
    msg.setSource(36411U);
    msg.setSourceEntity(98U);
    msg.setDestination(44211U);
    msg.setDestinationEntity(99U);
    msg.bias_psi = 0.9559288100794193;
    msg.bias_r = 0.5986901505883463;
    msg.cog = 0.05319121242942593;
    msg.cyaw = 0.7855559157036495;
    msg.lbl_rej_level = 0.16962682955596253;
    msg.gps_rej_level = 0.8414229072340101;
    msg.custom_x = 0.011896971220074826;
    msg.custom_y = 0.31168584340675753;
    msg.custom_z = 0.9956685755039735;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NavigationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.620193506705156);
    msg.setSource(8171U);
    msg.setSourceEntity(61U);
    msg.setDestination(54673U);
    msg.setDestinationEntity(168U);
    msg.utc_time = 0.5355123464079738;
    msg.reason = 31U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.5943338778627842);
    msg.setSource(62546U);
    msg.setSourceEntity(254U);
    msg.setDestination(51019U);
    msg.setDestinationEntity(223U);
    msg.utc_time = 0.6429082231502212;
    msg.reason = 214U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpsFixRejection msg;
    msg.setTimeStamp(0.8684189568707371);
    msg.setSource(20434U);
    msg.setSourceEntity(215U);
    msg.setDestination(22264U);
    msg.setDestinationEntity(7U);
    msg.utc_time = 0.2813211112905799;
    msg.reason = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpsFixRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.7723352089749728);
    msg.setSource(7159U);
    msg.setSourceEntity(111U);
    msg.setDestination(11618U);
    msg.setDestinationEntity(85U);
    msg.id = 251U;
    msg.range = 0.8315778252237314;
    msg.acceptance = 157U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.5343353036970406);
    msg.setSource(11951U);
    msg.setSourceEntity(158U);
    msg.setDestination(17146U);
    msg.setDestinationEntity(231U);
    msg.id = 59U;
    msg.range = 0.8124755017387438;
    msg.acceptance = 131U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblRangeAcceptance msg;
    msg.setTimeStamp(0.42945848111488416);
    msg.setSource(40020U);
    msg.setSourceEntity(218U);
    msg.setDestination(1644U);
    msg.setDestinationEntity(10U);
    msg.id = 30U;
    msg.range = 0.8401913013910598;
    msg.acceptance = 209U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblRangeAcceptance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.15501068026346543);
    msg.setSource(40341U);
    msg.setSourceEntity(242U);
    msg.setDestination(35014U);
    msg.setDestinationEntity(19U);
    msg.type = 156U;
    msg.reason = 116U;
    msg.value = 0.5790279565256438;
    msg.timestep = 0.15703101090294513;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.7619689305923056);
    msg.setSource(57140U);
    msg.setSourceEntity(5U);
    msg.setDestination(31992U);
    msg.setDestinationEntity(203U);
    msg.type = 118U;
    msg.reason = 14U;
    msg.value = 0.01534208186545738;
    msg.timestep = 0.6066336924791483;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DvlRejection msg;
    msg.setTimeStamp(0.01689407314253999);
    msg.setSource(49271U);
    msg.setSourceEntity(137U);
    msg.setDestination(32859U);
    msg.setDestinationEntity(99U);
    msg.type = 19U;
    msg.reason = 79U;
    msg.value = 0.8965435144329824;
    msg.timestep = 0.7879867909071406;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DvlRejection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.8502415032825045);
    msg.setSource(3159U);
    msg.setSourceEntity(91U);
    msg.setDestination(41328U);
    msg.setDestinationEntity(107U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("JYHVIEBDYDMEVAQULVULACMQRCXRRAGSTGTHYJSGVNBNYNXCVWIRKKZQVVURNYHPU");
    tmp_msg_0.lat = 0.7538246484086848;
    tmp_msg_0.lon = 0.6433369920523049;
    tmp_msg_0.depth = 0.8342694745288339;
    tmp_msg_0.query_channel = 142U;
    tmp_msg_0.reply_channel = 101U;
    tmp_msg_0.transponder_delay = 225U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.369754917371237;
    msg.y = 0.017910563530369017;
    msg.var_x = 0.5913115407127029;
    msg.var_y = 0.8423732824624466;
    msg.distance = 0.0652646508706286;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.03001750338471898);
    msg.setSource(1207U);
    msg.setSourceEntity(188U);
    msg.setDestination(15517U);
    msg.setDestinationEntity(96U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("AUWPHNPBQMZWVSTZQMKUBELNJQMVILKEUFLTMASCKGYOLBUSZYFVHJRBEEFSIBOPTXIITBJIJRHTSDNOHWAZCTVOEQZQFPRTWYCVLBOCJRRFMNKNTNOSDGQPQLXGXZYRKZZGNOXXMHYICXOVEDAPMLFSCJFKKEWUFONPVGLGH");
    tmp_msg_0.lat = 0.28057001896291256;
    tmp_msg_0.lon = 0.2683846850986177;
    tmp_msg_0.depth = 0.33321338904598674;
    tmp_msg_0.query_channel = 126U;
    tmp_msg_0.reply_channel = 145U;
    tmp_msg_0.transponder_delay = 243U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.624689092553744;
    msg.y = 0.042665543376984694;
    msg.var_x = 0.6151334757284702;
    msg.var_y = 0.4027768439759799;
    msg.distance = 0.45778279665448984;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LblEstimate msg;
    msg.setTimeStamp(0.4673835972732232);
    msg.setSource(32349U);
    msg.setSourceEntity(245U);
    msg.setDestination(29740U);
    msg.setDestinationEntity(222U);
    IMC::LblBeacon tmp_msg_0;
    tmp_msg_0.beacon.assign("KLJLDOQIFCKEJJSRZNZAEZDFYLOKWUNVZERXRBARABKGHYMPECULCXQTUSMHWGMDFDBLEDTPWFXCBAMJUFPDTCYZXROXEMAHEILPKCURHFQPRKLAAVHNKWXWQEFQTSMRZBIEMEYWSMPHCQQUHXYCYVSWG");
    tmp_msg_0.lat = 0.12360856936099218;
    tmp_msg_0.lon = 0.05630876951664998;
    tmp_msg_0.depth = 0.6842383052946635;
    tmp_msg_0.query_channel = 91U;
    tmp_msg_0.reply_channel = 122U;
    tmp_msg_0.transponder_delay = 228U;
    msg.beacon.set(tmp_msg_0);
    msg.x = 0.8540245963159993;
    msg.y = 0.8578324340534739;
    msg.var_x = 0.36437285034406564;
    msg.var_y = 0.9914896747303025;
    msg.distance = 0.798802341055089;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LblEstimate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.9600748380205023);
    msg.setSource(31606U);
    msg.setSourceEntity(115U);
    msg.setDestination(60605U);
    msg.setDestinationEntity(46U);
    msg.state = 192U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.7567070861132347);
    msg.setSource(28075U);
    msg.setSourceEntity(74U);
    msg.setDestination(50153U);
    msg.setDestinationEntity(251U);
    msg.state = 122U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AlignmentState msg;
    msg.setTimeStamp(0.02593462842040406);
    msg.setSource(1960U);
    msg.setSourceEntity(242U);
    msg.setDestination(63094U);
    msg.setDestinationEntity(59U);
    msg.state = 34U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AlignmentState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.28496079531135154);
    msg.setSource(40706U);
    msg.setSourceEntity(146U);
    msg.setDestination(34672U);
    msg.setDestinationEntity(173U);
    msg.x = 0.629038508793971;
    msg.y = 0.06475214490638825;
    msg.z = 0.3143440849905943;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.3101288075390122);
    msg.setSource(46167U);
    msg.setSourceEntity(189U);
    msg.setDestination(11824U);
    msg.setDestinationEntity(125U);
    msg.x = 0.900900856438343;
    msg.y = 0.6952279607123023;
    msg.z = 0.5530402039863862;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GroupStreamVelocity msg;
    msg.setTimeStamp(0.407020854465482);
    msg.setSource(57024U);
    msg.setSourceEntity(234U);
    msg.setDestination(4518U);
    msg.setDestinationEntity(69U);
    msg.x = 0.2115592368520931;
    msg.y = 0.2896711436228706;
    msg.z = 0.4324973616910357;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GroupStreamVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.9765022683378362);
    msg.setSource(62179U);
    msg.setSourceEntity(26U);
    msg.setDestination(43453U);
    msg.setDestinationEntity(179U);
    msg.va = 0.42204435802658435;
    msg.aoa = 0.3170253729764836;
    msg.ssa = 0.36640205627553424;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.0037422099727034697);
    msg.setSource(50753U);
    msg.setSourceEntity(188U);
    msg.setDestination(32328U);
    msg.setDestinationEntity(141U);
    msg.va = 0.8764198138921802;
    msg.aoa = 0.5278959695534361;
    msg.ssa = 0.055930082838948625;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Airflow msg;
    msg.setTimeStamp(0.6231317761738479);
    msg.setSource(38259U);
    msg.setSourceEntity(215U);
    msg.setDestination(51455U);
    msg.setDestinationEntity(55U);
    msg.va = 0.9785276115714646;
    msg.aoa = 0.3800174905118944;
    msg.ssa = 0.4600176721315832;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Airflow #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.2245316485613672);
    msg.setSource(37370U);
    msg.setSourceEntity(11U);
    msg.setDestination(10443U);
    msg.setDestinationEntity(241U);
    msg.value = 0.48819406865317216;
    msg.off = 0.5474358206267964;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.3119409502310875);
    msg.setSource(19946U);
    msg.setSourceEntity(85U);
    msg.setDestination(52907U);
    msg.setDestinationEntity(57U);
    msg.value = 0.7928009724747574;
    msg.off = 0.9451535195942297;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeading msg;
    msg.setTimeStamp(0.20166685675909468);
    msg.setSource(8076U);
    msg.setSourceEntity(246U);
    msg.setDestination(41068U);
    msg.setDestinationEntity(229U);
    msg.value = 0.9942557368036885;
    msg.off = 0.748769523617561;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeading #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.31937144910161197);
    msg.setSource(54231U);
    msg.setSourceEntity(9U);
    msg.setDestination(57008U);
    msg.setDestinationEntity(165U);
    msg.value = 0.4702559967406682;
    msg.z_units = 206U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.6868007993280507);
    msg.setSource(47905U);
    msg.setSourceEntity(24U);
    msg.setDestination(36252U);
    msg.setDestinationEntity(206U);
    msg.value = 0.9838895671442176;
    msg.z_units = 101U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredZ msg;
    msg.setTimeStamp(0.7105833905307132);
    msg.setSource(2068U);
    msg.setSourceEntity(31U);
    msg.setDestination(44694U);
    msg.setDestinationEntity(149U);
    msg.value = 0.5345309156223322;
    msg.z_units = 198U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredZ #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.29195703085696345);
    msg.setSource(23504U);
    msg.setSourceEntity(97U);
    msg.setDestination(21993U);
    msg.setDestinationEntity(122U);
    msg.value = 0.8444021060722516;
    msg.speed_units = 170U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.5274272986100619);
    msg.setSource(12900U);
    msg.setSourceEntity(132U);
    msg.setDestination(61056U);
    msg.setDestinationEntity(151U);
    msg.value = 0.25421799762035857;
    msg.speed_units = 199U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredSpeed msg;
    msg.setTimeStamp(0.29091751486362416);
    msg.setSource(41663U);
    msg.setSourceEntity(17U);
    msg.setDestination(14160U);
    msg.setDestinationEntity(209U);
    msg.value = 0.6646058637499377;
    msg.speed_units = 77U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredSpeed #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.219759697310965);
    msg.setSource(48405U);
    msg.setSourceEntity(75U);
    msg.setDestination(20478U);
    msg.setDestinationEntity(151U);
    msg.value = 0.869146774337251;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.41028783853618256);
    msg.setSource(29693U);
    msg.setSourceEntity(227U);
    msg.setDestination(62988U);
    msg.setDestinationEntity(91U);
    msg.value = 0.17130007760012256;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredRoll msg;
    msg.setTimeStamp(0.21405625066480582);
    msg.setSource(9092U);
    msg.setSourceEntity(106U);
    msg.setDestination(3577U);
    msg.setDestinationEntity(139U);
    msg.value = 0.27020507111921355;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredRoll #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.03885943838540562);
    msg.setSource(44381U);
    msg.setSourceEntity(206U);
    msg.setDestination(3368U);
    msg.setDestinationEntity(180U);
    msg.value = 0.046676184985891545;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.4561512941726439);
    msg.setSource(38130U);
    msg.setSourceEntity(241U);
    msg.setDestination(29390U);
    msg.setDestinationEntity(127U);
    msg.value = 0.5810509702463015;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPitch msg;
    msg.setTimeStamp(0.28259253694547837);
    msg.setSource(62976U);
    msg.setSourceEntity(71U);
    msg.setDestination(18225U);
    msg.setDestinationEntity(50U);
    msg.value = 0.845388890214845;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPitch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.7548526049566207);
    msg.setSource(53372U);
    msg.setSourceEntity(13U);
    msg.setDestination(51477U);
    msg.setDestinationEntity(34U);
    msg.value = 0.04304313307755547;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.24430331442975972);
    msg.setSource(54076U);
    msg.setSourceEntity(29U);
    msg.setDestination(61998U);
    msg.setDestinationEntity(210U);
    msg.value = 0.5760585689550803;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVerticalRate msg;
    msg.setTimeStamp(0.33413605253131706);
    msg.setSource(4604U);
    msg.setSourceEntity(98U);
    msg.setDestination(28603U);
    msg.setDestinationEntity(229U);
    msg.value = 0.5649892824998068;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVerticalRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.9340630817845945);
    msg.setSource(40453U);
    msg.setSourceEntity(248U);
    msg.setDestination(22774U);
    msg.setDestinationEntity(8U);
    msg.path_ref = 823214415U;
    msg.start_lat = 0.06653276112667406;
    msg.start_lon = 0.1453502483485971;
    msg.start_z = 0.027772081285030947;
    msg.start_z_units = 254U;
    msg.end_lat = 0.5853026990958263;
    msg.end_lon = 0.9599544241965008;
    msg.end_z = 0.20752148076246024;
    msg.end_z_units = 245U;
    msg.speed = 0.6908449000873711;
    msg.speed_units = 91U;
    msg.lradius = 0.6433100036322674;
    msg.flags = 164U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.4447256858447759);
    msg.setSource(12171U);
    msg.setSourceEntity(46U);
    msg.setDestination(44120U);
    msg.setDestinationEntity(198U);
    msg.path_ref = 2900271030U;
    msg.start_lat = 0.14433884609857262;
    msg.start_lon = 0.3483878172319388;
    msg.start_z = 0.9800051819648511;
    msg.start_z_units = 230U;
    msg.end_lat = 0.9771098725369637;
    msg.end_lon = 0.5340251683183181;
    msg.end_z = 0.40301501077382296;
    msg.end_z_units = 121U;
    msg.speed = 0.11905751546686316;
    msg.speed_units = 196U;
    msg.lradius = 0.10205075884041281;
    msg.flags = 233U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredPath msg;
    msg.setTimeStamp(0.7303714285143914);
    msg.setSource(62541U);
    msg.setSourceEntity(251U);
    msg.setDestination(31100U);
    msg.setDestinationEntity(59U);
    msg.path_ref = 2883749094U;
    msg.start_lat = 0.6088868508730724;
    msg.start_lon = 0.776646597037795;
    msg.start_z = 0.6598990206121674;
    msg.start_z_units = 145U;
    msg.end_lat = 0.8985601187122702;
    msg.end_lon = 0.3476336388023207;
    msg.end_z = 0.9094563891107821;
    msg.end_z_units = 131U;
    msg.speed = 0.6253776459665514;
    msg.speed_units = 146U;
    msg.lradius = 0.6202121314010914;
    msg.flags = 68U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.1551299711247619);
    msg.setSource(50516U);
    msg.setSourceEntity(72U);
    msg.setDestination(25241U);
    msg.setDestinationEntity(79U);
    msg.x = 0.06357330495947022;
    msg.y = 0.11178540357732725;
    msg.z = 0.6737523659458984;
    msg.k = 0.10590725715378668;
    msg.m = 0.80271222862253;
    msg.n = 0.02817174849637838;
    msg.flags = 119U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.6947293473743381);
    msg.setSource(36338U);
    msg.setSourceEntity(183U);
    msg.setDestination(52890U);
    msg.setDestinationEntity(78U);
    msg.x = 0.19577229979818844;
    msg.y = 0.9627978366208843;
    msg.z = 0.48371507827733673;
    msg.k = 0.6224269448931913;
    msg.m = 0.08013823897422978;
    msg.n = 0.7173937796945324;
    msg.flags = 136U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredControl msg;
    msg.setTimeStamp(0.6880361085335519);
    msg.setSource(36845U);
    msg.setSourceEntity(130U);
    msg.setDestination(38963U);
    msg.setDestinationEntity(116U);
    msg.x = 0.9869833225695236;
    msg.y = 0.17113705079863206;
    msg.z = 0.1340744844789794;
    msg.k = 0.0937380622296855;
    msg.m = 0.3583695787401706;
    msg.n = 0.9375149301598443;
    msg.flags = 234U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.8105094758251572);
    msg.setSource(27442U);
    msg.setSourceEntity(212U);
    msg.setDestination(53305U);
    msg.setDestinationEntity(19U);
    msg.value = 0.8326477978108877;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.8180964873024572);
    msg.setSource(1257U);
    msg.setSourceEntity(184U);
    msg.setDestination(48689U);
    msg.setDestinationEntity(118U);
    msg.value = 0.27279557916215913;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredHeadingRate msg;
    msg.setTimeStamp(0.6787608072931202);
    msg.setSource(63476U);
    msg.setSourceEntity(207U);
    msg.setDestination(26589U);
    msg.setDestinationEntity(18U);
    msg.value = 0.12420965998655509;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredHeadingRate #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.8278494908283404);
    msg.setSource(1713U);
    msg.setSourceEntity(72U);
    msg.setDestination(342U);
    msg.setDestinationEntity(108U);
    msg.u = 0.09039718066567437;
    msg.v = 0.7196451219636721;
    msg.w = 0.9241998086330652;
    msg.p = 0.3778763912921902;
    msg.q = 0.579577306317548;
    msg.r = 0.08486088825950822;
    msg.flags = 116U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.7543870779334582);
    msg.setSource(45476U);
    msg.setSourceEntity(215U);
    msg.setDestination(26977U);
    msg.setDestinationEntity(54U);
    msg.u = 0.5069220992891172;
    msg.v = 0.902639375653196;
    msg.w = 0.8855049938624366;
    msg.p = 0.8862835235258074;
    msg.q = 0.003595439982131854;
    msg.r = 0.08458898542130522;
    msg.flags = 67U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredVelocity msg;
    msg.setTimeStamp(0.8044157389298189);
    msg.setSource(50237U);
    msg.setSourceEntity(244U);
    msg.setDestination(421U);
    msg.setDestinationEntity(198U);
    msg.u = 0.06720718716018403;
    msg.v = 0.5853991028487073;
    msg.w = 0.29492540375210086;
    msg.p = 0.7302154706733446;
    msg.q = 0.0467785045365432;
    msg.r = 0.05159109026700259;
    msg.flags = 59U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.9496701212942005);
    msg.setSource(39661U);
    msg.setSourceEntity(140U);
    msg.setDestination(12890U);
    msg.setDestinationEntity(111U);
    msg.path_ref = 3902204286U;
    msg.start_lat = 0.025740548368878957;
    msg.start_lon = 0.14184452864797026;
    msg.start_z = 0.9716292015315282;
    msg.start_z_units = 18U;
    msg.end_lat = 0.7696843911092306;
    msg.end_lon = 0.030893981818893912;
    msg.end_z = 0.7083545111888098;
    msg.end_z_units = 107U;
    msg.lradius = 0.14005077524957543;
    msg.flags = 235U;
    msg.x = 0.48410928481864923;
    msg.y = 0.5891085328634857;
    msg.z = 0.48643529505091365;
    msg.vx = 0.8367951902129118;
    msg.vy = 0.27859228487742693;
    msg.vz = 0.04809176211435051;
    msg.course_error = 0.9207612917455971;
    msg.eta = 46561U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.07711769181342953);
    msg.setSource(58816U);
    msg.setSourceEntity(162U);
    msg.setDestination(51223U);
    msg.setDestinationEntity(103U);
    msg.path_ref = 264424205U;
    msg.start_lat = 0.04193143854795467;
    msg.start_lon = 0.5157368317276773;
    msg.start_z = 0.2740663077732244;
    msg.start_z_units = 244U;
    msg.end_lat = 0.2797775155712068;
    msg.end_lon = 0.876910458591709;
    msg.end_z = 0.2333226984217921;
    msg.end_z_units = 155U;
    msg.lradius = 0.40077090056567666;
    msg.flags = 181U;
    msg.x = 0.2514301199607253;
    msg.y = 0.21605833669134922;
    msg.z = 0.6806974355887987;
    msg.vx = 0.38590968913855306;
    msg.vy = 0.40081598111150196;
    msg.vz = 0.014077720580669917;
    msg.course_error = 0.2909537464388866;
    msg.eta = 54693U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathControlState msg;
    msg.setTimeStamp(0.3556148501609535);
    msg.setSource(3199U);
    msg.setSourceEntity(12U);
    msg.setDestination(54198U);
    msg.setDestinationEntity(81U);
    msg.path_ref = 1679039079U;
    msg.start_lat = 0.5363781626757513;
    msg.start_lon = 0.6436846252886581;
    msg.start_z = 0.7169059372304637;
    msg.start_z_units = 105U;
    msg.end_lat = 0.40084017477236056;
    msg.end_lon = 0.5704911169542367;
    msg.end_z = 0.662476579679615;
    msg.end_z_units = 131U;
    msg.lradius = 0.14571880997013842;
    msg.flags = 45U;
    msg.x = 0.07161817954500027;
    msg.y = 0.018983132822613547;
    msg.z = 0.584044674833877;
    msg.vx = 0.7942115925701752;
    msg.vy = 0.2739481325398244;
    msg.vz = 0.11037074175797834;
    msg.course_error = 0.3781107919564173;
    msg.eta = 1078U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.8983810183778075);
    msg.setSource(49121U);
    msg.setSourceEntity(161U);
    msg.setDestination(41019U);
    msg.setDestinationEntity(45U);
    msg.k = 0.8751037990019104;
    msg.m = 0.9807733881495468;
    msg.n = 0.11583049341048124;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.9916763899981031);
    msg.setSource(36424U);
    msg.setSourceEntity(0U);
    msg.setDestination(45322U);
    msg.setDestinationEntity(182U);
    msg.k = 0.8300882089604752;
    msg.m = 0.9721419758663825;
    msg.n = 0.5652581590260538;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AllocatedControlTorques msg;
    msg.setTimeStamp(0.07813876992183799);
    msg.setSource(47965U);
    msg.setSourceEntity(109U);
    msg.setDestination(53352U);
    msg.setDestinationEntity(157U);
    msg.k = 0.27690919439786243;
    msg.m = 0.24684921794373815;
    msg.n = 0.4775639138718192;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AllocatedControlTorques #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.013935042302577472);
    msg.setSource(50018U);
    msg.setSourceEntity(64U);
    msg.setDestination(16536U);
    msg.setDestinationEntity(163U);
    msg.p = 0.23853016696956608;
    msg.i = 0.8791636585354708;
    msg.d = 0.9093620022730764;
    msg.a = 0.9276133416882578;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.1406973790961692);
    msg.setSource(47963U);
    msg.setSourceEntity(127U);
    msg.setDestination(7433U);
    msg.setDestinationEntity(31U);
    msg.p = 0.20781666895963513;
    msg.i = 0.2668479666007404;
    msg.d = 0.5782294213283082;
    msg.a = 0.09810826665546779;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlParcel msg;
    msg.setTimeStamp(0.10242317542701185);
    msg.setSource(40726U);
    msg.setSourceEntity(117U);
    msg.setDestination(870U);
    msg.setDestinationEntity(86U);
    msg.p = 0.1833239365527013;
    msg.i = 0.9346520301371725;
    msg.d = 0.4055178913713805;
    msg.a = 0.12767475033118725;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlParcel #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.2758698934274534);
    msg.setSource(6175U);
    msg.setSourceEntity(177U);
    msg.setDestination(49314U);
    msg.setDestinationEntity(1U);
    msg.op = 140U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.4167272711497306);
    msg.setSource(28253U);
    msg.setSourceEntity(180U);
    msg.setDestination(59575U);
    msg.setDestinationEntity(144U);
    msg.op = 73U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Brake msg;
    msg.setTimeStamp(0.7271233423442894);
    msg.setSource(648U);
    msg.setSourceEntity(2U);
    msg.setDestination(20050U);
    msg.setDestinationEntity(151U);
    msg.op = 98U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Brake #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.19182531508693623);
    msg.setSource(63301U);
    msg.setSourceEntity(160U);
    msg.setDestination(49564U);
    msg.setDestinationEntity(200U);
    msg.x = 0.1792829536391506;
    msg.y = 0.5700532378933935;
    msg.z = 0.0010581452672908664;
    msg.vx = 0.6357297696477447;
    msg.vy = 0.9500905276443969;
    msg.vz = 0.5308755055747418;
    msg.ax = 0.14072609540482972;
    msg.ay = 0.3222874694566643;
    msg.az = 0.3149926319519898;
    msg.flags = 45133U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.8597776932346419);
    msg.setSource(6456U);
    msg.setSourceEntity(199U);
    msg.setDestination(1805U);
    msg.setDestinationEntity(215U);
    msg.x = 0.5652627832967614;
    msg.y = 0.038001720512094384;
    msg.z = 0.19838670910208522;
    msg.vx = 0.5624083623397697;
    msg.vy = 0.13786877332431313;
    msg.vz = 0.6712708978930368;
    msg.ax = 0.36215396255123844;
    msg.ay = 0.6513531242313434;
    msg.az = 0.35753996050408876;
    msg.flags = 1435U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredLinearState msg;
    msg.setTimeStamp(0.8947160278537224);
    msg.setSource(30015U);
    msg.setSourceEntity(224U);
    msg.setDestination(5279U);
    msg.setDestinationEntity(159U);
    msg.x = 0.15052198261050787;
    msg.y = 0.5971822065635666;
    msg.z = 0.11871889981852313;
    msg.vx = 0.8011351308132626;
    msg.vy = 0.46971620550635285;
    msg.vz = 0.0961193970338492;
    msg.ax = 0.08667909551899322;
    msg.ay = 0.04397837917787728;
    msg.az = 0.14983575111811342;
    msg.flags = 18091U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredLinearState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.7839811304326941);
    msg.setSource(27240U);
    msg.setSourceEntity(222U);
    msg.setDestination(48722U);
    msg.setDestinationEntity(34U);
    msg.value = 0.988666144995439;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.5174211348072327);
    msg.setSource(33253U);
    msg.setSourceEntity(151U);
    msg.setDestination(17232U);
    msg.setDestinationEntity(158U);
    msg.value = 0.7442244097481396;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DesiredThrottle msg;
    msg.setTimeStamp(0.5409799772267653);
    msg.setSource(1672U);
    msg.setSourceEntity(225U);
    msg.setDestination(32390U);
    msg.setDestinationEntity(116U);
    msg.value = 0.4960957760765614;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DesiredThrottle #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.8491514839000605);
    msg.setSource(10653U);
    msg.setSourceEntity(243U);
    msg.setDestination(51852U);
    msg.setDestinationEntity(92U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 2730824628U;
    tmp_msg_0.start_lat = 0.1007274004510369;
    tmp_msg_0.start_lon = 0.551861589408322;
    tmp_msg_0.start_z = 0.9317182305114686;
    tmp_msg_0.start_z_units = 124U;
    tmp_msg_0.end_lat = 0.767195265041569;
    tmp_msg_0.end_lon = 0.8898877508626966;
    tmp_msg_0.end_z = 0.5039599328538502;
    tmp_msg_0.end_z_units = 207U;
    tmp_msg_0.speed = 0.07324091785163644;
    tmp_msg_0.speed_units = 139U;
    tmp_msg_0.lradius = 0.275356305411107;
    tmp_msg_0.flags = 67U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.5091354893369584);
    msg.setSource(24163U);
    msg.setSourceEntity(93U);
    msg.setDestination(18393U);
    msg.setDestinationEntity(254U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 4133247588U;
    tmp_msg_0.start_lat = 0.8769578596809363;
    tmp_msg_0.start_lon = 0.9699808354661231;
    tmp_msg_0.start_z = 0.9768524686930005;
    tmp_msg_0.start_z_units = 87U;
    tmp_msg_0.end_lat = 0.7638061386703321;
    tmp_msg_0.end_lon = 0.038803850451638144;
    tmp_msg_0.end_z = 0.31654755370273213;
    tmp_msg_0.end_z_units = 135U;
    tmp_msg_0.speed = 0.7466420942350229;
    tmp_msg_0.speed_units = 153U;
    tmp_msg_0.lradius = 0.482801907095301;
    tmp_msg_0.flags = 219U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekDesiredPath msg;
    msg.setTimeStamp(0.9228926027406057);
    msg.setSource(55412U);
    msg.setSourceEntity(120U);
    msg.setDestination(39503U);
    msg.setDestinationEntity(117U);
    IMC::DesiredPath tmp_msg_0;
    tmp_msg_0.path_ref = 3751912981U;
    tmp_msg_0.start_lat = 0.06715347288871931;
    tmp_msg_0.start_lon = 0.3755783004327975;
    tmp_msg_0.start_z = 0.27361388228324324;
    tmp_msg_0.start_z_units = 109U;
    tmp_msg_0.end_lat = 0.21144921052140742;
    tmp_msg_0.end_lon = 0.9665425416644352;
    tmp_msg_0.end_z = 0.035298935204173265;
    tmp_msg_0.end_z_units = 11U;
    tmp_msg_0.speed = 0.38046870861283477;
    tmp_msg_0.speed_units = 197U;
    tmp_msg_0.lradius = 0.5831625308211713;
    tmp_msg_0.flags = 60U;
    msg.dpath.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekDesiredPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.5151811166990337);
    msg.setSource(11572U);
    msg.setSourceEntity(69U);
    msg.setDestination(44045U);
    msg.setDestinationEntity(51U);
    msg.timeout = 63405U;
    msg.lat = 0.2050207942524378;
    msg.lon = 0.920630671036698;
    msg.z = 0.97285990519314;
    msg.z_units = 195U;
    msg.speed = 0.9650416287819491;
    msg.speed_units = 91U;
    msg.roll = 0.33573862562696977;
    msg.pitch = 0.9015531801354209;
    msg.yaw = 0.9395648273600754;
    msg.custom.assign("CITGNTVDBZOSGABXORPJRCCSJDWETPKUYULELRDLSCZWEKZXUSSMFUUWWWLNIVZRKRNFNATOYFVOLEFRVHLCMAP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.19489694572034177);
    msg.setSource(60373U);
    msg.setSourceEntity(151U);
    msg.setDestination(64133U);
    msg.setDestinationEntity(24U);
    msg.timeout = 53537U;
    msg.lat = 0.9505339430032758;
    msg.lon = 0.2940741019063985;
    msg.z = 0.42444163684256264;
    msg.z_units = 202U;
    msg.speed = 0.9061844615896272;
    msg.speed_units = 145U;
    msg.roll = 0.8236054085897889;
    msg.pitch = 0.07711417156769229;
    msg.yaw = 0.6303058271031805;
    msg.custom.assign("ZASDNYVEWOQYCLDRA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Goto msg;
    msg.setTimeStamp(0.8710108181206743);
    msg.setSource(6315U);
    msg.setSourceEntity(76U);
    msg.setDestination(58124U);
    msg.setDestinationEntity(243U);
    msg.timeout = 21880U;
    msg.lat = 0.2833507408343674;
    msg.lon = 0.5041580782377514;
    msg.z = 0.37801967544206605;
    msg.z_units = 14U;
    msg.speed = 0.2855907356834354;
    msg.speed_units = 89U;
    msg.roll = 0.14952165302849074;
    msg.pitch = 0.8985925398260002;
    msg.yaw = 0.7829769340251206;
    msg.custom.assign("KQEARXRRKMT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Goto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.15272932941079598);
    msg.setSource(17936U);
    msg.setSourceEntity(89U);
    msg.setDestination(65048U);
    msg.setDestinationEntity(40U);
    msg.timeout = 8155U;
    msg.lat = 0.43451790481293595;
    msg.lon = 0.31611499268069054;
    msg.z = 0.5868869445704321;
    msg.z_units = 157U;
    msg.speed = 0.5598527566850073;
    msg.speed_units = 130U;
    msg.duration = 55207U;
    msg.radius = 0.013625507997950259;
    msg.flags = 79U;
    msg.custom.assign("KAJZYZGFNUMSOOVMQWECKNEPUIHLIFSVPJIFALZAMXNYNHPMUAJRRLOQPHTFXHYYHVIOZEESRICDCRGIVRQDYICVNYTHXWMKPRUHPYTAGJPGUMKEKDTUNOOYEHBWZZWBJMLQAPDVEETFGKXXRQZQWSSCYKUDIBIPPXVNDMESXRXVBFAXZCKBYCAWLFLWRKDMGTFOWQWHDUFZMVUWBSOSOTJISNDLUXEOTJKSGQQAHGDLFBTJRAJVCJLCBBZLTQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.3749585644196385);
    msg.setSource(4203U);
    msg.setSourceEntity(68U);
    msg.setDestination(20584U);
    msg.setDestinationEntity(75U);
    msg.timeout = 5117U;
    msg.lat = 0.7330078018547531;
    msg.lon = 0.767472350529319;
    msg.z = 0.1157279826998211;
    msg.z_units = 10U;
    msg.speed = 0.6301733108796286;
    msg.speed_units = 119U;
    msg.duration = 55186U;
    msg.radius = 0.8225701445948777;
    msg.flags = 81U;
    msg.custom.assign("FCRBAQKIEDZSECWDZGPYLLQMAHSPTJHEXBFRZSOWTBVKCNVUJIKUVNVQUQNKMWOORZHNEQYMDEJMVCKPKXVTWYVSQDCWAWVSEYFBNWAU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopUp msg;
    msg.setTimeStamp(0.42170285568720045);
    msg.setSource(21059U);
    msg.setSourceEntity(83U);
    msg.setDestination(29524U);
    msg.setDestinationEntity(58U);
    msg.timeout = 54979U;
    msg.lat = 0.5360065524693207;
    msg.lon = 0.07196970516361512;
    msg.z = 0.5184605435232081;
    msg.z_units = 236U;
    msg.speed = 0.07323755895195228;
    msg.speed_units = 145U;
    msg.duration = 15168U;
    msg.radius = 0.9297135919125104;
    msg.flags = 135U;
    msg.custom.assign("SXNLUONGRRCYPTDMIFASTNJWZXGEHSGZVFFCZTNPXYRKBOTUCAWSGCQFOETOYJILVHQEBBTDMQUHRWKSULWLVPLYVFJJJWKEFKALFOZDBKFRPSYLOXVZDIAAJDMSZJUKOMHYRQHXCICDMNRXUZGKEHCDNMKGSLIXOPOAYDLRCEZWHYJQKNQBPSBIHMNOTGCQPKTJBEIENMNHWVRZQHQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopUp #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.34576509102922526);
    msg.setSource(60679U);
    msg.setSourceEntity(28U);
    msg.setDestination(20250U);
    msg.setDestinationEntity(158U);
    msg.custom.assign("WDQUJFEQXSHXSGJZZLOTRWPBDYYRTRHMDNNJAPUVJIYOGCKZMBOVVWAHZVNWUYNTOKOHAO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.3283036383254814);
    msg.setSource(47952U);
    msg.setSourceEntity(254U);
    msg.setDestination(38517U);
    msg.setDestinationEntity(72U);
    msg.custom.assign("HMFFBCYWSZWXNJIYCCKZTIFJZKCYHUGJANEJVNRUHZTPSXDWJDLWIUOPMTQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Teleoperation msg;
    msg.setTimeStamp(0.23707523017100174);
    msg.setSource(31014U);
    msg.setSourceEntity(90U);
    msg.setDestination(62021U);
    msg.setDestinationEntity(74U);
    msg.custom.assign("WFOMSGMCKUGNYVIEEIARCKBSPUCGPUZWJUGPZDGQTQNVKMUEAUCBUBRDKKNMLKQNVYBYNEPPMR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Teleoperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.9803959868838731);
    msg.setSource(13380U);
    msg.setSourceEntity(154U);
    msg.setDestination(32914U);
    msg.setDestinationEntity(156U);
    msg.timeout = 46767U;
    msg.lat = 0.4189353416989603;
    msg.lon = 0.6480605314689056;
    msg.z = 0.683096516069934;
    msg.z_units = 234U;
    msg.duration = 25895U;
    msg.speed = 0.4443353794720981;
    msg.speed_units = 79U;
    msg.type = 249U;
    msg.radius = 0.061773865550676765;
    msg.length = 0.5586928672017321;
    msg.bearing = 0.6548040182168587;
    msg.direction = 9U;
    msg.custom.assign("ZNBKUNLRWVHUVEXJHPWZDZBMFSRFFCKXBWNAHLCQXDAPLOXLFRHRBCMGZGADBHMMYENCPIQETDRLAINVNJYLQBDDFWENLQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.5831358551046785);
    msg.setSource(38082U);
    msg.setSourceEntity(72U);
    msg.setDestination(38687U);
    msg.setDestinationEntity(80U);
    msg.timeout = 24155U;
    msg.lat = 0.3288089554007876;
    msg.lon = 0.6516784102197013;
    msg.z = 0.9303279533568318;
    msg.z_units = 67U;
    msg.duration = 43453U;
    msg.speed = 0.8418460101513427;
    msg.speed_units = 126U;
    msg.type = 125U;
    msg.radius = 0.9739681104625412;
    msg.length = 0.05449673341397343;
    msg.bearing = 0.3318454033478222;
    msg.direction = 182U;
    msg.custom.assign("XINKRTDLTGKTPXIDRSRVWXBGRTNEKMELANSUIPHUGZFNSROHBNJCQMABTPKCOQCWBJZQIKUJKQVXPLFVGZMWKVVIZNYHADYMSJXDCVMKDCOICSGFDJHFGHCAETUHWJLMEQFROFTAYXRDRPJRULCUVOPOKSYGGCBFLPQMAQXWUWYYFXOBVMYHQCIDKAEWSQLMONUUPESTGBFNZWPOJOIVI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Loiter msg;
    msg.setTimeStamp(0.7971309075108326);
    msg.setSource(14689U);
    msg.setSourceEntity(222U);
    msg.setDestination(34370U);
    msg.setDestinationEntity(120U);
    msg.timeout = 39655U;
    msg.lat = 0.4957590394811773;
    msg.lon = 0.8736853427916426;
    msg.z = 0.4320940037632345;
    msg.z_units = 202U;
    msg.duration = 61198U;
    msg.speed = 0.9048937545924003;
    msg.speed_units = 189U;
    msg.type = 246U;
    msg.radius = 0.8672200178537735;
    msg.length = 0.9964175575591722;
    msg.bearing = 0.8563922505968765;
    msg.direction = 172U;
    msg.custom.assign("CXOWHLXGSZPVPLFRIEQMJIVRHWVGL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Loiter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.35166929615193565);
    msg.setSource(36708U);
    msg.setSourceEntity(25U);
    msg.setDestination(14693U);
    msg.setDestinationEntity(213U);
    msg.duration = 40449U;
    msg.custom.assign("BYQYYMVAAUQTKVPSMRJWLDNVWQZXHKMC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.9874079147918451);
    msg.setSource(478U);
    msg.setSourceEntity(10U);
    msg.setDestination(5546U);
    msg.setDestinationEntity(146U);
    msg.duration = 14522U;
    msg.custom.assign("DCOZDFPEJAOTIIDPABPRMIBZWETWXUDNVFGFMWLPTXNYJPLRWSXSFDVQJAYMDBVMLPTZCQNWVIROJBGGNXVECCSOTZWGHGAHNCONFFEABBVMCIGSHZZKEMQYFZFQPCQBLTZOXEJKSURSWAEBUHNLVUANHIBMKRFXDMYPHZQWKJQYSLYUOYEJQROXKXRATOKYYGSLRHELOJASGTXNHDI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IdleManeuver msg;
    msg.setTimeStamp(0.8590198112999079);
    msg.setSource(20642U);
    msg.setSourceEntity(67U);
    msg.setDestination(40846U);
    msg.setDestinationEntity(11U);
    msg.duration = 15246U;
    msg.custom.assign("YKBGCYAAZSFTPTEKCUAGMBZJBSCNMXETJDYITFBFOIFLADOPQULXQUNPAROWCZFYDRMPELWNLKGDJZXDUKMQPNEVSUVLFMFHPZGSQXENXZLQOUCORYCITZHWHJVURVAJLPOZIMHITHEWLEARSTKIVJMYDRROTNBGZZJWLDQGOXKVKJWYNDFINUEWCXMCDXHQSHJKPHAOWFS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IdleManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.5589512834045361);
    msg.setSource(48709U);
    msg.setSourceEntity(203U);
    msg.setDestination(56026U);
    msg.setDestinationEntity(173U);
    IMC::DesiredHeading tmp_msg_0;
    tmp_msg_0.value = 0.909591683055255;
    tmp_msg_0.off = 0.18085037598783504;
    msg.control.set(tmp_msg_0);
    msg.duration = 39233U;
    msg.custom.assign("ZXQZGSVNFSNVFLBXOEUZFUOHDYOC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.9411138394133219);
    msg.setSource(12719U);
    msg.setSourceEntity(142U);
    msg.setDestination(49410U);
    msg.setDestinationEntity(48U);
    IMC::DesiredHeading tmp_msg_0;
    tmp_msg_0.value = 0.4225622168072488;
    tmp_msg_0.off = 0.7815474328892629;
    msg.control.set(tmp_msg_0);
    msg.duration = 24501U;
    msg.custom.assign("IDEYZWBAJUBDZLHOQEVYHBDPQMIQXHFABHZSIVGGIOKDDDTIHARMSVAVUHLLSGGRJOKBPKESBFVPQJYMAKBOAXQESTJYJSVARKCEJCMCOBPNWZLXUWURXPZZDVLOIJNBWTQFENLCTTKVHPUCJCNUXFRBEPNYTNCNCMYEGKQAWTSRQDCNTYFDRFGUWFXMJQYFSHRUYJRKOWEVGOFMZPLVMIPTSZAXOGLCRYSMLX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LowLevelControl msg;
    msg.setTimeStamp(0.7117784694835243);
    msg.setSource(59599U);
    msg.setSourceEntity(192U);
    msg.setDestination(50156U);
    msg.setDestinationEntity(204U);
    IMC::DesiredPitch tmp_msg_0;
    tmp_msg_0.value = 0.31686603469556185;
    msg.control.set(tmp_msg_0);
    msg.duration = 17611U;
    msg.custom.assign("WJPELZPFSEUAKKLSKLASNRXOBSUGZONUEUWZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LowLevelControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.705535943405489);
    msg.setSource(22737U);
    msg.setSourceEntity(44U);
    msg.setDestination(54212U);
    msg.setDestinationEntity(160U);
    msg.timeout = 49554U;
    msg.lat = 0.7679597829528794;
    msg.lon = 0.8636689782961164;
    msg.z = 0.9985810950911053;
    msg.z_units = 164U;
    msg.speed = 0.641494987196803;
    msg.speed_units = 166U;
    msg.bearing = 0.6196572946045458;
    msg.cross_angle = 0.3950231214512241;
    msg.width = 0.12583642539592055;
    msg.length = 0.3771445800386146;
    msg.hstep = 0.1421958083380781;
    msg.coff = 104U;
    msg.alternation = 55U;
    msg.flags = 94U;
    msg.custom.assign("EKWDXPSSXCCHFSYJGAYWVIVIPQRTKOCNKFZBVRUUDYRZSKYQMDUKBITWDHYBMLTSDQAOXHRGFPBQBHFJURGWZFHUGIVQUNCLJAFWHZMUSUYAEPQNOWOSXYKOTREMJZJXLPVXAJZRYGCINCLOSJRAMSFIETVZBGHRVTEPPCNSLHM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.7021044443831274);
    msg.setSource(15495U);
    msg.setSourceEntity(100U);
    msg.setDestination(27178U);
    msg.setDestinationEntity(122U);
    msg.timeout = 32882U;
    msg.lat = 0.5065637717991102;
    msg.lon = 0.6048177074369093;
    msg.z = 0.1731110126768849;
    msg.z_units = 41U;
    msg.speed = 0.4745440677366034;
    msg.speed_units = 159U;
    msg.bearing = 0.7989628089384301;
    msg.cross_angle = 0.5371109371571096;
    msg.width = 0.1000896422487676;
    msg.length = 0.4491474219691317;
    msg.hstep = 0.2763587984527993;
    msg.coff = 199U;
    msg.alternation = 41U;
    msg.flags = 207U;
    msg.custom.assign("MRRLKHWZKBNNUOFGUHIOWHYWDSEBJSZBVYTNWSQZXRXJHTCQZMFGUNGSZGPPEDOJPCEXIDUVYJRUPAVHCRQZEYAJIFFAPGMUGSRQLJOMWPDXLMFFZNIGELXOPNZRPIIENKKCABWSDNXTZXLLSKJZCLFDAEVCBBQWQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Rows msg;
    msg.setTimeStamp(0.26491137932782904);
    msg.setSource(18392U);
    msg.setSourceEntity(202U);
    msg.setDestination(65220U);
    msg.setDestinationEntity(102U);
    msg.timeout = 54341U;
    msg.lat = 0.04698400326048613;
    msg.lon = 0.3800764586927621;
    msg.z = 0.5632036981678736;
    msg.z_units = 2U;
    msg.speed = 0.2232456988559528;
    msg.speed_units = 9U;
    msg.bearing = 0.39201775505307246;
    msg.cross_angle = 0.6114544060042288;
    msg.width = 0.011281614176437471;
    msg.length = 0.5719862093727965;
    msg.hstep = 0.3359644166743252;
    msg.coff = 239U;
    msg.alternation = 176U;
    msg.flags = 67U;
    msg.custom.assign("KCWZAMTAFUFBHSGNNQRGSJVKHPTBYJJFHPOZYYTFGWESMVBUMEJDVYEVEIDJGHUQAJIWVHYKLEPSQTBFOAPXBXPDLODDMVNMZZNZJQGDPXWQAPYIEUURXNYZNRYIFBXVGGTLCSTQSIWMDNSDXZRFOWHJEHTVKCXVIMPKPRSUKKDIXRHEATRFLZHZAOCVTRIRCLIONQPEWACLHOLUMALWLOBTCUGGKFCZSLMWB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Rows #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.08568355806210581);
    msg.setSource(40863U);
    msg.setSourceEntity(63U);
    msg.setDestination(16461U);
    msg.setDestinationEntity(181U);
    msg.timeout = 42303U;
    msg.lat = 0.2930913677675664;
    msg.lon = 0.3241292891696952;
    msg.z = 0.3271127967775873;
    msg.z_units = 155U;
    msg.speed = 0.042918379057853895;
    msg.speed_units = 177U;
    msg.custom.assign("AYEISSFNOBJKJSANEHLFLYVHZOCMIGDMGUJQIGHGTPETDFKRQVXAWQA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.4689767006020745);
    msg.setSource(20733U);
    msg.setSourceEntity(94U);
    msg.setDestination(10116U);
    msg.setDestinationEntity(114U);
    msg.timeout = 32824U;
    msg.lat = 0.37706990917141514;
    msg.lon = 0.012525968644633068;
    msg.z = 0.061126916044296875;
    msg.z_units = 209U;
    msg.speed = 0.9368786401082846;
    msg.speed_units = 220U;
    IMC::PathPoint tmp_msg_0;
    tmp_msg_0.x = 0.9559478399674912;
    tmp_msg_0.y = 0.30476448107841847;
    tmp_msg_0.z = 0.6277114680491634;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("WNIFQVHZIATCDLAQPWQHUHXABUEKANYXRNXLOPPDEVVUCDMHMTTGSFYYDYHUFHBHERFYIVYZMICTEVHVDWPIOBQMLGGACYHYERXSPCVMSZKMWBNALPFGKVXLXCVWQFQSJGCICJNQSBZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPath msg;
    msg.setTimeStamp(0.5527935558243776);
    msg.setSource(60606U);
    msg.setSourceEntity(154U);
    msg.setDestination(2346U);
    msg.setDestinationEntity(203U);
    msg.timeout = 36496U;
    msg.lat = 0.7154310025080299;
    msg.lon = 0.3169482437808734;
    msg.z = 0.7599733381925867;
    msg.z_units = 75U;
    msg.speed = 0.10504809779370416;
    msg.speed_units = 145U;
    msg.custom.assign("YFRBJPWVVIUNIZAKMHXIDXIDOQQSINNFGTACRFJXCUQTXYIPBYWQUKLGMPSXSTXEKUHOSTAYBLRWSGNKQFDOZPENNFQLHYFMXCVYRJUGLQCWJZVBCODBSMUVPBB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPath #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.6768272446370308);
    msg.setSource(24378U);
    msg.setSourceEntity(151U);
    msg.setDestination(15721U);
    msg.setDestinationEntity(126U);
    msg.x = 0.7813591412456292;
    msg.y = 0.9664551624153852;
    msg.z = 0.715454192267848;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.07944994494350766);
    msg.setSource(33550U);
    msg.setSourceEntity(201U);
    msg.setDestination(838U);
    msg.setDestinationEntity(14U);
    msg.x = 0.5295782312531875;
    msg.y = 0.5694016678299644;
    msg.z = 0.15098099737554438;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PathPoint msg;
    msg.setTimeStamp(0.5634171506700009);
    msg.setSource(28659U);
    msg.setSourceEntity(252U);
    msg.setDestination(44379U);
    msg.setDestinationEntity(217U);
    msg.x = 0.39532384616930316;
    msg.y = 0.554231717831963;
    msg.z = 0.4912393900634747;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PathPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.816488044657354);
    msg.setSource(57083U);
    msg.setSourceEntity(11U);
    msg.setDestination(62171U);
    msg.setDestinationEntity(221U);
    msg.timeout = 55948U;
    msg.lat = 0.024081066874629076;
    msg.lon = 0.6305983802933962;
    msg.z = 0.47266751571986587;
    msg.z_units = 21U;
    msg.amplitude = 0.546391028923964;
    msg.pitch = 0.12825294226660333;
    msg.speed = 0.5623525635641099;
    msg.speed_units = 99U;
    msg.custom.assign("JPKHUAJCYCFJLIXHBFBHNALQGULZSNOZKCJELVRRFPKKQATWGSBETZQLXQMBDMXMRNIGMGTURZOICHROYBAJVYLVVWBQSBYPZFTSIBLDVWATHHIULNQDGZRHPBMRIUOZSXJDLFYCVNADRVIVOWKFCOCEAPEHOKEAFYKDCMUYLDFXJWPYZSASGXSIUPGWFUQTDQYWEGHETSKJNTTWWDZXRHZJNAENWVOUSMXEMOBMGXRMXNQKECVCIYODTPKPP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.29492173667451405);
    msg.setSource(16053U);
    msg.setSourceEntity(25U);
    msg.setDestination(12650U);
    msg.setDestinationEntity(195U);
    msg.timeout = 27860U;
    msg.lat = 0.2565045980861421;
    msg.lon = 0.5713510813138585;
    msg.z = 0.671766709247796;
    msg.z_units = 179U;
    msg.amplitude = 0.7563340136565078;
    msg.pitch = 0.47347653553020164;
    msg.speed = 0.7546363876410015;
    msg.speed_units = 180U;
    msg.custom.assign("GQFLOYXIDLWLTIWRAKAZLIKDTNTLDXSDURRGBKCBXCUKOQQRVLCTPXENADSSGBXFKAEUKBLZHWTGMJHMLVVXOIIAEETPPSGWZHDQLBYAYZUWMRESUZKZEIHSOEUQCJYGUYNFXSADAGRIJVKOVBKSYPBPMQJDCNPNFNFRRUVQRGCBEOOQZNHZGRHNDJJSVHXAFXVJBLVVPCBYCWFESJFWJNUTZYTPEMOUCMIZWAXKPOIWPOYH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::YoYo msg;
    msg.setTimeStamp(0.30649690753963543);
    msg.setSource(30165U);
    msg.setSourceEntity(120U);
    msg.setDestination(11050U);
    msg.setDestinationEntity(20U);
    msg.timeout = 32430U;
    msg.lat = 0.26751351713816296;
    msg.lon = 0.38694629232457545;
    msg.z = 0.4832848512122896;
    msg.z_units = 85U;
    msg.amplitude = 0.2934245779370116;
    msg.pitch = 0.36729986782305246;
    msg.speed = 0.481296569437231;
    msg.speed_units = 37U;
    msg.custom.assign("NGPPQLWDRJZTRLDCGGVKKOSKZSVYDKGIIZZIBHFESMVSBFBUULQBYVPWKIVYBUJTNBMIVQMXHHLXAFBBWYUAPPIKDACEMRNFTKIEFELBRZSSCWFNNTFMFALYXWRNEYLAGOCXPYHNJUJAUXCETIYSPGDEOXZTECGEAKT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("YoYo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.6902988647589225);
    msg.setSource(45761U);
    msg.setSourceEntity(188U);
    msg.setDestination(19424U);
    msg.setDestinationEntity(86U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.9197981202936997);
    msg.setSource(35711U);
    msg.setSourceEntity(182U);
    msg.setDestination(29904U);
    msg.setDestinationEntity(175U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TeleoperationDone msg;
    msg.setTimeStamp(0.463251381500124);
    msg.setSource(32474U);
    msg.setSourceEntity(176U);
    msg.setDestination(13304U);
    msg.setDestinationEntity(165U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TeleoperationDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.13322519544972755);
    msg.setSource(28742U);
    msg.setSourceEntity(83U);
    msg.setDestination(34442U);
    msg.setDestinationEntity(167U);
    msg.lat = 0.9743163546824234;
    msg.lon = 0.6577561692956228;
    msg.z = 0.5904044604404606;
    msg.z_units = 165U;
    msg.radius = 0.20330000556934646;
    msg.duration = 3220U;
    msg.speed = 0.045751185872418554;
    msg.speed_units = 53U;
    msg.custom.assign("RFCAKAJPMKLXWHLCOUGYWDMRJZNKKNTPLGHDQFMMGXMA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.35771294333387227);
    msg.setSource(30452U);
    msg.setSourceEntity(101U);
    msg.setDestination(40008U);
    msg.setDestinationEntity(129U);
    msg.lat = 0.7954701365081642;
    msg.lon = 0.2878074282093175;
    msg.z = 0.9932919352713931;
    msg.z_units = 11U;
    msg.radius = 0.19049110628932187;
    msg.duration = 19891U;
    msg.speed = 0.8729908667441076;
    msg.speed_units = 63U;
    msg.custom.assign("KYZTCWWHYVKICLFWCGTAZQKYCIMFWTFPXXEAHJTDFNSNEUOXKKVGTLFVUWDWOYSEVBHBFGSGRAARDFZJUMNUCTLJORQVSNXQMSGXDFARKPQIIWCU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeeping msg;
    msg.setTimeStamp(0.876799075432944);
    msg.setSource(44360U);
    msg.setSourceEntity(80U);
    msg.setDestination(39291U);
    msg.setDestinationEntity(144U);
    msg.lat = 0.7986965108009701;
    msg.lon = 0.6270814644149876;
    msg.z = 0.23074749891593005;
    msg.z_units = 221U;
    msg.radius = 0.6562901720394013;
    msg.duration = 27247U;
    msg.speed = 0.006317586241605833;
    msg.speed_units = 92U;
    msg.custom.assign("WWFVBBECJNWSEZFPHNSQJKNEGHQKTAWTTPWBUBRJXLXBKXDQPUISVAQXDZJZXRYOOJMWRGMLHSMNVRYQMIEOUQYAVWLLOPTIMPKPORIICQHWHCQCMCHFTPJDLLAGUTDFFXENWBYOSYNMDBIRKERCDXYEEK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeeping #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.4924687794444522);
    msg.setSource(52739U);
    msg.setSourceEntity(99U);
    msg.setDestination(39228U);
    msg.setDestinationEntity(125U);
    msg.timeout = 25427U;
    msg.flags = 227U;
    msg.lat = 0.5782314803099252;
    msg.lon = 0.4748223498229108;
    msg.start_z = 0.9473906674037318;
    msg.start_z_units = 113U;
    msg.end_z = 0.9975989732468357;
    msg.end_z_units = 128U;
    msg.radius = 0.8924501015855669;
    msg.speed = 0.7322547205670311;
    msg.speed_units = 32U;
    msg.custom.assign("JXLOAQGPEANOVOQENLDTKCHQRKLBWPWXMZYKAYRPGUHMNYGCOKEMPTXNFXGSRZXXYNZLHIWVVWPRWUAGHVCRSSZWKFICADJZPECIPMJFRLENOZBDOQMFSTOSCJSQACLFUGHNKZVLHIXEMFUIBKEBJAPJODOMJRRTRVUNVJYBFXIGKGJDCCIBFQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.7746848595336346);
    msg.setSource(13566U);
    msg.setSourceEntity(103U);
    msg.setDestination(33380U);
    msg.setDestinationEntity(52U);
    msg.timeout = 27939U;
    msg.flags = 44U;
    msg.lat = 0.12283129398882342;
    msg.lon = 0.014603642752454737;
    msg.start_z = 0.8112994744140244;
    msg.start_z_units = 138U;
    msg.end_z = 0.3681868647718105;
    msg.end_z_units = 83U;
    msg.radius = 0.6594919460011999;
    msg.speed = 0.08016475198717432;
    msg.speed_units = 182U;
    msg.custom.assign("BVRQLRUNZLUVOCJBGPVAPJDPGHKPBFKDDSIFOKXLVRMKHPZZZFMIOAPIRYSQK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Elevator msg;
    msg.setTimeStamp(0.9195155444959752);
    msg.setSource(32882U);
    msg.setSourceEntity(241U);
    msg.setDestination(38349U);
    msg.setDestinationEntity(75U);
    msg.timeout = 27319U;
    msg.flags = 195U;
    msg.lat = 0.6588500942037079;
    msg.lon = 0.9934317127576885;
    msg.start_z = 0.3736905574858942;
    msg.start_z_units = 10U;
    msg.end_z = 0.372030940469518;
    msg.end_z_units = 87U;
    msg.radius = 0.7562736376086413;
    msg.speed = 0.49331701611774503;
    msg.speed_units = 128U;
    msg.custom.assign("WEBCJYUIKHHAXFGJLGCMRPTSDLCTCLAODROPTAQUBEPQGIPBYJLFAOKSUCQXQDGIWBLOMKUGTOSRSPDJORBWSLMRSAULYKAVKITMHCHNWXFIVTQCMVFAMNVKGERGWJZWHWNMXSXXNMQZYVKODBIFHQAZVJHSELOBXEYJLEENQDOTZEHAOAFVDHGVZXXJIZPKJDWUTGSVNIBRNYTPPZPCFYFWBRSFDIE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Elevator #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.9693689088986351);
    msg.setSource(11926U);
    msg.setSourceEntity(225U);
    msg.setDestination(18228U);
    msg.setDestinationEntity(82U);
    msg.timeout = 33149U;
    msg.lat = 0.9062400220501956;
    msg.lon = 0.7382418281492249;
    msg.z = 0.208691111708163;
    msg.z_units = 219U;
    msg.speed = 0.3225126939174793;
    msg.speed_units = 93U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.42244654516059654;
    tmp_msg_0.y = 0.4104043132544921;
    tmp_msg_0.z = 0.6271482027355301;
    tmp_msg_0.t = 0.16500037625567077;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("JIOBMWPPWSAIDEYDOASXCWHOGNJXPLFLTGWEGNSVHVYZNTNAMQUICXAOTDJPFMBPGXWEUMRRPKWKDSUDGCNUZRVCRLCKSDIKYUEVNFQBFINDLFPKOZIFKLGQMJNCQRHYVQAEHMEZWHAUFVSGNPWTODLMYEYCOJYRJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.5006463435512729);
    msg.setSource(5106U);
    msg.setSourceEntity(48U);
    msg.setDestination(12687U);
    msg.setDestinationEntity(185U);
    msg.timeout = 36156U;
    msg.lat = 0.9028256164955188;
    msg.lon = 0.5881937798345965;
    msg.z = 0.625551064932833;
    msg.z_units = 29U;
    msg.speed = 0.8573258789142297;
    msg.speed_units = 211U;
    msg.custom.assign("LCOQEPJNVIGXBTNDGIEHVKAOFFDCHQXDQXWHWBDNYNFNCCLFVOFPHOZWGYMBFKVNTAMQKWPZRSSAMQTI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowTrajectory msg;
    msg.setTimeStamp(0.7166223698222711);
    msg.setSource(10436U);
    msg.setSourceEntity(37U);
    msg.setDestination(15021U);
    msg.setDestinationEntity(30U);
    msg.timeout = 33122U;
    msg.lat = 0.6200953814784163;
    msg.lon = 0.9661477886638983;
    msg.z = 0.654538109897574;
    msg.z_units = 189U;
    msg.speed = 0.41867808285954566;
    msg.speed_units = 146U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.2990522282920207;
    tmp_msg_0.y = 0.5173294092660651;
    tmp_msg_0.z = 0.19766387400132768;
    tmp_msg_0.t = 0.2631579362072748;
    msg.points.push_back(tmp_msg_0);
    msg.custom.assign("SBROYTNRDFRGVQYFBQTDVSIIYBVYQHOORUTHGEZPSHQGDTXWOOADONUWJQTHCMSFXQLFQRGWZUMADHTNLLASVATLXHKVAOESJC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowTrajectory #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.7675949769068181);
    msg.setSource(25694U);
    msg.setSourceEntity(69U);
    msg.setDestination(60737U);
    msg.setDestinationEntity(164U);
    msg.x = 0.9174319263307065;
    msg.y = 0.1358773894244235;
    msg.z = 0.11629199201021023;
    msg.t = 0.09173438887092211;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.279121239472486);
    msg.setSource(32807U);
    msg.setSourceEntity(251U);
    msg.setDestination(5171U);
    msg.setDestinationEntity(92U);
    msg.x = 0.7379731218756221;
    msg.y = 0.11048882751311206;
    msg.z = 0.6394487241505726;
    msg.t = 0.35734498057918707;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrajectoryPoint msg;
    msg.setTimeStamp(0.2811300705415948);
    msg.setSource(14463U);
    msg.setSourceEntity(90U);
    msg.setDestination(64747U);
    msg.setDestinationEntity(18U);
    msg.x = 0.6612755168747827;
    msg.y = 0.7647583964361367;
    msg.z = 0.13814894893687257;
    msg.t = 0.8662946826069555;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrajectoryPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.8667115321057349);
    msg.setSource(28691U);
    msg.setSourceEntity(130U);
    msg.setDestination(48376U);
    msg.setDestinationEntity(97U);
    msg.timeout = 16374U;
    msg.name.assign("CTXLKRZRJKQBPVJEINPVAZOKGMRXTHUWLHEDBYLHIBJZJQKOYDNFPPCVCQXQEQIPUOWXFKDBDTQMTLNSTLSBDFSOHGMKJVQQCXAHRNIXEVLBADRRZWFMDERUO");
    msg.custom.assign("BSQBIHYQMKRCDAVSZANFJXAKSRDKGPVDRGZVYHZM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.8109002601450219);
    msg.setSource(61055U);
    msg.setSourceEntity(183U);
    msg.setDestination(56010U);
    msg.setDestinationEntity(93U);
    msg.timeout = 56268U;
    msg.name.assign("RQVITUXPIXAUEKRSPGPWNNNAXTMTYBNCKAOAXPCJIDHYSYDMUBKJPMWLQXTQEJJGFJBKFLIWVRDFRUJIBHMEXMPKROMCGDKPYZIHQWCBSAQTWKASXQUDCYRATFAALTCVGFWCNHRHZ");
    msg.custom.assign("AEEJUOEVJQBFZAESWRUNSVANDCZXUVDMWISFMHPXNUZLXSXVKLUPIVJBGORAFBOTTULZTSDCISBYYEAFDXMLQKQYIAAFSBCLGQIJJWONLOJVAIKHSXFYRLCSPRKCGYPKPVCSRAKMJNUKKWKILYDIDQNCUIXVHHXTLOHWWQWQBTWCNPYNZVPBCTGDRYNJZPBM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CustomManeuver msg;
    msg.setTimeStamp(0.10142092381613976);
    msg.setSource(29201U);
    msg.setSourceEntity(152U);
    msg.setDestination(30078U);
    msg.setDestinationEntity(108U);
    msg.timeout = 15265U;
    msg.name.assign("QRTLVLPTWZEWPNMDKZCNSQOFNCJAMIUIAGRPQDAZZAXHQMCGBIEVGECYZREBVUBDJSYRISRQMFJVZTKGOXREJZHXSJZDUQWTUHYZGGJUTSSVIXJNWBBVHTBXUKGRXHJNYQHGKKQUOOSBAFYTCPLHRAUONLMLAXKIOW");
    msg.custom.assign("YKMFGXXYNVGNEARBOCYTITOFOHCPINTJGQFDAROGJONIFKLNDQH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CustomManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.49795639191403096);
    msg.setSource(65171U);
    msg.setSourceEntity(95U);
    msg.setDestination(42794U);
    msg.setDestinationEntity(238U);
    msg.lat = 0.4135481105604596;
    msg.lon = 0.33114246972359607;
    msg.z = 0.9160453291626819;
    msg.z_units = 253U;
    msg.speed = 0.5318311509077797;
    msg.speed_units = 213U;
    IMC::TrajectoryPoint tmp_msg_0;
    tmp_msg_0.x = 0.2998213002612138;
    tmp_msg_0.y = 0.9693433139874241;
    tmp_msg_0.z = 0.22833016017596242;
    tmp_msg_0.t = 0.18715979154208495;
    msg.points.push_back(tmp_msg_0);
    IMC::VehicleFormationParticipant tmp_msg_1;
    tmp_msg_1.vid = 36952U;
    tmp_msg_1.off_x = 0.20609960202288613;
    tmp_msg_1.off_y = 0.5933910120301356;
    tmp_msg_1.off_z = 0.17554456815849484;
    msg.participants.push_back(tmp_msg_1);
    msg.start_time = 0.8496545863855177;
    msg.custom.assign("ZXPHZYVPLRNFCELSQEVBOTCIYAIGDKMNGSPGZYAPUDHCQQEFPUKJPQCBIFIZKOAUZOVPIOAVUJEDJWOMUIRSVRXUODBPZTKTSEYYHFLMDTQZMYWNROZIBGZSGHNBAPSEXRRGCKWFJLMTDTBZJREDSJFOIT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.1909408825868415);
    msg.setSource(61791U);
    msg.setSourceEntity(27U);
    msg.setDestination(15816U);
    msg.setDestinationEntity(171U);
    msg.lat = 0.4831996286053992;
    msg.lon = 0.6984715951007165;
    msg.z = 0.861839866284878;
    msg.z_units = 117U;
    msg.speed = 0.24496604072165085;
    msg.speed_units = 151U;
    msg.start_time = 0.30169974815858946;
    msg.custom.assign("ZOGCTFWJQMVLAXYQOVTSVQFOBRCYV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormation msg;
    msg.setTimeStamp(0.0066628366622104584);
    msg.setSource(6200U);
    msg.setSourceEntity(102U);
    msg.setDestination(54316U);
    msg.setDestinationEntity(61U);
    msg.lat = 0.15080657001805964;
    msg.lon = 0.9475382452178719;
    msg.z = 0.23578400521480847;
    msg.z_units = 189U;
    msg.speed = 0.10352650989832846;
    msg.speed_units = 14U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 7788U;
    tmp_msg_0.off_x = 0.7816692966157092;
    tmp_msg_0.off_y = 0.6581824273533998;
    tmp_msg_0.off_z = 0.534454832583585;
    msg.participants.push_back(tmp_msg_0);
    msg.start_time = 0.3903460126589624;
    msg.custom.assign("ITXJCRXHRHJZQWFUUTYASEZPUCUXRJFFQYXORCMBFWQXYWZSZYGCMXUXM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.279277369358622);
    msg.setSource(9056U);
    msg.setSourceEntity(200U);
    msg.setDestination(47321U);
    msg.setDestinationEntity(221U);
    msg.vid = 23625U;
    msg.off_x = 0.8383061096782028;
    msg.off_y = 0.4201688677010058;
    msg.off_z = 0.4832835060070163;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.4374202709150474);
    msg.setSource(25186U);
    msg.setSourceEntity(85U);
    msg.setDestination(64232U);
    msg.setDestinationEntity(240U);
    msg.vid = 4574U;
    msg.off_x = 0.9035310643011696;
    msg.off_y = 0.8987729884469451;
    msg.off_z = 0.6386574863423755;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleFormationParticipant msg;
    msg.setTimeStamp(0.1475618508033606);
    msg.setSource(2224U);
    msg.setSourceEntity(102U);
    msg.setDestination(28077U);
    msg.setDestinationEntity(177U);
    msg.vid = 22923U;
    msg.off_x = 0.709191606898419;
    msg.off_y = 0.676627654283491;
    msg.off_z = 0.4378361644603046;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleFormationParticipant #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.9165601051776878);
    msg.setSource(6121U);
    msg.setSourceEntity(130U);
    msg.setDestination(53726U);
    msg.setDestinationEntity(169U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.8766371044283001);
    msg.setSource(46685U);
    msg.setSourceEntity(223U);
    msg.setDestination(40742U);
    msg.setDestinationEntity(193U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StopManeuver msg;
    msg.setTimeStamp(0.09548704985104095);
    msg.setSource(12380U);
    msg.setSourceEntity(74U);
    msg.setDestination(55127U);
    msg.setDestinationEntity(44U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StopManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.2857875767907223);
    msg.setSource(48398U);
    msg.setSourceEntity(215U);
    msg.setDestination(16253U);
    msg.setDestinationEntity(141U);
    msg.mid = 16653U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.2100954336912031);
    msg.setSource(26727U);
    msg.setSourceEntity(114U);
    msg.setDestination(42420U);
    msg.setDestinationEntity(57U);
    msg.mid = 8878U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RegisterManeuver msg;
    msg.setTimeStamp(0.2252172838986618);
    msg.setSource(43585U);
    msg.setSourceEntity(120U);
    msg.setDestination(13363U);
    msg.setDestinationEntity(236U);
    msg.mid = 4388U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RegisterManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.7806127656677784);
    msg.setSource(21212U);
    msg.setSourceEntity(74U);
    msg.setDestination(5044U);
    msg.setDestinationEntity(239U);
    msg.state = 239U;
    msg.eta = 43799U;
    msg.info.assign("WRNEJOEPDZLKNUNDNZDGPBFTCMURHNVAEJEYHMUOTYKRKRPLGGVHYHCWVKCBFPNVHWARIPSPMGMSRORSEOZBTJLVTAXVMANUOKXLAWSCXLXGCAIFILIANCLKB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.8580164946611756);
    msg.setSource(21379U);
    msg.setSourceEntity(66U);
    msg.setDestination(59007U);
    msg.setDestinationEntity(91U);
    msg.state = 228U;
    msg.eta = 52724U;
    msg.info.assign("BQTLRGYSJAFGTRPULVNGQJPZJUQIGOCWBTEPCHZBYFYJPQZRKVHNWLCQTDDBCMCLHFNIBEJLUQZTDAPZSYCSMLLAAEGINWMETQRFLAXRJMKBSI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverControlState msg;
    msg.setTimeStamp(0.4154224098645025);
    msg.setSource(22625U);
    msg.setSourceEntity(203U);
    msg.setDestination(12221U);
    msg.setDestinationEntity(71U);
    msg.state = 167U;
    msg.eta = 46889U;
    msg.info.assign("UNAVFHVMDEXTNF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.7182449935482177);
    msg.setSource(26022U);
    msg.setSourceEntity(60U);
    msg.setDestination(20125U);
    msg.setDestinationEntity(147U);
    msg.system = 12371U;
    msg.duration = 34481U;
    msg.speed = 0.5048916426407166;
    msg.speed_units = 1U;
    msg.x = 0.6885390926418478;
    msg.y = 0.5458024226811226;
    msg.z = 0.387219903510304;
    msg.z_units = 121U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.9043025708391779);
    msg.setSource(7151U);
    msg.setSourceEntity(124U);
    msg.setDestination(8988U);
    msg.setDestinationEntity(15U);
    msg.system = 49114U;
    msg.duration = 31069U;
    msg.speed = 0.07221149989601927;
    msg.speed_units = 19U;
    msg.x = 0.41591864894637964;
    msg.y = 0.8137067450832313;
    msg.z = 0.7004924379390334;
    msg.z_units = 184U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowSystem msg;
    msg.setTimeStamp(0.1372474112901847);
    msg.setSource(44030U);
    msg.setSourceEntity(142U);
    msg.setDestination(46286U);
    msg.setDestinationEntity(84U);
    msg.system = 42226U;
    msg.duration = 23083U;
    msg.speed = 0.18254659252337202;
    msg.speed_units = 131U;
    msg.x = 0.09968712968788307;
    msg.y = 0.8059619977305228;
    msg.z = 0.8073753199561017;
    msg.z_units = 88U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowSystem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.757321714866888);
    msg.setSource(50340U);
    msg.setSourceEntity(148U);
    msg.setDestination(53664U);
    msg.setDestinationEntity(69U);
    msg.lat = 0.14529149046319378;
    msg.lon = 0.9226119802215261;
    msg.speed = 0.03794322951217288;
    msg.speed_units = 215U;
    msg.duration = 15708U;
    msg.sys_a = 19953U;
    msg.sys_b = 22054U;
    msg.move_threshold = 0.06005326833072966;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.7990855198255185);
    msg.setSource(10631U);
    msg.setSourceEntity(6U);
    msg.setDestination(9089U);
    msg.setDestinationEntity(162U);
    msg.lat = 0.33672761732964585;
    msg.lon = 0.969278496358168;
    msg.speed = 0.30848144163520086;
    msg.speed_units = 219U;
    msg.duration = 59541U;
    msg.sys_a = 6383U;
    msg.sys_b = 20513U;
    msg.move_threshold = 0.14928225484168467;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommsRelay msg;
    msg.setTimeStamp(0.6451795683867811);
    msg.setSource(1602U);
    msg.setSourceEntity(36U);
    msg.setDestination(38063U);
    msg.setDestinationEntity(174U);
    msg.lat = 0.6454245427820084;
    msg.lon = 0.47853311525857345;
    msg.speed = 0.5961753056875682;
    msg.speed_units = 234U;
    msg.duration = 49878U;
    msg.sys_a = 5055U;
    msg.sys_b = 51739U;
    msg.move_threshold = 0.2922892703612149;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommsRelay #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.22759838268311516);
    msg.setSource(26651U);
    msg.setSourceEntity(57U);
    msg.setDestination(61963U);
    msg.setDestinationEntity(191U);
    msg.lat = 0.46307865722584696;
    msg.lon = 0.12412955444795382;
    msg.z = 0.5178067712917642;
    msg.z_units = 152U;
    msg.speed = 0.2797055156768087;
    msg.speed_units = 86U;
    msg.custom.assign("GGIZJFXDKZMPKUVYYJDJHPLMCCSWLITSKFOQWQJAOKRIXAITGPJFLMTKULDUVJXPDBWESRWSXQOFRZRSWKYTBTWHAUBVXNTIHHOYZMRAEHOQFFQUCSIIVTIPEUTCANODZPLZUVGLBAMCGZMDAXXRXNDDRMBCVSEXBJNCXSFQYKVBDQWYJHZKWEZGMDWLHAIVNEVJECTNSYFGMJRFKZNYPBTQFWA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.7490982453132421);
    msg.setSource(36436U);
    msg.setSourceEntity(123U);
    msg.setDestination(38424U);
    msg.setDestinationEntity(137U);
    msg.lat = 0.35521462336945964;
    msg.lon = 0.5861849386279278;
    msg.z = 0.9154319219757368;
    msg.z_units = 61U;
    msg.speed = 0.4512958498627081;
    msg.speed_units = 242U;
    msg.custom.assign("RNTUEBKKQMRFRQDHONQSCTODFKLDTNVSREBYVHDVXWNSVMQDLLFPRGSLBALTNFUJZGICQOGJYCVWZUPHHHQEJMCCUYEEZTPHMOTTHULAMDPWQXSRGPEZNRPKNEXULPIDKOTEZKGXILYOWAIBIBBFUKRGHCUEBKIHQGARYCUXYOUVJAIGVWVZWQNWQWLCXLXAWFZCNFIBJMGHIDTPPAKYIXJCFSRDVDEOYZTWBMOSABAYJFJAZJMVZFXKJPNGXO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CoverArea msg;
    msg.setTimeStamp(0.06244737047082305);
    msg.setSource(58501U);
    msg.setSourceEntity(43U);
    msg.setDestination(56141U);
    msg.setDestinationEntity(8U);
    msg.lat = 0.47372090476034767;
    msg.lon = 0.21334393177073474;
    msg.z = 0.9230108560065167;
    msg.z_units = 9U;
    msg.speed = 0.5026640037834266;
    msg.speed_units = 226U;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.6346764315049968;
    tmp_msg_0.lon = 0.15214195860667512;
    msg.polygon.push_back(tmp_msg_0);
    msg.custom.assign("PKLBAZWOXMPLRTUTYBYNLGQULMICSACUQVYQDTNPGMXAQWPCEOIZJSHBZDRLTYGKARXOKENCEWR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CoverArea #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.463387401767696);
    msg.setSource(17093U);
    msg.setSourceEntity(179U);
    msg.setDestination(34899U);
    msg.setDestinationEntity(93U);
    msg.lat = 0.2076677009668939;
    msg.lon = 0.2927200521114818;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.42411684684137074);
    msg.setSource(47600U);
    msg.setSourceEntity(9U);
    msg.setDestination(8010U);
    msg.setDestinationEntity(12U);
    msg.lat = 0.8456761303310067;
    msg.lon = 0.21049359570910442;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PolygonVertex msg;
    msg.setTimeStamp(0.18189114725890676);
    msg.setSource(52299U);
    msg.setSourceEntity(15U);
    msg.setDestination(29849U);
    msg.setDestinationEntity(67U);
    msg.lat = 0.017220752728527633;
    msg.lon = 0.37595109129195114;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PolygonVertex #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.623130270303334);
    msg.setSource(516U);
    msg.setSourceEntity(168U);
    msg.setDestination(47106U);
    msg.setDestinationEntity(28U);
    msg.timeout = 9313U;
    msg.lat = 0.566899532323005;
    msg.lon = 0.6289215872532351;
    msg.z = 0.8945156176671629;
    msg.z_units = 134U;
    msg.pitch = 0.24022589964002938;
    msg.amplitude = 0.2925250844576285;
    msg.duration = 24776U;
    msg.speed = 0.08701952654217504;
    msg.speed_units = 221U;
    msg.radius = 0.8898672614956419;
    msg.direction = 237U;
    msg.custom.assign("URQOUXLDDSBKLAKRYUVIVLEXDITHGZHNLXVBFOFMMDQEXRFEIGSOQPENPLIMESVSITUJYKFXZSXVCCJITCEOBNDMLEZLUCBNZQKACYPZKFGDLCNWYGQTNZSXAPKBTDQZTRHWJEOADNMVVMQYERYRFOGCTFYQAHJOTTAHMJJVUSDIUWXHYSWRGSWKKURCAJNZWIFQMRHHPIBPMKWQSGZROCJWAHCAJKGUNUAGFWJPOLWFBXBV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.44077918320938825);
    msg.setSource(6699U);
    msg.setSourceEntity(208U);
    msg.setDestination(54199U);
    msg.setDestinationEntity(92U);
    msg.timeout = 65328U;
    msg.lat = 0.5866552823163445;
    msg.lon = 0.04264440964362026;
    msg.z = 0.9022357518349273;
    msg.z_units = 95U;
    msg.pitch = 0.5033262272060155;
    msg.amplitude = 0.02062248691071178;
    msg.duration = 38676U;
    msg.speed = 0.3626349543995844;
    msg.speed_units = 91U;
    msg.radius = 0.059438871423570294;
    msg.direction = 229U;
    msg.custom.assign("FHHQBCWQYOMOIXAFMEOBLJLQOGGYOSGCMVUNWHUWR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompassCalibration msg;
    msg.setTimeStamp(0.33587522618836474);
    msg.setSource(57256U);
    msg.setSourceEntity(3U);
    msg.setDestination(28540U);
    msg.setDestinationEntity(138U);
    msg.timeout = 28082U;
    msg.lat = 0.45297344243058935;
    msg.lon = 0.6385737776541849;
    msg.z = 0.2828621732749117;
    msg.z_units = 130U;
    msg.pitch = 0.14418411184481417;
    msg.amplitude = 0.7660172585112639;
    msg.duration = 7918U;
    msg.speed = 0.8118872252369163;
    msg.speed_units = 33U;
    msg.radius = 0.8593219737857023;
    msg.direction = 129U;
    msg.custom.assign("RGGFRXCKMWIOWEVUAWPQLXWQQRAIIOUFVXXILOQSNBXRGHGSYKQJVXUJSIABVTEBKPRTBYJVKDZPOLNFCTBNBVNRGGNAEGZDNJDYZLFEPQCRABHLCJPUUQVUTRKYHHFYLOQVXHMAZXGMCUOWCCORLSESQNEOJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompassCalibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.3618450787920493);
    msg.setSource(38370U);
    msg.setSourceEntity(112U);
    msg.setDestination(16000U);
    msg.setDestinationEntity(42U);
    msg.formation_name.assign("ODEKEKFQUNATKWAGTXTMRVJJDLFFHJXYXPUBDBHSSPPNJHATIDWTDLJQEKRSNCXXZQZWYUSMYQUFVNTJVNIVYCXCQLZLYDSYKMDPZGZIWIRAGGFOBEQHVTLNOCHWSFRUUJVKNOURGXHVWGODOVCYSBWJJOYUGIBFIUEOXMMIBHAPBRICWKZAAKQWBMGWEFHYGPRRHM");
    msg.reference_frame = 93U;
    msg.custom.assign("FNZULIJKSUIAXWCROVTMAJDMYSSCQIYYONQNHHUXCGPEFYYULSTJERHKFWKWOIGSFDNRB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.18526013005317343);
    msg.setSource(24429U);
    msg.setSourceEntity(35U);
    msg.setDestination(33822U);
    msg.setDestinationEntity(225U);
    msg.formation_name.assign("QSLAHJHWDQSFSNZEKOFEIYPLMYUDOHMTZMNCUDCNAJKEHJUXYNUQHPIUEJZTFTUHGQARLSMOVFRHZBYNOBDOBPCCQATLJOIRMPGEVTIUAJSTMGJXLUZKSPHNVZQOXWOGWHEYPPAVBYVGDPDKGEUBFYBZVLDTNKGIFSCCVNIGPBQXXAZSUXFYIXLKNJKRTJQHFYIVLBESMOAECYRBPFLWWZSJCWWDCRAWQLXDGBTCRGRAIVMXTWROKWFV");
    msg.reference_frame = 136U;
    msg.custom.assign("CLGBZMZHTWOVJPEZUXAFPIXRPAVVPOCLHYNNWZDBAABETOHYOUCSZSOEAUZIRULUWQIMWHZMZBIKWUKEDCVIQSFYPABNGXLRMCUSJXXZDHSYYKVCGLIHFRFGTDXWEKKYKQONXNECTEJUDJCUDCBOAOBMTGEBFVQBTXLOGSRLVJYNIHNTWVJQMPRRDWFIQKASJES");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationParameters msg;
    msg.setTimeStamp(0.13756060034423723);
    msg.setSource(31111U);
    msg.setSourceEntity(214U);
    msg.setDestination(16722U);
    msg.setDestinationEntity(192U);
    msg.formation_name.assign("NRDJHPYUFKPFPQNXCTGVLJQLKBWZGCSIXIGPJIZOKHEMODTRQRCXAWYRAMDBJKQNRDLWUAHJSFEDVCCUQYWTMDXWJCWXAAYCCOGZXANAORUKIKIMHMTESMSHWSTRIJWMLNBXYGBAGKSPUQYBCIZABWXZFZTZEGPGFY");
    msg.reference_frame = 160U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 25711U;
    tmp_msg_0.off_x = 0.7613374678831744;
    tmp_msg_0.off_y = 0.8938221678667599;
    tmp_msg_0.off_z = 0.0067372809009578205;
    msg.participants.push_back(tmp_msg_0);
    msg.custom.assign("XIIKQTCVAJACBQHTSNGWHPCRA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.45974756078982426);
    msg.setSource(18849U);
    msg.setSourceEntity(134U);
    msg.setDestination(45079U);
    msg.setDestinationEntity(247U);
    msg.group_name.assign("SOLTIJOWSOFAYDN");
    msg.formation_name.assign("SYUBVYAKSFXNMHKNIOBLAREJQDXICQYSTMUBPRMZTPTZWWRVDRKQVMYGTUAKGZCJDDLQLPMTLGWPBTIZNAHGHUNXPQGNCPCRXIWOQWIEHGBWVRJWFFBPNXVXNZNFIHCMCAUFDYCPLPBVZWVHEKAFOJQYOEZJLUIFAAVAXUXOJWEAMSPLF");
    msg.plan_id.assign("CLFEOERJLOKFDANJSEGUTWJWIIYYJOQUCEMMJOFVLAYMLECBUTUUNOFKTBFZAGWXZRSXMSIFNYBVEBVNTUIPHHSZGPOLKCKYGTGRYBXBXSTTZTHXVDTEUKPZWBHLVGFIRRKIQZQSZONPIAEMBCAMJJQHLXSJNDLCCDPNIACJWGRZZGROCHPQMZWFQDBCVPLEPPUXQDJMTSDVYAOLDVERKUGOYQGIXANBWHWNSHQFD");
    msg.description.assign("ELCVKIFYZGCVQOLRQNZUUGODICOJITKQUXKXJFHKMQPNAQWCCAEKATUTSJQDROYYIWGMYJNVSG");
    msg.leader_speed = 0.5888320273299799;
    msg.leader_bank_lim = 0.626007875496873;
    msg.pos_sim_err_lim = 0.5429249671664299;
    msg.pos_sim_err_wrn = 0.4448636031585703;
    msg.pos_sim_err_timeout = 27476U;
    msg.converg_max = 0.1946066641666746;
    msg.converg_timeout = 10678U;
    msg.comms_timeout = 21933U;
    msg.turb_lim = 0.8788141380743567;
    msg.custom.assign("LUUQWKGZIPLREPNHUHDJUDVFZCLCKZXWNENPGRGSFYODBHUIYNIYHWZKTTWWIMDLXJCTJCZLJUFBJHGCQTSORNJCEIHADEZCYPZMNSB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.7594311111438994);
    msg.setSource(47550U);
    msg.setSourceEntity(119U);
    msg.setDestination(54233U);
    msg.setDestinationEntity(114U);
    msg.group_name.assign("PDRLMOPCCHGFRDXTMXLIEJUXKZOZPOUPKESZVWNLYHSMAMRUNGQFXVCBHHQQKNPJHOUSDMAXGHZGSAGKHNXAWVJFFCWYWPJUJYLYNTZDVAYUREFDLIZDMHFYHSKEOKQWPSIEQACKXBEFWAIKTOGIKTHNGXQIQQDPCNJUPNDBIVFTSAUIEWYZCXB");
    msg.formation_name.assign("JPTZPMWXPYABQJYUJSFBAVMNVRTIWNFWCLRAFT");
    msg.plan_id.assign("ESCVTVKJWRCRULSEVGGHWROMJWXOZXBYQZADPTSSVANNQRTEAWPTVUAFNBDROMOWFFEZFFKKVBYEXUQWBUHMUGDUYAKGSCPPATEYKKHNLRBADPNHFXJMYADIZCEITRJXQGCTLCOMSUFBNDLZBPGRJXWYIBRFLBJPJWUQZVNHRHXKITGEIXGNOBQLWLSGKQISHEQHZDIOFMLASCQIGDIHJTLTPLEMQHZPNMIWKSOZCYJ");
    msg.description.assign("JGCGENHRHLGNUWDUXMEOTDUYSRFIKYMYYDPZQEPCWSXXIORQFIBZSAJCSFKIEBYSTGKLAOBLVUZWOSNXWDQTTMYKEFQHYYHIR");
    msg.leader_speed = 0.809703327204708;
    msg.leader_bank_lim = 0.5423169006369083;
    msg.pos_sim_err_lim = 0.8101296815552403;
    msg.pos_sim_err_wrn = 0.31032795240444955;
    msg.pos_sim_err_timeout = 16675U;
    msg.converg_max = 0.18026095671962583;
    msg.converg_timeout = 37434U;
    msg.comms_timeout = 18712U;
    msg.turb_lim = 0.6520722011740139;
    msg.custom.assign("RJZCXDUJWMWOGKLPMWUSSHTHVTTXEKOYWYHBRSZGFTQSDNIJYGFUTBONDSW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationPlanExecution msg;
    msg.setTimeStamp(0.08361793362669911);
    msg.setSource(58694U);
    msg.setSourceEntity(50U);
    msg.setDestination(41027U);
    msg.setDestinationEntity(34U);
    msg.group_name.assign("XLJSCKOFCHYTOLKJLMYBDEUSZIFVLCNARBQWPGAVZRJEVWYRMVWTZK");
    msg.formation_name.assign("VQQYBRFVYHWGLLEGHIIKOJTYUCLGKYJQGTBPUCBNUONFUOJVWYVZFBKFJHSMYITXXSXTQIGCODCZUAJUFAWGHMRNDZJRABTKRTDHLCMDAKBWXWEMNWSEANGZPDGTXKUDZQSDJHDNSZSBCCKZPELZDORREFQRHQXYDNMAOOLAFPVQKFVOUSLLJORXVHIZXPJHAVOWGMEBKVITT");
    msg.plan_id.assign("BAOOFMHYSNGLEGBIUFIVTFHFAFTHGWGKNAOHCKQKZSEQZATEKQQYEMXCVETAXLBJIPZSNRYIDYCWBTLJAACKOYPNAZTOBDHMKCRESOOCC");
    msg.description.assign("KFGUDNCHUPTTMLKBAMWKRJMDPHSTGDSWQSGDPGJCXDVXMFXKDZZJBTAFRXJVLYSQTLSCDWMNIQFJ");
    msg.leader_speed = 0.09612975082871922;
    msg.leader_bank_lim = 0.9510121494443744;
    msg.pos_sim_err_lim = 0.6963437736784734;
    msg.pos_sim_err_wrn = 0.7841365325852772;
    msg.pos_sim_err_timeout = 43950U;
    msg.converg_max = 0.6958223150828742;
    msg.converg_timeout = 2430U;
    msg.comms_timeout = 41513U;
    msg.turb_lim = 0.8426489483842708;
    msg.custom.assign("ZJVGFRLOJETZZBXNUXPSGKPQPFOSDGOBGDIFAFRSJUUVBWNXLTBAMJQDZIWUUZKTJYFPSZGWTYUVCXHQOHTJPIJVDEQNA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationPlanExecution #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.9958227283809032);
    msg.setSource(19526U);
    msg.setSourceEntity(76U);
    msg.setDestination(59879U);
    msg.setDestinationEntity(207U);
    msg.control_src = 17788U;
    msg.control_ent = 122U;
    msg.timeout = 0.9685291836042497;
    msg.loiter_radius = 0.9973204778475915;
    msg.altitude_interval = 0.7015269705622625;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.16190249685076263);
    msg.setSource(59847U);
    msg.setSourceEntity(2U);
    msg.setDestination(51121U);
    msg.setDestinationEntity(108U);
    msg.control_src = 15562U;
    msg.control_ent = 99U;
    msg.timeout = 0.8792732590764204;
    msg.loiter_radius = 0.1279762781072562;
    msg.altitude_interval = 0.7686215355032663;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowReference msg;
    msg.setTimeStamp(0.9845860470178962);
    msg.setSource(4818U);
    msg.setSourceEntity(97U);
    msg.setDestination(43108U);
    msg.setDestinationEntity(200U);
    msg.control_src = 59800U;
    msg.control_ent = 65U;
    msg.timeout = 0.688775696445451;
    msg.loiter_radius = 0.40927818160884744;
    msg.altitude_interval = 0.5253932752836046;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowReference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.49895840081298715);
    msg.setSource(24628U);
    msg.setSourceEntity(34U);
    msg.setDestination(3600U);
    msg.setDestinationEntity(128U);
    msg.flags = 106U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.8573361104395512;
    tmp_msg_0.speed_units = 214U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.5121863939392659;
    tmp_msg_1.z_units = 120U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.07805585702193008;
    msg.lon = 0.6488146912475675;
    msg.radius = 0.17079538795748705;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.6810935212106902);
    msg.setSource(3175U);
    msg.setSourceEntity(159U);
    msg.setDestination(4832U);
    msg.setDestinationEntity(173U);
    msg.flags = 174U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.8317592448479021;
    tmp_msg_0.speed_units = 219U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.2505537600335891;
    tmp_msg_1.z_units = 90U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.6522335329892511;
    msg.lon = 0.8016831640650189;
    msg.radius = 0.9039834208748743;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Reference msg;
    msg.setTimeStamp(0.21150660022962342);
    msg.setSource(34670U);
    msg.setSourceEntity(136U);
    msg.setDestination(28843U);
    msg.setDestinationEntity(13U);
    msg.flags = 103U;
    IMC::DesiredSpeed tmp_msg_0;
    tmp_msg_0.value = 0.27568968400115657;
    tmp_msg_0.speed_units = 102U;
    msg.speed.set(tmp_msg_0);
    IMC::DesiredZ tmp_msg_1;
    tmp_msg_1.value = 0.4907740244006833;
    tmp_msg_1.z_units = 234U;
    msg.z.set(tmp_msg_1);
    msg.lat = 0.7916632532887595;
    msg.lon = 0.7968131838543876;
    msg.radius = 0.6043549810653919;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Reference #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.5254882317621211);
    msg.setSource(42302U);
    msg.setSourceEntity(214U);
    msg.setDestination(59489U);
    msg.setDestinationEntity(23U);
    msg.control_src = 42155U;
    msg.control_ent = 13U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 128U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.1412087020354088;
    tmp_tmp_msg_0_0.speed_units = 2U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.24295954138443288;
    tmp_tmp_msg_0_1.z_units = 97U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.8065493094830625;
    tmp_msg_0.lon = 0.8722885055271762;
    tmp_msg_0.radius = 0.8122196739603923;
    msg.reference.set(tmp_msg_0);
    msg.state = 227U;
    msg.proximity = 84U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.2489177729974117);
    msg.setSource(12597U);
    msg.setSourceEntity(232U);
    msg.setDestination(3117U);
    msg.setDestinationEntity(168U);
    msg.control_src = 4894U;
    msg.control_ent = 116U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 172U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.03658892920085721;
    tmp_tmp_msg_0_0.speed_units = 192U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.4782067854525145;
    tmp_tmp_msg_0_1.z_units = 159U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.14821855662399352;
    tmp_msg_0.lon = 0.3322677299801302;
    tmp_msg_0.radius = 0.5899459533972069;
    msg.reference.set(tmp_msg_0);
    msg.state = 90U;
    msg.proximity = 185U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowRefState msg;
    msg.setTimeStamp(0.5546437469859812);
    msg.setSource(26504U);
    msg.setSourceEntity(232U);
    msg.setDestination(48049U);
    msg.setDestinationEntity(8U);
    msg.control_src = 20613U;
    msg.control_ent = 98U;
    IMC::Reference tmp_msg_0;
    tmp_msg_0.flags = 47U;
    IMC::DesiredSpeed tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.value = 0.8756164827674588;
    tmp_tmp_msg_0_0.speed_units = 38U;
    tmp_msg_0.speed.set(tmp_tmp_msg_0_0);
    IMC::DesiredZ tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.48432085529743574;
    tmp_tmp_msg_0_1.z_units = 228U;
    tmp_msg_0.z.set(tmp_tmp_msg_0_1);
    tmp_msg_0.lat = 0.1198168964220252;
    tmp_msg_0.lon = 0.07049262016554292;
    tmp_msg_0.radius = 0.599006220970909;
    msg.reference.set(tmp_msg_0);
    msg.state = 89U;
    msg.proximity = 208U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowRefState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.8145805165370917);
    msg.setSource(56484U);
    msg.setSourceEntity(243U);
    msg.setDestination(13092U);
    msg.setDestinationEntity(238U);
    msg.ax_cmd = 0.8659877773684764;
    msg.ay_cmd = 0.94031645570149;
    msg.az_cmd = 0.2534902855417358;
    msg.ax_des = 0.6258532852997737;
    msg.ay_des = 0.5579836704437056;
    msg.az_des = 0.1889144319971383;
    msg.virt_err_x = 0.14758720174939488;
    msg.virt_err_y = 0.019818111977398578;
    msg.virt_err_z = 0.9250556679712444;
    msg.surf_fdbk_x = 0.945377337429491;
    msg.surf_fdbk_y = 0.5584981482437621;
    msg.surf_fdbk_z = 0.17359972305589222;
    msg.surf_unkn_x = 0.27168082232668445;
    msg.surf_unkn_y = 0.16657614505126306;
    msg.surf_unkn_z = 0.19708936963972945;
    msg.ss_x = 0.15183981672406788;
    msg.ss_y = 0.6155351445421423;
    msg.ss_z = 0.27698353407222376;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.7109823937760774);
    msg.setSource(21739U);
    msg.setSourceEntity(82U);
    msg.setDestination(7499U);
    msg.setDestinationEntity(24U);
    msg.ax_cmd = 0.0598422182091356;
    msg.ay_cmd = 0.3223033846726341;
    msg.az_cmd = 0.3043021149082409;
    msg.ax_des = 0.2585846814925815;
    msg.ay_des = 0.8137977799963249;
    msg.az_des = 0.19422918051276006;
    msg.virt_err_x = 0.2759069252431181;
    msg.virt_err_y = 0.18498184298387343;
    msg.virt_err_z = 0.555268821235243;
    msg.surf_fdbk_x = 0.5978337620668689;
    msg.surf_fdbk_y = 0.8543631051688796;
    msg.surf_fdbk_z = 0.8675405292084226;
    msg.surf_unkn_x = 0.2929171004617518;
    msg.surf_unkn_y = 0.9334534280853961;
    msg.surf_unkn_z = 0.09801198699701263;
    msg.ss_x = 0.3912370270437444;
    msg.ss_y = 0.3032197766991509;
    msg.ss_z = 0.3857675997319202;
    IMC::RelativeState tmp_msg_0;
    tmp_msg_0.s_id.assign("GVVHXLHZMKZCSXWNKHXIQOJSKVDTRIBCZVLJXXLSDKOLCVBJQPFYAQQIKNAWBEXVNBQAARPZQHTYFBJPSNLJAZQSBLZMYZPKXHIMYZUAAPCRAWUEDPBPLTGOIUNROG");
    tmp_msg_0.dist = 0.5783870302304649;
    tmp_msg_0.err = 0.47414215500677637;
    tmp_msg_0.ctrl_imp = 0.13202408736663485;
    tmp_msg_0.rel_dir_x = 0.913280124423085;
    tmp_msg_0.rel_dir_y = 0.6080222642032617;
    tmp_msg_0.rel_dir_z = 0.9530431538023167;
    tmp_msg_0.err_x = 0.40280169799891896;
    tmp_msg_0.err_y = 0.16383923676367562;
    tmp_msg_0.err_z = 0.8201292489686255;
    tmp_msg_0.rf_err_x = 0.7810742410383669;
    tmp_msg_0.rf_err_y = 0.7728689200319099;
    tmp_msg_0.rf_err_z = 0.12738617899126825;
    tmp_msg_0.rf_err_vx = 0.49336327049135575;
    tmp_msg_0.rf_err_vy = 0.4875807091566674;
    tmp_msg_0.rf_err_vz = 0.19584442905488797;
    tmp_msg_0.ss_x = 0.8986468549370253;
    tmp_msg_0.ss_y = 0.6591335463197058;
    tmp_msg_0.ss_z = 0.48404644936272234;
    tmp_msg_0.virt_err_x = 0.9197173514616127;
    tmp_msg_0.virt_err_y = 0.3209482591137791;
    tmp_msg_0.virt_err_z = 0.45267851217917654;
    msg.rel_state.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationMonitor msg;
    msg.setTimeStamp(0.0569388447104644);
    msg.setSource(43109U);
    msg.setSourceEntity(1U);
    msg.setDestination(55468U);
    msg.setDestinationEntity(239U);
    msg.ax_cmd = 0.42702439644305723;
    msg.ay_cmd = 0.6458913828221635;
    msg.az_cmd = 0.16299219578548851;
    msg.ax_des = 0.48547880949037225;
    msg.ay_des = 0.754091463143998;
    msg.az_des = 0.3468466853732549;
    msg.virt_err_x = 0.14880883350342244;
    msg.virt_err_y = 0.2671458481363935;
    msg.virt_err_z = 0.2089377653206288;
    msg.surf_fdbk_x = 0.24856628824204774;
    msg.surf_fdbk_y = 0.35120276293076746;
    msg.surf_fdbk_z = 0.5198206660008915;
    msg.surf_unkn_x = 0.862061823725136;
    msg.surf_unkn_y = 0.26672977501317885;
    msg.surf_unkn_z = 0.701461002044972;
    msg.ss_x = 0.4208226901647397;
    msg.ss_y = 0.6360260871719872;
    msg.ss_z = 0.34421667926409183;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationMonitor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.9317719572941687);
    msg.setSource(24426U);
    msg.setSourceEntity(4U);
    msg.setDestination(58518U);
    msg.setDestinationEntity(245U);
    msg.s_id.assign("MEJAMBAODXJSTQHDSBOULLWQKZWIPVTNQFFYOICYUHZMRTPOLMNVKBSSVFNLVWOQIDIUWDQVMACPHKKOYFBGSUQCAZNOOPRIYREIMGWAWPYKJYNCIAIYZFAR");
    msg.dist = 0.9049842422272145;
    msg.err = 0.6398529243885371;
    msg.ctrl_imp = 0.4853360886522087;
    msg.rel_dir_x = 0.07123945601470172;
    msg.rel_dir_y = 0.9971655153363354;
    msg.rel_dir_z = 0.1326820937478972;
    msg.err_x = 0.35763534100569705;
    msg.err_y = 0.6460539485426222;
    msg.err_z = 0.5383923196656712;
    msg.rf_err_x = 0.6479193490875366;
    msg.rf_err_y = 0.7041769838454733;
    msg.rf_err_z = 0.05322506499780133;
    msg.rf_err_vx = 0.5959298705827307;
    msg.rf_err_vy = 0.2382098077913598;
    msg.rf_err_vz = 0.7302128668807818;
    msg.ss_x = 0.12064177781680141;
    msg.ss_y = 0.6553174576734544;
    msg.ss_z = 0.5166602552922953;
    msg.virt_err_x = 0.35488406843880216;
    msg.virt_err_y = 0.28439438725896227;
    msg.virt_err_z = 0.7566406534869917;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.8808290949833416);
    msg.setSource(32256U);
    msg.setSourceEntity(48U);
    msg.setDestination(12704U);
    msg.setDestinationEntity(231U);
    msg.s_id.assign("SNEFXXGWLMITGRDDMVSLTTCQUYKTEBSSLNBHRDYBCADOYLOPMJKEEUFDAGWOAYIKZOGCVKLDXNOCWPKWWZGVAHCQISTOMUICBQSEQYULJZPDHXIEUHPGLZWAIUGCVFLJQZGZBYHQQWGCPJMRSNEEMRBOXJRTUTYUHPNFTFJXZOYSHKFPVRBUEYGWNZVJZDAOFKITDNRMWICVPLLQUQRXBFHDKKZPSXHVANMAXMBXHOCVREAFR");
    msg.dist = 0.23225657241119613;
    msg.err = 0.9564590742818385;
    msg.ctrl_imp = 0.9865665862733365;
    msg.rel_dir_x = 0.7220252119658225;
    msg.rel_dir_y = 0.37177132413257175;
    msg.rel_dir_z = 0.2595286342049814;
    msg.err_x = 0.8340430168043486;
    msg.err_y = 0.01751633437055744;
    msg.err_z = 0.7737113508684383;
    msg.rf_err_x = 0.42567193845374873;
    msg.rf_err_y = 0.8712762930978675;
    msg.rf_err_z = 0.9405749033706814;
    msg.rf_err_vx = 0.41916814517059575;
    msg.rf_err_vy = 0.2545853968387778;
    msg.rf_err_vz = 0.42344810545293854;
    msg.ss_x = 0.9636539668738635;
    msg.ss_y = 0.9950337315089233;
    msg.ss_z = 0.6255008419179263;
    msg.virt_err_x = 0.3346384186666237;
    msg.virt_err_y = 0.5050370758217133;
    msg.virt_err_z = 0.35661985944943464;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeState msg;
    msg.setTimeStamp(0.9251826142925063);
    msg.setSource(48330U);
    msg.setSourceEntity(66U);
    msg.setDestination(18464U);
    msg.setDestinationEntity(219U);
    msg.s_id.assign("SUKJSTNKPLIKTRTOREKMLJNIKPPHVUSMPBUWQANODMTUOVZYTWQESMORZPJZLARFULQRYDWENMRNDTZIBIHZEFLGHTCIVBAFHYBIAQIDAFTMPGQVTJXGAVGFJDU");
    msg.dist = 0.5657060800885121;
    msg.err = 0.192954196123459;
    msg.ctrl_imp = 0.641586612099851;
    msg.rel_dir_x = 0.8035644010011217;
    msg.rel_dir_y = 0.7608414874631292;
    msg.rel_dir_z = 0.4390758316228064;
    msg.err_x = 0.7360319812603828;
    msg.err_y = 0.0038823025485487106;
    msg.err_z = 0.09629393979598688;
    msg.rf_err_x = 0.26875323031109644;
    msg.rf_err_y = 0.38709478753991444;
    msg.rf_err_z = 0.11766369760432449;
    msg.rf_err_vx = 0.7560694761191139;
    msg.rf_err_vy = 0.814605447702402;
    msg.rf_err_vz = 0.5158601083991633;
    msg.ss_x = 0.7963601919102203;
    msg.ss_y = 0.9313748897329397;
    msg.ss_z = 0.09952928810938677;
    msg.virt_err_x = 0.5775704733624403;
    msg.virt_err_y = 0.9649939862215187;
    msg.virt_err_z = 0.8260275544803853;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.28570248289905187);
    msg.setSource(26067U);
    msg.setSourceEntity(140U);
    msg.setDestination(17087U);
    msg.setDestinationEntity(101U);
    msg.timeout = 56285U;
    msg.rpm = 0.7930602577524659;
    msg.direction = 168U;
    msg.custom.assign("UUWWHQKRVBGOVKFJBHRPWFLZWNQCUIRUJVSSTDACOQBHZCJIQXQHYZXGEBVLMJLCTZGMWJXFMOTEMUOPHLHDOKNRPTLEWSLRRJJKALFQIRKSYWTLYNZBYIPAAYFGUEZWDZDKITAXPRIEACXMOGKNNAPVJTETVIKBEZFFR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.8044642230326371);
    msg.setSource(22221U);
    msg.setSourceEntity(42U);
    msg.setDestination(22845U);
    msg.setDestinationEntity(85U);
    msg.timeout = 47169U;
    msg.rpm = 0.24723496515599996;
    msg.direction = 10U;
    msg.custom.assign("LHDXWXBCMVSXIHTLZCJASAJMQDHBKNANEPRWXUMYFYHZVWRFWBAUUDLGTIICBALSJQHLTGESZNKRFYVWIFQEGXJHAEJOPMLWICDCBVGWOOZVEKXVYIOYUQXDFJKZFKCTGJPYHLKEGQCVDTLYIQRCMPGMRTNTDPFUGSIBCUMBAOAFYHQMKVB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Dislodge msg;
    msg.setTimeStamp(0.7764981550748743);
    msg.setSource(22181U);
    msg.setSourceEntity(203U);
    msg.setDestination(63484U);
    msg.setDestinationEntity(163U);
    msg.timeout = 49979U;
    msg.rpm = 0.9020058249145759;
    msg.direction = 225U;
    msg.custom.assign("LNODZEYILFLKGVRSOEYGXIOBGDSAZJNNACAAKIZJPUMESXTQSYZZLFQWYVONUWIQSORTYOCEYGEPTSOQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Dislodge #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.1964323172541751);
    msg.setSource(27889U);
    msg.setSourceEntity(135U);
    msg.setDestination(43421U);
    msg.setDestinationEntity(25U);
    msg.formation_name.assign("ZAMWNROBDOYCSRUZPNHQWXUJFWXLPHDJELWQQESIHKPLWYKLJRFBAINNKIJIGHQBGBVVMAKPXJEFLSSSYDBTNUXMWTZLRMIEGLOTELZZLSVPVGCOPVDAUDNIYKHKNCCZXIUWUGZHTXZTSCAMFOGEARKXAJDKQURBEJMAFGDUQRJNJITVOSHORQTPHCBHUCAERVGRFOZYSPHUWICMBLPQOCTCGFFTXGPDYYEIMDFZBWNYYQYSDMTKWMOVXJVE");
    msg.type = 234U;
    msg.op = 109U;
    msg.group_name.assign("PZAQIUZBFWOQRVHOHTSEWFYHJKWSVHZBXZJEDUUUPWESCTXQVGSKOLTYRLZMTIJMWEFGIEVGNEKUBPHBIWBPRYGJHOXCMYMQCQRZJZKNCFHADOOFTIDMQCASMGQPLDGKDNINCZGBDQBL");
    msg.plan_id.assign("MUQCPBXLKKIPDDNNWYODYPZBVLNTYMCXWWVYJTZZIYODLQGMBJRGEADXHLZAQKAKGYRHTTGHAEABNBRVYNOIMIFKZHNBBVGUQMXTTDAAEASFIFWUMRQDHVPLUCKNNKDRPXSSDGPIJJICEXKWMXIPYQNWICNETQKBOCRHCGCVSSMZTLHJCSOJB");
    msg.description.assign("HAMROIANFPJIL");
    msg.reference_frame = 205U;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 15177U;
    tmp_msg_0.off_x = 0.2860139652817445;
    tmp_msg_0.off_y = 0.8338652889264846;
    tmp_msg_0.off_z = 0.057043468974336986;
    msg.participants.push_back(tmp_msg_0);
    msg.leader_bank_lim = 0.3762318227175837;
    msg.leader_speed_min = 0.3831021290772306;
    msg.leader_speed_max = 0.7965346837282893;
    msg.leader_alt_min = 0.5890314931791538;
    msg.leader_alt_max = 0.3899389624678532;
    msg.pos_sim_err_lim = 0.7146849378023342;
    msg.pos_sim_err_wrn = 0.9416897957989222;
    msg.pos_sim_err_timeout = 50731U;
    msg.converg_max = 0.8669879334074523;
    msg.converg_timeout = 45390U;
    msg.comms_timeout = 63803U;
    msg.turb_lim = 0.8910898982792866;
    msg.custom.assign("YGADLPBTHDODBNOYBGNXABQSMOEBDQCDSEPVRIGXWZIKEJRRXNJOPMYMOAOKELQALWVSZJZKWXQDPKFEYFMAZJNSQHBAMWSVXTZFGQWEFTLLUCCJVKWJZPIMIPKTBKGRZAOMCWDPNUIG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.6238260435971709);
    msg.setSource(16692U);
    msg.setSourceEntity(126U);
    msg.setDestination(19615U);
    msg.setDestinationEntity(67U);
    msg.formation_name.assign("XKSNJHEKZTEURVHQDXWFTAABNNRIDHHMYIGHOIBJAUNPQGXZVKFMUPTYEFAJLAWNQKCPOODZWWLCOJSMPEUZHBDLTTJRRQSDKQMTTLLRNWGCFCZCUFJOYPKLRRQQCSYSHGXXZIBTYYV");
    msg.type = 22U;
    msg.op = 127U;
    msg.group_name.assign("WXHIQRVSKXTJXMOZDSEBLMTQMDVVIFFXLXSIHSPAOZDCFOCEMWLWMUXVUBDAGPYDMCBOBDCWXKVRHCFPNFSPJGPBYEKEZQBKQLHAHORJPGSXEGAWGUUOHMZCPBTIVDANSAFPMYXMZLKNYIDGEWZJBALJUUGGRJKYSTTZNRFUQT");
    msg.plan_id.assign("MSYBAISYRWEHFQGTPJQTAOIAPHMSCDUBNHMPYZEVYZUCOKLDYGTFOMHKCHREDTSGDNUGQBLJNQTUKFSECFOCGFDYZPOVJQPHYIKLBJIZOWEDKRZHLXTILZLIKMRATFJQBAWZKMBGHULWQXAWJWTUEVZOFDIAJWZVFNSPKTRVPBXXERUGAFXKBRDKXLIHYUCNAQHPYOMMMDEUEBEIXOFPBSQNSOVXWXWSNVRWVCRGANIGRJVNL");
    msg.description.assign("IDQEFHNHAJYTRVYUDZQEKDEYNFSXADYJXJSFPWRYWRKSTDVZLIPNMAFAENSHHCOXANA");
    msg.reference_frame = 28U;
    msg.leader_bank_lim = 0.7823647783903683;
    msg.leader_speed_min = 0.1974578358061546;
    msg.leader_speed_max = 0.986793298272046;
    msg.leader_alt_min = 0.3556168177715996;
    msg.leader_alt_max = 0.23044178590921538;
    msg.pos_sim_err_lim = 0.3968813301833567;
    msg.pos_sim_err_wrn = 0.3037692559896492;
    msg.pos_sim_err_timeout = 63201U;
    msg.converg_max = 0.07217531536986788;
    msg.converg_timeout = 19364U;
    msg.comms_timeout = 61217U;
    msg.turb_lim = 0.7042753475647263;
    msg.custom.assign("OJXNAIGFQDSSFHXABHGPSFJSWNZHLCMHRLQEOFYRUXQDWIBVOLCAQJKMUSCPDXWGMDHIIRTUECRVQMWLHIOXFLZYDLJDATQURSGVAODCWLNYTBICWPBIRBKYRQCUZNTOPAPZXMPKEXNHTOUYIQKLMFFSYGNWWHGCEPTUWECUVVXXRMHKFIZGSKBTBNKEWTEANJZOPGCLLOQOQZEFNYBYZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Formation msg;
    msg.setTimeStamp(0.9659539596637168);
    msg.setSource(45241U);
    msg.setSourceEntity(239U);
    msg.setDestination(54749U);
    msg.setDestinationEntity(35U);
    msg.formation_name.assign("ABEOWNUXBYSYLDICGCDHUSQQRLZOIPSMFFPVQTGUUJSUWBNCHPBTKQSUVZODEVEWIJJHDHXXVRANWLNBXQJCBHIZJAQCHKRNMGRTUCFLANGFZWOKMKRKPLDAZEPMSFQHLEMKXHENFANYASEGILKKZQYZYGPMEIOPLJTCYSKEDXVALRHCAFOCYWKXZGVOLYQNRBYZWMQRPVDFTTRHOVPJDTUIWEVTITDOMPMBXBJAVRIJOFMSIWUUTCXND");
    msg.type = 217U;
    msg.op = 107U;
    msg.group_name.assign("CWWHHJNGPFDLLJKJURUZNQICIGIQIVTDXJRESKPHJNXBNYGKOZXDPWGWRTQNQBUHEDDAZDBSMTGOYMMQOPQOKQMPUOBSBCPVXBHEOFUQFBFCRHZPFEOCWZURFAFBICPSRJRABAFMIZLIXYSSLIHVMKATDEXSNYXIKNTUPJNVK");
    msg.plan_id.assign("XPDRUZIEBFPZWQCFRSVUBHVFWNGMCKPCODAXLJMBHMIOIOMJBFRCLADKKTFTQMKNY");
    msg.description.assign("DDHGVMTNZWTJXFUGHSBKOXDBUDKXAVBKSXGZEIBISIIANNMKZLUGSEHTGUVKPIVKKXMMTBZPEWALLFJJPJVCQYXXFPFEGCJILYNSNPDYSRCVRQWEGOHJZWCRZVDTUQXNMWAEAJYHBXYNLNZHHJOIYZSFONCQYUQCYETAALQDFMFEDBZWKPGPQDWORGUWBFSMRRRKG");
    msg.reference_frame = 27U;
    msg.leader_bank_lim = 0.3633750030040328;
    msg.leader_speed_min = 0.48777738320676467;
    msg.leader_speed_max = 0.9791652236089833;
    msg.leader_alt_min = 0.5083497703011224;
    msg.leader_alt_max = 0.8086508800547623;
    msg.pos_sim_err_lim = 0.4073738436908373;
    msg.pos_sim_err_wrn = 0.8548352586477035;
    msg.pos_sim_err_timeout = 40239U;
    msg.converg_max = 0.4521086182194267;
    msg.converg_timeout = 65369U;
    msg.comms_timeout = 64811U;
    msg.turb_lim = 0.9025076184586431;
    msg.custom.assign("JZAKHLVJUWTFORQQODWXEKKBYIUCECICRDCKUMYDBZPNWELPOKTYKDMNPSCINJZSXHTGXCRCHULWWJJTINAHPQMGPOPZKPSUTDOTXEBOADWLFTGVYBUAJYZJWFZDSIIVMGROXUIEQLZUOGONUDHMQNFEKWAFMVEMAXIRBYFMZGSWLRNBDHRKEKSSNQGRBJDVXULNTXBEOVFZXHH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Formation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.945944114725998);
    msg.setSource(36403U);
    msg.setSourceEntity(157U);
    msg.setDestination(18317U);
    msg.setDestinationEntity(101U);
    msg.timeout = 22041U;
    msg.lat = 0.519795160361315;
    msg.lon = 0.7737968033468322;
    msg.z = 0.8915842042605496;
    msg.z_units = 82U;
    msg.speed = 0.4294978320019378;
    msg.speed_units = 197U;
    msg.custom.assign("VHMDCBJQWFRPBEWTRHXRGVBHCIYNKEEMLUZAYQYSKBGDSSRWCEEVSLMAPPWDGXAMVYFLLDNEGYGMTDHSZTKOUOLSYOHNUXUMUSLDVPPJNOJKHTJRJZOSTAATUEDZF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.4968669162648539);
    msg.setSource(27285U);
    msg.setSourceEntity(63U);
    msg.setDestination(28592U);
    msg.setDestinationEntity(209U);
    msg.timeout = 9742U;
    msg.lat = 0.9832555283259224;
    msg.lon = 0.4250869846999802;
    msg.z = 0.10235875723501442;
    msg.z_units = 221U;
    msg.speed = 0.1271962514680911;
    msg.speed_units = 196U;
    msg.custom.assign("WBETOMJPNUGZVYNCWBJQTNVBQLVFHRUYZKBYXAFDCOTKRVHNQUPWBSRZPQCIZDQCWCYITCWLABQFAPBPLCSREKSHFAOPIDEKYGSNWBDMTXHAGGLQXFCIYJSOTDTRACCLFNGLHDSSYYLRJUXNMITPKIKZVKERGIDXOWB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Launch msg;
    msg.setTimeStamp(0.07637859661459334);
    msg.setSource(11351U);
    msg.setSourceEntity(100U);
    msg.setDestination(59503U);
    msg.setDestinationEntity(157U);
    msg.timeout = 24739U;
    msg.lat = 0.6033152033103171;
    msg.lon = 0.5020852965899395;
    msg.z = 0.6974100839525619;
    msg.z_units = 208U;
    msg.speed = 0.7300701560355854;
    msg.speed_units = 7U;
    msg.custom.assign("BYTGMPQPGLDXWCRRCUCRXHLSMIIWEIASWANPKMFFBTONULCIUVJQCJUYGOZFHOZLCTVFFQWIADADYTKBIHETZOMAWAVEKNJTFIVRJKHHRBMGDSLWWETLRGLFXXTJOPYGRGESPYLBUQGWQX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Launch #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.8720487707742166);
    msg.setSource(11549U);
    msg.setSourceEntity(54U);
    msg.setDestination(39788U);
    msg.setDestinationEntity(64U);
    msg.timeout = 48729U;
    msg.lat = 0.0649023305052131;
    msg.lon = 0.7968916667521442;
    msg.z = 0.629940985973683;
    msg.z_units = 74U;
    msg.speed = 0.0009052519337152676;
    msg.speed_units = 250U;
    msg.custom.assign("PUXRPRCTMTXVOZRZSLETHVDRODCRPNUJLXGLKGQGFTTLOREJBSSYWWKTASCKPAEBLYOFXVFKCNQVMMNNFJCQFNTKYQNSIGQPKEIDBSNIYRJXQSMLFIHVYICVHYD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.8699834946715815);
    msg.setSource(26958U);
    msg.setSourceEntity(36U);
    msg.setDestination(19928U);
    msg.setDestinationEntity(202U);
    msg.timeout = 34000U;
    msg.lat = 0.005988141313213791;
    msg.lon = 0.2762257977515118;
    msg.z = 0.6370827958951815;
    msg.z_units = 197U;
    msg.speed = 0.11453403094680148;
    msg.speed_units = 102U;
    msg.custom.assign("AAKSCGOGUJYTUHWWRLFRRKQDRTKDPRZVOHXNLCVHFPNWPBFQFNEVWBXLODNTLESGZJMSKMHMZNSBTLPKSEUASLIEVHLUOLQJOTTQBUTLOIPCPPIZRIAABLADWOIMYYJNVSGWIYFQMBAGTMYMGNEHPMBQWYJJCXZJYCXVFAFDXJEADRPBCSCKQHUFUSBOSWVDNKQZQXQKGCEWFXGJEBRUVKDVNOF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Drop msg;
    msg.setTimeStamp(0.6176737287709966);
    msg.setSource(13461U);
    msg.setSourceEntity(184U);
    msg.setDestination(55156U);
    msg.setDestinationEntity(192U);
    msg.timeout = 39987U;
    msg.lat = 0.14190492404754396;
    msg.lon = 0.45751998603625454;
    msg.z = 0.9229399324280886;
    msg.z_units = 84U;
    msg.speed = 0.9830988069449124;
    msg.speed_units = 222U;
    msg.custom.assign("OSXHASNHUZOFYEZLORWMLGHMITJBKUYDDODTNYSPKSZBNPOMQYAKXMIRLYPWEJJFDKNXRDJRLIYAKWRRFJTEMDBDJZTLRAURQTIZLCHSBFKFTXNBMUFPILAMPWVIHBVCOACXCFGDSBFZCUQWNYBQVVASTGISSAW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Drop #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.022799586081109324);
    msg.setSource(5869U);
    msg.setSourceEntity(53U);
    msg.setDestination(47366U);
    msg.setDestinationEntity(105U);
    msg.arrival_time = 0.9945688718950734;
    msg.lat = 0.5257771472934111;
    msg.lon = 0.20879394862218403;
    msg.z = 0.28120565561551314;
    msg.z_units = 146U;
    msg.travel_z = 0.04965592734157742;
    msg.travel_z_units = 96U;
    msg.delayed = 70U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.7936359444967934);
    msg.setSource(7109U);
    msg.setSourceEntity(127U);
    msg.setDestination(27993U);
    msg.setDestinationEntity(98U);
    msg.arrival_time = 0.6587860654195371;
    msg.lat = 0.22093556009885185;
    msg.lon = 0.5783728290229805;
    msg.z = 0.4504372511750089;
    msg.z_units = 10U;
    msg.travel_z = 0.8974518227447524;
    msg.travel_z_units = 6U;
    msg.delayed = 253U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScheduledGoto msg;
    msg.setTimeStamp(0.8197874909651489);
    msg.setSource(35598U);
    msg.setSourceEntity(211U);
    msg.setDestination(35670U);
    msg.setDestinationEntity(61U);
    msg.arrival_time = 0.2173100320014717;
    msg.lat = 0.18977599261864264;
    msg.lon = 0.7355588291925141;
    msg.z = 0.5528101280489047;
    msg.z_units = 204U;
    msg.travel_z = 0.20136520604381014;
    msg.travel_z_units = 149U;
    msg.delayed = 252U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScheduledGoto #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.3779281928968853);
    msg.setSource(1273U);
    msg.setSourceEntity(249U);
    msg.setDestination(59265U);
    msg.setDestinationEntity(184U);
    msg.lat = 0.09566135813168486;
    msg.lon = 0.9342627003365035;
    msg.z = 0.23621234150255344;
    msg.z_units = 169U;
    msg.speed = 0.4169031748028321;
    msg.speed_units = 63U;
    msg.bearing = 0.5619887578217039;
    msg.cross_angle = 0.44090997682115984;
    msg.width = 0.3270581858286118;
    msg.length = 0.83844425727497;
    msg.coff = 164U;
    msg.angaperture = 0.7284771768618465;
    msg.range = 49042U;
    msg.overlap = 165U;
    msg.flags = 214U;
    msg.custom.assign("SAGSYOOJRMAWYTGAPBCQZCYCIK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.9627313344815815);
    msg.setSource(18954U);
    msg.setSourceEntity(60U);
    msg.setDestination(58247U);
    msg.setDestinationEntity(183U);
    msg.lat = 0.28242444494917707;
    msg.lon = 0.5036540784776642;
    msg.z = 0.7856231304613814;
    msg.z_units = 6U;
    msg.speed = 0.9098577404077057;
    msg.speed_units = 60U;
    msg.bearing = 0.4210323260391874;
    msg.cross_angle = 0.839642252657049;
    msg.width = 0.425954088999679;
    msg.length = 0.522598620268937;
    msg.coff = 0U;
    msg.angaperture = 0.09217766240643865;
    msg.range = 30021U;
    msg.overlap = 17U;
    msg.flags = 188U;
    msg.custom.assign("VTLVSXSOGEIPDKZQTBTFTTPAUZWIYCOAJDLKCDFAFMFONWEBGEQQTJLGWKVHSMPWBYNENGIHITTXCIQVFLXZQEXBAWHHWYGMMDFQPFSQO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RowsCoverage msg;
    msg.setTimeStamp(0.28012078314563493);
    msg.setSource(63369U);
    msg.setSourceEntity(98U);
    msg.setDestination(24734U);
    msg.setDestinationEntity(103U);
    msg.lat = 0.5450237127373154;
    msg.lon = 0.5991369315764972;
    msg.z = 0.6913840441225192;
    msg.z_units = 249U;
    msg.speed = 0.48093480140068234;
    msg.speed_units = 200U;
    msg.bearing = 0.12018715478048592;
    msg.cross_angle = 0.43570366854174425;
    msg.width = 0.9856080741721697;
    msg.length = 0.0010668627761075689;
    msg.coff = 16U;
    msg.angaperture = 0.4936844314991703;
    msg.range = 24205U;
    msg.overlap = 139U;
    msg.flags = 207U;
    msg.custom.assign("EEJIQYOSTJMBUXEJJVZAKEWTNRZMKSXYHMMCERTUWVKOUGRODEOIXURN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RowsCoverage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.8906106828945861);
    msg.setSource(10409U);
    msg.setSourceEntity(197U);
    msg.setDestination(45323U);
    msg.setDestinationEntity(38U);
    msg.timeout = 22147U;
    msg.lat = 0.16729081765711673;
    msg.lon = 0.08680201386463504;
    msg.z = 0.18190560076664197;
    msg.z_units = 147U;
    msg.speed = 0.7515459264969998;
    msg.speed_units = 0U;
    msg.syringe0 = 69U;
    msg.syringe1 = 125U;
    msg.syringe2 = 254U;
    msg.custom.assign("TJILXTHTANNQYNPWSLIEKTAYGOGEKXWXPFHNVUIVZLZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.33566109193765425);
    msg.setSource(42307U);
    msg.setSourceEntity(172U);
    msg.setDestination(1944U);
    msg.setDestinationEntity(164U);
    msg.timeout = 41246U;
    msg.lat = 0.017162635874718113;
    msg.lon = 0.5977044451115379;
    msg.z = 0.9618041224982173;
    msg.z_units = 104U;
    msg.speed = 0.351563920337155;
    msg.speed_units = 13U;
    msg.syringe0 = 197U;
    msg.syringe1 = 218U;
    msg.syringe2 = 223U;
    msg.custom.assign("JMOKUDPWTZCPSLYRLHFGXVMHIZGXMFSKLQHDVHUYYMAOFMGIAJKCKDBIYPYCEBSWLVNRWIVSXWGWJNOGWRSRDFJCIZVQULUYLMWCQEUBANBOGJJTWHFICVOKSEVEPSCFDU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Sample msg;
    msg.setTimeStamp(0.8074890439969558);
    msg.setSource(12729U);
    msg.setSourceEntity(85U);
    msg.setDestination(23460U);
    msg.setDestinationEntity(1U);
    msg.timeout = 25112U;
    msg.lat = 0.57688597458224;
    msg.lon = 0.766294550592656;
    msg.z = 0.3560166603452626;
    msg.z_units = 78U;
    msg.speed = 0.8323645666420231;
    msg.speed_units = 31U;
    msg.syringe0 = 178U;
    msg.syringe1 = 219U;
    msg.syringe2 = 189U;
    msg.custom.assign("KGYDTUOKSNWNLVMFXXPOVYDQSEUJJZIMQZDCZAXGUZINWVODYASJRUEQGGLSHJWETCUNNCFTULRMLMQUVCKMCGWJRKZHHLFGBVK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Sample #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.4938889169370171);
    msg.setSource(35695U);
    msg.setSourceEntity(203U);
    msg.setDestination(37845U);
    msg.setDestinationEntity(46U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.44329333078345323);
    msg.setSource(51790U);
    msg.setSourceEntity(26U);
    msg.setDestination(61801U);
    msg.setDestinationEntity(145U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTracking msg;
    msg.setTimeStamp(0.9111031050231564);
    msg.setSource(32776U);
    msg.setSourceEntity(153U);
    msg.setDestination(3975U);
    msg.setDestinationEntity(130U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTracking #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.3600740692874428);
    msg.setSource(12864U);
    msg.setSourceEntity(30U);
    msg.setDestination(28404U);
    msg.setDestinationEntity(210U);
    msg.lat = 0.7822558474628197;
    msg.lon = 0.4912663148767341;
    msg.z = 0.6087857239338603;
    msg.z_units = 64U;
    msg.speed = 0.20173579706889821;
    msg.speed_units = 226U;
    msg.takeoff_pitch = 0.966053925486317;
    msg.custom.assign("PRYJRZHEWXKDFEQJZMCKZXFWGQXJCATGTYATPEBBCVKHBQBCOOHFAVXICKTTINUDXCD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.8303624360939306);
    msg.setSource(11001U);
    msg.setSourceEntity(6U);
    msg.setDestination(17325U);
    msg.setDestinationEntity(155U);
    msg.lat = 0.4399389772840884;
    msg.lon = 0.25701083572678074;
    msg.z = 0.20533515166140703;
    msg.z_units = 44U;
    msg.speed = 0.178504474502312;
    msg.speed_units = 90U;
    msg.takeoff_pitch = 0.7164466993536032;
    msg.custom.assign("CYIMSUONZIGINPPHOWVYLDUPPBVAHCQICLZAVLQSPMEOIEPTMTHWPIQUXUAQKWDHJNZFYUIRFABBZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Takeoff msg;
    msg.setTimeStamp(0.007627603410070294);
    msg.setSource(39870U);
    msg.setSourceEntity(130U);
    msg.setDestination(49362U);
    msg.setDestinationEntity(189U);
    msg.lat = 0.3397081365160637;
    msg.lon = 0.39546244870201375;
    msg.z = 0.6204026727741067;
    msg.z_units = 35U;
    msg.speed = 0.268708052426301;
    msg.speed_units = 199U;
    msg.takeoff_pitch = 0.431649989044101;
    msg.custom.assign("NEQLWSRTXMDOLKTWWKHFFTIOZJIZPFBSYSIDKVCVTDPJVKXBNNXNVSLTYPLEJUFZYAPXUGBMXUROCEPAJQRTSKRQKNABQGIRZNCONNDMPDIBVYIGKCDF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Takeoff #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.4631731977273339);
    msg.setSource(41922U);
    msg.setSourceEntity(38U);
    msg.setDestination(20135U);
    msg.setDestinationEntity(51U);
    msg.lat = 0.718754015636992;
    msg.lon = 0.19279596817447198;
    msg.z = 0.9591840076357124;
    msg.z_units = 242U;
    msg.speed = 0.4361605357018975;
    msg.speed_units = 117U;
    msg.abort_z = 0.1571739147566078;
    msg.bearing = 0.03140681875610296;
    msg.glide_slope = 168U;
    msg.glide_slope_alt = 0.659824440529347;
    msg.custom.assign("TTEEJOVAZMFWBGKBFLNXGAXYZGNRAIWXNTMRACMJWRTPBVYQA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.5025006011132555);
    msg.setSource(30994U);
    msg.setSourceEntity(79U);
    msg.setDestination(63227U);
    msg.setDestinationEntity(117U);
    msg.lat = 0.8082558620657091;
    msg.lon = 0.937993033930311;
    msg.z = 0.4980750255701062;
    msg.z_units = 124U;
    msg.speed = 0.7895535412141756;
    msg.speed_units = 9U;
    msg.abort_z = 0.6539924932177578;
    msg.bearing = 0.18454603218393817;
    msg.glide_slope = 56U;
    msg.glide_slope_alt = 0.6867501874144206;
    msg.custom.assign("FRBNNBXIFHZRQMFFQIWXLEIWWSSCYKVOTWJPKSGNORIMCCQBGLGJKEXUXKPFKJMZIHIYZWQCUVDNEU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Land msg;
    msg.setTimeStamp(0.6946273306257281);
    msg.setSource(13088U);
    msg.setSourceEntity(99U);
    msg.setDestination(55039U);
    msg.setDestinationEntity(1U);
    msg.lat = 0.5046804945008383;
    msg.lon = 0.2290754699087838;
    msg.z = 0.7785261953372125;
    msg.z_units = 167U;
    msg.speed = 0.32266269700058925;
    msg.speed_units = 111U;
    msg.abort_z = 0.8931649434417327;
    msg.bearing = 0.4222350019878467;
    msg.glide_slope = 82U;
    msg.glide_slope_alt = 0.2153269846246323;
    msg.custom.assign("QOAVLCLQZYBGYZPQEDNZSIMDMVBRFWUZJZKOQVLQRIVILNWGCWJECBSAUEVMNYFJNAHMRIBPCGVTTTCPXUNMVIWQZFWUWMRMSRNJDVOXRMFKUGESLKIXHNKJURSCGJTADHFJDUPTXBBVTYUKWEOYIBOQMPJHFFHXHIJOZUTRXLACWJLGABFGTYTPNDFPSQDSGVSHGIDKLYMROLZXKOSPNESOICEBUEQRWEXPCHKEX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Land #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.7362685090359485);
    msg.setSource(32616U);
    msg.setSourceEntity(121U);
    msg.setDestination(55434U);
    msg.setDestinationEntity(19U);
    msg.lat = 0.5425466998922683;
    msg.lon = 0.034545501597595285;
    msg.speed = 0.8454798873473012;
    msg.speed_units = 172U;
    msg.limits = 60U;
    msg.max_depth = 0.0498336327309562;
    msg.min_alt = 0.3075565968459061;
    msg.time_limit = 0.6895622819524744;
    msg.controller.assign("HPEAGOCKXNNTOKZPDJVQQASUYU");
    msg.custom.assign("GWUAXZWGCWYZXSAGMITYBGLXZMUBSZAFUSWYVBNCEVEHEPQFKYTMHCWQBKDMRNFZHRRIXZWKDBMJJRZUWCJOYITTDWBBQORQFSLICCVOFLQGVVILDTNJBFEKHRIMVUUVKXISPZAIOIJQLAPDPUOLHDTVUJNCXSEVCTJGRWQPAFTYGARQABRDWINHHNPHNEFTQMCYSHTFKKGMAPJZCYKLPODKLUXNPYHUOONQLMYJXSMA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.4622164276192833);
    msg.setSource(28137U);
    msg.setSourceEntity(76U);
    msg.setDestination(19044U);
    msg.setDestinationEntity(179U);
    msg.lat = 0.42387008612566257;
    msg.lon = 0.6900908305565533;
    msg.speed = 0.7711812985212266;
    msg.speed_units = 57U;
    msg.limits = 127U;
    msg.max_depth = 0.1480135424271951;
    msg.min_alt = 0.03393704357743965;
    msg.time_limit = 0.08887216716725699;
    msg.controller.assign("NWLJKLVVGHJEXSBZYEPHKDOYTPSYZFQWXEMRTZACDNCLJANAPRUSSEJMXXIPWEGAMSAXSYCHMXJIDMLMOHDFUPQUFMTRKLCZUFHQVNZNWWBHWVKPWPLTGNWIQKVIZDGSXGBEVYUIHIZTUCVXGX");
    msg.custom.assign("SHATVSSFYZWJRHAHVUDEHWRXSNEMDGZHUGUZYHFIPEVMJDQTSTNXGKQOMIIQNBHPPAYYRJZFNUFZVKXBBFNGGLAUJTAXYFOOOEGWE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutonomousSection msg;
    msg.setTimeStamp(0.5151719453884431);
    msg.setSource(48196U);
    msg.setSourceEntity(163U);
    msg.setDestination(31006U);
    msg.setDestinationEntity(74U);
    msg.lat = 0.622553360826819;
    msg.lon = 0.6728024964788324;
    msg.speed = 0.5545601262319934;
    msg.speed_units = 144U;
    msg.limits = 173U;
    msg.max_depth = 0.29414785171636015;
    msg.min_alt = 0.4731758335349704;
    msg.time_limit = 0.47493851707875534;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.7515825327509633;
    tmp_msg_0.lon = 0.5204804956463311;
    msg.area_limits.push_back(tmp_msg_0);
    msg.controller.assign("CUQKMMSEENZKEXJNLNQEBTXSLAJINPZTWCGFTWHIGRJQLMPDSAJCCDPQKAQCSNIIJVHLMOUEUWLRCTXCHIRLGDUPJGBZXVUJVWSFYHQFWIDKLYYAOOFUKVYPWKTWGKHXOQYMABSVPGTDNFZSGAHUBZODIJYRVKGBLXZLNZRQIFYISZTDXTPQDVAHEYMMEGFCLBAHCUSVZXRZ");
    msg.custom.assign("VUWGWTTMIDQUKSNLIIGMUXPEACMRTOTSDMDALESRHQXWMSKARVROPZENRMNJLKIJTVQENVXJWGZHFHVDCCCOOPXEPTOCBRZJLBKPGVJZQRQKYURYKTUJBAOAZNQDYXJUZOFCGIY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutonomousSection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.4577656206003473);
    msg.setSource(16636U);
    msg.setSourceEntity(44U);
    msg.setDestination(12726U);
    msg.setDestinationEntity(49U);
    msg.target.assign("BESNNYTZZJUHLVNDWXOTONTJQCZFLGHCBZHACOWEFJMHZORSXATVCDINCAWZBVEGAMCRUOSRIKYFCXYLFNRMMUMREHFZBAWUSNWHUWWBNUUEMEKLPER");
    msg.max_speed = 0.5779499686713689;
    msg.speed_units = 31U;
    msg.lat = 0.14842166552125846;
    msg.lon = 0.5157485722660041;
    msg.z = 0.28564275386804483;
    msg.z_units = 245U;
    msg.custom.assign("ZNOXZFPGSRVBMJJCBKXHXMCWBHSGDORVDLKMJUBASWWYALXKPLLEPDIYNADVVBJVZFRIGAZGATHXKVGZGZTCPRVCTFQIJWMWPMUQIHPAIURSAXEITBBTGEZKDUOBKFTDCEJZSVMFMZDNLQMLUHNEXYCHBGIWDZLHVPLKSHROH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.7314699756268592);
    msg.setSource(61184U);
    msg.setSourceEntity(65U);
    msg.setDestination(60927U);
    msg.setDestinationEntity(50U);
    msg.target.assign("YCPLKLQAGRUYVWSUUQKBBDJNGTQCNNDJZVNAHMHLHIBYTXRZXKTRMWIQPMRHIAKUBIHALZRURZSRYXXPXQENQTWPBNELESUFAESVCBSWNSXQWSFDJIKDYQDNRAHGGFXMVRFMBNJCGYBCOLGFUOVAONEVUYWJDTBZKOIKHQESPPPKPXWCHWOHXTIFDJGZVAFFCIPJMLAVZLTWFMCTTUFAMHMB");
    msg.max_speed = 0.8761051777254184;
    msg.speed_units = 118U;
    msg.lat = 0.7285972377522496;
    msg.lon = 0.07604736077031693;
    msg.z = 0.9624566029859892;
    msg.z_units = 243U;
    msg.custom.assign("PZTSBHKOCRQIUZANLRMGXQGIMWAXRYHBWEWIZVFULUTDHJUWTONAOMLVGZIVJSHNLQJRPOWFBPPRSZYKBPDXDWCFYBOZNYRPCQAJJXKMXHPXRILXVGVDYZITSAETXULKAMYFHXNFUVGHBQTOVQEOHWTIBKQZLTCGJPOENNDFKSCWGPEYUUYDIXIAMDGCSDIVYSJALTZBZNLFLQOCDKMUMMEC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FollowPoint msg;
    msg.setTimeStamp(0.27746087585702794);
    msg.setSource(37026U);
    msg.setSourceEntity(140U);
    msg.setDestination(4779U);
    msg.setDestinationEntity(184U);
    msg.target.assign("KFWXZKICMMAOVFTUOPWNVQOZMJLDYPHJGDWKJIKSTQLWYSNWSNXISMABJEBIAJSZITUWXSPZGAAVQTROELBWHMLFMJZOCTADUPHVFCYRPEUVZHJWHXFYBVNUGRJFEVWUPUXHAEOGVCEECKXBSDHLYMSJFNXPGRNRDEVDHNGEMZBZBPQFYODYB");
    msg.max_speed = 0.948236494835031;
    msg.speed_units = 176U;
    msg.lat = 0.7612754662502011;
    msg.lon = 0.45112583351093216;
    msg.z = 0.7359479443939143;
    msg.z_units = 142U;
    msg.custom.assign("WFUVFAQJZVOLJIQTIBDIRXSZYBJCHSWXQGLBAYZYHEYQMMEPODPTWPJALSWVKTKMMTEHATDEPVJFLIHKUCDTSELGWLBCWZNDVJRWUVMOGNPCOHMRZTIJYCONWGV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FollowPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.7291358093944927);
    msg.setSource(14731U);
    msg.setSourceEntity(180U);
    msg.setDestination(10232U);
    msg.setDestinationEntity(40U);
    msg.timeout = 38260U;
    msg.lat = 0.946150137889763;
    msg.lon = 0.2615266383918823;
    msg.speed = 0.17201633328233012;
    msg.speed_units = 193U;
    msg.custom.assign("RBRMPHRHQGPKXEQCEORWBSLSQCEXZJYPWKFCKYGLCECKUFPQVJBMODPUPYOAOTTJVXLFFKSWMTWQDQXGMYMXCJPHZUEZGGYLIWNADSIPYJIDTYTRNHTIANGYGHMJPGDLEFZHIIVKNZUN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.9861726395056162);
    msg.setSource(57867U);
    msg.setSourceEntity(241U);
    msg.setDestination(34984U);
    msg.setDestinationEntity(42U);
    msg.timeout = 38198U;
    msg.lat = 0.19942630609323653;
    msg.lon = 0.12795596051598057;
    msg.speed = 0.37506175730371183;
    msg.speed_units = 246U;
    msg.custom.assign("KESYGUADKLFOQWHEGTTWQNTBBVSQFPFLNMVAIBLGFLYVKCZFAYVKLLSGIDDUKHYCVUNXZDIZFKYANWBJIHMDWQHMKGLQT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Alignment msg;
    msg.setTimeStamp(0.46173571719961437);
    msg.setSource(13242U);
    msg.setSourceEntity(198U);
    msg.setDestination(43284U);
    msg.setDestinationEntity(55U);
    msg.timeout = 5656U;
    msg.lat = 0.8991715230516719;
    msg.lon = 0.9714342016455274;
    msg.speed = 0.2496049672652232;
    msg.speed_units = 56U;
    msg.custom.assign("JALCRMHVZMDQXEGYKOBMLXDQCLHCCJDYBGS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Alignment #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.577523437004789);
    msg.setSource(58081U);
    msg.setSourceEntity(222U);
    msg.setDestination(41653U);
    msg.setDestinationEntity(38U);
    msg.lat = 0.3952409043791082;
    msg.lon = 0.7468533924223476;
    msg.z = 0.7481871231527519;
    msg.z_units = 58U;
    msg.radius = 0.28501521233259386;
    msg.duration = 54507U;
    msg.speed = 0.2821248465763645;
    msg.speed_units = 26U;
    msg.popup_period = 5292U;
    msg.popup_duration = 47260U;
    msg.flags = 200U;
    msg.custom.assign("QLONHEXYBEWPYZCALFVEDITPUQTMLTOAUWRHOYX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.5793741823110782);
    msg.setSource(9354U);
    msg.setSourceEntity(240U);
    msg.setDestination(61227U);
    msg.setDestinationEntity(253U);
    msg.lat = 0.08788772137666778;
    msg.lon = 0.9007354279044213;
    msg.z = 0.6566153387848027;
    msg.z_units = 142U;
    msg.radius = 0.17160479280293428;
    msg.duration = 50737U;
    msg.speed = 0.3944623241891133;
    msg.speed_units = 173U;
    msg.popup_period = 31125U;
    msg.popup_duration = 53409U;
    msg.flags = 248U;
    msg.custom.assign("JVMGGMMYXXHVSZLNREBBQKDWTMOMIIQENOVKXHFOGCYRRIAHEUOFIQJXCILFNHMLUAPPNHMWJGHVVVBAJJBEIHZYTAURWSDKLJKQCDKWFEIPXOKCCGLSEURGZEUGBDKYQUHATCSJHFWDUS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StationKeepingExtended msg;
    msg.setTimeStamp(0.221639990893286);
    msg.setSource(14908U);
    msg.setSourceEntity(0U);
    msg.setDestination(41316U);
    msg.setDestinationEntity(75U);
    msg.lat = 0.34978979591811765;
    msg.lon = 0.9136106228593824;
    msg.z = 0.9526425256392672;
    msg.z_units = 67U;
    msg.radius = 0.6662681776860154;
    msg.duration = 54174U;
    msg.speed = 0.09757138373004415;
    msg.speed_units = 38U;
    msg.popup_period = 53451U;
    msg.popup_duration = 61626U;
    msg.flags = 141U;
    msg.custom.assign("NQOMZPXHFZHCCHLOBBVHZILQXCWWZWLZIJMJBMPPGTIMUXARRKXUANOROYGVPQRLPBICIQIREKAJYFDINWXLNRKQJJVPBELXWDNFYCAYKKWLTWGFWCGKMYDBDSOYRYEVUGNGJXVDOHCFLEGMTWZTQAKFSRJZFACEQSYVBUUUCUROLUFEJSTDEKHNQQIODDIDTNJOZSBUETLGEHMTPMYUNIDXVHANRBCXHJHSGVPSA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StationKeepingExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.39936354959278075);
    msg.setSource(52403U);
    msg.setSourceEntity(65U);
    msg.setDestination(62313U);
    msg.setDestinationEntity(27U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.24130688773631792);
    msg.setSource(46810U);
    msg.setSourceEntity(46U);
    msg.setDestination(27498U);
    msg.setDestinationEntity(131U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ManeuverDone msg;
    msg.setTimeStamp(0.08096512154770819);
    msg.setSource(9631U);
    msg.setSourceEntity(96U);
    msg.setDestination(45018U);
    msg.setDestinationEntity(224U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ManeuverDone #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.6893759948769133);
    msg.setSource(65435U);
    msg.setSourceEntity(151U);
    msg.setDestination(63045U);
    msg.setDestinationEntity(96U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("MNSDKAZYLEBQFXSCSXCWNYTJUSMUGCBFTOOVPYCXOBSNYLXKPZIGMHDRIIOGLPPDLAFZKMJWHYLHKXNAAPIUTDNJDFLUOZSVCJYHRFIOQBRAQOCERPKSXEQYOMBUWWCVXUBGAHUMXHAETFVIMAIZPZJWORKMHRNDTZYLSYIXEODQWLIRWQEZTQDPTNEPQWGXFDIMSFUKJZVJVUALTNECE");
    IMC::Teleoperation tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.custom.assign("XAXAMBIEJDKDTCFRLZHJNBKBPCIELXSMPDNUKGTZSAVEGLKQLPEZXLJFREOERTMUEFZTHZOOYDFPTYNTCYDKKLMZKDPDIRPVBNWIIPQOGJFURLYUFJWWHAEIVXWHMYQDUAGMHETLTGOSWXXJXB");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::SoundSpeed tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.3797765005266299;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    IMC::Airflow tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.va = 0.5356900707711721;
    tmp_tmp_msg_0_2.aoa = 0.6089652722250151;
    tmp_tmp_msg_0_2.ssa = 0.5607994867352082;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_2);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.18273789572131782);
    msg.setSource(45693U);
    msg.setSourceEntity(159U);
    msg.setDestination(35114U);
    msg.setDestinationEntity(233U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("XTGLOMCOEIBRJGFZFWGWTLUQKXBCCTRIGGUEMQMTICTINPACWMAEPQKKVNDQTKUSOCKSJYSTGFDZIKRBJDYVVBXJOAMLAVTFIWARYZUAPUJMXOKJHHISADRHHSCIDUBLZBIPDNZYBKNGHNFSGFYRZPQERMYAHZQWPJIJQLNPUDVRJQZVNQFOSZPMWHWYTNPNECDXHAEXEPLYRTUUGBWECXMLL");
    IMC::Teleoperation tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.custom.assign("MIVNRWPHOPZMZOGDXXBGITKIJNBRZUGBNSYDRMGADQYUGPGVUABFRNTOEVSDFAVBFECZXNLVNLZTZVFFSNNDAEQQOFWAHQJYOHLLCYLXYMBWICPMQQTEIHJGJCMXEHPIQPZCNALYEVUJSWUCVXCHIWXEOJRLYTXTDMZW");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::RelativeHumidity tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.value = 0.8403550143724653;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_1);
    IMC::TrexAttribute tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.name.assign("DTSVPJPUKVSMIEVSXEJOGAZNLYYQQZAQFTEUNXAADOOJWGRKGOZYRRUULIEXLJSLROQDVFTVCYAEJRFPQMYCIQXHJUTXWHANZYHPFSEWGUSPWMVQCCJEHRSKKHKMKPIJXNZYRYDBZBHBBXWMGOENCDSBKCEBGKPTDIHVWTIRWODFCZOMVSWVALUTYPHHWNXMYTIXPLIONLCJIGJQBFZODZGLMUFDP");
    tmp_tmp_msg_0_2.attr_type = 111U;
    tmp_tmp_msg_0_2.min.assign("WLVANDXDZLKUPXMPRKFEUGRLMQJJSVUJORHPZWODXHMKZUWIMMGNAYOQGNHJOGYPEBRELTAQEJBSPRBOQZGCKCFCZHLTBQYQZZJHYBPWSCSPYSCWGNYOOELDGYRDSWHVXMFGROLWXTTTOCFUBXUSQBIFTZCYIIANLNZSIVNRKUXHEJDXATECTAQJPKLLKUMEYAVYKHFJFIGDMSDVICVZHFWIEPKAWDUIMFNFSDAAVIXMQKOWGTTHNBVJUBNCV");
    tmp_tmp_msg_0_2.max.assign("EQFLJMWLAEHRSXTOVEPZLAZNKYOS");
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_2);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PeekManeuver msg;
    msg.setTimeStamp(0.31093772513000095);
    msg.setSource(36848U);
    msg.setSourceEntity(81U);
    msg.setDestination(8065U);
    msg.setDestinationEntity(64U);
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("UAWQIOSIHEDDWMUKEBXLCJOYPHKPAQJOMEHLUDLACXKIVIKGVPKDLTZVYSFXQRXHBNAFPEOJNUMEZPKFCNGUAYCWZSMXDIHSCUOL");
    IMC::Magnetometer tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 39152U;
    tmp_tmp_msg_0_0.lat = 0.049859703769719044;
    tmp_tmp_msg_0_0.lon = 0.5464779055198445;
    tmp_tmp_msg_0_0.z = 0.6525453701155122;
    tmp_tmp_msg_0_0.z_units = 156U;
    tmp_tmp_msg_0_0.speed = 0.979938649082658;
    tmp_tmp_msg_0_0.speed_units = 242U;
    tmp_tmp_msg_0_0.bearing = 0.2120414577887182;
    tmp_tmp_msg_0_0.width = 0.8950685333464006;
    tmp_tmp_msg_0_0.direction = 175U;
    tmp_tmp_msg_0_0.custom.assign("IBZCJMLIBHKCWEEICZPJLEEVSYIOTJXVSYIQWCMBHMNDXPXVUKIWFLJGRSHWAOLABZGJQVMROSCNYKWABOCWGNVGILRPWXPZGJNCFSYZFRTQPTEFBEDNHZRUNTSUGHKTGYWLOVQYARYIJBDTWTPOFORJBIQPVVHVZAWIESCPKNYTKDAGF");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    msg.man.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PeekManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.45619973893065546);
    msg.setSource(44226U);
    msg.setSourceEntity(192U);
    msg.setDestination(27349U);
    msg.setDestinationEntity(222U);
    msg.timeout = 23652U;
    msg.lat = 0.432255053821328;
    msg.lon = 0.946956394956736;
    msg.z = 0.4213414404433179;
    msg.z_units = 240U;
    msg.speed = 0.33132159600797717;
    msg.speed_units = 132U;
    msg.bearing = 0.08825167223748531;
    msg.width = 0.5238278363777461;
    msg.direction = 130U;
    msg.custom.assign("ASAIUGYGDEXXXDCBCKWSZRPLWITAV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.3478492525264225);
    msg.setSource(51116U);
    msg.setSourceEntity(20U);
    msg.setDestination(19434U);
    msg.setDestinationEntity(178U);
    msg.timeout = 30325U;
    msg.lat = 0.10677007437379349;
    msg.lon = 0.36609928237168965;
    msg.z = 0.4765426890114427;
    msg.z_units = 223U;
    msg.speed = 0.3452599727019854;
    msg.speed_units = 157U;
    msg.bearing = 0.25496086544172314;
    msg.width = 0.5462354418141027;
    msg.direction = 0U;
    msg.custom.assign("TLWJZLLBDXD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Magnetometer msg;
    msg.setTimeStamp(0.23341308168447028);
    msg.setSource(8809U);
    msg.setSourceEntity(54U);
    msg.setDestination(33006U);
    msg.setDestinationEntity(152U);
    msg.timeout = 60379U;
    msg.lat = 0.014874432691630246;
    msg.lon = 0.14321059159542449;
    msg.z = 0.9454304732722556;
    msg.z_units = 132U;
    msg.speed = 0.907212442888422;
    msg.speed_units = 44U;
    msg.bearing = 0.4324043355814964;
    msg.width = 0.10160554857278836;
    msg.direction = 236U;
    msg.custom.assign("QKUTQJRTRYHCYTXYNGTIWWEUFGOHPREEGRUKCWIMUDZJFPWNGXHVHKFCGHALFCVHGWPVQZZTPKTDZKJMXBILAITAXIUDMFJMVLVBJSSNRNCJDPYSHWLIXYUEVVYEUXWGBAMULEDNKYPEHOTQJRSZKMSPMCWTABFRUQCFAJDNSLMIODBLQBE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Magnetometer #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.8267680669343815);
    msg.setSource(17210U);
    msg.setSourceEntity(185U);
    msg.setDestination(5066U);
    msg.setDestinationEntity(160U);
    msg.op_mode = 238U;
    msg.error_count = 73U;
    msg.error_ents.assign("ZKDMDRFLCSMQZPXBJHVUGNQUOTVQUMXOVHYYSCTXTUEVLEKEXHOJXMCABODSNSPGIWIECOWRCOQMAUWHYNWEISFQGRTVIGFMNMLPZFRNTZDYOYMNHXQVJRAUOMNUHDWAJBGKPCPIGIPDLXAJKDQLYXFJEOTHBARLKQK");
    msg.maneuver_type = 55826U;
    msg.maneuver_stime = 0.8305099134927597;
    msg.maneuver_eta = 56892U;
    msg.control_loops = 3883228297U;
    msg.flags = 160U;
    msg.last_error.assign("TXQCOPCSIKOEVVRINXGVHMEHRBDIRKSVUCGATLAWPFTFARUAHGCFKTOABJLYIELOLMNAJQFIGJJXZAQMYRH");
    msg.last_error_time = 0.6464828508794334;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.1930814179073771);
    msg.setSource(19461U);
    msg.setSourceEntity(162U);
    msg.setDestination(55762U);
    msg.setDestinationEntity(193U);
    msg.op_mode = 192U;
    msg.error_count = 220U;
    msg.error_ents.assign("SRCARYZUKXEODVYRLCGXSDRXZHQXSNPJVXIZBVWMISUSTFWDFQDOATCLHFSIOBJAMUAVSWYEUHSETNLFMMBLKWAXZ");
    msg.maneuver_type = 43941U;
    msg.maneuver_stime = 0.025971678142656995;
    msg.maneuver_eta = 48410U;
    msg.control_loops = 736896970U;
    msg.flags = 172U;
    msg.last_error.assign("VAMEQKGIHDTJGDYBDAJHRITBSPMKTVIUJSRBCRUXBGE");
    msg.last_error_time = 0.4126410554748676;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleState msg;
    msg.setTimeStamp(0.8849239184364525);
    msg.setSource(27584U);
    msg.setSourceEntity(166U);
    msg.setDestination(51740U);
    msg.setDestinationEntity(40U);
    msg.op_mode = 148U;
    msg.error_count = 199U;
    msg.error_ents.assign("QRQHNTVQQFCFOBXVPWITIHTYXQDCFCOUDALGTQPBFHXDFJHDOKUZSYEOJSPEDBTSTJIFCJOFWCNVEXQGOIECEEYVYKBELWWIALNZZIQMYPNFPUVRRRBD");
    msg.maneuver_type = 17576U;
    msg.maneuver_stime = 0.6839587515395602;
    msg.maneuver_eta = 27060U;
    msg.control_loops = 2156153546U;
    msg.flags = 214U;
    msg.last_error.assign("EFUMOVKCVHQWYFCPRLRDHAUOZUJVXXXOTNTTTXKPGIREKWCYBALQGZTGYIKJGZFQWYLQEKHAVSMDUBWEINOODZZLMWRUMEGRXBJPAZJMTJUFSTGHXJEUUFGBUBNISLSXIFONNDP");
    msg.last_error_time = 0.8301832831144812;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.021360289575908742);
    msg.setSource(39779U);
    msg.setSourceEntity(193U);
    msg.setDestination(10027U);
    msg.setDestinationEntity(187U);
    msg.type = 230U;
    msg.request_id = 36379U;
    msg.command = 223U;
    IMC::Dislodge tmp_msg_0;
    tmp_msg_0.timeout = 61446U;
    tmp_msg_0.rpm = 0.2151127082576132;
    tmp_msg_0.direction = 169U;
    tmp_msg_0.custom.assign("QMANCBCLRMQVAWYAXNITLOOZAVATDOCERUHUJHXGRLEIHIJWVFLVJETPJRWGZHSQKWZQJFXGKCYGEFSLGQPXFUZPKHMBUILNPIKCELSQEQTMVFPFYUAXZBSZLOYXBXUCDNDKSRJYDJYVUZSNUHAESBHYDOQNBPTGBWDCTHGPWZRZWYTKRJOIIWKISSFKXJDBXTKSMMEFOTOHKVGQNUGQPVDFNIDTJOCMVEHMWDPYRCMMNRZAXVBUIFRA");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 52136U;
    msg.info.assign("AMKBSRKPOZVJRBGGHYEDWXZMLRDZLPXAVTFPFYTRREZVUKIZSTBVJFWKQUDGIJELCOLGKLVHNMGENBUSZVOOMYGUVCQXRGDRELYCQZWLXDBZNDAMJEDPCCSBYFANPZJQKCLTMXAOYXIAATWFRQUMFLBNFAHRHYIBHCZKWUOSJIQVJQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.671543931773222);
    msg.setSource(19417U);
    msg.setSourceEntity(33U);
    msg.setDestination(46487U);
    msg.setDestinationEntity(93U);
    msg.type = 178U;
    msg.request_id = 20051U;
    msg.command = 67U;
    IMC::FollowPoint tmp_msg_0;
    tmp_msg_0.target.assign("VILZGALSXDJPRIHCJXOFPYUGSQYUCJTURMXSVEUBXDBTZKFEYWPNQFKKJZHHETHLOMMWXIJGKCJMHWVNCOOYTYFUZPRRCLNBVNEAVDMECGTDWDQKGBWAWUEDVVJVLMWCWNAQSTZMHENPTLOUGIJUPBRHFYQFSVVOKZCQNCWKZFYYKLAHQUNZIQTSSSILYQXPXHCDPMMZQSKKENFAZHRXGAAEYFXDFNRLEXOIIBGBRT");
    tmp_msg_0.max_speed = 0.16163265671659288;
    tmp_msg_0.speed_units = 9U;
    tmp_msg_0.lat = 0.15951958749836526;
    tmp_msg_0.lon = 0.1535254932851432;
    tmp_msg_0.z = 0.09306707063029096;
    tmp_msg_0.z_units = 147U;
    tmp_msg_0.custom.assign("SUINWHJPPTLYBXUNSVOXELOEXHKVMJTWQNZRLJAMG");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 56377U;
    msg.info.assign("OVWBDARAPDKCOIGZQGOPTLYJEMITUMZBYQVVWTREREFDJEBJKWDZIQFQIOTOXNXNUMRMWENJDICPSPHEBSUVHGSRRJGGQLNVMXYSW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleCommand msg;
    msg.setTimeStamp(0.49430389410034126);
    msg.setSource(21811U);
    msg.setSourceEntity(130U);
    msg.setDestination(30393U);
    msg.setDestinationEntity(221U);
    msg.type = 59U;
    msg.request_id = 58180U;
    msg.command = 101U;
    IMC::Rows tmp_msg_0;
    tmp_msg_0.timeout = 42914U;
    tmp_msg_0.lat = 0.20909692716656814;
    tmp_msg_0.lon = 0.7449766016079069;
    tmp_msg_0.z = 0.9850568018697066;
    tmp_msg_0.z_units = 93U;
    tmp_msg_0.speed = 0.5919752532230494;
    tmp_msg_0.speed_units = 15U;
    tmp_msg_0.bearing = 0.40798953058165166;
    tmp_msg_0.cross_angle = 0.7899415822866871;
    tmp_msg_0.width = 0.7966355712300047;
    tmp_msg_0.length = 0.6359793633887831;
    tmp_msg_0.hstep = 0.8283726047656376;
    tmp_msg_0.coff = 240U;
    tmp_msg_0.alternation = 233U;
    tmp_msg_0.flags = 228U;
    tmp_msg_0.custom.assign("BQFTVRPGIYMLYULVETCWXVITDFBFAKOXXFVRYFNAZJXIHUEDBMOYBQCKPW");
    msg.maneuver.set(tmp_msg_0);
    msg.calib_time = 31962U;
    msg.info.assign("NEEOIBOYEUQOATQTJPDPTOJNQRDABYOFZZWSBFVUQXYCBQWRIECUHFCKCPTCCOHKIFGHVKTAHDONFFUYTLVEHSLBQZAIGVPUAAPSBHPXWRQKLAAZGRWSDPSPLLBSVZLLRWZMAJSVXHMVGXTJCPKJYHJEVIXLUGKCBDNHJHEVFSZGMMQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.7943296333110841);
    msg.setSource(31133U);
    msg.setSourceEntity(38U);
    msg.setDestination(46058U);
    msg.setDestinationEntity(107U);
    msg.command = 136U;
    msg.entities.assign("NBWAPRJSTNIIIKUEDPJIRKXEXFDFAXTRJYDYRDEYSIYUMFOVPIENWGMQTAXKVPLNZFRHBDPWPSSICUUCSMAOGHTVHFOPWGGMYQLCREJBKHZVGKOBZMOWTDQDEKBSLHEVFZORTOFOLENLEVBOIWJJQCAWQUXFRCDQTIPWXLALHXNUVRCPELZGMUHSYDSKAASKNQYNLKJBVXQIZPAUHJXCGGWRZNBZVGHVTUCLFKBMTUZZSMGYXOAYYH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.7650547603968026);
    msg.setSource(57839U);
    msg.setSourceEntity(120U);
    msg.setDestination(4326U);
    msg.setDestinationEntity(51U);
    msg.command = 115U;
    msg.entities.assign("NJXODTAOJCXHRJTKSQYEXFEPZEBUZZVKVMUCNEAFVUSCRXCDOMCMIADBYJOYNHTORHTYISAEIQNJOQHTFDTOVMBOCBBUJFZHGRGDNJHWFFXPBZGZLVDGEGNMSVLDVG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MonitorEntityState msg;
    msg.setTimeStamp(0.29958977346739524);
    msg.setSource(31525U);
    msg.setSourceEntity(50U);
    msg.setDestination(27702U);
    msg.setDestinationEntity(248U);
    msg.command = 225U;
    msg.entities.assign("QWWCRZWJYPFEOTQEANPULFNNAMVOBTRIGEHVVMHMSJQRUGFSYUCFXOFZDZDAPTDIXOLNDDJFRWSRYCRHEBLZETQTSXKHSSOHUFNEVJAEISXLMPIFBBMDAGGHYLJRIPNZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MonitorEntityState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.940404863793189);
    msg.setSource(52354U);
    msg.setSourceEntity(31U);
    msg.setDestination(31780U);
    msg.setDestinationEntity(60U);
    msg.mcount = 202U;
    msg.mnames.assign("RIIQDYKWGRNIATMGKHAMRXWGFQHHMTFOXEVBVNERUMYZOKDCLSVXUCERQKPFFKDUKGAXNVLUPWHNGGBVMRTSPIMZYLEQTSLIIWJEQPUTWQFMSSCHOYPJQXVGYAOCJJCKCUVFWXGPXHCBKOCTWFKEOZNSUDSMYJJDXIEZNZQFDQVOABJBNZPSLNANZUCDAKPJXWURBALALMQSYDHVRWCTBTTHIBE");
    msg.ecount = 127U;
    msg.enames.assign("FPWVNTIZRSFCCAXMNZYWKTVMHQNSASC");
    msg.ccount = 125U;
    msg.cnames.assign("NGEWTSTDIUDYYAVOPGDDECVQHRLCVFGLWSFMSCCQUGFYBEAJPFMXUYSJJEABILYUIJKIGISBZHXNK");
    msg.last_error.assign("TZOWDMYZWGPLARTBPWLNIABBGNPXHKGWJKWYLFTJFCLVGSJMBKSDLAOHZLAMMUJRARTXTHKDWPPBQEMPZZSHIAHRRSUFWSVMNHXCCSGYCNQWPUGQBYBDPGJFOLMT");
    msg.last_error_time = 0.1497548254630222;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.3281969771688671);
    msg.setSource(62123U);
    msg.setSourceEntity(68U);
    msg.setDestination(62295U);
    msg.setDestinationEntity(192U);
    msg.mcount = 94U;
    msg.mnames.assign("ENSBDTFZIPRGWERNFEZOGJBUQTAZGCQXIFQYLDNUBZDQUQKEGFOWMENFMODCRTKSRTGPZHQLZXBHFMGIUTIWHHOAQSKWKEVRUROLIJOFJJFFWOPAMLCXJDWIXLZBVYGATAHYRLUUGLWAKBSXX");
    msg.ecount = 245U;
    msg.enames.assign("QEHODXRHHJDBONTLBXDGATHVZRGGCSYPNLOPTXJCZKUWSTTHILRQSASWKJMPALCJUKXFSHEFIMRPBUGKPRLGXEKYPAQFTRHCJHOBNMWQGUMIXSZRGZDAFKSDXMNZEYZOCYYBGGNVBFAOWSFNZJQTUPNMKCFZHLVVDYTIEBOLMIDQECIRKJXUQKI");
    msg.ccount = 183U;
    msg.cnames.assign("UPBITXEIZFBVEKAGVADVGTERQWEGSEXSPAPBDMACFELPPNJMXZQAETUEQTKDZTGAFHZSBACNUHNNLGPNXDMOMTXYV");
    msg.last_error.assign("DPNJUXZCLVKCAUKLZANKXJGTQXAPOXBCLJDEOSXEJKDUNIMQSRYZAKEOWMWBMEYHJDDKBTFRPHCESWYLMYPNBCWFGISOPKTYFBNYOOUPTSMJQPCRVHPFKWVWJSADXKMORTOXOHISRZQWEDGALYHUNJEHKDVGDSLEMQUWIIJFDFOMBTIUAULTHWCHRRENZGGTLUVHRYPIFFAVVRGSTFCMIN");
    msg.last_error_time = 0.04809716386386742;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityMonitoringState msg;
    msg.setTimeStamp(0.04866766719410309);
    msg.setSource(65210U);
    msg.setSourceEntity(26U);
    msg.setDestination(58973U);
    msg.setDestinationEntity(226U);
    msg.mcount = 138U;
    msg.mnames.assign("PPLDBPAPQUKGISCGXOMOLVHHJYXGDJFKAKMRGOYPBCSTVUMATDMYQLVPKYRLWCMBWZFYKDXQONGYSRCWEZQHNVLUSZRHFMHNXJNQNAEUVGZEDOQHMKTGPYZXWERRSVRYZHWCITVZACSLXIUKNKYBDLSWENXICFUNFEPNRWIUBJGTEFHVUPGZIJTJWFDZMPKTTRNASBJDBSKODFCJLYRHWTBQ");
    msg.ecount = 6U;
    msg.enames.assign("TJKIANKLCXJBKCZHNXIYWFNYLSTIQQPRBSBXAETKLGVXSIDTZHMUDJRHYOLKPMLYWAMBHAZNMWUYSVRXEFBMCTOPRPDVZCXHVZTWLQUDMQAPUCCRTKVFUHOGNFFESDDFECWQNGWBNAMQAOOLVOZEDF");
    msg.ccount = 95U;
    msg.cnames.assign("KMEYGDITZPEWRJMVJSMXSSIBGLHLJQXRWPQORMQTVJQWBAOBNPRLZFGBVOUYBDJDFHPSFXEFQHOARTFRLCDWNYMULRUGNGBDLSHJMXMAYOZNEBIZCKDOYXHPVAUFJIEXAUDBGJQWSRZTJ");
    msg.last_error.assign("EKYMBDOHRXEKNQNJXLALZTULFMABAVRKNXHMEHTOPKGVYCHTJOUYVNSXPGPBFPZFLCWIVZWBILKFVGTIPDDMEWKZNYNXMAWPLYVDNWBGHPIZUIQWSLTJFTMBZGSBUGJHQNQFPVGOMVEEYGTWTLHJQYWXCMOQHECSEPOLZVIKICFTWXYOHCBDRMTAURXQIJNEEXFCZDJSGABRORRFRZSACRUZOUUDAD");
    msg.last_error_time = 0.1368711697824868;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityMonitoringState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.6298888524214328);
    msg.setSource(12456U);
    msg.setSourceEntity(38U);
    msg.setDestination(16431U);
    msg.setDestinationEntity(10U);
    msg.mask = 236U;
    msg.max_depth = 0.40709913753216065;
    msg.min_altitude = 0.2517811081795519;
    msg.max_altitude = 0.9651580198409881;
    msg.min_speed = 0.9868032911534348;
    msg.max_speed = 0.7816061348184107;
    msg.max_vrate = 0.6126113709872032;
    msg.lat = 0.8379818404423206;
    msg.lon = 0.344494592868297;
    msg.orientation = 0.8896280900540496;
    msg.width = 0.22935784835259698;
    msg.length = 0.6546926512781345;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.7894187241909676);
    msg.setSource(31915U);
    msg.setSourceEntity(138U);
    msg.setDestination(8390U);
    msg.setDestinationEntity(57U);
    msg.mask = 177U;
    msg.max_depth = 0.9366354307573653;
    msg.min_altitude = 0.8695511383036302;
    msg.max_altitude = 0.4301859570308596;
    msg.min_speed = 0.7075881672423416;
    msg.max_speed = 0.8762928180239167;
    msg.max_vrate = 0.16194310743094742;
    msg.lat = 0.47932059223870604;
    msg.lon = 0.1760272704066037;
    msg.orientation = 0.2918873840199787;
    msg.width = 0.4313563834549443;
    msg.length = 0.9248998564726193;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.682613991293178;
    tmp_msg_0.lon = 0.19373882216309513;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OperationalLimits msg;
    msg.setTimeStamp(0.22934180055978293);
    msg.setSource(16523U);
    msg.setSourceEntity(32U);
    msg.setDestination(48051U);
    msg.setDestinationEntity(158U);
    msg.mask = 28U;
    msg.max_depth = 0.9224094414013063;
    msg.min_altitude = 0.6390630960674576;
    msg.max_altitude = 0.3513721862891621;
    msg.min_speed = 0.48231513903184065;
    msg.max_speed = 0.017803317426232534;
    msg.max_vrate = 0.23394074330178471;
    msg.lat = 0.3541238074561466;
    msg.lon = 0.16443523852043318;
    msg.orientation = 0.9756936828617627;
    msg.width = 0.06271310041361366;
    msg.length = 0.43192466588575473;
    IMC::PolygonVertex tmp_msg_0;
    tmp_msg_0.lat = 0.47877123305338076;
    tmp_msg_0.lon = 0.6520606248210082;
    msg.vertices.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.5420484921025388);
    msg.setSource(15838U);
    msg.setSourceEntity(41U);
    msg.setDestination(23225U);
    msg.setDestinationEntity(2U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.8762026147755986);
    msg.setSource(30101U);
    msg.setSourceEntity(206U);
    msg.setDestination(1225U);
    msg.setDestinationEntity(133U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetOperationalLimits msg;
    msg.setTimeStamp(0.6597133721977059);
    msg.setSource(8182U);
    msg.setSourceEntity(115U);
    msg.setDestination(16161U);
    msg.setDestinationEntity(53U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetOperationalLimits #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.5057313554001642);
    msg.setSource(48531U);
    msg.setSourceEntity(61U);
    msg.setDestination(15770U);
    msg.setDestinationEntity(14U);
    msg.duration = 26528U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.3283899123318722);
    msg.setSource(49819U);
    msg.setSourceEntity(141U);
    msg.setDestination(64012U);
    msg.setDestinationEntity(169U);
    msg.duration = 65036U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Calibration msg;
    msg.setTimeStamp(0.7067711914190254);
    msg.setSource(28097U);
    msg.setSourceEntity(218U);
    msg.setDestination(63306U);
    msg.setDestinationEntity(102U);
    msg.duration = 55652U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Calibration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.7836165976066716);
    msg.setSource(34100U);
    msg.setSourceEntity(130U);
    msg.setDestination(28730U);
    msg.setDestinationEntity(21U);
    msg.enable = 124U;
    msg.mask = 2544866227U;
    msg.scope_ref = 3807385520U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.312290542009073);
    msg.setSource(35831U);
    msg.setSourceEntity(27U);
    msg.setDestination(36321U);
    msg.setDestinationEntity(9U);
    msg.enable = 89U;
    msg.mask = 3733730379U;
    msg.scope_ref = 3034354084U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ControlLoops msg;
    msg.setTimeStamp(0.9163490737830147);
    msg.setSource(36263U);
    msg.setSourceEntity(240U);
    msg.setDestination(15508U);
    msg.setDestinationEntity(56U);
    msg.enable = 142U;
    msg.mask = 19804009U;
    msg.scope_ref = 4215668250U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ControlLoops #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.08622181355002911);
    msg.setSource(29421U);
    msg.setSourceEntity(60U);
    msg.setDestination(34081U);
    msg.setDestinationEntity(70U);
    msg.medium = 223U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.4072794436889099);
    msg.setSource(54840U);
    msg.setSourceEntity(116U);
    msg.setDestination(44163U);
    msg.setDestinationEntity(45U);
    msg.medium = 106U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleMedium msg;
    msg.setTimeStamp(0.590054766187842);
    msg.setSource(11869U);
    msg.setSourceEntity(23U);
    msg.setDestination(2292U);
    msg.setDestinationEntity(204U);
    msg.medium = 23U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleMedium #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.5240563569011188);
    msg.setSource(33415U);
    msg.setSourceEntity(241U);
    msg.setDestination(9583U);
    msg.setDestinationEntity(165U);
    msg.value = 0.12190456606138911;
    msg.type = 229U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.3990298037233553);
    msg.setSource(11672U);
    msg.setSourceEntity(148U);
    msg.setDestination(10926U);
    msg.setDestinationEntity(212U);
    msg.value = 0.0709879282119319;
    msg.type = 193U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Collision msg;
    msg.setTimeStamp(0.1598735131780742);
    msg.setSource(48550U);
    msg.setSourceEntity(129U);
    msg.setDestination(24138U);
    msg.setDestinationEntity(200U);
    msg.value = 0.007173900905896979;
    msg.type = 87U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Collision #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.6545761495353003);
    msg.setSource(27144U);
    msg.setSourceEntity(74U);
    msg.setDestination(6997U);
    msg.setDestinationEntity(93U);
    msg.possimerr = 0.5233488348702483;
    msg.converg = 0.4447622207322448;
    msg.turbulence = 0.9712970161908991;
    msg.possimmon = 32U;
    msg.commmon = 15U;
    msg.convergmon = 199U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.33232692348377846);
    msg.setSource(45609U);
    msg.setSourceEntity(126U);
    msg.setDestination(30874U);
    msg.setDestinationEntity(137U);
    msg.possimerr = 0.6916469461592252;
    msg.converg = 0.1561839191841442;
    msg.turbulence = 0.20931633677186579;
    msg.possimmon = 1U;
    msg.commmon = 123U;
    msg.convergmon = 4U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormState msg;
    msg.setTimeStamp(0.30081936103914586);
    msg.setSource(47543U);
    msg.setSourceEntity(218U);
    msg.setDestination(61928U);
    msg.setDestinationEntity(33U);
    msg.possimerr = 0.15175253478920137;
    msg.converg = 0.44926361800657844;
    msg.turbulence = 0.24630815334935618;
    msg.possimmon = 233U;
    msg.commmon = 50U;
    msg.convergmon = 4U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.39293548873909634);
    msg.setSource(5041U);
    msg.setSourceEntity(127U);
    msg.setDestination(48376U);
    msg.setDestinationEntity(185U);
    msg.autonomy = 72U;
    msg.mode.assign("AKOXILFNQUBSVLIRRCRYKFGOJIDMDXLUXSMK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.3494531107362677);
    msg.setSource(21989U);
    msg.setSourceEntity(209U);
    msg.setDestination(34218U);
    msg.setDestinationEntity(229U);
    msg.autonomy = 57U;
    msg.mode.assign("QDTUBWSNXDERFBKETDNDJUVRVCQUEVQMPIGWQWFZLOCJUNTEXWOTFTHKNLIMQHTWJBDSLPAHRRQYFJYCORNQFZFTMAVAUISMALXULPYVVCJPHODSCORPXAWFHTZAWLVJFKMDMMBSCRZEKZBYIQCOGQNFYJKXUYYSRBZICKEUNFKHIBWHDSXLKMEGMHS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AutopilotMode msg;
    msg.setTimeStamp(0.6303928434568995);
    msg.setSource(17210U);
    msg.setSourceEntity(69U);
    msg.setDestination(64614U);
    msg.setDestinationEntity(99U);
    msg.autonomy = 44U;
    msg.mode.assign("INYWUEVEMGFBSNUYZZTFVHFOVUAYTMCQAJDJOCIAYCJNTQDPXCIAUJGKRBBAJZNORHWLRYTXUMLVGQHEVTWOXXRWBIHISALEIDSHBNCDXQBVYFTXITSWQZYINQCVOFSCAOWSEXNFBPCJQWRUWMOACPKLKEEPNKZUZMFDB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AutopilotMode #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.3268631224990889);
    msg.setSource(6426U);
    msg.setSourceEntity(204U);
    msg.setDestination(21187U);
    msg.setDestinationEntity(60U);
    msg.type = 184U;
    msg.op = 6U;
    msg.possimerr = 0.3699587220604389;
    msg.converg = 0.6020933345708666;
    msg.turbulence = 0.0462248072842808;
    msg.possimmon = 140U;
    msg.commmon = 8U;
    msg.convergmon = 66U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.9238360942704145);
    msg.setSource(47776U);
    msg.setSourceEntity(63U);
    msg.setDestination(31972U);
    msg.setDestinationEntity(215U);
    msg.type = 215U;
    msg.op = 141U;
    msg.possimerr = 0.5505514599101459;
    msg.converg = 0.19632251668414147;
    msg.turbulence = 0.19904961491779816;
    msg.possimmon = 41U;
    msg.commmon = 7U;
    msg.convergmon = 124U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationState msg;
    msg.setTimeStamp(0.8686262680512437);
    msg.setSource(33725U);
    msg.setSourceEntity(70U);
    msg.setDestination(42138U);
    msg.setDestinationEntity(235U);
    msg.type = 0U;
    msg.op = 116U;
    msg.possimerr = 0.019689955382631408;
    msg.converg = 0.7621701069300203;
    msg.turbulence = 0.22475474079199076;
    msg.possimmon = 83U;
    msg.commmon = 133U;
    msg.convergmon = 109U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.6240371675821258);
    msg.setSource(40396U);
    msg.setSourceEntity(248U);
    msg.setDestination(6086U);
    msg.setDestinationEntity(249U);
    msg.op = 214U;
    msg.comm_interface = 210U;
    msg.period = 13576U;
    msg.sys_dst.assign("WURVOBWLIWSNELRZSSZFKHQWXFIWTKJLANXUUOUWQMADKTTLYMPYM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.11779185312636631);
    msg.setSource(63422U);
    msg.setSourceEntity(58U);
    msg.setDestination(30560U);
    msg.setDestinationEntity(108U);
    msg.op = 56U;
    msg.comm_interface = 8U;
    msg.period = 55805U;
    msg.sys_dst.assign("BKBPONOJJZHMKFSIYJPLOGAGOMSJQIZMJWEBDOAUEBSRJEAGUKVWNZYWAXRPQCHITKKZRVVVBRUMRJDL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportControl msg;
    msg.setTimeStamp(0.8936142643710158);
    msg.setSource(5220U);
    msg.setSourceEntity(115U);
    msg.setDestination(39546U);
    msg.setDestinationEntity(127U);
    msg.op = 41U;
    msg.comm_interface = 170U;
    msg.period = 60078U;
    msg.sys_dst.assign("AJBKLGWSKBXVCOVIXJGMGLAKIUMOMEOGGAIXSTZCKHKFNKMXIDXPYQGJTIWCOPBPNGPMEZYOTUDFGBNFZUEQUHRQSFOZQXJPJMTEYQYAILHHBPDVJDFXOHYLNDMSSEAMSTHTVMCODWDVHYENTKWRYBXBUWNIXAWNAMDIWASWQOVJBFFCZUEPTQEPIOZLR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.21231942785903213);
    msg.setSource(45911U);
    msg.setSourceEntity(22U);
    msg.setDestination(24748U);
    msg.setDestinationEntity(37U);
    msg.stime = 3560213645U;
    msg.latitude = 0.5001126226642594;
    msg.longitude = 0.027577701711952063;
    msg.altitude = 61424U;
    msg.depth = 16311U;
    msg.heading = 33469U;
    msg.speed = -19400;
    msg.fuel = 78;
    msg.exec_state = -27;
    msg.plan_checksum = 42508U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.46496196861924544);
    msg.setSource(6604U);
    msg.setSourceEntity(139U);
    msg.setDestination(57990U);
    msg.setDestinationEntity(120U);
    msg.stime = 1099625127U;
    msg.latitude = 0.23862821065249695;
    msg.longitude = 0.687433978025822;
    msg.altitude = 42220U;
    msg.depth = 56806U;
    msg.heading = 13792U;
    msg.speed = 20835;
    msg.fuel = 13;
    msg.exec_state = 5;
    msg.plan_checksum = 63066U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::StateReport msg;
    msg.setTimeStamp(0.09185036979913541);
    msg.setSource(63975U);
    msg.setSourceEntity(254U);
    msg.setDestination(50297U);
    msg.setDestinationEntity(103U);
    msg.stime = 2555778098U;
    msg.latitude = 0.7563176620779515;
    msg.longitude = 0.28164700245873076;
    msg.altitude = 1296U;
    msg.depth = 63749U;
    msg.heading = 18748U;
    msg.speed = 27393;
    msg.fuel = -111;
    msg.exec_state = 66;
    msg.plan_checksum = 39456U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("StateReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.6107812098525321);
    msg.setSource(20831U);
    msg.setSourceEntity(88U);
    msg.setDestination(52905U);
    msg.setDestinationEntity(93U);
    msg.req_id = 64992U;
    msg.comm_mean = 152U;
    msg.destination.assign("XVDAYCRISOQMTYNERJZYIRBVGDNFKHSUQYEHJBLWOTRYRARFSDTUYBKUJXOGFOEFYNIPQQSXLOPSEAF");
    msg.deadline = 0.05435206726021802;
    msg.range = 0.8650483383971104;
    msg.data_mode = 204U;
    IMC::LinkLevel tmp_msg_0;
    tmp_msg_0.value = 0.7421057752567997;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("OVKJXBTLUSZXXRSZOQAWEPYNMMNKVZFDLAMPVYHCOKQIFTRNHVIYGAZGPASETTXBGGLUQQRQODOHFWGJJKHTBLJZYGNDDKLHKLUYNJWYEIUHZOPBRDSNARTTQFFJEZXMQEPNMPCSEBNEMGVPHLLGUOHIXNCIKIYSUCOPNUMHLPBJQWJYSDQCXTCGVSERWMCJLFAW");
    const signed char tmp_msg_1[] = {35, 76, 67, 118, -91, 41, 103, -79, 123, -68, 5, -58, 76, 48, -110, 31, -4, -45, -64, -112, 78, 70, 77, 110, -67, -25, 72, 6, 68, 66, 2, -28, 51, -91, 65, 56, 37, -44, -111, -87, 8, 90, 73, -3, -9, -27, 61, -48, 112, 21, -31, -124, -127, 93, -97, 87, -112, 117, 6, 6, 46, 106, 33, 10, 6, 62, -69, -98, -71, -126, -109, -47, -41, 100, -14, 82, 103, -76, -64, 90, -91, 20, -54, 122, -57, -32, -73, 26, -99, -78, 71, 21, -112, 62, 107, -78, -23, 36, 115, -83, 2, -60, 99, -21, -58, 44, 78, 61, -80, -38, 114, 55, -69, 120, 68, 7, 124, 83, 1, -128, 60, 89, 12, 59, -37, 3, 70, 61, -89, -84, -100, -73, -48, 68, -79, -76, -97, 94, -18, -1, 45, 46, -24, -68, -107, -118, -122, -80, -32, -45, -122, -38, 14, -43, -31, -56, -91, 9, 108, 55, -74, 11, 64, -54, 26, 31, -39, -90, 7, -32, -70, -46, -90, 64, 125, 35, 121, 75, 26, 115, -12, 29, 22, 46, 75, -42, -26, 13, 56, -19, -74};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.9834042336785053);
    msg.setSource(20189U);
    msg.setSourceEntity(192U);
    msg.setDestination(42049U);
    msg.setDestinationEntity(103U);
    msg.req_id = 9726U;
    msg.comm_mean = 218U;
    msg.destination.assign("JCSRZOSIVLDEMDDUDUKZHVKTYRSNQBHCEGPZTZQEJPEZTCTJKWBGFZMNWYCLRSFMIPMNLMQOTYSAOYVIHMYUPOEYOLYOBLWNJKMRIGXGTJXOXDHULOAAVRDMNWCQQMXQZGZCSRTIWSXLJGHTFOUFQWHUHFXRPVAPEBHRCAELBWSXPKGPVMEKANQWKVXIXUEFFWAYBGPCKEKSZQDNFIU");
    msg.deadline = 0.007321909368235624;
    msg.range = 0.8697352124450124;
    msg.data_mode = 246U;
    IMC::VehicleCommand tmp_msg_0;
    tmp_msg_0.type = 190U;
    tmp_msg_0.request_id = 34596U;
    tmp_msg_0.command = 26U;
    IMC::Goto tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 28088U;
    tmp_tmp_msg_0_0.lat = 0.6350256390392731;
    tmp_tmp_msg_0_0.lon = 0.5237246921034919;
    tmp_tmp_msg_0_0.z = 0.9108001403164827;
    tmp_tmp_msg_0_0.z_units = 168U;
    tmp_tmp_msg_0_0.speed = 0.051561185524304665;
    tmp_tmp_msg_0_0.speed_units = 109U;
    tmp_tmp_msg_0_0.roll = 0.722315851984771;
    tmp_tmp_msg_0_0.pitch = 0.2112030690795047;
    tmp_tmp_msg_0_0.yaw = 0.7423020012357526;
    tmp_tmp_msg_0_0.custom.assign("TROXMGTMNRPXLBYQDUYMTSAKOJHRNNSKLSSDNQVXHNBVABCKEJXDBKMLYEUBXQMFSQZZGPLGOGYOBQFHYDZWTWSKIFSWVRWDQOFVUJQPCPGDOYEFRZVDBZUUIFJIUFHONAREPZDJIMAPIYUHUSSULAVZYJC");
    tmp_msg_0.maneuver.set(tmp_tmp_msg_0_0);
    tmp_msg_0.calib_time = 56471U;
    tmp_msg_0.info.assign("FRSKKWZUGDVBJANCPKIMMERSCXHDNUHSGCFQYDPYTGGRZFOQRUJWYWFNGKFGOHIPKSIANSTGJLMDRLYBZWSKPXCVSZEFLIVPZIRHZLYZTACALLSKYRVKQCXPQRPXECDLJMBUVBAJEUMPO");
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("TSVPNYALRPIKPJAXBXABMMRAQQZYSFCWWUBSCDNDWFNWSEFEBBOERIGVXVPHHFHDKXQOCPIIWEGDEFMQFMDWCJYBQNEFFTEHXFWDZGX");
    const signed char tmp_msg_1[] = {56, 98, -126, 10, -15, -59, 118, 70, -34, 55, -63, -47, -13, -96, 39, 106, 96, 8, -115, 63, -58, -41, 21, -124, -2, -83, -18, -8, 61, 10, -2, -78, -81, 101, -32, 109, 104, 39, -51, 84, 64, -95, -68, -94, 119, -49, 104, -51, 122, 1, 94, 75, -90, -8, -15, 24, -79, 12, 6, 108, 39, 52, -28, -122, -66, -97, -97, -13, -11, -46, 51, 86, -73, 15, -112, -41, -23, -14, -120, 122, 88, 89, 108, 47, -121, 32, -89, -12, 0, -70, 79, -36, 102, -33, -26, -114, -49, -116, 12, -32, 89, 111, -108, 93, 48, -65, 110, 60, 12, -118, 6, -44, -12, -116, 119, 43, 25, 77, 4, -99, -96, -116, 54, -110, -92, 29, 121, 61, 82, 38, -20, 126, -80, -12, 30, 4, -99, 91, 33, -116, -33, 14, 109, -10, 41, 10, 12, -75, -80, -7, 68, -93, -50, 88, 5, -59, 80, -59, -89, -100, 27, 126, 102, 109, 78, -62, 71, 71, -38, 47, 10};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionRequest msg;
    msg.setTimeStamp(0.09372188572221873);
    msg.setSource(29210U);
    msg.setSourceEntity(224U);
    msg.setDestination(47405U);
    msg.setDestinationEntity(178U);
    msg.req_id = 49917U;
    msg.comm_mean = 213U;
    msg.destination.assign("GNQURBHQKEEQIBOGIWIRPTLHUSROTJTULJMXXZLUPCRQXVNBQWSMLRKXNNJINIAFOWHGUZWBSWNJGITZRVYOSCDALEECQYHVSVRZH");
    msg.deadline = 0.0761561980905544;
    msg.range = 0.7135816457051467;
    msg.data_mode = 186U;
    IMC::MagneticField tmp_msg_0;
    tmp_msg_0.time = 0.21598527029330272;
    tmp_msg_0.x = 0.7952940188692617;
    tmp_msg_0.y = 0.9738036834479642;
    tmp_msg_0.z = 0.1685133838548588;
    msg.msg_data.set(tmp_msg_0);
    msg.txt_data.assign("VVUUEGHWLPINAHWWIHCJFUNMPMIWIDRVDROEMRUKYXCSXYATCVCISVPWIJIMKFVGBRERJZDSEKHSQJPMLVUBTXPWOLZQQJLOWGKQNAPWWOOMKZKD");
    const signed char tmp_msg_1[] = {27, -118, -60, -82, -29, 52, -109, -27, 79, 81, 41, 122, 65, -117, -58, -13, -99, -5, 93, -55, 114, 9, 31, -97, -120, -112, -27, 116, -57, -58, -60, -103, -57, 77, 11, 77, -79, -74, -36, 29, -1, -82, 125, 13, 48, 67, -87, 84, -87, -120, 11, -1, 83, 86, 15, 12, -70, -118, -121, -83, 22, 28, -105, -52, 58, -44, -12, 95, 114, 35, 111, 96, 55, 16, -83, -113, 51, 92, 123, 106, 8, -89, 124, 33, -85, 106, 100, -25, -18, -20, 85, 16, -101, -114, 6, -93, 80, -18, -8, 84, 64, -55, 77, 23, 38, -13, -113, 88, 120, -22, -81, -102, -95, 40, -10, 92, 5, 33};
    msg.raw_data.assign(tmp_msg_1, tmp_msg_1 + sizeof(tmp_msg_1));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.610956496794913);
    msg.setSource(7396U);
    msg.setSourceEntity(192U);
    msg.setDestination(47148U);
    msg.setDestinationEntity(215U);
    msg.req_id = 28751U;
    msg.status = 238U;
    msg.range = 0.3587422231526636;
    msg.info.assign("BYPMUDOPDXZWSXQORMDWYJIICUGTZJASLFCKNBGMRVITVPPGCWYETVYBXCXKJLTSLGJRFOVQDYBREHXPLYWINSVGKCUEVIAHCNMNHCNZOASSISJMBYFWBMCHTULWLJMPZHSFARCOOBFIQTPKLWGQALEXBUINEOEPASVZHTVZN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.4583913024749753);
    msg.setSource(58451U);
    msg.setSourceEntity(171U);
    msg.setDestination(45617U);
    msg.setDestinationEntity(138U);
    msg.req_id = 48731U;
    msg.status = 253U;
    msg.range = 0.1686724789228038;
    msg.info.assign("EDEGEWYQDXWFIJNPKGCLDPICSMRYJGISEOFYYBXKAZMPQFXYFCRBJTHMLVJHBTPIOKHVUZUMKRHYGGKAOBKHMHJTLEUXOQYNNFJQSLARWWSRYODOELICLZQTQRTBLNRFZZKGEVNMGMGWRNCGUDUOVJXYMAPZBTAZQOFDRAJUYTI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TransmissionStatus msg;
    msg.setTimeStamp(0.8665873193621034);
    msg.setSource(2475U);
    msg.setSourceEntity(176U);
    msg.setDestination(20103U);
    msg.setDestinationEntity(123U);
    msg.req_id = 47921U;
    msg.status = 45U;
    msg.range = 0.6112150770776904;
    msg.info.assign("ADSOOIYLBFXZDMNRQOSHRJJUHCGLYNFNUSCZOILYYCWCKAAFMKLUVLOBPQWXASUNEWXTXFYTXUVQEZDVJWWDNIIROLTWWPRERRHPWYMJDCTI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TransmissionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.29492513731865655);
    msg.setSource(57214U);
    msg.setSourceEntity(14U);
    msg.setDestination(61810U);
    msg.setDestinationEntity(239U);
    msg.req_id = 49111U;
    msg.destination.assign("DCZIVTKPRGPRJOTEFHOYWKJFXKCLEACBMOBYJYJKABXPHSNVTNXMHPGAMUHPQLINQWNZWQBEOVVNZMGWFMPURMNQHISYLSMCNZBUIPQAXYIALKYDJUYXLZAPVMFKHBIDKRVFFIUTER");
    msg.timeout = 0.25324533497655755;
    msg.sms_text.assign("PDDHERRSEOUMQFYJHXMZLDTIWGJYDVZLRVOGJNQHOLGTRFQRNRVPMSOHKTIXFUYXKBABUHNUUCTENMVNGBDUZVTJKYFHSVEWSEMBEPXECXCFRZIVLYTFVWQKLCMENGCYAQYSQAXLJLUJSGPXAOPV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.8011221016091914);
    msg.setSource(64943U);
    msg.setSourceEntity(4U);
    msg.setDestination(58912U);
    msg.setDestinationEntity(152U);
    msg.req_id = 19269U;
    msg.destination.assign("MNHUKYFWGYQIPTXJXEKGAHWXGKAETGQZCDKVBSYAAXTPHZIJETEWICRFYTGDJLXLSXBZJDFWNSBBEKMUBYUYAFFDW");
    msg.timeout = 0.8516127073080049;
    msg.sms_text.assign("LNNGLRIYIRCTYFQEBMCLUXHWCZHVHCGKYFBIUMOCEDGKZXUDLNJMEXKTGNHYDWJLKPZTBERSBEPVVYSGOWQLAFBQOLMYXFOYZCUQJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsRequest msg;
    msg.setTimeStamp(0.29719092274294245);
    msg.setSource(49122U);
    msg.setSourceEntity(11U);
    msg.setDestination(44807U);
    msg.setDestinationEntity(67U);
    msg.req_id = 9687U;
    msg.destination.assign("YZNTCNHXCEPYLFKUZAVUKEKZZOWLXLJMOJGDGWZJLTDXQZAECAPOGNLJIFUVKYZUNNOVKXUMFOJQIRUCJDQKRGFRKECHHIKEOCRRWMTVNZHWVBBIQWVNBM");
    msg.timeout = 0.6356873164139932;
    msg.sms_text.assign("UQPYCNREGNONXNAYCFKHGAOLDIAGBXGOVIDXBWVMMKDJURYYXJAWGVDWZLPOVRPSKZWZQCL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.7716349776892107);
    msg.setSource(5576U);
    msg.setSourceEntity(101U);
    msg.setDestination(17927U);
    msg.setDestinationEntity(20U);
    msg.req_id = 35872U;
    msg.status = 117U;
    msg.info.assign("RELIAUMEFTSVNNOPTCNSPFOBHFMBQJKJIBEZUSXQZQDLVVLCQRZTLOEAIPOMADZAMQYNFU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.9733491068392999);
    msg.setSource(41072U);
    msg.setSourceEntity(92U);
    msg.setDestination(46986U);
    msg.setDestinationEntity(224U);
    msg.req_id = 5696U;
    msg.status = 184U;
    msg.info.assign("PVRBXHVRLHCTGYHZDVEAFCIXDISICBHJVAAGDUBDCPWNZSOLWHYNITGDYBEWZOERHPSPBZXPULIJRLDUQPKOSECJVYEHERUUCVMXTQLQKBSJHKWOOKTIMJXAAKJHJNQSRAGDPNHNLXBTIMZCAVUCUEQYZXENROXYABVPZGMLMTPDGFBYLMUWMFSMQMGQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SmsStatus msg;
    msg.setTimeStamp(0.6621872083115834);
    msg.setSource(59592U);
    msg.setSourceEntity(225U);
    msg.setDestination(13334U);
    msg.setDestinationEntity(4U);
    msg.req_id = 16724U;
    msg.status = 229U;
    msg.info.assign("NHJPCZIHXYWIMVEULOIPFKJWVTMYHGRHBIQXEINUFPYPIIAOBOZBMDRFOTTTKXVEWGHFNKKKGAFALMZKJJDEJTENYPFALMSEKTOXSQVPSSASIPJTYINJHTEDZQWIANLJOCRNHWZBUNDUJLGAHWCUDMXGDROYPGYZPRCBKZUNPEZQXDS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SmsStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.09188631706444306);
    msg.setSource(48182U);
    msg.setSourceEntity(237U);
    msg.setDestination(44201U);
    msg.setDestinationEntity(99U);
    msg.state = 189U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.4317843746962231);
    msg.setSource(1596U);
    msg.setSourceEntity(167U);
    msg.setDestination(55759U);
    msg.setDestinationEntity(193U);
    msg.state = 22U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VtolState msg;
    msg.setTimeStamp(0.6445959635727196);
    msg.setSource(19895U);
    msg.setSourceEntity(110U);
    msg.setDestination(22826U);
    msg.setDestinationEntity(186U);
    msg.state = 207U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VtolState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.3359220639159747);
    msg.setSource(38205U);
    msg.setSourceEntity(33U);
    msg.setDestination(24414U);
    msg.setDestinationEntity(69U);
    msg.state = 175U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.8749930205439642);
    msg.setSource(41619U);
    msg.setSourceEntity(1U);
    msg.setDestination(13896U);
    msg.setDestinationEntity(63U);
    msg.state = 221U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ArmingState msg;
    msg.setTimeStamp(0.25852279283926893);
    msg.setSource(20051U);
    msg.setSourceEntity(90U);
    msg.setDestination(16604U);
    msg.setDestinationEntity(113U);
    msg.state = 42U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ArmingState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.6454368447990633);
    msg.setSource(35502U);
    msg.setSourceEntity(131U);
    msg.setDestination(24014U);
    msg.setDestinationEntity(94U);
    msg.req_id = 32479U;
    msg.destination.assign("ESDXVSAGUQWRVHJMAGVNRTZFDHBBZMOELMUBAGGSKRRMAMEUUSWFMJGBFWOTIZCSDJNWBYLJAIVKXOYIAMMHYNKQPIKWICJEQDKYHTNNVSWIXGUQDOVXFHZOERMZRYCPZASWFCRLHCYZKZXAUDKVQTQHSFBKCHT");
    msg.timeout = 0.2760614282584354;
    IMC::FollowSystem tmp_msg_0;
    tmp_msg_0.system = 25360U;
    tmp_msg_0.duration = 53441U;
    tmp_msg_0.speed = 0.7829151083464604;
    tmp_msg_0.speed_units = 59U;
    tmp_msg_0.x = 0.44136738781501184;
    tmp_msg_0.y = 0.8836749050273258;
    tmp_msg_0.z = 0.8001421049148559;
    tmp_msg_0.z_units = 137U;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.08953765679871384);
    msg.setSource(9144U);
    msg.setSourceEntity(227U);
    msg.setDestination(34756U);
    msg.setDestinationEntity(20U);
    msg.req_id = 15057U;
    msg.destination.assign("WFYKUWEJOANHPBCHGDTMXFZHBSZXWHLASBUPPNBTVVTIOKOVROLCHCHLBSQMRCUWAVALCQXJLVMXSXLDYUKCUNMJEPWFZNUZTKJARZFQVMIOGSTHRPRPMTFYYCTPWFXEKQZDOFDXYBFNOIEWAYVOLRPNUVODQLHGFZJOYSABKTBRAIQJMIEGQZSWWSQJEMJKBSYKAJCXCTISXKNNUZIEAMKNFGGENXQRD");
    msg.timeout = 0.44279307084922315;
    IMC::VehicleFormationParticipant tmp_msg_0;
    tmp_msg_0.vid = 6365U;
    tmp_msg_0.off_x = 0.4002247430516829;
    tmp_msg_0.off_y = 0.8037923075485194;
    tmp_msg_0.off_z = 0.07407997783777853;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPRequest msg;
    msg.setTimeStamp(0.42355341380782896);
    msg.setSource(2198U);
    msg.setSourceEntity(135U);
    msg.setDestination(53349U);
    msg.setDestinationEntity(173U);
    msg.req_id = 9349U;
    msg.destination.assign("TEZYHQTNZLZGDBLNITTVRWRBNPCXHULRHUPKADBXUIPXQOFWAHJOVWFOSLEHZLYVVACSLPPSYSRQIFAWHDTVABUXCAKXWZFBQXLSXPTNCKATQLEIEGXQFMFQMGWPUVMCIJFHIVIHNNMZHYA");
    msg.timeout = 0.6209286040200646;
    IMC::Collision tmp_msg_0;
    tmp_msg_0.value = 0.2608952814403014;
    tmp_msg_0.type = 189U;
    msg.msg_data.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPRequest #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.9867678585861508);
    msg.setSource(61619U);
    msg.setSourceEntity(60U);
    msg.setDestination(65531U);
    msg.setDestinationEntity(7U);
    msg.req_id = 40276U;
    msg.status = 2U;
    msg.info.assign("DTVJBKFFJSWQMFSGHGVTIOPCINAYNCNNVLYRIBJPXYICRUOCZTNMRDBKAUZJKUDUGQMSYJEHZPVHMAHJDFOIARZRZGERZRQNVXJBPKHEDOJCENCAQWDQXBCZFVQXEXIESUNXPTGPYKBMSXSSGDLHOETKYWAEPMYWLDIQGNSUFMETTLVKQJLSOXYYICVE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.5768981145696798);
    msg.setSource(46101U);
    msg.setSourceEntity(11U);
    msg.setDestination(30314U);
    msg.setDestinationEntity(104U);
    msg.req_id = 30026U;
    msg.status = 86U;
    msg.info.assign("HFEGHLCSZEDWWKQJDKPKYMHWAWMLPCQBIBYVHNOATJRUOIUVEDAVATSKBFQXCZGMIXTBYJVPJZXEODKOONJUFREECGSFMYTIVWUVYLLLYVCKMYFWTSKNUTZLFWNQLNPIDHFDEPFQICCAYTBJQKIAZUPCSWMGURJFBUMDSJBIERQYNQGXJCAIZOSXNRATHPALLSLEBVZVKTHVRURQEMOKHTS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TCPStatus msg;
    msg.setTimeStamp(0.012902798188666242);
    msg.setSource(49245U);
    msg.setSourceEntity(120U);
    msg.setDestination(56178U);
    msg.setDestinationEntity(128U);
    msg.req_id = 5626U;
    msg.status = 210U;
    msg.info.assign("NYQGMWTDVWPYWTLWUJHJRLDKMMPVDILEPBAWDRRHCVZTPLBCKICTXGDJHFBCCHOTETUQBDCAXPWWONQUVMOAVJEATONKPGOZZHOUQSRODYIPJVSTAQOZDNEFQMSQKIWOQDRMLUDZIHFAQYPKTLRKNTYCFGXUFBI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TCPStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.3889227727049275);
    msg.setSource(51718U);
    msg.setSourceEntity(104U);
    msg.setDestination(37212U);
    msg.setDestinationEntity(157U);
    msg.name.assign("BPVRXFUOAFCMLTTJQKMPYNOKHRHZQUJSUKITRUMDXLOLR");
    msg.report_time = 0.38568539895828957;
    msg.medium = 117U;
    msg.lat = 0.14408637382763;
    msg.lon = 0.9787207731020544;
    msg.depth = 0.3116377857514865;
    msg.alt = 0.04511898330944841;
    msg.sog = 0.8388780516616073;
    msg.cog = 0.2844806778099721;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.7995714112966877);
    msg.setSource(58759U);
    msg.setSourceEntity(212U);
    msg.setDestination(27915U);
    msg.setDestinationEntity(201U);
    msg.name.assign("FCKQHIFDHASDBRPYQIKWRPTGXCPYRQFPCEVZQFLFDAJVDCXWAZNMPZSAAWEKAGCJYUGHSMVCWHAFTDSBGITJQOIVGREOMNXRMEACMBOZJYKUBLXCOTQDVUDRXDNRGBHLJDKHELVJKVOLXVSZKKQMHSSPZMMTUWULSIREUNLOXNUBGFEZTWZ");
    msg.report_time = 0.35271487757681697;
    msg.medium = 116U;
    msg.lat = 0.7284729161787905;
    msg.lon = 0.47078827777150567;
    msg.depth = 0.8806233905402471;
    msg.alt = 0.1821059660799096;
    msg.sog = 0.7988502188289355;
    msg.cog = 0.47396143606250973;
    IMC::FollowTrajectory tmp_msg_0;
    tmp_msg_0.timeout = 4533U;
    tmp_msg_0.lat = 0.938289299532071;
    tmp_msg_0.lon = 0.22195234526250962;
    tmp_msg_0.z = 0.4094698107468203;
    tmp_msg_0.z_units = 20U;
    tmp_msg_0.speed = 0.8384180625100642;
    tmp_msg_0.speed_units = 133U;
    IMC::TrajectoryPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.x = 0.10056010178687436;
    tmp_tmp_msg_0_0.y = 0.12085165558655986;
    tmp_tmp_msg_0_0.z = 0.20004301903496013;
    tmp_tmp_msg_0_0.t = 0.08986428157687609;
    tmp_msg_0.points.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.custom.assign("DQUTDHPMGMPSWJXVRJEKYTXJECHIFUWHEXYQAQTLULLKBSROJNOYKVICGIAHHNWIQIEYGCNKYTMWCNLSQSDCMOMRHVXCJ");
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AssetReport msg;
    msg.setTimeStamp(0.7092996370936588);
    msg.setSource(47224U);
    msg.setSourceEntity(165U);
    msg.setDestination(49516U);
    msg.setDestinationEntity(138U);
    msg.name.assign("TBBUDJVIUCVKOKCYENCIJGUCVOAGKKSDPOFEZISXHLUETVALWPUMRJCDFZOBDSIFSZGHRLRFQUBCIRYZQMGEQCVHTXJPKQZDEJNCGQCPATUXCYDXMDPRUSGWBBMFMZTFLWHANQBIFFVHWWMKYWSNWATJFSABHBJWLVAXMTLIOTRZIOIOKGYWYZTPLYYHLPEKQDXPKQFUM");
    msg.report_time = 0.6705533189032187;
    msg.medium = 162U;
    msg.lat = 0.2474760081272357;
    msg.lon = 0.01350847117035292;
    msg.depth = 0.6684137474811598;
    msg.alt = 0.9317835484484347;
    msg.sog = 0.3607072500469095;
    msg.cog = 0.6445510576390364;
    IMC::ScheduledGoto tmp_msg_0;
    tmp_msg_0.arrival_time = 0.7456622486381269;
    tmp_msg_0.lat = 0.6836467455833047;
    tmp_msg_0.lon = 0.24365583221639753;
    tmp_msg_0.z = 0.8382891722193687;
    tmp_msg_0.z_units = 54U;
    tmp_msg_0.travel_z = 0.9821513821041591;
    tmp_msg_0.travel_z_units = 58U;
    tmp_msg_0.delayed = 51U;
    msg.msgs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AssetReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.11795386802395524);
    msg.setSource(9506U);
    msg.setSourceEntity(238U);
    msg.setDestination(1636U);
    msg.setDestinationEntity(123U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.21687403593431465);
    msg.setSource(52661U);
    msg.setSourceEntity(217U);
    msg.setDestination(36090U);
    msg.setDestinationEntity(250U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Abort msg;
    msg.setTimeStamp(0.6307812611989695);
    msg.setSource(41587U);
    msg.setSourceEntity(139U);
    msg.setDestination(58562U);
    msg.setDestinationEntity(69U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Abort #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.3339111797994079);
    msg.setSource(52504U);
    msg.setSourceEntity(101U);
    msg.setDestination(4069U);
    msg.setDestinationEntity(224U);
    msg.plan_id.assign("DPUNMOBDSVOGMHIFWFIDXPETSJQPQARI");
    msg.description.assign("WHCNKLIXOLAKPGRSSAGCEEOSKDDHMGTUHVKPHUQRCHMGCMTOLRMPQWJXUEDVXWCVJRRTEIYJQFAZWZJFDXNPVEQDSHBLIHCNEFIZGTFRWANZCVIIAXDXWDVQIKHWONRAJRQQOOBKULWTJVZYCXSYPMKGSZFFRBMYUAYNIHZCDMELEZXNYQMOEAGKIUSGTEFNHPLBTL");
    msg.vnamespace.assign("FHLUMIWFPNZGVJFKHSRLVLFWRPHTRSNYZFBPFNQDMSXDSBSHZZWNINTTXAWYHDCJFJJYOENNAWYUSVXAZEGBRBPGDSVCKQKMEOGVRBOUQIPSOTFYMHQROEWURVELPAEYSJYIWIKTCBDCNYMCEJQKSKZWVITRWQQEXRMNWBUCIXHDAIFTQLCGHLLPLGRJPMKKNVUZTZDUIBM");
    msg.start_man_id.assign("SFWNCFDVBUXBITIFWABMDPPIVGAVVBAGHJWSPEKYMLEKKPBZIOHEPGFPBFKCUNLTYAIHXBVXMTXQVMUJZYTEJTPSMMOQHCOOQARTNLDRQAEMJNKYUZJONQOGNRGQMRRSFBAWXZQDTGEHCLMCUFMWCRSKLZNDXWHLWWGBWXTVXIKDCTCPQXZNZ");
    IMC::PlanManeuver tmp_msg_0;
    tmp_msg_0.maneuver_id.assign("YVSCTVOREPEQDHMXTSBYFCYHKAJSALHHEETYAUPHKDNFKLYBQPCPEINOZQNZJJFIXDQAWMUWRYCNS");
    IMC::Drop tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 64030U;
    tmp_tmp_msg_0_0.lat = 0.0025580568980898555;
    tmp_tmp_msg_0_0.lon = 0.5697075468395729;
    tmp_tmp_msg_0_0.z = 0.07309805169145578;
    tmp_tmp_msg_0_0.z_units = 11U;
    tmp_tmp_msg_0_0.speed = 0.235602408863534;
    tmp_tmp_msg_0_0.speed_units = 149U;
    tmp_tmp_msg_0_0.custom.assign("HMHAPQCTXGRHHFDENMHJUFWAMEMQRJKFBCVBPIHKYZEILLDCXVVQNGUETJYUDYVXVIIFAAWSRIMHJITTZBRPNJODSVWSOCCAWTJLNCOPSU");
    tmp_msg_0.data.set(tmp_tmp_msg_0_0);
    IMC::SetLedBrightness tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.name.assign("PVZXXTIMHUOBDLLKLFMJSSMEDJICKEIGKSFYHDNFETNPPCDMLQUKUNNFGSNJHPPGXRYXRXATKMYCKWZMVLITFLACXHQVZSIPNDRBIQGXNEGKYLUCVECSOTOHGADQTWFQWGHFAGGFNXIKEOLXYUCHNBBQRFX");
    tmp_tmp_msg_0_1.value = 21U;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_1);
    msg.maneuvers.push_back(tmp_msg_0);
    IMC::PlanTransition tmp_msg_1;
    tmp_msg_1.source_man.assign("JSQOLSMVBEMDZLOJBYUCNEEQGRYHKHCKSBSLYZJPMPGKPKANVTVDDYVJUTVSHNLVUCAMHWNCRUWEQZFIDRDEFOHNPABICAMOROXCYFTLIWUZULOAIJGBXVMIGCMYNTVXJNKIBNCMTWSZPNQGHEDJEIZAEXKRBDFGDQFTYJYJIPNDJXGYDIKFSFZWWTQMYRSRQZCBLZARKTKPOEPHTTSVFXPLQOXBIBUQGWMULE");
    tmp_msg_1.dest_man.assign("ZEQMXOKPWYNYVAGOMUCZINVUAQIEKJSIZUBHMTTYFJYYCAAGEYWSGWNLRMKLTVQQJDBPTGBKRQSXHMRUFAMXWTODRFCUMRCLKDMQSHSDMVJPTZBYFLBVHEJCZDXEBVXPJWHXIJINGHQOIORHIDNJEZX");
    tmp_msg_1.conditions.assign("HQLYMKMDNKAJVDWFIBTQPDUCRGGVKHIGRGPSJLUROKMUPVHYBVLAZRXEJIWFCSXCMLOCNVIGJJQUXOUDWLXVBQHMBVPPHSNTGHXXZMNYRZAEXNKXDTTKDLIDWQEVFOKOQYKPNOASFLUGMTTFSWENCCSZWOTJZDFIBJLOPKUWAGHSUYBOQRDCYZGXFRWCSFJAEIMJBYGHECVQQHBAPBXBJAE");
    IMC::ReportedState tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.lat = 0.1826943037925829;
    tmp_tmp_msg_1_0.lon = 0.26762721452337834;
    tmp_tmp_msg_1_0.depth = 0.2513384038699161;
    tmp_tmp_msg_1_0.roll = 0.5442588209714658;
    tmp_tmp_msg_1_0.pitch = 0.8639182357490438;
    tmp_tmp_msg_1_0.yaw = 0.7092751903492116;
    tmp_tmp_msg_1_0.rcp_time = 0.2494850677814694;
    tmp_tmp_msg_1_0.sid.assign("FBCOCQQAUZUGBGOYTKBKPOQDHXTLHVSCIEZGYLIVPGJWPRUNGHCVQSKTZITCLLHAXMZTCNKPJAAGIRCUQDEKNZP");
    tmp_tmp_msg_1_0.s_type = 178U;
    tmp_msg_1.actions.push_back(tmp_tmp_msg_1_0);
    msg.transitions.push_back(tmp_msg_1);
    IMC::UbxStatus tmp_msg_2;
    tmp_msg_2.gpsfixtype = 55U;
    tmp_msg_2.flags = 240U;
    tmp_msg_2.diffcorr = 110U;
    msg.start_actions.push_back(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.004005072120046194);
    msg.setSource(13340U);
    msg.setSourceEntity(234U);
    msg.setDestination(62047U);
    msg.setDestinationEntity(184U);
    msg.plan_id.assign("COWUBFTNOTGLBHWXKKQBLBFNQJTACNJTMMSCHEOUXSZBTFVKVFAXRSMGGONYQIYWEGAYXCGQFEIEKGWMPYRVSFWQCI");
    msg.description.assign("CETNXYCHZQHKZFOKRWBTAUISUHGZLMLENJBVYXLCEVUJWAYZLIKJVOWIOEBWCQRDHUQCDSJIPTTAPWDGRMYJZBMGEBPSAOANKDLLXUQMBYSUQTNXLKCRXJSLLHZMVQFEPJNUXHVDBDWZWSFXPXPOCHGOYMLGUTTHIKPEPHUAFFIAGTARGFNYOXNAGRFDO");
    msg.vnamespace.assign("HCKBGEKHJZZAHACVONPSTLKLCGZIFABEZOVENCVVGMXIFFGGAQQYITTFIMSZBUJZPTHANURXQJONKYMFUWTEBCWQCPXGHRWUSAPUKPWGFSEWDOQMDVQPHVPUVKYIHNNJEXLIYDEUXBFDGPYNMQRMRYMAINBSSXJRVCDUXLXOKMLGGWNJTDQFHOORRTJJUBLUZZSIVLLWCARKHZLQEBTWDCADQFXIEBNELDPWSOTSOJJZFCMOM");
    msg.start_man_id.assign("OMXVEQFPMSLALTIQWNWXMEUBWEILJHESNOPSWZACZCASAYVGLMWQGEZXXKTFURCLNLNGTVRXCQJUMLHJIMHSSZQCTTCDVWCBHPRQHJAVMQIGUBYTNPTK");
    IMC::FollowReference tmp_msg_0;
    tmp_msg_0.control_src = 805U;
    tmp_msg_0.control_ent = 9U;
    tmp_msg_0.timeout = 0.45683276468145717;
    tmp_msg_0.loiter_radius = 0.13655668611425387;
    tmp_msg_0.altitude_interval = 0.9157564118827759;
    msg.end_actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanSpecification msg;
    msg.setTimeStamp(0.13363353853844007);
    msg.setSource(17616U);
    msg.setSourceEntity(108U);
    msg.setDestination(11913U);
    msg.setDestinationEntity(42U);
    msg.plan_id.assign("BTMUXPXYKDACQKPDOAGWCWTYGFDRPYRVXCUKEQJNHQVJEDTGKCSSMTJLQWLFJSGKQJTLJUYUQSIVVWNKGBFHOFOPQVALJVPXNSBO");
    msg.description.assign("ILVDTLBTECBVVRKVQWSEBNOGMSYTHFSJRDSGBUMBXQVVUENEWOCRFZ");
    msg.vnamespace.assign("NZXENRZOPTLMHYCFIVSZDYPEUCERTOIDJZOYWCFNJANQVTGOKTILKXY");
    IMC::PlanVariable tmp_msg_0;
    tmp_msg_0.name.assign("WQQDYRZWQXEHEHGVNUVLCXSOBKBWQMPVJWJP");
    tmp_msg_0.value.assign("ZNKIGAPZTWHLCJWGCOHKAOJQRFQPUGQCPXSWFTVFRZDLEIESUOCTOGRUYJKXPEWQDFAAMCBHCUJTLMRXVHJZLBYSFJBIBCXVMZXILQVARPOJQZWOJOWUVUUPLKSXNSFAFFHJUTVCLSQBZRRXXYZHEGPLSESHSCEFEMBHKNYURMEYYWMTGRENFBKZTTDBVA");
    tmp_msg_0.type = 110U;
    tmp_msg_0.access = 27U;
    msg.variables.push_back(tmp_msg_0);
    msg.start_man_id.assign("VKLMDRIGZYAXKSHVGOOCNKYCFPCXDJFEVJSPKECBDYGUAZANVAHWOVHAZCJZTWSJMIXKYSUSOOTLUESCHPVLWGEIFYFLEXVIJBMELOBWLJUSPWUARTPCCOMHMYYQDUSGTFOGGYKQBVULIMHDNRIGVJHCEXNKNFFQTWRTYBKXFB");
    IMC::PlanManeuver tmp_msg_1;
    tmp_msg_1.maneuver_id.assign("XSYDYANTBJRLYINAGQAZORMAGPILNXMPHPEASGNIGDBYACDLJGTKRVIFCQTMCQKPDFBBLTEXOIZIR");
    IMC::CompassCalibration tmp_tmp_msg_1_0;
    tmp_tmp_msg_1_0.timeout = 40777U;
    tmp_tmp_msg_1_0.lat = 0.9742319967196496;
    tmp_tmp_msg_1_0.lon = 0.7990255576269252;
    tmp_tmp_msg_1_0.z = 0.4672029301049613;
    tmp_tmp_msg_1_0.z_units = 117U;
    tmp_tmp_msg_1_0.pitch = 0.3523001126128883;
    tmp_tmp_msg_1_0.amplitude = 0.45918253260402175;
    tmp_tmp_msg_1_0.duration = 20470U;
    tmp_tmp_msg_1_0.speed = 0.8974292195734582;
    tmp_tmp_msg_1_0.speed_units = 118U;
    tmp_tmp_msg_1_0.radius = 0.6408991589509516;
    tmp_tmp_msg_1_0.direction = 156U;
    tmp_tmp_msg_1_0.custom.assign("MGXHHMICUESPTOLNTWUFQAIHRECBXWZH");
    tmp_msg_1.data.set(tmp_tmp_msg_1_0);
    msg.maneuvers.push_back(tmp_msg_1);
    IMC::PlanTransition tmp_msg_2;
    tmp_msg_2.source_man.assign("GJUWFFPRKSNKISTKKOEYCCWDVRGNXOXGUAMBHNEUJNMYYCHKVLPRTQPIQIYVEZHWQEUBUZQSWPNPBXSYTHMVNHETKOLXQNLUEZAKDZQBJDWOCNOACUKSIPTMBRSMVWDOMEGZBADRPSGXDQDCTA");
    tmp_msg_2.dest_man.assign("EYQBNEQEUAHPUDHHLNHZVRGWNCBCEBMIVACGQCTLNUHNQPKKVFEINPDSEZDVCXUVLWGGOMYPRQTTCYJALBXDIQPKRCJCDVUTQDLQFZHSXOKOBBYDBJIMGLOFGZRJFBHAGFESAX");
    tmp_msg_2.conditions.assign("KGSNQNKCQHRLLIAFJIYMKBXBUGMVICSQIDLIXHGIKPHXAECZLYXIUOAOZGWJAMZVJVEWNOSFQWMPCXXRKHSNLCPYJTWSXPHEINWMFQTSEINJIUZFZBDUEJZNT");
    msg.transitions.push_back(tmp_msg_2);
    IMC::QueryEntityActivationState tmp_msg_3;
    msg.start_actions.push_back(tmp_msg_3);
    IMC::PWM tmp_msg_4;
    tmp_msg_4.id = 57U;
    tmp_msg_4.period = 2193534557U;
    tmp_msg_4.duty_cycle = 3143683088U;
    msg.end_actions.push_back(tmp_msg_4);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanSpecification #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.28387556373351297);
    msg.setSource(44257U);
    msg.setSourceEntity(253U);
    msg.setDestination(57800U);
    msg.setDestinationEntity(203U);
    msg.maneuver_id.assign("QEPRZHIEWOSWMXIRGRNSEGMLXCXQNIASLHLHCAHKPPYILYTCHGTKFUMQLTKZBQOBEDVYLESYLPJWZDCCDKLVVLBQVXTHFWCRUKAKPVSXDOMWWRSDOTJWDZOGCAFEAPNAUBTEXKRASJEGNZIQINBXRFNQFVCTANUNXMJHCPIDRRHZDUGSGZKPBTVNCUJFOZVIYKFVPEIGDUARAPYBMSWYJIM");
    IMC::ScheduledGoto tmp_msg_0;
    tmp_msg_0.arrival_time = 0.6310835434527633;
    tmp_msg_0.lat = 0.06419207490485057;
    tmp_msg_0.lon = 0.046117658460062216;
    tmp_msg_0.z = 0.22133152127686195;
    tmp_msg_0.z_units = 67U;
    tmp_msg_0.travel_z = 0.9795676645026967;
    tmp_msg_0.travel_z_units = 167U;
    tmp_msg_0.delayed = 116U;
    msg.data.set(tmp_msg_0);
    IMC::UbxSvIn tmp_msg_1;
    tmp_msg_1.meanx = 0.29791975771445023;
    tmp_msg_1.meany = 0.6160679394811979;
    tmp_msg_1.meanz = 0.221566923336594;
    tmp_msg_1.dur = 3774178188U;
    tmp_msg_1.meanacc = 0.08676206423070554;
    tmp_msg_1.obs = 307096880U;
    tmp_msg_1.valid = 123U;
    tmp_msg_1.active = 24U;
    msg.start_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.3205257094825259);
    msg.setSource(58703U);
    msg.setSourceEntity(190U);
    msg.setDestination(55425U);
    msg.setDestinationEntity(209U);
    msg.maneuver_id.assign("ICZCFWSOTSIAEPYUEJJXVSNNMTYUTBNJLBXZBOZDACHKZSOVLVKGUPCHOTIMPGHBUIBFSPMJWZDIHIWZFGBGLPZQOQORAGYRVNGJLASJOURHTDFBDFEDKYKENAZIGHXJGUMAFNSPMBQREOMDFKWSUVLCNRXQ");
    IMC::Alignment tmp_msg_0;
    tmp_msg_0.timeout = 45048U;
    tmp_msg_0.lat = 0.08706377560482714;
    tmp_msg_0.lon = 0.4872882634546448;
    tmp_msg_0.speed = 0.783941247527619;
    tmp_msg_0.speed_units = 112U;
    tmp_msg_0.custom.assign("LYJKTBBBBFSMOETIRWVPXFLDFXBMHCTCZPONJFKYBRBVEIZVNCQNERYOAHVGTFPVMHCIGVGK");
    msg.data.set(tmp_msg_0);
    IMC::SingleCurrentCell tmp_msg_1;
    tmp_msg_1.lat = 0.433806481276758;
    tmp_msg_1.lon = 0.24103050271917847;
    tmp_msg_1.depth.assign("CPFNBRCNSJQHSIBUIIZOMJSARZWQVRLJVWEGSSYFBINLPXQDYLAHUDAKTURHGSEPWWDBPRZKXQMEMZOJTAYXBXGMHIETWHCUAPFDHVJL");
    tmp_msg_1.vel.assign("USZYMZLTETSBOLTTBFOMKBBZMDNIEBXAHWCGQCANCFEIVCQACQWNDIESTLHRAPFWTQJINSQIVUPJHNGPRHFMNQVOGEKUMOSWTUGJBOKYEBKAFCXJRJAWLZGGQRMZSCIOCSPABLUYZXDEVKLYODOWWYBWKZVRRDPXWQUELHAWUDXSLJTVJKULIHYFAO");
    tmp_msg_1.dir.assign("EELGTXXKWPDDRUQAZGXIAZLWGHFBBRAZEJQOBWATZUZCBUCVHBSLZXYQRPHOVEBOHUWTKLIMYFQRPCVFIPNXNIMPTAUAEYMRJLPUDYJYDPOKWCOHZYYQBJIKGNKCRCJGXXVJSTLHU");
    msg.end_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanManeuver msg;
    msg.setTimeStamp(0.8861451785405382);
    msg.setSource(61854U);
    msg.setSourceEntity(22U);
    msg.setDestination(15687U);
    msg.setDestinationEntity(33U);
    msg.maneuver_id.assign("OCFVFEDOTUUJYSRFPRQBJNYDLXDAZUYUSYXFTLZPDNIAISLQHDKIKWVGHHPSHHMZPQFJVYFXLSUATKXZELQERUGVVUMKSLCQBHWTRDQKZNJIVAIDAKGAXUXYXEJGPP");
    IMC::FollowPath tmp_msg_0;
    tmp_msg_0.timeout = 2971U;
    tmp_msg_0.lat = 0.9051133119343097;
    tmp_msg_0.lon = 0.3416566773484587;
    tmp_msg_0.z = 0.3636481092277851;
    tmp_msg_0.z_units = 9U;
    tmp_msg_0.speed = 0.04052847613545696;
    tmp_msg_0.speed_units = 84U;
    IMC::PathPoint tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.x = 0.8340495571257156;
    tmp_tmp_msg_0_0.y = 0.6930735707399237;
    tmp_tmp_msg_0_0.z = 0.7595953672869685;
    tmp_msg_0.points.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.custom.assign("ISOUFDKMEMWAYMFZHXOEQQYX");
    msg.data.set(tmp_msg_0);
    IMC::Pulse tmp_msg_1;
    msg.start_actions.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanManeuver #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.04904647507634596);
    msg.setSource(16790U);
    msg.setSourceEntity(35U);
    msg.setDestination(11369U);
    msg.setDestinationEntity(177U);
    msg.source_man.assign("XTEUAZVUAXITFRMSGQEMYQSDNYEIKNZMVTAZEPDRAWNLRJZEKSQUZMCUBYYJFBGTRPQGODIHVVSJOSZCIIFWK");
    msg.dest_man.assign("OQANHMYUAAZRKOXDZPRBHECSRAZOISSGZWUUGTJHNGVLFPIYXLHFNY");
    msg.conditions.assign("ZHWZYPXWZMUDFAFNKJVPYRXDCVURABLXYZUTNWXPWCUIYKMBFNSOKDREOIWNNMYUVLQTKEIZMBAHOAFSTZTMVFHJBMBIXDJJQFQEIFYBNRIVTAIYQHIFOWEKCUSNFJROCCYLMZDLSEVORUKLPGOXBSTEEMQYTJAWWCOKTRRVJGZIQDQXGBSGDAAZULLJKZYKCIXHVQSVCORHNCGNGLS");
    IMC::ButtonEvent tmp_msg_0;
    tmp_msg_0.button = 13U;
    tmp_msg_0.value = 7U;
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.6789636559262552);
    msg.setSource(20149U);
    msg.setSourceEntity(156U);
    msg.setDestination(32925U);
    msg.setDestinationEntity(177U);
    msg.source_man.assign("ZCMFEGOLQWLTTAAHFWPAQSEFWSSZOOYGWOQIJJRBDEZJKNEMADGCBKMRCHNKPAJKEPEXCUNSKQHUROIVJFDYEZCHHTIVTDAXEGTDWQZVVQYRVBNDXRFFVAIANIJEOCONQTWSLILRHNJBGYBKZKAXMXKUVPGLJLRXECZGYCSUWGVOZIWXYLBXMPISIRQDFU");
    msg.dest_man.assign("BLHAJXHVAQSPXDGUJKGPCXRJDZGBYFWNRJKQYEJXCTNHARCQTNTDMBUMFXRZFNYWCNEWNBKOPUIWMBCYKLPKFIVODHMLVBYAQCHRVEKHTCTDSSSCTOYGDSQWMHXWRJ");
    msg.conditions.assign("FDMWWGOHVKYCHNFKZDDPNANEGAFLIBWSUQHYWCGFVRPUGTWGHIVBBJHYUXJZFWPDFSCMYECQKTZBYNQZAJIUTVUUSMUHFLAGKREFAXDIXCKGJKCWQPQHTLPRRHNZGOBPENTWPAAMVRASQWNMYXQVOOKIOCLXMDRZCZJYGXZCLSJLRUSVGYRITLBEOOWVARITVJSOQSJDEPXMAESENPBFXMPBMMQQHTEBNLZNJLDOTKXVOFHKJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanTransition msg;
    msg.setTimeStamp(0.11453089748481715);
    msg.setSource(20495U);
    msg.setSourceEntity(39U);
    msg.setDestination(38313U);
    msg.setDestinationEntity(223U);
    msg.source_man.assign("VAJJXYRQMPPZDSDVCFOILRQVCLBAMHCWDQESPVZMUOBROSRMGGLHFEDHWLQDYXIGAWUXAXZCIKSHLIMTHEVIOASTRNYJWLHTSNUNAUTKMKWDOJZBYNQFNXCDZLFGVLDWEYRRZTCMYNEWAPTQRKSXVQFGGZGQBFXKWDWQKIIUG");
    msg.dest_man.assign("YKDEFJKNYDXJYPLTUZMWARDNQWFIGXGNJPVJZTKMQZLEWUSYISCMSIDJZYNHTTRAYSMGLZJWZGGUMPOKAPFQDXGWEDGELSIILWQRXQCTBUVTAVLRTCRQKQOJJPPHOZZXOEWSQEEIWRFSVNCADKRORWF");
    msg.conditions.assign("HTUBHYFWPTGOKBVPXFQXAIMMCEZKOOKVEETKBMJAYRKSTCDPNGBPTAMTQUAVLHPGHHBNRFYHDLHIZVVUQELJLJJAZOXAJMKLSYUNYKZBEQOMMQLGZCBBSIIZETXHGIDSWRXPYYSUPGQWNLEDVCXFTWUYDRKANMASSKRXVWJGNMVLXFFFCOBQYSICZPDNFOZGIMXRWCSTHTDICQBIJVUEQCLSWOLIFZJRVODWEYRFUXCQPAGWJJEPARGDUDNUNW");
    IMC::LblConfig tmp_msg_0;
    tmp_msg_0.op = 88U;
    msg.actions.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanTransition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.6370366473647195);
    msg.setSource(59845U);
    msg.setSourceEntity(160U);
    msg.setDestination(35511U);
    msg.setDestinationEntity(70U);
    msg.command = 91U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("JARQPBIGPAHOQUJLSZISSCKRQXYVGRTGOZVBTIRAHQASI");
    tmp_msg_0.description.assign("DYNSFHKVDPBXFPACONRJVBTEBWBCZWTQAJOMUOUMHTQZKEVSHRKHFJGLXHGDNYMTYCOHUNEPRQYSMXSQZSPQWQSSXITYNWPEXXBMICDLFXMUBCJMNAWALUZWTFYIWGTAKLARLCJGIDARGFDQODQTDETVEZRRKUZVJVWLHRAVQUCKORDCPEICARLEVBIJJVKNZEFLNEIYIBQIGZSXMPOPCZOZMVUAGWSGNIJS");
    tmp_msg_0.vnamespace.assign("UYWEXPCZIKBIWDLENPOYHSUSJHMMZDSLISPRJWENUIS");
    tmp_msg_0.start_man_id.assign("VRQUSGWURWGHZKZHRMROWPJPQAIASSYPIBYZLIDVCGQMBWDZFXVKUFEPGQLUIXJOVWGGLOQNXADGVIJYXFUETJIBQNBELQETUXTWEVBZKGRADAKMODOASUFNOBSSEIKJAWJIEMOBCCHFEHFOYXXUVZTXLMPYTRABYPHCIJNDFNGTYPJBQDZHDAXHY");
    IMC::PlanManeuver tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.maneuver_id.assign("XHJOBFEAPMIXQVRPOOABWHQCIQSXJKVZEKGCNYGMTLADDCISJDMKEWYUCDONYDBKQLGPZQKPDIIAUPFMORTBIFIQWDFBPTXCFWXUBBCYQGZSNIMPTSUXERAANVBKQETUXRBXKLTRJMUKPZZRGONFWCZMAINFUYAYSWWYWLSQAAOSZVQNRHYNJHHVTMIHHDTFYRLESPZHJYBFEXDPJETOEFVRMULHKVNCKLOMVUEZUW");
    IMC::Goto tmp_tmp_tmp_msg_0_0_0;
    tmp_tmp_tmp_msg_0_0_0.timeout = 51216U;
    tmp_tmp_tmp_msg_0_0_0.lat = 0.5100293468451975;
    tmp_tmp_tmp_msg_0_0_0.lon = 0.6838346421311983;
    tmp_tmp_tmp_msg_0_0_0.z = 0.7768423026491218;
    tmp_tmp_tmp_msg_0_0_0.z_units = 186U;
    tmp_tmp_tmp_msg_0_0_0.speed = 0.6052656842175014;
    tmp_tmp_tmp_msg_0_0_0.speed_units = 95U;
    tmp_tmp_tmp_msg_0_0_0.roll = 0.44273625339214473;
    tmp_tmp_tmp_msg_0_0_0.pitch = 0.9236947237503802;
    tmp_tmp_tmp_msg_0_0_0.yaw = 0.53369788289647;
    tmp_tmp_tmp_msg_0_0_0.custom.assign("AUCBTHFZCYPMLPDQEXXLCNOFMOJWNRRJPZTISWZPEYTQBENWWNAQGSOVXKPAXUWRKOILELAARTONTVWGBLZMCDRTQXYSWVHTMAKWJIRVFYZEBPDEDQYZCLFOJXJVQQRGNHEGTNLUFEJIJONQOGGJIYSUSPDKEKLDYBCDEPGTMMUTBFCFXZQBFSSAVMHUJDA");
    tmp_tmp_msg_0_0.data.set(tmp_tmp_tmp_msg_0_0_0);
    IMC::VerticalProfile tmp_tmp_tmp_msg_0_0_1;
    tmp_tmp_tmp_msg_0_0_1.parameter = 109U;
    tmp_tmp_tmp_msg_0_0_1.numsamples = 14U;
    IMC::ProfileSample tmp_tmp_tmp_tmp_msg_0_0_1_0;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.depth = 61497U;
    tmp_tmp_tmp_tmp_msg_0_0_1_0.avg = 0.5341804357231417;
    tmp_tmp_tmp_msg_0_0_1.samples.push_back(tmp_tmp_tmp_tmp_msg_0_0_1_0);
    tmp_tmp_tmp_msg_0_0_1.lat = 0.01828804167290088;
    tmp_tmp_tmp_msg_0_0_1.lon = 0.42168226419434285;
    tmp_tmp_msg_0_0.start_actions.push_back(tmp_tmp_tmp_msg_0_0_1);
    IMC::AngularVelocity tmp_tmp_tmp_msg_0_0_2;
    tmp_tmp_tmp_msg_0_0_2.time = 0.25467073351139513;
    tmp_tmp_tmp_msg_0_0_2.x = 0.8767814551249831;
    tmp_tmp_tmp_msg_0_0_2.y = 0.8816894107701034;
    tmp_tmp_tmp_msg_0_0_2.z = 0.9814325424943079;
    tmp_tmp_msg_0_0.end_actions.push_back(tmp_tmp_tmp_msg_0_0_2);
    tmp_msg_0.maneuvers.push_back(tmp_tmp_msg_0_0);
    IMC::PlanTransition tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.source_man.assign("RGEVNVVFKBLBKIKMTZOYLTPFWQFYKDHOCFAIVTJAGSITOIOWWAXNHMUGDLWAJZBAZRFKQPMBHVMERMXKSOGNXPYZYODTQBHEVHRXUUTNCZVUKZUICNYCNSIYESXBDCBGTLTZJMQKBJHRLSPQQUQRHUJZLPAMXCJDEMVEPZEEIVDPNNGXPRCXCWWKDPHMLYKYSAOGERSFXIABSHMHOWCQRWJJQDG");
    tmp_tmp_msg_0_1.dest_man.assign("LFJGYQICZTAIOGTTJCKSJTBHVSYXZMEXEXCMMFHVLGPPWQTQXEYDDV");
    tmp_tmp_msg_0_1.conditions.assign("VTOFLEHCTMAWPWLFHQSVWZZEGFAVKFKTWVKANZVWDPEPNVUYDDYBUJZXSTAWRCYNOZGNUEILOXTJCHZURPEKMIOVZPIROEXIKGRXYROKRHMJFBGMF");
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_1);
    IMC::Salinity tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.value = 0.1825488100546493;
    tmp_msg_0.start_actions.push_back(tmp_tmp_msg_0_2);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.6060293231671936);
    msg.setSource(21083U);
    msg.setSourceEntity(198U);
    msg.setDestination(58850U);
    msg.setDestinationEntity(243U);
    msg.command = 66U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("QIUTKKLYEMEORTLECRZJEEFXAQXLRHOPIOYXOUMZLVAMFNNISNCXXBFVSMFSZTBJWKPKIGYWWLIKZUQPFZERYGKHYUVLVSIFXXNNRBGPHITTYECTVMEJMDHDQNVDBZMUEOHKBSSMIITDAHNYUAQWDDGHSTZNOGURBYOZFZJDNAFQPGJCKYGVLPQUBOIESDMAZCPPXBJWCAWLXBURSLOPDGHX");
    tmp_msg_0.description.assign("TZJIMVHDEKQNXJDXIARYWYSTZERQFWEDLIRQZUBYXSYVFXEIQGFKEMODKAAJVJCGUVKNMWKTXOZCXJPWTRLBIGCORBNDLZ");
    tmp_msg_0.vnamespace.assign("VXHINIVNTJDNPHQSDHLWOCUCPHUHBIYGXSGVWOTEQZSVGMLIWVAJRONKCQWLGULCDXWQULKKIMKBPDPFWXDOCZYROXCVDJDJOMZVME");
    tmp_msg_0.start_man_id.assign("NYWUDMIAETXVGJBBLIHRWKWNNZPAOVFLCUBZPJFWZYUSTTFUANWQSXBELOEMRVKJEGTHHYUYOUINYSXSWAZDOTRKLPAQCOVMPDDKQUIFAJZINLAKRHCEGJMVIXCVGMGFCAOVEKXBTRRDQHRHFMYNJLFWQLDUXETAQZPUCSTHHCWJSRTYPXDNBMINYCXGOFTSQGDWMGHQXC");
    IMC::CompassCalibration tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.timeout = 32853U;
    tmp_tmp_msg_0_0.lat = 0.5970731618752676;
    tmp_tmp_msg_0_0.lon = 0.908498827394674;
    tmp_tmp_msg_0_0.z = 0.3458045827078122;
    tmp_tmp_msg_0_0.z_units = 90U;
    tmp_tmp_msg_0_0.pitch = 0.9087865997312495;
    tmp_tmp_msg_0_0.amplitude = 0.9966150388177926;
    tmp_tmp_msg_0_0.duration = 41814U;
    tmp_tmp_msg_0_0.speed = 0.30267322116647744;
    tmp_tmp_msg_0_0.speed_units = 13U;
    tmp_tmp_msg_0_0.radius = 0.7821722882494673;
    tmp_tmp_msg_0_0.direction = 136U;
    tmp_tmp_msg_0_0.custom.assign("OHJUHMJDQFGJTMKNBEQEUVSUMAIDMITKZNCJXAHVGHQGXHFGYNXXWANDKWZEACQKXVOLKSURDGEOMYQKPSVRQFTYWMIONIDLWGZDBMDFJDCJ");
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_0);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControl msg;
    msg.setTimeStamp(0.19031505981921693);
    msg.setSource(10494U);
    msg.setSourceEntity(144U);
    msg.setDestination(8895U);
    msg.setDestinationEntity(78U);
    msg.command = 15U;
    IMC::PlanSpecification tmp_msg_0;
    tmp_msg_0.plan_id.assign("NQIARNPOZZZDPRUEBNFYTYGZHFCONKKWYMUHFFJOPWIDBZQQQGKITTJ");
    tmp_msg_0.description.assign("ORSLZPGCKOBLQFICYUA");
    tmp_msg_0.vnamespace.assign("KIBGKMLOFDPZDEOZNPSUJEACCJTVNKFWBWDTRIAFMRJLNZOQCWSBFZMGVJPAGQVMHDXHHDXQWMIJWGFRZAIBZHKDPUEWXKUVSJGKVXETUIVEPSUJRNZQUEHCLTGXAOMHYZNBTLIDWOSTAVXGIRHXKFMUJIKCCXDWKQUVEBLCNZJSPDOAIBGNYMWXRLUDYVCHO");
    IMC::PlanVariable tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("UIJCOICRFWRFSGGKPMJGVBFSPBWCPEAHUONFHFPXEKFXTRHSDUVBZTWLYWQIXHQETOTABXBLHQVBCJLFTYM");
    tmp_tmp_msg_0_0.value.assign("TLRDXKLYCVQEJRMFSYZZOEKUJZTRVOJZUOBLKZHDOQVKSCWMPBSPDOIHJTLLGUPAGIXCAPVAEWWCSJBXCIWEAZOQHTFGBHOYTDHPUTFHMWOXRPKDNJRMFBVWKRCLBTOBIDRAFCMZFNTNUHGWEQAXJZRQHYGGJJVT");
    tmp_tmp_msg_0_0.type = 196U;
    tmp_tmp_msg_0_0.access = 165U;
    tmp_msg_0.variables.push_back(tmp_tmp_msg_0_0);
    tmp_msg_0.start_man_id.assign("MGGOZKZFMGUGZTVSCXYDGASWAXRTXODARLZOKGMSUGNMIWVCKHWVYYPKICLLXMFFNVCXKBKAHCJAFLWFUDPORBHWQIRRUTFKQTLAOYLHUDYZWXZDNWNMQIAKTEHHVEYFDXEIIEHBYIJUAJBJPQASVBICQOCRMEWZZDBIKRSCGIWQUNUMUZDKELTRQJYXEOYJPNGSHJATGPSFVBEXONTDRTHEOVPFSNBBLJOXWCJVMPSEBQZFL");
    IMC::PlanTransition tmp_tmp_msg_0_1;
    tmp_tmp_msg_0_1.source_man.assign("DNRAZXYEGYXFUWNLVUERKEIXIZFHPXZDDAOVHFLUCIUTOOVLSDCMJQQMVSILHFWDUGSBPKRTWZIAVEVYNXZICSYPTQXPJUCGHTPESABHXZUMRZCUCCKODMBNZKEQDWTKCNFGXVYFVZLNMERIYJTPLOBWAWILGWHFYFQUNMDMPWI");
    tmp_tmp_msg_0_1.dest_man.assign("MMKJAUSQLRPVCIKOGOZSOXVFUYOQICEQNYCFJTPYRYSNMQWWXATKADDKZGWZUSFJKXQCECBXTRWKHTPTTPDBZHSMVZFUVLLECJOJEFQWUPBBHIXFPVLITRCFUJDLMUKFMQZSXIAWEWBVMDTDYRLVNJISNOHRFISZDPRZVBTTYBW");
    tmp_tmp_msg_0_1.conditions.assign("TTREKSOQGBDMFTWEULUAOJXKCSNVNJGLIPXBDMCUPZBTQAHPZGHFJQHJIHEBLLZVZKZZZHBPGJXNNTHAWCYQGGHMQJZPLDBTQSVZMAJIMFNWPFWXOBSPITYDLWGAICSSYRBKXVWXHQRLTQAZKLUMENYROEDWMOECAIWELXFSRCFSMQINMXDFUFVBKVAPHLAJPIISJMOU");
    IMC::PeekDesiredPath tmp_tmp_tmp_msg_0_1_0;
    IMC::DesiredPath tmp_tmp_tmp_tmp_msg_0_1_0_0;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.path_ref = 3958161692U;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.start_lat = 0.4837060429713286;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.start_lon = 0.6335526077637259;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.start_z = 0.988382781042765;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.start_z_units = 192U;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.end_lat = 0.6474381060062814;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.end_lon = 0.8895146496072383;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.end_z = 0.9395267515030085;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.end_z_units = 180U;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.speed = 0.9037069897512987;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.speed_units = 17U;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.lradius = 0.5364513188295903;
    tmp_tmp_tmp_tmp_msg_0_1_0_0.flags = 165U;
    tmp_tmp_tmp_msg_0_1_0.dpath.set(tmp_tmp_tmp_tmp_msg_0_1_0_0);
    tmp_tmp_msg_0_1.actions.push_back(tmp_tmp_tmp_msg_0_1_0);
    tmp_msg_0.transitions.push_back(tmp_tmp_msg_0_1);
    IMC::VtolState tmp_tmp_msg_0_2;
    tmp_tmp_msg_0_2.state = 23U;
    tmp_msg_0.end_actions.push_back(tmp_tmp_msg_0_2);
    msg.plan.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.21683788832881834);
    msg.setSource(39947U);
    msg.setSourceEntity(239U);
    msg.setDestination(4772U);
    msg.setDestinationEntity(49U);
    msg.state = 65U;
    msg.plan_id.assign("EWQCRVXJONVFBQKDQTXLHJFUEKSPAVGUPGVMNDCRYRXTQQYUZSKGPHVLURZWBLFLESCJQGEQTDILERJTZLIXKXDBMMDJZXHNKXJZPYOKWWRIEQJMINNDDADVOEBLGWZISMBVYBZLAHKWPZRLUARUPXFUGRUFSWJHAZWAPOAVNXCA");
    msg.comm_level = 192U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.44975540117967516);
    msg.setSource(53301U);
    msg.setSourceEntity(28U);
    msg.setDestination(62215U);
    msg.setDestinationEntity(112U);
    msg.state = 12U;
    msg.plan_id.assign("PTOUBYLOWHAVNMAGIFQQXSOBSPRELWUYSDMNZPSRBFMVHCVTWFDCWBPIDOQCOFJQCKWJUC");
    msg.comm_level = 105U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EmergencyControlState msg;
    msg.setTimeStamp(0.09692229690324372);
    msg.setSource(51867U);
    msg.setSourceEntity(134U);
    msg.setDestination(49737U);
    msg.setDestinationEntity(56U);
    msg.state = 117U;
    msg.plan_id.assign("LNURIJUTNYGEUCMZBQGBVJZWAKCDXEZKX");
    msg.comm_level = 95U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EmergencyControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.5889127379559784);
    msg.setSource(16191U);
    msg.setSourceEntity(80U);
    msg.setDestination(19156U);
    msg.setDestinationEntity(153U);
    msg.type = 185U;
    msg.op = 26U;
    msg.request_id = 27378U;
    msg.plan_id.assign("OEZUAQSNTBNQEJCFUSCOMAMEVCGSE");
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.19937064480110034;
    tmp_msg_0.amp = 0.8790564685698653;
    tmp_msg_0.cor = 31U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("PWFISXYETIBDSZOMPTCTHLBJPXUBSAUWLHZUBRDMJZSJLWUDOXYMCPGTIZMDZFGDWQMELUJCSAMYTPSQG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.45580365045298743);
    msg.setSource(11602U);
    msg.setSourceEntity(128U);
    msg.setDestination(39358U);
    msg.setDestinationEntity(210U);
    msg.type = 195U;
    msg.op = 35U;
    msg.request_id = 34375U;
    msg.plan_id.assign("SNLKSQGIYALVXSXVQMHNOEYPNZCHOTKTWDRGWCAAJCOKUNXNHBARTTYFLNMMQZLKAHGRFBCLBRBCRNYUJCRIJFEOMPJFYGUIOUJWESQVERDDOHXCGETELJXUEDWIJWYXEKZ");
    IMC::FormationParameters tmp_msg_0;
    tmp_msg_0.formation_name.assign("BIPXHJDWWSUHNPKGKRUYKHWKAOTIJMOSGUYITEAFNHJKEDORCZMDXRNQBAONZWGECLOEAMNQHUQWTJSKRPUCIZCUGOPQT");
    tmp_msg_0.reference_frame = 118U;
    tmp_msg_0.custom.assign("QMOLJGPEUWCWCYTDBAMPALQGGYTFUIHWNPXVYKPMUFIBVDLAGSRATCJGYKSGOWAPZYZIAKJDIBZZKUVVMIGMCAXREJRGRLDXEXKFNKBTHDCFZKOHAFPRHMJQOQFQWKSKTWVJJUNXZPIGDHQCPDXTVLSWJTWEMFBSGLUOBBMALOETYXUDCQIYTNAOFQUIRJZHFSNOECNP");
    msg.arg.set(tmp_msg_0);
    msg.info.assign("GINWYAZYFAALDFULYWXXMNUYMYDKNK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDB msg;
    msg.setTimeStamp(0.8481194544847949);
    msg.setSource(59685U);
    msg.setSourceEntity(217U);
    msg.setDestination(33233U);
    msg.setDestinationEntity(197U);
    msg.type = 126U;
    msg.op = 2U;
    msg.request_id = 70U;
    msg.plan_id.assign("ZRQMKFLZDWQKOAKLKJUSVHQJXHHLOSJXXWREVBKGXI");
    IMC::LinkLevel tmp_msg_0;
    tmp_msg_0.value = 0.8599790297994626;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("SGXAIJMVIBEQYBPOEZMMTJNAQWEXMQUBCLINTXTIVCRDEFBVTKQJABONBFJLXDJNLRHEBDXPGYOHHOWCLIHVWMIGUNJVBXPWXWKWPSUHKQATCZKGGDNRAURFULKMUHWTPVYLQZSVCIFESAKLECVMDOCHFIMYJRYPOSXCRRQTHWURFHXDGFYDEMQLCJZZDAZJSOLKKTAIDZTOAUUFKV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDB #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.5798302109435526);
    msg.setSource(5086U);
    msg.setSourceEntity(45U);
    msg.setDestination(53791U);
    msg.setDestinationEntity(198U);
    msg.plan_count = 11206U;
    msg.plan_size = 863975527U;
    msg.change_time = 0.8313919390279688;
    msg.change_sid = 22794U;
    msg.change_sname.assign("VQWRNSRZBJXFOJMJISIQANZBTFFEIZWFLVGSRWMTVDEHLGAEGADACEKMLVCZZUMQMKLSBYAPHOBQLDWZJLWJDEGQIIWQGYFHDPGYVILDXDFMXTJKRFPERKCOOQRZTOPNIVNZKDXVTUHYXNFUHKWTGLS");
    const signed char tmp_msg_0[] = {-108, 103, -12, -39, -4, 72, 98, -119, 26, -116, -52, -98, 76, -51, 74, -38, 57, -101, 18, 39, -123, 29, -118, -80, 122, 55, 112, 39, 44, 80, -60, 8, 5, -91, 61, 55, 119, -62, 63, -77, -18, 34};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.3374478064402765);
    msg.setSource(10453U);
    msg.setSourceEntity(71U);
    msg.setDestination(9102U);
    msg.setDestinationEntity(214U);
    msg.plan_count = 51876U;
    msg.plan_size = 887425927U;
    msg.change_time = 0.9811966876203003;
    msg.change_sid = 55358U;
    msg.change_sname.assign("GHNIMWESHNDVFQDRBDEJJHMAOEOXJAEKIYIUKZERPVXHUBU");
    const signed char tmp_msg_0[] = {-61, 93, 109, 51, -91, -45, 53, 48, 53, -43, 52, -77, 28, 24, 112, 58, 45, -42, -96, 56, -103, -125, 115, -115, -8, 116, 56, 53, -124, 72, 112, 34, -60, -87, 69, 105, 12, 6, -24, 61, -51, -96, 80, -14, -13, -74, -11, -79, -41, 97, 119, 54, -29, 48, 95, -71, 69, 12, 89, -3, 47, 88, -56, -34, 68, 76, -30, -113, 41, -2, -41, -41, -83, 6, 83, 62, -70, -108, -83, 79, -28, -52, -31, -127, -62, -63, -76, -22, -5, -31, -68, 7, -100, 21, 38, -111, 33, -22, -111, -27, 45, 12, -55, -24, -84, 11, 80, 81, 1, 11, 113, 111, -56, 77, 25, -68, -44, 57, -59, -65, -125, -45, 116, -119, 55, 26, -20, 49, 59, 126, -84, 109, 28, -16, 95, 122, -54, 121, 122, 22, 42, 95, 3, -82, -34, 109, 71, -124, -74, 108, -84, 56, -9, 70, -34, 61, 122, 107, 79, 81, -88, -15, 77, -118, 69, -11, -104, -119, -4, -128, 12, 22, -69, -10, 109, -111, -103, -47, -57, 124, 32, 45, -38, -3, -10, 112};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));
    IMC::PlanDBInformation tmp_msg_1;
    tmp_msg_1.plan_id.assign("XKXLIJKEGITQSFQLEGNVBTVRQNTUDPHYSMBWEVPGEMBHZCWOBYLUYXWKLDRPVHHHFXPOLSJKACWAJTGYBMFJPUGYONMLXOUASXKJMNQTXVQSDWXLOFGBVCHBZBTNEYJRRVICJAAKUGHGPSCUFTRUEAIVDWQAZWUZGDEEONHSDWCPPXTICYJBKOYVAAZIIMMXQFT");
    tmp_msg_1.plan_size = 18901U;
    tmp_msg_1.change_time = 0.7993827922161296;
    tmp_msg_1.change_sid = 49998U;
    tmp_msg_1.change_sname.assign("AAJFQLLHXMREUEVPZFCCHSETOCNLZMGNQYTNCMJILEDMMLSVTMUAIEBN");
    const signed char tmp_tmp_msg_1_0[] = {105, 93, 105, -111, -10, -101, -19, 0, -20, -32, -119, -100, 95, -64, 14, -43, 82, -98, 15, -17, -77, 34, -116, -126, -105, 11, 99, 63, -54, -90, -29, 77, 20, -20, -92, 44, -22, -14, -118, 20, 111, 32, -17, -12, -83, -47, -55, -125, -43, -117, 64, -68, 116, 68, -106, -122, -80, -85, 35, 101, 24, -74, 89, 101, -5, -32, 70, 125, -51, 4, 108, 106, 102, -66, 62, 48, -107, 93, 101, -48, 65, -42, -125, -70, 89, -55, -59, 28, 55, -51, 66, 21, 16, 54, 59, -110, -122, -43, 119, -34, -38, -62, -76, -102, -33, 43, 73, 23, -122, 100, 83, 22, -111, -68, 3, 11, 112, -120, 13, -98, -55, 35, 8, 102, -33, -11, 62, -55, 114, -36, -34, 6, -61, 1, 103, 104, 4, 110, -32, -83, -3, 20, 72, 119, -33, 97, 122, 1, 47, 60, 55, -68, 83, 114, 61, 27, 56, 56, -55, -79, 6, -102, 22, 87, -13, 22, -66, -112, -127, -55, 60, 119, 75, -72, -8, -89, 41, -102, -109, 45, 50, -58, 95, 108, -42, 58, 36, -8, -117, -21, 40, 104, -9, -114, 93, -21, -32, -11, -100, -5, 114, -39, -95, 30, 22, -69};
    tmp_msg_1.md5.assign(tmp_tmp_msg_1_0, tmp_tmp_msg_1_0 + sizeof(tmp_tmp_msg_1_0));
    msg.plans_info.push_back(tmp_msg_1);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBState msg;
    msg.setTimeStamp(0.8479963317649992);
    msg.setSource(65060U);
    msg.setSourceEntity(155U);
    msg.setDestination(57101U);
    msg.setDestinationEntity(40U);
    msg.plan_count = 25445U;
    msg.plan_size = 2098462045U;
    msg.change_time = 0.48163622197396727;
    msg.change_sid = 11422U;
    msg.change_sname.assign("ATPOQNUWRQKPJINEVHRMCLDNKFYHBMYOEDQINGDFMZCEXJDKOLSDNVQYBPNIGAVGDFDOCXGZALQQVUQSFXBYZWWDEAIZFKSMNEASOCBBOPRREWCRVAHUTREUEJSRPFSXGOXVKVFLRIWZMVQTVBYBIDSWMLMMXUUAXHOHRGKUIKDZPUZNRHWJHEJQWGOWXAESXZYJSLFNXYKKCCBPTBPIJPZMMHGBYJTTJQFHUAGSFLPGWLIUJLKCLNYT");
    const signed char tmp_msg_0[] = {-96, -56, 57, -47, 116, 103, 94, -128, -28, 77, -41, -118, 24, -15, 16, 56, 15, 101, 88, -114, -50, 19, 84, -79, -38, 70, 104, -71, 25, -109, -57, -6, 76, 6, 67, 58, 90, -71, 17, -49, 110, -7, -45, 35, -8, -6, 85, -103, -38, -66, -34, 118, 40, -123, 60, 60, -114, -14, -21, 105, 4, 32, 53, -44, -32, -122, -94, 121, 56, -123};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.15802209981340098);
    msg.setSource(25259U);
    msg.setSourceEntity(101U);
    msg.setDestination(24041U);
    msg.setDestinationEntity(99U);
    msg.plan_id.assign("OIIIBHCHUFWGAKJGCVAKDUPEXNAIAYVXNEOMSHJMXGRFVYJLJNLTMFQDONZLKDWCFFJIBWAFOSMEWPVTRRMNWGESZOMURGTSWAYEBCUFNGHQYSBDJPXYILTSOLJD");
    msg.plan_size = 10605U;
    msg.change_time = 0.9500193490321697;
    msg.change_sid = 20496U;
    msg.change_sname.assign("DWCCWRXANKTSQFNXIBGGGEMMVNMIWBHGPJYZWRNPLMHKRLMLEXRAKNBZCCOSYIDDJMZRYBFJNCQGHSUEEUHXIJTYDGUEBMPPPVOUXLMQOTTLRKIWHDTLFCZWTQEAVXTJSWHIUNKZORJCZUQASJIAAVPPVHDJHMYXKHPZOZYAOSGWDRIWETLFVIZOUJQMVTYKBYCFWPGXBQJASQNKXDO");
    const signed char tmp_msg_0[] = {37, -34, -24, -9, 86, 8, 21, -63, 100, 91, -110, 46, 62, -54, 3, 83, -113, -37, -16, -106, 58, 9, -105, -87, -18, -52, 8, 99, -122, 5, -77, 50, -82, 78, -78, 100, -88, -83, 99, 12, -23, 74, -81, 93, 7, 3, -42, -83, 105, -4, -93};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.15963614188836084);
    msg.setSource(23866U);
    msg.setSourceEntity(186U);
    msg.setDestination(16585U);
    msg.setDestinationEntity(39U);
    msg.plan_id.assign("HIBEKNUMCXNWSVVPRNZKODMHUIZLSXPLAOERGPPEVTHSSHDCOSTXSCTQL");
    msg.plan_size = 42256U;
    msg.change_time = 0.10526548290730509;
    msg.change_sid = 7053U;
    msg.change_sname.assign("STPQTJLLBUJNOHKWECOXJOPMFHACCWIAKBJLJXVLZQNGARMGQMDEUBXGDDJSRGYMYPAYQDOHXIFOXCWCWRJUFHGNNRPDHUKBOFAUKZMYZSDVCSYHBNNTEOIFTSZFWVQYEMLMBSDYSWTBDZHFELOZKOXDRHHFXGCWPRYIPBWIKCDIMRPCKVKNGLMNZPEAQVPGRZJHIZFIELUCUVQBE");
    const signed char tmp_msg_0[] = {-42, -40, -72, -110, 88, 57, 113, 124, 116, 82, 12, -74, 11, 90, -115, -118, 1, -18, -53, -93, -118, 39, 9, -102, 104, 77, 6, 3, -73, 37, 8, 51, 119};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanDBInformation msg;
    msg.setTimeStamp(0.769152639876276);
    msg.setSource(32826U);
    msg.setSourceEntity(160U);
    msg.setDestination(59208U);
    msg.setDestinationEntity(8U);
    msg.plan_id.assign("PTFMABMMHBISNJSNRILGHEOJDFLDJMYRZBOLJPSZFOPFYLTSHIXTRZOAJFIPQXHMUOGQZKNNXSOJAEBDGTLRVGAFJLLZRXFWHXZBWXQTKUNWPKNGHUTOLDYRFOVUEQWYU");
    msg.plan_size = 51932U;
    msg.change_time = 0.3493095599680168;
    msg.change_sid = 50776U;
    msg.change_sname.assign("IZAWXZYCLLKFLOYJLOEWPIZGTZFTPZUCPYGAKCMTOKUVSSGUMRNSWPXDATQZOJHYVXNHBZBMHSZXGWHUUJZXQDBIEPIGJJDJYBVINOXVDAJTLZHJHVHDQRPEMQIPNUYBOBCORIFVEYMRPIVXMNUVXGKMMKJDXSYBCWSWHCWUCRARERKCOPRQFKAQEBNLNLWNEFYTTPAAASSNITFEFXSQGGDCUFDJKECOBLGGHNWIWMOQQFKRLHTYAEMRL");
    const signed char tmp_msg_0[] = {-78, -120, 78, 9, 2, -100, 15, -66, 29, 53, 81, 65, -106, -84, 79, 109, -127, 21, 1, -63, 40, -15, -27, 126, -66, 85, 92, -36, 2, -62, 17, 83, 42, 4, -56, 55, -52, 102, 113, 72, -91, -93, -96, 78, -123, 80, -118, 54, -40, -125, -39, 18, 39, -55, 79, 63, -10, -121, -10, 57, -108, 57, 87, -122, -35, -6, -63, 61, 101, -46, -59, 9, 11, -3, 78, 124, 72, -85, -92, 46, -102, 56, -27, 33, -41, 86, -15, -75, 26, 64, -18, -24, -2, 102, -35, 20, 116, -1, -78, -81, 4, 31, 47, 36, 123, 95, 35, 32, -123, 21, -46, 20, -72, 42, 24, 29, 79, 4, -73, 46, 67, 101, 30, 65};
    msg.md5.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanDBInformation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.2959350953833686);
    msg.setSource(3551U);
    msg.setSourceEntity(24U);
    msg.setDestination(26904U);
    msg.setDestinationEntity(221U);
    msg.type = 5U;
    msg.op = 45U;
    msg.request_id = 1853U;
    msg.plan_id.assign("LAZNTNSWCBYMZJPCOSTWRXWWCVUIESZKGDQMENKMTJHNVMGTLWNOUDRACFHI");
    msg.flags = 12363U;
    IMC::EntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("HURCKBBPRMUKSSQQWINUPZLTNECILBORWJCDZETGRJRFMLUGXCUVTLHLZDRBXTOZVJGSPGSMFZSYNYNVA");
    IMC::EntityParameter tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("YJOTHZEFBSIBXUVWNFEUEANVOHDRWPDTOEYZYAFZVITDWAYEXZGTMJTZQOZBALMNYOMWPWKHHBSJTFCWULMEFIWLGPFKLSCPXNCIJEULHSAWGRDBSPDJLUKKLCXCHRBJNXCMGRYZXHPMADSXHDXJEYJPIJSVIGOIFWUMGQDRKNAFBLDRTQCKKSQPUHKBGPOOERSCWKUCQHDUFQTGYMSXRPMBKGVCVTIRNRAQOZXFVNAVNGYLETUVJNYLVAQI");
    tmp_tmp_msg_0_0.value.assign("MWROOSRBOWDEGSESQCXRJBGZNHPWFPPOFPUAJPAYSHXMBMHXQNRCEKZXHYRBCYPDLBMKDQILPJJFOMITZDRNKEUZHIASWUPAKYVMYKCQYMICHSEL");
    tmp_msg_0.params.push_back(tmp_tmp_msg_0_0);
    msg.arg.set(tmp_msg_0);
    msg.info.assign("ETMBYWJQSVZVDPRTKTIUKSIKUOLKOIAOOSYNXLCRIOCWCXLIFEOPDFMUUOLCFNXCIETQHGTBZBRJDPMRGKVXIGSQSJQUNYWFQPWEAAHTTZSSJZKYNWAMVKJTEVRELZCLGOYSBOYWQYQBYVJXBHCSEFRVHIWVPDMNQNNHHU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.665801188737612);
    msg.setSource(60325U);
    msg.setSourceEntity(187U);
    msg.setDestination(34982U);
    msg.setDestinationEntity(91U);
    msg.type = 223U;
    msg.op = 220U;
    msg.request_id = 57981U;
    msg.plan_id.assign("CQDJTRQRYBBOYN");
    msg.flags = 5102U;
    IMC::HistoricEvent tmp_msg_0;
    tmp_msg_0.text.assign("KEQGPTPEKVYQTSYUCPKLPJDAWLKXPEXZLLQGQHINIWGRRTQEZSYZNKNMTOGNXIANEBQDGEROPJZUORXZEZWDISOHOWHMZXIKLAVEGLUJFPXJCBRACTWGFWDXYAYFSASGFBVULURUUD");
    tmp_msg_0.type = 208U;
    msg.arg.set(tmp_msg_0);
    msg.info.assign("HNMQDMEHCPRZZFUWULONAWRNHJVAXJNQLJCIQPELTGOTCBBZGVZA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControl msg;
    msg.setTimeStamp(0.05460528280176902);
    msg.setSource(27153U);
    msg.setSourceEntity(73U);
    msg.setDestination(7104U);
    msg.setDestinationEntity(87U);
    msg.type = 78U;
    msg.op = 77U;
    msg.request_id = 60837U;
    msg.plan_id.assign("DGZNBTANOQHJFYNVXUHAMVPIMUCVABTPGUUMYIUESTYGYQAFOHDNKEVVSOQZTODCTZHJZHEXZNWUJELPWPIPFEHXTCCDWAKEBWAXPLUACVUMSOXMQSFQSXGLTRCIIAFGYPAZQIRKJYSVVRPGRDQYMGKSTFOIHJSXLILEKLOJBIYRMZRBHNWR");
    msg.flags = 17878U;
    IMC::SaveEntityParameters tmp_msg_0;
    tmp_msg_0.name.assign("SMDIXBAKSVJKFFXYWHEUUCBAXGLRHSCSLLIFWDPDWAOLOEUVERVLZYJZZJKYETKXHAWBRTZZMJECOTAAPYQQKXUJJOKGYZZPEIZY");
    msg.arg.set(tmp_msg_0);
    msg.info.assign("KZOFVUQPUPOTYFMIGMNFICODEJZIEWMMNLTMEGWCVGLCXDRILXAZJSRMZRKAQNGOMECFIXBWRZUVYGVFZJXLJRMHSTKJBHKYNRTGXWJEEPZKQTNPPPEBOOVYPKUTFWHGIBSBVYMHABZDAVSFXWWHDDOQDSQXCQNZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControl #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.5403285827603604);
    msg.setSource(42453U);
    msg.setSourceEntity(8U);
    msg.setDestination(35208U);
    msg.setDestinationEntity(91U);
    msg.state = 131U;
    msg.plan_id.assign("GBJPPOHLHHVPCTXQHVBSULUESTKYSSXRMBDNEKESKSSINLROCPIVEUWQTCAYUJXIOFN");
    msg.plan_eta = 1346626512;
    msg.plan_progress = 0.4667481118633652;
    msg.man_id.assign("ZGBJEXCZJUMXWVMBKXZBQGQQVYVQKYQFVOUEYWKEPRLISROJRMZZFDBCXWJDUESHIPEDWPWXBHPVMZRPWIYHIDXTOHRWYHKMPRCNTHLNCVYTMGBKOOOXDRWYFWLOSLVTKZDECQVGFSAPYPALUGEQAQGLBCKEA");
    msg.man_type = 53386U;
    msg.man_eta = -1378300844;
    msg.last_outcome = 177U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.8825661228196712);
    msg.setSource(5096U);
    msg.setSourceEntity(77U);
    msg.setDestination(19341U);
    msg.setDestinationEntity(19U);
    msg.state = 94U;
    msg.plan_id.assign("ZNZKRFVEFSOVOAWXQDJHRCBASQNCTWSUVUSNZEELPTCAUXYDJIUHAHQGRPCKGQTJPNEMDHYWTTWMGAPKGLKRFKQPWPYLEZJIBIHOOISRSIZXGJIEWDRJPIMOXYOZMQTJRDAHVQIZDOO");
    msg.plan_eta = 1396770855;
    msg.plan_progress = 0.3913976550973782;
    msg.man_id.assign("ZSWTEMXFBEANRZBTXPHRGJUJDBYSNDZTVNOOFFVHWULBLPQZWTAYXXGRGUARO");
    msg.man_type = 54579U;
    msg.man_eta = 1217460913;
    msg.last_outcome = 178U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanControlState msg;
    msg.setTimeStamp(0.45358116874200516);
    msg.setSource(17630U);
    msg.setSourceEntity(161U);
    msg.setDestination(762U);
    msg.setDestinationEntity(39U);
    msg.state = 250U;
    msg.plan_id.assign("OAGXTSSMSFFYHXGXBESVLGRWMNDMYQZJ");
    msg.plan_eta = 1710373926;
    msg.plan_progress = 0.0903591015105234;
    msg.man_id.assign("WZRASXIDEEQ");
    msg.man_type = 53692U;
    msg.man_eta = -1218033539;
    msg.last_outcome = 158U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanControlState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.267866841429218);
    msg.setSource(16913U);
    msg.setSourceEntity(71U);
    msg.setDestination(1075U);
    msg.setDestinationEntity(45U);
    msg.name.assign("ZHGDUOKLHJKQLWKRXUDGOJSRLYBZVICLZWBBTSDLXEPRCPOJHYCTYZDFNGIFUVMSCMVOSAMEPOWVZJVWYGZUTTEAKPMVAXUNRYX");
    msg.value.assign("TJWACBUTMNUYIHPWOMPALALLKIRTPLPCNGGNWGBOWEXDJDAYIFSRZSGHVIWTDXPQOONDRSSWR");
    msg.type = 125U;
    msg.access = 31U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.471496938786953);
    msg.setSource(61223U);
    msg.setSourceEntity(22U);
    msg.setDestination(23369U);
    msg.setDestinationEntity(62U);
    msg.name.assign("QDLPHMDCOWPYNHPZUTRGCQDYLULSXGVBVDPYAMLOJZFZNCUHDTLVRTILPNRIIOOWUIJWPMFCKXHUZGKGFDJYWHZWMZPSBYETCGEYCFTVHQRPVLKKNIAOZJFRICOFMXBUWMLJNBPOJUNZQEKYUCEBATCDDNMJYSAGBFMIKUTSFQAORSSGKMMVTXKJFISNQOBWJUGAHVVGZAKBHEXXDLQSTEIBBCEPDWXRNHRIEWQEWXYAEF");
    msg.value.assign("REJVLJLBIUZPCGEEOVWJRTWNQQWQQQFFUTAWPCYNVLCEWXCBIESYCXVKORKACHTPHAHGPVNWKNEXZDFAHLFLKGMTQUZGCKBYLIQBGKTAFTERMKSHZXPKXNDRSARKLDDPMPPQUUYPSUVRZCFSSFTFRHGOENZNISI");
    msg.type = 136U;
    msg.access = 103U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanVariable msg;
    msg.setTimeStamp(0.43069060261370895);
    msg.setSource(46413U);
    msg.setSourceEntity(22U);
    msg.setDestination(24208U);
    msg.setDestinationEntity(43U);
    msg.name.assign("XIWUAPKOPRIRABYTBHSRHATEHKLLENNYCSRLPIULSFCUMM");
    msg.value.assign("GMTMXHPRNCLXUIVKPQRFMOCSNVESYYZZJLBKDEAYSZIRLHDEQDNSCPCJQYHFVSEWXBVKJPJIWPNHWSPDXJTSXCLULPYSAZXIGYUXOU");
    msg.type = 239U;
    msg.access = 30U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanVariable #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.7368781776997846);
    msg.setSource(50139U);
    msg.setSourceEntity(104U);
    msg.setDestination(40426U);
    msg.setDestinationEntity(75U);
    msg.cmd = 196U;
    msg.op = 212U;
    msg.plan_id.assign("GQNASLERTAKRANQIWE");
    msg.params.assign("YHVUDUEWHUZVJZJMKIETCWYHVRKIHLRFOXBEIZCUFHJKROJLTUYEDESWNDADKFHBJYJIKFGISBGCBJOZDBXHPQPWNSTQMYCKWHKTQENRDTEQWMORDQIHPWLUELTQBQNXUGRNZMNMFPUOAAXL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.3844895266311146);
    msg.setSource(19838U);
    msg.setSourceEntity(191U);
    msg.setDestination(1938U);
    msg.setDestinationEntity(44U);
    msg.cmd = 83U;
    msg.op = 176U;
    msg.plan_id.assign("YVMBEHWVELUGNDGLCRBJQJLMIPPCVFGRPOBTRZHTPDTUEMO");
    msg.params.assign("NNOBSBYFQGYSGQUVGUIMOVCPRVWTVAPUTAKWDEJEWLGVDZPRAHXFTPSNMXSQFIHKCMLSEDEDMFNRQBQPZJUGJMLYVOQGMGSAVKAHXERXFKWJCLNJOBDRMWQPLCRZUSOANCHYXGKSOGTYZSDCSRNZKXQXXIBMACTPEDNYJMWHUZWDTLYPHFFBODYKPHTRCUZQEZV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanGeneration msg;
    msg.setTimeStamp(0.9959302273997668);
    msg.setSource(1840U);
    msg.setSourceEntity(171U);
    msg.setDestination(30741U);
    msg.setDestinationEntity(58U);
    msg.cmd = 43U;
    msg.op = 249U;
    msg.plan_id.assign("YAOWSFORISTKDPMPXZWHURXETYXTGFWUVOEUVWYWONDERQSYJBECKNMAATQYGNLIMYZEHDDCSMCHTDDJPJXZGFAGJUBMEVCNGOHVJPZYASVFZNUZIBWZQCGQMPIHBHIDAMRRDTVCEFGGIANSROBFUBXVRVNUQLXJYXRELNRKTJYUMAZWKKNWKLFDBIIAQHLTIXOKEVXCNCKZOLFPWTVCWJDRGLU");
    msg.params.assign("DPXSQHQMSGVNUKJEVVDEIALORMRSFKEHQYDMKDFWWHPUINZPGTOUHBARVBISEYEAXXBWBDYGDNSZWVOKNFHCRJVYKNFHIQSGCV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanGeneration #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.7767270511616521);
    msg.setSource(32093U);
    msg.setSourceEntity(196U);
    msg.setDestination(38118U);
    msg.setDestinationEntity(216U);
    msg.group_name.assign("JCMQLDIQTMDEBXLIQJPTLMJWIHDOFCTVYHVCBZLDEVFIYABUPFDQAIPDWQONBMWXKPLSSZSNLPHACAXOQCSOJYVWEHNYRUKBKRWPNMXILPASADIBFETVGFYFXFLZBJIBRCDEWVUOQYVHRNOACMFYHSXURCGYJZWGNKUWJKXZZCKGTNYCNVZFGRTFABHKTKELEGSRIRJPUAZGHJOUZIOAKTUJRZDGMBPXXQPDVWVMHNXTUEQSEESNH");
    msg.op = 224U;
    msg.lat = 0.3352374733452458;
    msg.lon = 0.19938306954288298;
    msg.height = 0.727256897756596;
    msg.x = 0.8219628701795618;
    msg.y = 0.04433565057969768;
    msg.z = 0.3323063163509469;
    msg.phi = 0.2909223321887294;
    msg.theta = 0.020502938561033912;
    msg.psi = 0.40498769041436977;
    msg.vx = 0.5306790988600621;
    msg.vy = 0.2046579075823225;
    msg.vz = 0.701923387801103;
    msg.p = 0.420952620564674;
    msg.q = 0.7975277145852094;
    msg.r = 0.9595556298743282;
    msg.svx = 0.3436209196864274;
    msg.svy = 0.32135839170155633;
    msg.svz = 0.4659331938085809;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.0681814110030109);
    msg.setSource(33545U);
    msg.setSourceEntity(102U);
    msg.setDestination(42888U);
    msg.setDestinationEntity(9U);
    msg.group_name.assign("HJHSBJFEAGQFUHPXYFPMEEDOKBTAENIMQGIICMAIAMCFRGGDJNPNFCLDHQZKRSZNUXMJJAEDGX");
    msg.op = 68U;
    msg.lat = 0.12935287038611454;
    msg.lon = 0.623322536844142;
    msg.height = 0.18341940784637123;
    msg.x = 0.9521552074235083;
    msg.y = 0.9726405621320416;
    msg.z = 0.05387924751609274;
    msg.phi = 0.01351089620600976;
    msg.theta = 0.8893786104781076;
    msg.psi = 0.3922241951859473;
    msg.vx = 0.09133269290890955;
    msg.vy = 0.7546217851753738;
    msg.vz = 0.173987667006537;
    msg.p = 0.32603896406935673;
    msg.q = 0.5025531353095708;
    msg.r = 0.3662478182073352;
    msg.svx = 0.11012978319762046;
    msg.svy = 0.2968629492126512;
    msg.svz = 0.8900748030929545;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::LeaderState msg;
    msg.setTimeStamp(0.6291397328908499);
    msg.setSource(31567U);
    msg.setSourceEntity(216U);
    msg.setDestination(58233U);
    msg.setDestinationEntity(78U);
    msg.group_name.assign("JBAWCEWOOECKXILBVSMBWSGESVBPVNSQYBCULZMYQHIOUJYEPCCEHFESUYBCXOYMBVWTCHEFIHJNUYDPHVNNKIDXCUEZMMORJRYTJKACLHEPGWSERXTGYIFGVNNZX");
    msg.op = 34U;
    msg.lat = 0.6843781613490142;
    msg.lon = 0.9974744020149395;
    msg.height = 0.7611696765705048;
    msg.x = 0.8718551850387427;
    msg.y = 0.9105651997209422;
    msg.z = 0.5712910772768665;
    msg.phi = 0.10214132454045666;
    msg.theta = 0.6533052189529255;
    msg.psi = 0.7892567809905878;
    msg.vx = 0.08161683732060798;
    msg.vy = 0.9078991410922085;
    msg.vz = 0.523582746213061;
    msg.p = 0.015012351398365653;
    msg.q = 0.3212472685382791;
    msg.r = 0.4432836531635702;
    msg.svx = 0.09173688514301237;
    msg.svy = 0.014064136877362965;
    msg.svz = 0.8796482291000408;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("LeaderState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.6661760194908375);
    msg.setSource(58160U);
    msg.setSourceEntity(54U);
    msg.setDestination(29599U);
    msg.setDestinationEntity(249U);
    msg.plan_id.assign("MQRPKJHWTJJCNVBJKZRHPQDPRXNUFHGJDAEGLEYHKACOMFTZPQBCOLGYRKUVGYYSIOUWGLOTMDWRORWPWZJWAUXIXDIZEOTPCZNSGMHXCDBVVYSANXMKFBMQEQBIEJICNNYFARKFJDBUMEDNMPTCIPGRVVLSKCHHYLOQWDXFFFXBWK");
    msg.type = 142U;
    msg.properties = 10U;
    msg.durations.assign("MRGPGJUHBAULAHALIDRWMWDXEZQSVLEUSQQPMESLNDZNETMWJGXNFBVJOTDVZIPFJDLAOACWEKFRGGJVHBOQTMJGYFNEYRRSSTERLLCGVXYB");
    msg.distances.assign("JNVZSKQMBIUZDZERBYHELCFROCXCFOSQYPKMUSQBBOTMLRTROOGXXWXLASYOJTMXMPCWTNVWRHWCQPHSAZRSKLOGTFAOLHXDGQYIGTULZWAMPHFWMWNBPCKADIEMHELCSYXADIPAPIRVVHEYQJOTLMQZKYKVN");
    msg.actions.assign("MXMWESTAMVKXCBGDCFOBSPHXQ");
    msg.fuel.assign("UYSULUHYTLTEKTLGVCFLCFCDPMZDNAWDEBOJBNIPOXCXZOELPBKPAKJJHXDMWGRSUCOTVIFCOHXXYBMJCOKBYIWESUTLHRZHLWFHWLDATNBGINGBFKGSTJCSPPRNHPRMVXOXDQCBIQHZVPYQDGHZEWPRJXDAJWREEITMVAQGZUEVIYKSQFQAXRJEFQKMRNNUF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.317787742931831);
    msg.setSource(64227U);
    msg.setSourceEntity(73U);
    msg.setDestination(43574U);
    msg.setDestinationEntity(96U);
    msg.plan_id.assign("UIFUQKHIODKASEROJYDFPJZJCIJTMHGZIMBVWMKWJBNYHIBFYERTQXZRSTWRLVEIXUUVDNVMCZCYGOMOQANFGIPBJFLYXHLPKSLEYMVFETFCPAGDFLAYYGEXEGZWRWQYUMZIWJATTUSQLDGSUBVWRMUPBASKHARPOHXZNYBQXNJTPESNMTMNDOHXZKCQOQGWR");
    msg.type = 165U;
    msg.properties = 164U;
    msg.durations.assign("ZAHPRRSNEUJQGYHHQNTSRPVRSZGSZIJVLPFXIFQKBAICPFMMUDMFKBKGWDVWLGEBUMOZIZICCEVSNNNJARHX");
    msg.distances.assign("LROVOBOGGUEOCQJFBSUORCSFDQPPGYILHYLTJKZNVYJZPYRSYXDYGTCWMHWUWXBHZBDDPSWFENVZAGZNMHTTWPNDWQJCSNBQOFOKBAXYIPXCGRGVMFZETUCZXFFGBXIWILYNKKKVXCSFNYTLKEPMACEONLKTJMITENEJAQJAAVKFDOZAXPKGCHBIRLWAUQZHHUVDIAMENWIJPBRMVPURSHQXYRSRDRIMUQZKJDMTEHO");
    msg.actions.assign("DCQHSDPBTOATZCQOSPEGCXXGRGDJLBZIAIYTDNXUYBLPPTERZJFWUPSIKEVCQITIXLJRUWOJUXAKDWNMNJYCVLWBQZRCOMBWQIGMVKPIPORQHTNURWWKJVAHMGYHSCWFEXZPSBEBAKSCNOOKJNHAGXPFQDJNQESZCWBMXUEDSZRHVITOIBGHDHMKTJNRRFUZNULKCOOYVFDHVAUMAKFSVYGZFAVLAQYUWEFTMYEZNPGS");
    msg.fuel.assign("FHSKSFMWYIZIXLZPIODBQAEWPBCXOLHTXDHZIRFOZUBFVMCKLDGUZEULTEZ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PlanStatistics msg;
    msg.setTimeStamp(0.29553508656132643);
    msg.setSource(17624U);
    msg.setSourceEntity(76U);
    msg.setDestination(31150U);
    msg.setDestinationEntity(180U);
    msg.plan_id.assign("BQJMKEFHJRPVKFOIWDORQP");
    msg.type = 207U;
    msg.properties = 241U;
    msg.durations.assign("ULMJYWBSUWERGQRYGSNUSPPGHJZLBAKOBMKTHXJWPYBPFDTSCLL");
    msg.distances.assign("YGELSVGPTKDVCYEMCMQYEDEBYHXUJMNIXWTEC");
    msg.actions.assign("NQZXGWZDJBSBSMYHZAWNJWWADVGEOYQDDKOIJGLIOIYJABZKAMFETKETHCWMSKRAWYHEUPQRKJJRYOOSNMYKQNZSFMOFRZKWNIBXROTHPCVULIUTMTAIHCIHIWREDQLBTUVPQMPXGDYQAGULRJNSYVCUYVIDCORELSTHGETVGBEOUDNXVKBZJPNPSGQBXXGJSIJLLAYUPVEDGLFCXUDKPTFVTFRPFEFZ");
    msg.fuel.assign("PCZPWAFEHLQHDZJPHGUFDLCMRRMVCENGFWXYOOPHYJCGXPWHRUENCNGRYQEAFSYHTOWSQEUYVKMFANWNIDLUDPJGBSJUELXKWCPUSAGHQVTVSKTGKMMJUQCNLAAWDSKOOYZCYLEIXFNBJDDZSZLVTRYIBXIKIHTQFNDAPZXTIUSPHCTZAQVMSQVFZYLOBAVBGHVITNPWJDMLCBRZNOKOBIRBEDFA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PlanStatistics #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.4042036109806183);
    msg.setSource(33350U);
    msg.setSourceEntity(196U);
    msg.setDestination(24556U);
    msg.setDestinationEntity(97U);
    msg.lat = 0.3545491401164622;
    msg.lon = 0.7413126365043596;
    msg.depth = 0.06733232374958731;
    msg.roll = 0.2249206587008542;
    msg.pitch = 0.8528081309890168;
    msg.yaw = 0.3989530043209434;
    msg.rcp_time = 0.3773507106443964;
    msg.sid.assign("YHDKKETWJJIKYCZGPNREPHANRPPAVDYFNXOFJHMEKQRFTTTFVQNDVXAMTHCRXIEKBAKDVYJULNQWXYIQBZDCSXHPLMZASWB");
    msg.s_type = 125U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.6017643635385819);
    msg.setSource(7268U);
    msg.setSourceEntity(226U);
    msg.setDestination(50211U);
    msg.setDestinationEntity(74U);
    msg.lat = 0.21481060607680247;
    msg.lon = 0.24843671582297044;
    msg.depth = 0.7453805440326378;
    msg.roll = 0.01932639945054082;
    msg.pitch = 0.8567393155670888;
    msg.yaw = 0.8461516308968052;
    msg.rcp_time = 0.20609341201219733;
    msg.sid.assign("YJKYSQQYZPFHLVRXNPNSIDQHPTPNDMZMPLR");
    msg.s_type = 216U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ReportedState msg;
    msg.setTimeStamp(0.38799100682733745);
    msg.setSource(51346U);
    msg.setSourceEntity(136U);
    msg.setDestination(57670U);
    msg.setDestinationEntity(146U);
    msg.lat = 0.01651668322191424;
    msg.lon = 0.9119079596519368;
    msg.depth = 0.48990499046088154;
    msg.roll = 0.16898919557292746;
    msg.pitch = 0.6462622708485531;
    msg.yaw = 0.17323569359589452;
    msg.rcp_time = 0.9527226935218331;
    msg.sid.assign("PNLSQJOWKMGFPIUDOGFJXKQDXGERBGDAOBHNDQYJVQTR");
    msg.s_type = 87U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ReportedState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.5992484072873061);
    msg.setSource(39766U);
    msg.setSourceEntity(185U);
    msg.setDestination(38525U);
    msg.setDestinationEntity(251U);
    msg.id.assign("EARBZZWQQWBLTEEDSQBIIHMOUZYSWGIQXXQZHLALNMAPKJWFTBSZIIAPKCVUKRCGOPPEOJFGRKALVIQTFCLJAEYPFZIVARADLDGZMCSHDGTCXSLMMTJWKFLJDHLVPNGPSQQXYCVENNKYYUIUNRWOEDVFRTOFHYAFEBDWGZXTFZDKXJUMMNIBYEPHBSPSKUBNJLZJIWPO");
    msg.sensor_class.assign("VOAFHEJPGQZMIHUECPUHWTCINGDZXSLNOHNFZBRQXFZNWDKAWFDUUWVPTKSTTQXSNIOVTCQAFLPEBSUAXYCALAFKRZKJHHVYSYZJJARVEVCYBBXOMGLTJRCMGKCBMTOGIPEYLMBUPJMORFCIVNYUSHJEQRPELRMMXJNEXDMDVTKGUJBIOWGRWRJLFZQEHOVDDZAYSGDTSXOAQYAKCIB");
    msg.lat = 0.008792290743699804;
    msg.lon = 0.01575474916903341;
    msg.alt = 0.3218661452495315;
    msg.heading = 0.0818324169676714;
    msg.data.assign("PRUCEJYJPGYHLSTIRNKCXOFONNDAFSIEZCKWYUBAXNKMVKBKSTTTAHYIGGPEODCEIUOOJZVPCAJASHCVFXDDDNXPSHHLZWEYMHJRCDLZFLIJZSQZBMQOXPPFYGVKKWGAMFQEIQBURNJLBKBOMEXXMSZQVPJFWROFEOWLLYSMVUSHYPDQIQBUBIMUGEEXVHWJDGARUJITAGQITYRTYLTLWUGZMKAHWCPFHTUN");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.6543306365379318);
    msg.setSource(53209U);
    msg.setSourceEntity(77U);
    msg.setDestination(62694U);
    msg.setDestinationEntity(123U);
    msg.id.assign("NMXTZXBIQOGWBFXGUORWHAHCBKJEZTSOODEQKSJQDSXLNGFREQYWVJUZALTTBPSJGRUCUMUGEVPKXFNSFLQLVIVWROTDLZRDDJGNMIMYSWEKCQDCSRHRURJXXSKWHPSXNKYNCGDZILDVEZBCYNYMXGBJFWEBBUQQVJKFDMKALPPOEBXHLY");
    msg.sensor_class.assign("JYSTRRMJJQJYCTMAZMHKIJKDPXJPZQRMQNXUOQIGFCABIGTFMBYMDCPWNDXHHUOFHVNXSOAUZWTVFLSWUZUCSNSGGELTEPYMDSJVYLZVIURFKTLWSGJCLEBKFQDZWLXFWRYVEAQZETTHKENOIRMSUYCCRAKWPOCBNVDDKOKUXOCSHBHHQTVOONENJHIFKVBWHAZBMMYDPGJRFLIEVULPANBPIQIPQRVCTFDWXEEGLGYLRNAOXAXZGPGQ");
    msg.lat = 0.5930222407983717;
    msg.lon = 0.5573782154318989;
    msg.alt = 0.8006275011292951;
    msg.heading = 0.5322868611395164;
    msg.data.assign("SNMYQZJHZJPSIYROSAXILFBIGWAKRCVHDTQLWWTPCWYFYXGHYJKEZCOPUWBDOSJNNVVEQOACSIYKFNFDUSJRBLRPHUYEMRJNLNLIUXTRXLBDKWFNFAMZBLMAFXOKQUNTBDLXBDGVGWJOCQF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteSensorInfo msg;
    msg.setTimeStamp(0.5409751192785967);
    msg.setSource(14072U);
    msg.setSourceEntity(63U);
    msg.setDestination(27839U);
    msg.setDestinationEntity(57U);
    msg.id.assign("YDGKWVXDNCIAWPDIICVMIYGQNQCMNPIHZOPEDVGHDWOEGBXSHLEYQDKYUNJLASWTTFUHYSUCMTCFMGXZLERCQOLGFFEMBNRHBJPSJFBAVGKRAQXWPVNBAHNOXRZJNXPIUQTTDGVQAWOHJPBZLCMINUXSFYILYLUAJTMAVJJPEKSKOBTZTJKXQHQFHSRUXKSVORSTFYLETRBGZWYZELM");
    msg.sensor_class.assign("YOVMRCYIRJPEBMRZGBLOQZSCCOKQGOAWIHCWZNLDSACXPNSBUAJJHXSEREAUCQFKMLDKVLAIYIIQ");
    msg.lat = 0.5646881886377093;
    msg.lon = 0.8054839072305202;
    msg.alt = 0.2288665530620152;
    msg.heading = 0.1324991302227908;
    msg.data.assign("DTAPFWACEFQLXIEVVYRAMXRDCOEWRZBWGSOOGMMZAKYRZTDXPJIJNIHSZJOEQEBBCQQGMMNEGPSUSSAMIMWUOKSDKSYEAUUFDBTWX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteSensorInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.2549476031908139);
    msg.setSource(59214U);
    msg.setSourceEntity(148U);
    msg.setDestination(12430U);
    msg.setDestinationEntity(19U);
    msg.msg_type.assign("CKNBJDBRQFTBEMLYNCCCKIWAWBQPAQFLEOVPOTYMVASAGTDMUBXYWRCGXNSBAIPVMZXTKAORDYCYIPYFDZQTFIGKZOXRDHIHHUNXOZBIDCXJPSNWBEWQHAYZVICWNNGEFFWQNHPUQXGKVLHVXJIFKPMR");
    msg.sensor_class.assign("FMSWXZXULDTJGLKQVLFGIARWPSEZQD");
    msg.mmsi.assign("OXNFDRCNBETLHFBSYGRRGYCEZKIDORUKJEAIHYIXZWHKBFGJAEBABLTIVAZKQIRSDWNUFUGSAYFPKJLVOMDLCGXMUKQVOHVUWHEXXSCQJPRGIRWWZJUEFWEPNCHZVSVULKQZOTGHOLBOXOCMDSYCTQWSPQUMWBGLQIQCXHGYYLGCSUPSONYBIMLHXPTJPADXQNTMTIUQV");
    msg.callsign.assign("GQJRWZHOAWEVHDADRUEKCSMZXIFYMNNTPHEJJOCYUROLHWAYJSRMRIZZFARDWPXLQMKVMSYAPFJSCUAXFELTYNITWYHWZKYTLZXOSQVTNUDPCEDRXHBFQHKXIFBBCVJ");
    msg.name.assign("KCEAAWGXYTDQOHREASGXCFHTMHXPPYCSSWDLBNYRJWFJM");
    msg.nav_status = 68U;
    msg.type_and_cargo = 107U;
    msg.lat = 0.2605738132260246;
    msg.lon = 0.1586931846681423;
    msg.course = 0.4453680719345754;
    msg.speed = 0.9684127723237974;
    msg.dist = 0.4677128250569774;
    msg.a = 0.8677747550775972;
    msg.b = 0.38333127078423745;
    msg.c = 0.5309542601523219;
    msg.d = 0.6667978222947509;
    msg.draught = 0.7242992792473867;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.5042418320344513);
    msg.setSource(4850U);
    msg.setSourceEntity(34U);
    msg.setDestination(25625U);
    msg.setDestinationEntity(98U);
    msg.msg_type.assign("DVWKHMRPNNFHTHEQUQADCXZUSXNFDDQBLQTRGVAUZTJDISQCPTKXRAWSHCNYVCNEHSOQFZRPPTGHEQLXBRYFKWGGETEIUAJRMZPSYRFSWYTGCLOJOTPIDLIBPKUMOZYOIKWXLDTSIZLEJAGNNNBRVEJYTUSJJZAMEFCWY");
    msg.sensor_class.assign("LVUMXFUJRLGMSXWYVPSPPEJI");
    msg.mmsi.assign("JTKMMYZLXTATIQCBYHYGZFBUG");
    msg.callsign.assign("SIIWZKKALMLXYHCFALGJVWDRWOUHGFEPVXXWHBNQFYRXFAQKSIDMXTLITIQBZQACCRD");
    msg.name.assign("ULJJBKUTCVPGSBNFDRMYAXNMPUBFPGYYZNLYJOFCKCLUBRNMXTAUIPNZDLYIVXIPWWEMSEFKHKCSWIRVPQLDBYIGOEYQQCSOGTXWZRMESKURAHDQGPDBPFVHXBODUTTKUAMGNQNHJSTQW");
    msg.nav_status = 65U;
    msg.type_and_cargo = 212U;
    msg.lat = 0.3229568358981153;
    msg.lon = 0.4316877106524568;
    msg.course = 0.7632463217308362;
    msg.speed = 0.0016327661627566492;
    msg.dist = 0.6782166592243151;
    msg.a = 0.4744464099027915;
    msg.b = 0.04414326101687427;
    msg.c = 0.16532425027486064;
    msg.d = 0.23770212813926384;
    msg.draught = 0.912514604434808;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AisInfo msg;
    msg.setTimeStamp(0.18853405474429275);
    msg.setSource(50352U);
    msg.setSourceEntity(42U);
    msg.setDestination(46944U);
    msg.setDestinationEntity(178U);
    msg.msg_type.assign("XNJBPKCVYPF");
    msg.sensor_class.assign("JPVFOFFDNQDHKQACSGTOBISPWXWJURSCLBFLUNWMCAYFERCSKWQIBTJFNDYAAYUMGPALTIINEEEZSXMYRYEZZUCLCNKYGRIHLZLHJZUOJXEFLSUXISVDRMQUQPVRPPSQWDPNKSQDZBTJZNTMOOZFYXVBRCXKQNDQXFEBVMUGOVLMWDGTMDXMGILGJNBVOPYU");
    msg.mmsi.assign("HBHNMJLMEVTIBAOQEOZCTR");
    msg.callsign.assign("ZPEVNAKSGHSCJBLLKVQFOPSFQHKRADZISMORLDBKIPMDDHLMCTAGYRCUHQEYVILCUVYGMFOUYETXXSWMENFXZJDQGSBVUGOSQYRFNRGWEJTQNOOARJHJTTBKXFOFHIUTOQZTXLAJHDXAICBTNLIGUAWCBPYRPPVRJDAPVIGXBWLBDNSOKFMZHLYOQYCNBHXEEWBLWZVKAJTJXEIYAFWMNHPCCQRIPNUNKGCKZZKWP");
    msg.name.assign("UIEGQMIOXTATGH");
    msg.nav_status = 205U;
    msg.type_and_cargo = 54U;
    msg.lat = 0.3350929844787013;
    msg.lon = 0.5532320187330376;
    msg.course = 0.03050106827700194;
    msg.speed = 0.5479988343577219;
    msg.dist = 0.8083107513927908;
    msg.a = 0.9314555121561033;
    msg.b = 0.46414973715754104;
    msg.c = 0.629310449340705;
    msg.d = 0.15279950758634564;
    msg.draught = 0.5340048564006887;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AisInfo #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.8602918825633841);
    msg.setSource(44101U);
    msg.setSourceEntity(191U);
    msg.setDestination(20448U);
    msg.setDestinationEntity(115U);
    msg.id.assign("BWKVREQZCXGAOZFNU");
    IMC::MapFeature tmp_msg_0;
    tmp_msg_0.id.assign("SIQUHLMNYRSJNJLIFBYTCIGQMLKBVXZFQFYWTDZPLUGLMNVXRLESELXEFTABLCMXIKBMPYXTWEBPOFESRYUGLDCPXZAZNMHOUQOSUCYAEVVWXMFYCLPEZWWOXRKSGJHHEZKGRJTQGWSCSFDIBEWPXDNKTWHKWUROZDVHUVYKDVTKRGFGFMGQIAJC");
    tmp_msg_0.feature_type = 110U;
    tmp_msg_0.rgb_red = 185U;
    tmp_msg_0.rgb_green = 177U;
    tmp_msg_0.rgb_blue = 175U;
    msg.features.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.08748698389253795);
    msg.setSource(62397U);
    msg.setSourceEntity(170U);
    msg.setDestination(34654U);
    msg.setDestinationEntity(39U);
    msg.id.assign("ITWQUIRGQEDUWJGPYNIXUNXGHDQLCNLYWW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Map msg;
    msg.setTimeStamp(0.040740045302137706);
    msg.setSource(9913U);
    msg.setSourceEntity(47U);
    msg.setDestination(59808U);
    msg.setDestinationEntity(121U);
    msg.id.assign("EPIQOVMCERSQJHAWAFERMUHTNIHJPTWLZEZXDLCPWAYNKLHPXOJDTRJWNTFMTYUKRCJYGGDPYZWSTQKRRZAOLULVOUVFIUJBLSIIZTVVPKFFEWDMLYGH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Map #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.740939789832573);
    msg.setSource(9526U);
    msg.setSourceEntity(40U);
    msg.setDestination(18146U);
    msg.setDestinationEntity(113U);
    msg.id.assign("RIJDNVQCHYEEDMYSHXNMKAGOJLYKAXSSH");
    msg.feature_type = 17U;
    msg.rgb_red = 174U;
    msg.rgb_green = 134U;
    msg.rgb_blue = 75U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.36807267066384286);
    msg.setSource(38882U);
    msg.setSourceEntity(170U);
    msg.setDestination(45473U);
    msg.setDestinationEntity(11U);
    msg.id.assign("NPTEROFLGGMHDCKKVXSMYVPUUBSRWCHXFKUCMKJZYMLVMGHNCBGXNNIGSCYLFAGDSBZCNPVFDHFWLDZKRXZDZLSLMWUTMZVROUWVEOIUEAANGXBVDLSYOVWTAVPSWIJTAQFRIFZAJOXDXQEFKBLRHKAJOKEPQSUMAZPOZOQTJJBMWEWYBWINSEATDLOCRNQUGWIFNKHTJUIPIOBYQJIYMVBPZFDEXYQYKHCQSER");
    msg.feature_type = 78U;
    msg.rgb_red = 107U;
    msg.rgb_green = 180U;
    msg.rgb_blue = 38U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.4410274429242562;
    tmp_msg_0.lon = 0.731844443789135;
    tmp_msg_0.alt = 0.08524680577259813;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapFeature msg;
    msg.setTimeStamp(0.0988265952103985);
    msg.setSource(18105U);
    msg.setSourceEntity(85U);
    msg.setDestination(37812U);
    msg.setDestinationEntity(42U);
    msg.id.assign("DJCZZUTZUAZGIFIWXNJKIOLGQYACQEWATY");
    msg.feature_type = 72U;
    msg.rgb_red = 20U;
    msg.rgb_green = 71U;
    msg.rgb_blue = 240U;
    IMC::MapPoint tmp_msg_0;
    tmp_msg_0.lat = 0.3163334983693067;
    tmp_msg_0.lon = 0.10146663367505826;
    tmp_msg_0.alt = 0.812331719024115;
    msg.feature.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapFeature #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.46849585496296053);
    msg.setSource(38189U);
    msg.setSourceEntity(138U);
    msg.setDestination(62918U);
    msg.setDestinationEntity(145U);
    msg.lat = 0.3797980807751641;
    msg.lon = 0.04522294292841811;
    msg.alt = 0.7797166950321316;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.22655451145195227);
    msg.setSource(44517U);
    msg.setSourceEntity(176U);
    msg.setDestination(34925U);
    msg.setDestinationEntity(250U);
    msg.lat = 0.20093465315199377;
    msg.lon = 0.3361019685768575;
    msg.alt = 0.6993077192744869;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MapPoint msg;
    msg.setTimeStamp(0.9873832196480864);
    msg.setSource(45405U);
    msg.setSourceEntity(55U);
    msg.setDestination(56640U);
    msg.setDestinationEntity(196U);
    msg.lat = 0.13828373063267574;
    msg.lon = 0.6242766475366898;
    msg.alt = 0.43998438685634245;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MapPoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.985762627338761);
    msg.setSource(20001U);
    msg.setSourceEntity(232U);
    msg.setDestination(38583U);
    msg.setDestinationEntity(7U);
    msg.type = 99U;
    msg.id.assign("ANKWLXPDBYTYMWBVLOUHUXXYCCLAOYXKQQXELLZEAABCVAINNQZQIUXCWLYHFSFOGSPOUOONICMOZSWGXCLVFLNBJHGBSHPWVMDEKKIMTQGBZUBUTRJRRZDUCGTZQXIHPFPTWCYMRAVUHSTFPERGKIQWBGPGFJTBMVHDTKQLBQWRPYJMVAOEGRRIUDRNEZMTTMZDJKARNHKSZWIHNVYYFCEES");
    IMC::ControlLoops tmp_msg_0;
    tmp_msg_0.enable = 234U;
    tmp_msg_0.mask = 4255038298U;
    tmp_msg_0.scope_ref = 1431622383U;
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.6024454230375468);
    msg.setSource(16052U);
    msg.setSourceEntity(217U);
    msg.setDestination(30949U);
    msg.setDestinationEntity(120U);
    msg.type = 179U;
    msg.id.assign("UJFYYYMAJJCTFZ");
    IMC::UsblAnglesExtended tmp_msg_0;
    tmp_msg_0.target.assign("RHUEOLPFZUEZLPDPIZQWDJXLUAPCQQNYVGMNBENWLCJWMXKAHSMMMVJGULPMQIFYYEAIOIDEPWTGFRBPXINYB");
    tmp_msg_0.lbearing = 0.4677478212444114;
    tmp_msg_0.lelevation = 0.3406899758871038;
    tmp_msg_0.bearing = 0.12849499148623333;
    tmp_msg_0.elevation = 0.7173187558778354;
    tmp_msg_0.phi = 0.9299209788052546;
    tmp_msg_0.theta = 0.7322621956595858;
    tmp_msg_0.psi = 0.4703579120443544;
    tmp_msg_0.accuracy = 0.07903810737274486;
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CcuEvent msg;
    msg.setTimeStamp(0.5415326335528451);
    msg.setSource(49668U);
    msg.setSourceEntity(50U);
    msg.setDestination(17270U);
    msg.setDestinationEntity(21U);
    msg.type = 145U;
    msg.id.assign("NBUDVLGJUNBQNBXGYINHLNADGRQHEJHXSEAQIQCBABQMMKGWJZYQFXMTBKHZWURFTFQVTKSVTEJFBGEVZRKQEUXVHCHYQNTD");
    IMC::ControlLoops tmp_msg_0;
    tmp_msg_0.enable = 215U;
    tmp_msg_0.mask = 1205812563U;
    tmp_msg_0.scope_ref = 3457086826U;
    msg.arg.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CcuEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.16366450281073652);
    msg.setSource(58296U);
    msg.setSourceEntity(156U);
    msg.setDestination(50434U);
    msg.setDestinationEntity(23U);
    msg.localname.assign("JIKWRIGVNSRNPXRKTJRLXECBJZQZAETGTFYJGDMLNDZIBHLPLCRPYOZHNHTNCPHGFTCPLGAGYZQWIVKQSSSGAJESKBMHDAVBFLRWEOEHJGEUFQKABPOCNTSGWZXUNDFBHEJSPOQYOZOUQWMCHJINYLFDMKCVXAAWDXQGLVCTRKM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.23085518568956165);
    msg.setSource(57615U);
    msg.setSourceEntity(97U);
    msg.setDestination(28541U);
    msg.setDestinationEntity(17U);
    msg.localname.assign("NYHXVEPUIAMZBWJLTTOSLQFTSHBUTCMUENIVLVRQPXEWWSNNLEJWRKFXAQHXCZKHYSXHBMUVKYUWYJKDVFKTYFMCCXQSQHGRRDLSFGDDDOYXRSWQBJJHWDFVMMOUPJABMATMEIVPPQICAOJVGAWCEIKEXQNFME");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::VehicleLinks msg;
    msg.setTimeStamp(0.0653554974530518);
    msg.setSource(36836U);
    msg.setSourceEntity(143U);
    msg.setDestination(59336U);
    msg.setDestinationEntity(192U);
    msg.localname.assign("LPLJJXQQJQAUMVKZUMNMBIROFYKOSTVNRVJXRSCIDFXNPECHHOCWWXQONNUEMOHVJSBQIEKYVZVOEAADFLGTLKECDIMMRP");
    IMC::Announce tmp_msg_0;
    tmp_msg_0.sys_name.assign("VIYIRUGROLSNQREXULOQCFEYWTEVAMFUNJDJZHDTDWWYHKYKJTACMHNGYKJILGESPTQZEIIUXSUYPVZOFNGOLGWNDVPWXJQMBAMCROWQLTYFCBFIICPSFVV");
    tmp_msg_0.sys_type = 58U;
    tmp_msg_0.owner = 42037U;
    tmp_msg_0.lat = 0.6139465024604751;
    tmp_msg_0.lon = 0.5841765801501579;
    tmp_msg_0.height = 0.05132806984110594;
    tmp_msg_0.services.assign("CQHQMVKAWDQVHYPNNQFROJHIGROCOSTIVSNPALKUTRPZURSGDIZEJUWRTDXZEFFZUBEEPDZYLOIDAOBKHJMKCLUXUVEHTSMVLQKWIFBBIJTKQSJWTJWQPCFCFSAMEHNCHLBPXAGU");
    msg.links.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("VehicleLinks #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.8639584111656518);
    msg.setSource(5259U);
    msg.setSourceEntity(33U);
    msg.setDestination(44553U);
    msg.setDestinationEntity(199U);
    msg.timeline.assign("DYIPFCMNJRGVWKNDSBJHGVBSSKITLESZCYXRWGVDSPHGFJEVYLKUXYGNCYBRHTOKVJHZTARMEYQJRQOXQAMSIMWYSRZFPSDDRXNIAZNLTAFBJOG");
    msg.predicate.assign("MPENKMRCMNONYWCSBUETTTAKIEVPJNOVCIUZRGUOHVNSEIJEUPXBKKLZDFCNUKHLJQSHYUETRHXGVJSWPNZOZRUELVWKYGKAWCXPLZDDRWHAQUDCMNFSXGEYJAETRWYQBNHSGYLMSTYJYKHYRWCFJDGQFOTFZMFHZTZJBOPIWVFTPWBLIOVAXUAPFNIYJBVQKTAXMQOSXSFXOBAGMWBQGAXBCUCVLMPRKMICBIRDD");
    msg.attributes.assign("UVZLFJHAZKDIKKWAMBHWDFCPLRQCCJPUYGZWRJDNIJGHCUQRNZIPUROCAFXMPUBLTPKLNFQJJTKDBOYNWAFQGHFYEJSTRIWSMLFWTLSHKMRIESIUKNCVUJBOSUBNVLVYYWCHMMQVRDCAMLFXABORGIOZEDCTKEDRHYAMSEFEBPRAOJCTSQYVQXVXVEX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.6457135214437945);
    msg.setSource(49932U);
    msg.setSourceEntity(43U);
    msg.setDestination(53757U);
    msg.setDestinationEntity(15U);
    msg.timeline.assign("TGAFRRXSHESTFPMHJWDTUVX");
    msg.predicate.assign("CBZKKQRHQGXHIKGOHQGNRSXDQPZHWXAUYIDKEMKAOKHBTTVWWEMGZBJWYBMDAYHLDVNVFKNRFZNRCCUBAWLMEEOYXEDH");
    msg.attributes.assign("PGHPVNJMCVNUCFTYQXBUBRLCIZLSEBNWZJRLIVJYDMYMYCJWPAVUYDANLIRWXLFJVFSUSERBRVKOVYCVVOPEQIOUHUKJKCGLNNWBNQCAIBTRGKAOKWZZSMDHJXFAQFYGAPQGWYUMHMITHXRRBTSFAHJTPMUIKXQZHHLTFSGGQLPDEEXFGUWOOXCIBIWPTBFEWPBDRMDATJPJXDHLYOKNQZNEEXDIKGZSASQYNZLDMOHGOCOSKVCSZFQR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexObservation msg;
    msg.setTimeStamp(0.4555601408170519);
    msg.setSource(41892U);
    msg.setSourceEntity(93U);
    msg.setDestination(11828U);
    msg.setDestinationEntity(57U);
    msg.timeline.assign("XZBDURIPIVZSRZDGLAWATQJOLVZDGCAGWFJLOPRAUSOZSYDZVVONMNEEMATXEGWHVJDSIRKTSCOHTBKRRFKJSMYLYJAEHNKACGRMHBKTMFTRTUCIITGKXSWFEUJKJQBVSENPBCEHVWBJYMDGHQFYMXIXSQQUOLNQUYTPJBNFGCUVKCQDZQNWAZEYFXYM");
    msg.predicate.assign("ABYMFZVVXFEPZOJCZAHNUHLHAIMPDWZNJCIQOMPWVDJKEPIBWYHHLQKWELMUKSXTOMXRLCDRWIQUAUKTVBSICATTKGXLIAHJOAOJNQMFIKZVOLJTXELVQDMTTDNQXVLFXSEPHGNRPJBRRZXPIXYQHRGYNFDPGNCTSBWGJKMECBSBTWXRYECCYMQSORSGASLGIRZZQKWUOVYKSAFFTDVEOZCROKBGEJGUDQBNWW");
    msg.attributes.assign("FBAYLOXZNVQMPXSMUSYLWHOLUHCAXGWVKAYUQUYUHFLOJKANQYTSPLVNMVLDDXBNCACRYHKXFJLEGNKPXHDWDFFDTOJFP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexObservation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.31187022344973425);
    msg.setSource(37899U);
    msg.setSourceEntity(204U);
    msg.setDestination(57213U);
    msg.setDestinationEntity(46U);
    msg.command = 61U;
    msg.goal_id.assign("LHQHIUIDVDVTJOBVYGHKBWAXCTMEXETTPUSMKKRLSODCJPVRPXLSYZSQWJEGIYZGBWFXVJAXYJSVJDZQXAXVGXLYSOQICUSIDWJPANTRZOAHICCOZGOQBGMUMNEVTBQFNLOBHUBPINNGAHZYTFUHKKNPMEFTMKERYPHRZSUDLBNFCSGFIRGVMOJJLCWUKNQWHYOFHKBMOEYPXZWFRAMKFAZNLEUWKGSTBPVRJCILEDNIQCUE");
    msg.goal_xml.assign("QZQRMTTCAUKUJNAGYZGXYGIVJNINMHZQLCZAEBJXMIPKQMGUWFQFJTLEEDQXITKDVSLMCWXOLLSBP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.25287664641401975);
    msg.setSource(16945U);
    msg.setSourceEntity(137U);
    msg.setDestination(14447U);
    msg.setDestinationEntity(14U);
    msg.command = 172U;
    msg.goal_id.assign("QINCWFEVIRZBTHUMMJARJAAYPHDYMEJVCEEDQDQPZIFVVWDNXIWWICTAUMKRMNFNHKAXZEQSLUOWKFPDQTLJPYGJSEHTXGDUGOZIOUDZLPHNSPWQGXTFVSWYFHGSNCLOZZKDXQPQOVLUNSYGPVHBLJLHAUDECPFUNLMRKCSTCYMSVBWEQIRGIKGGBWOWZAGUKXHHTMBOCZBIYPC");
    msg.goal_xml.assign("LEDGKAZZBKWGKDGUNIOWTLWTZKWNSQORLPTAURRMSONFCFRMXSWHBWPMYZQUCQPBWESQRBRXWNAZDJVHDNXJLJOBQUFETPDMADFZVVKZXENHBYGOUHYXVFCCPVQTSAMDKJEKXYNJORTFGRBGQYKCXWILJHHFAHNNFFIVDGIIYFNIEBTWMHMYOTLIYBUCJCVVLCGUQSSHXJZTAGSAOSIMLMEQTORYUJPVZGAXMLCPXEUUZP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexCommand msg;
    msg.setTimeStamp(0.2389763784522002);
    msg.setSource(17304U);
    msg.setSourceEntity(36U);
    msg.setDestination(23306U);
    msg.setDestinationEntity(203U);
    msg.command = 242U;
    msg.goal_id.assign("KZTQXZSEJMJIMMZU");
    msg.goal_xml.assign("XCPFBBFIHXPYTBIBJLJDMTITNBMBVEDFCZSRQUGBHXDGLEHBIWTRKLGRMSZYKUSJXMNVDHPDSOXHFQATHJWEELZESUXRWOYCPUFRJNOKMVGLRAUOVEZGRADHODUYXOQFWUHIVALIJCTKNJQDPSOLYSGMYFCOXQCPLKPWYEAPEZHMNAUYIAXKOYZJNFTBKJWIZCRGVMRRNKWVVSTAPGQSQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.9200665902540309);
    msg.setSource(32904U);
    msg.setSourceEntity(222U);
    msg.setDestination(58900U);
    msg.setDestinationEntity(156U);
    msg.op = 6U;
    msg.goal_id.assign("RGDYNQVCWJVUPPLOEHUSUJLGDZHYCIOOIKXYHIFHUYYMFLOZTFI");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("SPDTIPDIDLCACUHLGRHNWCTGUQUEKXYANMRVMSOFLIGVUXTZYSQAAZTWXCBZTMVDUMPASHESKREGFBWAHQYABDEOWIWIGOPLENFBCIJZWFPZFJTLCPUTKEJAYRRXYOLYMV");
    tmp_msg_0.predicate.assign("MOYOGVOZUDVPGIOGXCRFPMJCFSAWHDQTJVAVTZKCBXQVZYKTTKWIYHSIDWXXHUHZEOBBALMYLLPMJSMEQLNAQKUQKPPGULVXRBEOZGIYWGRRRECRNGDSJNVCKXJGOKLFSHMGDHQRNVONZHDIUXEZDCAJBCPYSDZK");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.0016688501533754785);
    msg.setSource(61830U);
    msg.setSourceEntity(167U);
    msg.setDestination(2814U);
    msg.setDestinationEntity(148U);
    msg.op = 210U;
    msg.goal_id.assign("MQOKJUPDPTQOAYVLDZSNAVYUSLCIYMALUPREENUGXOFHENKQTBJASMOXZIHJCRKDOTDDNEAHRWEVUSLQLWEIRKWUPOQHHTFBGWCXQBBXCSOFTTCTMJVJGAIBYJIMJWABHNPDSYZKTREUNBYLVFTESGBFEMFGVNJRZCXGWMRSAPQLXMYBVJVMCDHJIGUVDZUNQCKPROCXPGOIAYIIWZKDEFRCZSLXQSKKPQLHBNLNZUMWVFROGKIXXAWGFZ");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("GQPMPPEMLGLONOQYAVMNEBAUFUYKHIGESCHMJUYJZTRFCLGKDLRTVIBLNBQMGEMZYUGIOVXNDJCODFHHFTPCUTFNDOGWNZFPXPMLENVMNSSZXALKDZMIVFPFMXSQCAIRWBILYWWRSVTOCKDVHHEYEUJDNFDKZHIYBH");
    tmp_msg_0.predicate.assign("EBNQZJFGRMDXCKTKNQLRZVTEIINUVDTBJWWQNGPIYMFTKYSEPGAVBQGVZLSCPKXYMKWHAVNFOWGDPDNBZDHSCQKVERARAIOLZDQKNLSPMUCXLYUIIAMCAVJOAWJYHGLSVHCCFESXFYYTFWQXOFWRBALEXJ");
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexOperation msg;
    msg.setTimeStamp(0.11985236744163019);
    msg.setSource(20496U);
    msg.setSourceEntity(218U);
    msg.setDestination(65112U);
    msg.setDestinationEntity(164U);
    msg.op = 158U;
    msg.goal_id.assign("DKCKEYXONUTJLNTOUJKMAQJGCZMSEWEBNVFKTNLAOLAPONZCYHVMMKUKHVIWEQUTUFMLWYPFXXJJDMRGQKXSAZDOBANEBDTTORJWBRVDELUJPCOTOLNACVXFHVBQQISIWISHRPXRRQDGXJDEGBUX");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("TPJJXYXXAGRJRMCFDBDIUVVLWGMBSJTJMSWDWTGTKWXCQDRYHOPITAEGQLORYEUQTIIMPXOLGUOVAIQQGCSIDKSIZHETDMTISHNYKUOUWDSFCZYLANWXASTYMHFUSKKHHDYBJLAPZRVIGRMCLLYPFQKWZZKKHUKXOVRHFERIFXRAHAXLEBZLSNOFDNPGAZMFCQ");
    tmp_msg_0.predicate.assign("OBIKZAOVJGCTFBCNXGPZLQUDXRBVRNDZHTFIKXXMPNLWCKDOMTJVLCGHGNPGOKYGEGITUVAZBJMJJYOHPVVPHUCQTSFJOBUGWQRMAMQNZHIBWHSYEFABNQDHPRFCSCRNJPPIEVGTEXNKRWBASRIPTCEWCMQYQJQHXMLUIYOWZOIDUCFESHRAYKWVOXILESFTNYRTQUJJWEDYVSEUWSFXLZLZXPYSLUTYAVKERLUKODBSBMFNAZDKMQDGAXZFI");
    IMC::TrexAttribute tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.name.assign("UUXQLITKPBALCSEMMZZVMFDCOEIDWJVLYDNBVUAP");
    tmp_tmp_msg_0_0.attr_type = 1U;
    tmp_tmp_msg_0_0.min.assign("FCQJWTHEXSVCIYXDLTGRVBKPXYIMRKOFDUTGOITYRXVNCLGONVAKCZVHYRUGVNHFDSASIABPKFMNUDVMFWMMFXWEZQJNWSEUYXRNBGUECRTQJVYYTWKPSAIWRHSGFAHFOUIJGQALTCUJKZAXMNSFNWEUCKTQSZCG");
    tmp_tmp_msg_0_0.max.assign("FJQMVWIVDQMRBLALIPHNTMBUFCGQXZUACDPDZSCQHISKLLEOXGWZNGHBOKJVQGMKBEDTPIURHYZQOYYAWJPHOYTFFHSZEBJMGRTHKGVTCAWDXECPZXGZJYCNGZLUATOYFKNWXOBNJXBQUIWTJWDARPPEDTEOLUORFSHVDFXXAQMZEMTTNVQCGVRNKJRHEPMDNBRRIQFWXRABUPIVKVHWUXMMIJCPYAVNSS");
    tmp_msg_0.attributes.push_back(tmp_tmp_msg_0_0);
    msg.token.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexOperation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.39306025081062324);
    msg.setSource(38130U);
    msg.setSourceEntity(15U);
    msg.setDestination(4818U);
    msg.setDestinationEntity(34U);
    msg.name.assign("GQXRZZKDVANQDHCDBN");
    msg.attr_type = 217U;
    msg.min.assign("AYGZESJLJHTOWZIXJVATNZRSKCJERXDEIGUUKKSMMCNYHODAVQRXTWTLPCFZAOYKIUXZOSQNBKQBBZFKSBQPXWVUATEWGGAJFUROMLODWNSXYVZONGADAOIRMEYNIFVHWUUBWLNLBGDQCGYKREPNQFZMIRYIFDUJHEGMFSHAYVIRHDOBIDJZMPGFVCKEHWQP");
    msg.max.assign("AYHPJIYKHPKLKYIMWZGMADXVNYSXDKBLEQHDVVHLGUJRQOGXTPUNJAGBLUBCTAZCRNOKJUMDWRVSBNMFFLRRVHYAEYAIQVDIQGVJILWRKTSFMWOSXGJPWOXRODWUCEETUMTOUXXSLTDMVCJCBQLEYGTQQKZXOEHFZRHWFLGYOADINBBITSGFMLZZXMPUWIKJPENNBWOSUQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.58993005406124);
    msg.setSource(45137U);
    msg.setSourceEntity(29U);
    msg.setDestination(61077U);
    msg.setDestinationEntity(0U);
    msg.name.assign("SXZFFBMIJBIZBKADLBYMYVMTHDJFOYDCSKTOXMCTURYTTPMIHVAQPPROMMWQJIAHX");
    msg.attr_type = 141U;
    msg.min.assign("LWIMKXRRSVAOMYZYSAFWLBHXHZPXQIMYYEPRPRPMULKNHBYUYAYKJIZTJNNSYBELLRDLAWYFOEKZQEUWJIFXUVZ");
    msg.max.assign("FQODVJXGTUSKATIMPXYLTFTZRGBYBJGQNKPUQTGEUKNWSIHMMDJRZPXIRAISSROXMA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexAttribute msg;
    msg.setTimeStamp(0.24571302378803805);
    msg.setSource(42807U);
    msg.setSourceEntity(211U);
    msg.setDestination(65263U);
    msg.setDestinationEntity(239U);
    msg.name.assign("QCKALHXGYLGKGIZWWXVKZOMRKPQFDXZZALUBEYOGTJORYNHFBGYEUSNCJMD");
    msg.attr_type = 145U;
    msg.min.assign("MRPACXFMFDLGXQSHNYVFHPKBTTDJLGGXZFCJAFLAEGJNCPW");
    msg.max.assign("PXOHANFKQFVXZGZLUIAHVLVSHVPFIMAAVYDAAGAEUGLDHXTGYEZZCVCRNXTGNCVJLEWAYDLWQJFZTAINUOMMGCIPXRCFFRZTGNSQEECDQKDQZUSCPRKHUM");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexAttribute #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.7739364059782847);
    msg.setSource(6077U);
    msg.setSourceEntity(230U);
    msg.setDestination(56704U);
    msg.setDestinationEntity(24U);
    msg.timeline.assign("QAHONHAYKFOSCCXNIFDXJRRDUIHFTOASJYSEIASGEDFJJTXYMFPQCSDPQTNYAUMSUEWWUYELKVLROJQMVBSQQZBRGKZZUXAYMAPERTWBWQXRCKNNVIDPXJPJSMDWZIIADHWZKYGJFWUKGVBIMXUEMZPTQZODEPPBWTLVGCLABFYABSMNVRZNDRCXNVGLUKH");
    msg.predicate.assign("CCYLCTDNJNITZANJEBAJQXXHIXZDMWNFGDMHNPVLKFOHEJFLVAFPTKMPAZQNGXTTJOBFYABVQGRXRDLJYEOQCVVBDOMMK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.5138550418329212);
    msg.setSource(61304U);
    msg.setSourceEntity(129U);
    msg.setDestination(40796U);
    msg.setDestinationEntity(63U);
    msg.timeline.assign("XOKPMAIGTJIIUSZSQCQAQMJZDBGHWANECVPCOTNRABUQHYWTOZVXEMZLEWCTDDNJUYWPWHQZELNFRYDEJHCJNSLEVVZXCXJAJSSTBYXXBEFVPAFPXFPIAKYGOIGGMGWAHWTHCNHKBMBLFOEAFBLKHODNFDVXJORRVYEZNQPQRLNDRKLMMJVSSGTUJWMRKSMIFQGUYFDMTWCKRCBVIYPOZ");
    msg.predicate.assign("CGCMTLXBKHHOWHZOAROCEPQGCKBIJQKTEVWZICCSONXAFSBMKSEWLZYEKUBRKFQFGLGPCGNMPOTQAKMOXDYRJXVJAYOHLQWPULHYUSRDLXAEDYDXPFWCQGANNQWGAWEVPGSELRLIZJIMFATDYVZIBURKMMHOTBSYKZDSVWZVFEHBDCHPJSLPBQXGEIYINMUIZNDZYYXF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexToken msg;
    msg.setTimeStamp(0.18653130365829218);
    msg.setSource(34930U);
    msg.setSourceEntity(217U);
    msg.setDestination(29391U);
    msg.setDestinationEntity(139U);
    msg.timeline.assign("RGSQMKMWCRRAKIUSCEZLIOOSQKAIGBFTLFLONXQXTLYPYWUNIENLKLXFIZYUMAOAHTCGUZFPEJHXQYZGGMWPPZJDEAXNOQZPKADJDUMSCWHQCUAD");
    msg.predicate.assign("KRKGWLZGKCGLFSAOXECRVIXSEMITTWBVQQRRIKEBEXWGHHSZQZFFAGAWKFUGVDCTAYLFJSWSWBDZMTZABVTQHZPKPRMPBROKKOECGPNUYTPEHEIXMBWENFJJLXPOYTFDDGUCDYFLXOKRMV");
    IMC::TrexAttribute tmp_msg_0;
    tmp_msg_0.name.assign("IEFXLOIUJKJIGXCCXBAZLWAULVFFBCMIMKWVNGVSGHRHTTTJAKITYHLRVXPZTVFPOTUVEZCDLPRIYRSDYLHZWSFNSERZCKXQJNQDXVKMPCORKAYHJMMQKQCGUIDNWJLORHOSTOWFEJQEWFSVHZFUWMNIASWBZPEWBPAZOYAZNYOUPSRUTCRKTENXPMGUNBZEDCCQDSFQBHHPDJBHKBGLYBBGKQGXIIQSLMAJMVXOPAT");
    tmp_msg_0.attr_type = 215U;
    tmp_msg_0.min.assign("ACDSDQRHQVSQOMWANWKCZRTBNBBMQXPRBGFSGHUYCGLNTIYYATZJOMGQLWIAQWJJBVCCFDUHOBWIJQEOPZPZAFTRMOXTYJTVGEGSLLUPRBPPFXJLPAZMNZRSXHCKIGDGAXVEXROPUODXBIDAMKMYEPVELNOTSDCHUEZJYLWOTQMWVFCUEVLOIHVDWFZWHNBKMRYTISK");
    tmp_msg_0.max.assign("FPHZGBZBBKDWMSTFXUWOGXQCRJ");
    msg.attributes.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexToken #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.529043757148141);
    msg.setSource(49952U);
    msg.setSourceEntity(164U);
    msg.setDestination(45573U);
    msg.setDestinationEntity(42U);
    msg.reactor.assign("OMACADRUPCOBJHGEHLLSYBZPNSGXPYVARATKIHNSTXJPTMCWXAJWUOXBWZHZMPUHRRWQGUVFFSXTJEXDFDTFZQGQYTCPKTBVVULIKWQZSVNZLFBDFDCJXRGWHLLHOMUNKTMFKKYDSIABAGIDNHVSUJNYPOBHJDKJEUMTKESLNOSICGVOWAERVFJPKGWECCEVGAOHSMMQKQWDYEANFCYTIX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.3329093659195941);
    msg.setSource(42842U);
    msg.setSourceEntity(211U);
    msg.setDestination(57222U);
    msg.setDestinationEntity(46U);
    msg.reactor.assign("VRSAEEOXXTLKKNDQEFTBCUMEADTBDDWCWPCXJRWSIZOSMHVFLFSPFCDMJRANTWRMHVZZRCSUZMYYJFHHPBGCYB");
    IMC::TrexToken tmp_msg_0;
    tmp_msg_0.timeline.assign("HKBVHODGCQGRCJRXKFLTDFFRNANHBNVBTGYVWDLTWTMQOTRQAZLIIONUHQXHOYTXCSXPBBYMGGAUURAPBXGLDZSYVPS");
    tmp_msg_0.predicate.assign("HINZPNIYQEILXLKQMWMAXLQUDRFXOGFIRUREUOWIGJAMKXOCAZZOXISNSFVBEEKDNUHAQETNGJYZVAWZHXYJSTGKXOSYKVSTGCPOLBHBEPKAJWYYGUOLNIMKAYBTNJWFUSQASLMDRHWZHNWFNOKTSCXCIBMGORWBDGPJVBDVUQAPSTFQQIKDCDLCAPVFHCURQZEHQ");
    msg.tokens.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TrexPlan msg;
    msg.setTimeStamp(0.20378835758665348);
    msg.setSource(43741U);
    msg.setSourceEntity(108U);
    msg.setDestination(37686U);
    msg.setDestinationEntity(147U);
    msg.reactor.assign("HXKQBLWDSFNTGLLKYMAQTNWSFGFEEXCMRPACBVPKJGPUDOCREJXANJSLZGEHVDBVMQMPVCEQTWWULIFOSGZOTQIYXMWCYCDPECPRXRXIROOAZYIVTYWIYDSNNFNIKBQQZFTFJHRTWJHLEDJTYVABUNXSUUHPNSTZHQJPVVQQRULEDKCGWPAAGKBHI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TrexPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.0415345007292407);
    msg.setSource(52499U);
    msg.setSourceEntity(128U);
    msg.setDestination(46087U);
    msg.setDestinationEntity(99U);
    msg.topic.assign("PCRXXDNZKOUMDOYUDAMDMKZHLDZRIHONXFAZMKFYUNKHXUGYLJVEUYUISEQGPKTXBXBGNHWYLIBKEIMPPGGQPBOKKROTVCHUOZFBCPEPALNGSQGSXFPSQBBFEWACAJVHJRZVXIZBXEBLYJNOQAHPQUNJDVMCS");
    msg.data.assign("HYFJDKNCNLPPGWHUQWHAUIMVBPFWYEZLQVRIEEJAHLIULVSGCMQKRCKMGUFNLUWAEXQGQEDBXCBZYENUZBBJVHCOGKOJWRTHJTOMNPUJTDVCRESBFGCWSZKAPRFAYDUTLUSBTYKVSLGBGNODGNMAYCXFDFUKVSJQPZMDRQZOTECWKXDDQSRDIIRJWOTMFRFEPVSPVPVTXSEXJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.668555867366223);
    msg.setSource(2048U);
    msg.setSourceEntity(30U);
    msg.setDestination(25255U);
    msg.setDestinationEntity(138U);
    msg.topic.assign("OGUQJBBPZTYSJBMMJNWIGWCLZSJUQLGCVHXBULAFWUBUVRHQZKEKGNNCNMHLYCEFPNKHWNKMMETJBJAVXWJDVTPFJEAAHNKWBERCTMAYFVHOPDTFAZZJXPTBYPZPGDDKEGLNEKQBHCEWLMOVTSQUSIOOHMSARNGFJKIWQ");
    msg.data.assign("VHHSEHLOYUKFKQLBSOHCRA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Event msg;
    msg.setTimeStamp(0.5212644509915108);
    msg.setSource(46736U);
    msg.setSourceEntity(9U);
    msg.setDestination(28354U);
    msg.setDestinationEntity(36U);
    msg.topic.assign("CODUZQTUJNSDQXBETGFJXGVUFUJR");
    msg.data.assign("DIRUCCZMIBNKEGXQTBWYAZIOEYGOWZIKBUENSDNKWLCSZTXKFUCSKHMKJHIBSNRDFWMGYFQYFISGXELAVQHHNPOENREHOJJFSYWQQMUFSTHDZHIKWTCPAXAOJLWXPPMLTDQJZLRGMMAROYVVYJBVZNLGTHQYECZUVSLPLBPCNHDLXRUTAOVRRGOGKDSDWPGVTOBUIFXUTPEGVVJJFPAYDMORARZWQKXCAXBMIUFBCVHQWCE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Event #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.4125231091721988);
    msg.setSource(18314U);
    msg.setSourceEntity(157U);
    msg.setDestination(36379U);
    msg.setDestinationEntity(197U);
    msg.frameid = 195U;
    const signed char tmp_msg_0[] = {89, 111, 78, 100, -82, 94, 100, 14, -119, -64, 11, 47, 123, -64, -51, -77, -90, 0, -57, -72, -118, 5, -35, -98, 103, -56, 63, 21, -103, 11, -57, 63, 36, 32, -96, 67, 45, -20, -3, -25, -21, 103, 7, 96, -68, -69, 2, -125, -110, 117, 113, 111, 18, 113, 38, 73, -59, -3, -21, -73, -27, 29, -38, 3, 111, -112, 16, 52, 55, 29, -76, -37, -28, -116, 107, 83, 61, -53, 37, 47, -28, -125, -19, 25, 82, 73, -84, 67, 53, -124, -4, -37, 5, -102, 62, 15, -79, 96, 83, -84, 23, 102, 86, 78, -28, -41, -8, 93, 115, -110, -124, 107, -111, -47};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.8419855684416133);
    msg.setSource(56982U);
    msg.setSourceEntity(36U);
    msg.setDestination(35230U);
    msg.setDestinationEntity(15U);
    msg.frameid = 108U;
    const signed char tmp_msg_0[] = {68, -119, -16, -87, 106, 11, -62, 9, -68, 100, -76, -71, 1, 54, -99, 29, -89, -65, 101, -3, 70, -19, -38, 88, -7, -39, 62, -103, 124, 97, -100, -21, 27, -68, 17, 99, 84, -11, -61, -87, -4, 22, 21, -102, -116, 79, -18, 13, 12, -128, 69, 28, -30, -123, -34, -95, 79, 123, -115, 99, -80, -54, -34, -92, -40, 39, 19, -66, -64, -63, -81, -45, -128};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CompressedImage msg;
    msg.setTimeStamp(0.13332504371105425);
    msg.setSource(48403U);
    msg.setSourceEntity(16U);
    msg.setDestination(53384U);
    msg.setDestinationEntity(221U);
    msg.frameid = 44U;
    const signed char tmp_msg_0[] = {54, -50, 6, -102, 125, 60, -85, 50, -4, -3, 120, 46, 47, -69, -48, 88, 19, 21, -1, -80, 17, -107, -124, -14, 120, 86, -127, 100, 101, -32, -100, -88, -99, 0, 88, -24, 48, -120, 13, -16, -59, 69, 124, 24, -15, -16, -102, -8, 125, -74, -122, 42, 82, 34, 8, -40, -67, 55, 34, -30, 2, -57, 81, 24, 23, -16, -87, 71, 120, -14, -73, 91, -112, 15, 53, -99, 123, 98, 53, -115, -52, 28, -9, -34, 72, 7, -64, -128, -104, -75, 8, -1, 89, 121, 85, -112, -126, -38, -96, -118, -52, -59, 68, 55, -128, 62};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CompressedImage #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.7603597399472829);
    msg.setSource(57254U);
    msg.setSourceEntity(162U);
    msg.setDestination(10284U);
    msg.setDestinationEntity(232U);
    msg.fps = 64U;
    msg.quality = 172U;
    msg.reps = 43U;
    msg.tsize = 157U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.7524767704595992);
    msg.setSource(24079U);
    msg.setSourceEntity(249U);
    msg.setDestination(54923U);
    msg.setDestinationEntity(122U);
    msg.fps = 205U;
    msg.quality = 151U;
    msg.reps = 134U;
    msg.tsize = 47U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ImageTxSettings msg;
    msg.setTimeStamp(0.7132708316198518);
    msg.setSource(3949U);
    msg.setSourceEntity(228U);
    msg.setDestination(31415U);
    msg.setDestinationEntity(248U);
    msg.fps = 46U;
    msg.quality = 99U;
    msg.reps = 192U;
    msg.tsize = 208U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ImageTxSettings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.12104564056095846);
    msg.setSource(21629U);
    msg.setSourceEntity(67U);
    msg.setDestination(28934U);
    msg.setDestinationEntity(125U);
    msg.lat = 0.3090182094220397;
    msg.lon = 0.6814908707787357;
    msg.depth = 104U;
    msg.speed = 0.17364724184804647;
    msg.psi = 0.3437581750685931;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.6042815681652491);
    msg.setSource(11226U);
    msg.setSourceEntity(226U);
    msg.setDestination(406U);
    msg.setDestinationEntity(35U);
    msg.lat = 0.5146554239368739;
    msg.lon = 0.9181218850002582;
    msg.depth = 74U;
    msg.speed = 0.4012954363646448;
    msg.psi = 0.7070692108539006;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RemoteState msg;
    msg.setTimeStamp(0.8319500846186573);
    msg.setSource(17358U);
    msg.setSourceEntity(186U);
    msg.setDestination(29899U);
    msg.setDestinationEntity(43U);
    msg.lat = 0.8317230070390419;
    msg.lon = 0.99398115690521;
    msg.depth = 42U;
    msg.speed = 0.44990799475473464;
    msg.psi = 0.2103002864707335;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RemoteState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.3735360643677679);
    msg.setSource(54062U);
    msg.setSourceEntity(189U);
    msg.setDestination(23155U);
    msg.setDestinationEntity(122U);
    msg.label.assign("LOSAFVOADEZKINDUPDVUBIOKTOUCERYZEISFPKIVTLNWYYKQBYRNWJYLGLJXNZBQIEJABLFEYXDLJCQMBSLOPSUJWCQCXXITHJTUAMGHHJBENMKYZNMTOVCWYBBCVIXMSMDC");
    msg.lat = 0.40621628406466936;
    msg.lon = 0.894233348739288;
    msg.z = 0.13984375414362482;
    msg.z_units = 41U;
    msg.cog = 0.39086385866486484;
    msg.sog = 0.02650163925061433;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.9790777343111321);
    msg.setSource(33762U);
    msg.setSourceEntity(189U);
    msg.setDestination(7737U);
    msg.setDestinationEntity(27U);
    msg.label.assign("SPHIVKKSUGBNEVACYZIFWNFQFPCAGEFJFLXRDFCHOVNDGUICYRWVBUZPQSHXXTTOMQVNCOWMYLIEOQBSQGHOBXEBERIXRMLTFKYQLFJWUGJZEDHUDPRWQLBOTGPCAKZLATCFSPDT");
    msg.lat = 0.042982779228086465;
    msg.lon = 0.12007416714245589;
    msg.z = 0.07948389452372451;
    msg.z_units = 187U;
    msg.cog = 0.21123952459133255;
    msg.sog = 0.9287986884063106;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Target msg;
    msg.setTimeStamp(0.674408147376898);
    msg.setSource(21632U);
    msg.setSourceEntity(225U);
    msg.setDestination(58834U);
    msg.setDestinationEntity(180U);
    msg.label.assign("VTUOVHBRZKDFOFEXBQSZZAPEWKFLPPFMOGRLYNSUOCXQOXLMXYNHEUKGWNASZBTHVVWTGKVCGSIPKPXLCVWYMKMVLXDOHLBETHAJJYCIDAQWIWNSEQDPZSCTFGNFUIBRIFARQRQJJVJZQEYANJLJJRKNZXCHHEDTVJIUYRTDOMQCQAKEBWMADDOZGBVYTUPINBWIRB");
    msg.lat = 0.7076873488181932;
    msg.lon = 0.2448523192124631;
    msg.z = 0.7109913987366172;
    msg.z_units = 167U;
    msg.cog = 0.8447091413306737;
    msg.sog = 0.28447066911625873;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Target #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.3978025969004104);
    msg.setSource(55105U);
    msg.setSourceEntity(153U);
    msg.setDestination(4863U);
    msg.setDestinationEntity(37U);
    msg.name.assign("INYBNCPKGVMFRQDWCFQJSEJDVVZHNPGBLUPYLZHYOODXAGQSBKBQE");
    msg.value.assign("PHJRZWXKTXVVGWEGWHHUEUXQEREGFBYLLVSEDPOFQRBSXSOIMCSDBSMKILTTWLSFXRCPVPWUARNSSKQJPAJFQZZFJHGBOBLKCDIPVIEOGBEWSMXDPCFGNTYPNBQOHLFNNKQDZYOMUMGUYYVOSZNUCODRFGUTJJVZWZDXNCDIYJKEAWETGKDLARZONIFWQGYHZKBATPMLURFNEAMYIXHTJAWIOKPHZYVCRMATTLQCCRUJ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.8740757050045677);
    msg.setSource(22918U);
    msg.setSourceEntity(60U);
    msg.setDestination(60823U);
    msg.setDestinationEntity(173U);
    msg.name.assign("EFIWTSICHEBODJUEBPVUNCQSQOZIYBNHTEJOANDTSKAUXHSDGTWJCCWJJVRZWJRKGLAPGQQEEKKUTDISYPMJATYGHXNSFVYRJEHMPBAFWOSXXFUZRBITVXLMYXW");
    msg.value.assign("KPIHHUXPGBEGCHSHYRGTPOAHSNJCLADBTIBSBZERPCWRUHUCCPLNGTNVHLLDITFDQRXWVKP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameter msg;
    msg.setTimeStamp(0.05783677854669478);
    msg.setSource(37169U);
    msg.setSourceEntity(34U);
    msg.setDestination(14871U);
    msg.setDestinationEntity(182U);
    msg.name.assign("YGGRLSVATOMOZHMXKMYTSJPTFXCKSZQWIJOXOWZQDDYKFCYTWSLIYGSEWGFNMFAVCHBYJWQPAAUE");
    msg.value.assign("VMPTCXUHFKXCQODSFKSSGUFRBNIAHSEIEWXMTSEKBKLVWOQNURPJINRQWGDHHQZLPOZWOMEQVGUZPBYJIYCZNWPVTWDMROWHAETQIUGRTFUKRDZTOBLFQCTYNSAZXSVHVMMUY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.7704370856772091);
    msg.setSource(63435U);
    msg.setSourceEntity(17U);
    msg.setDestination(32854U);
    msg.setDestinationEntity(15U);
    msg.name.assign("RFXKWFLNZPOPWCYSBJHDUORYXSIXOCSRMLCTXBKXNDFRIYRSZHAKUPOCAASZLCNMTFGVMEXHBEZNHTEHLFPYVKHCMCREDOWUGGFVYVRKKGLSAZPZJFRYVPWWQQTFPYTOCKRGMDJFAIIWBOZVDKSYMIUGXIQQIUWMLJQCWWBIQUUGAHQAEIEBLXLMYPTPLHNWBNKDHQTVQNJVQYKDHGAJEJRZJCGGZPE");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("PRVVTUEEDOCSCPDFVRTQBIOLFPQMVHEPTZFZBAESRKQOAAWPFZOXYGUJBHYNWZSCWHIZZFBPCGVGJJPMXYERVHYEALUHFGRXNBKBUWLTNDMIT");
    tmp_msg_0.value.assign("PDBUPSAAFWQFUZXTZJHTHWULGGLYRGPTCQQEDCPAJRUOBLTDRQIDGLSAVKJGNLKSVJRNCTFUWUAHAULBSREFYCYAXJOJPNODGQYFHWAEODIKIBDLPMHJBVCAWNYNBMTHMTEWTBXRXBZOUTFYEVCHSMKRKLZB");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.46475384384309515);
    msg.setSource(53627U);
    msg.setSourceEntity(127U);
    msg.setDestination(54649U);
    msg.setDestinationEntity(45U);
    msg.name.assign("PNRTTNFHMNXUSJYBBAGOIEKNTVRYXDKYPIHDFHEYXZERSXGFJUWHFWPVOMDQMZFXJZVKLIFWPOVETCQILXCCTTZFFETBNUJCMILIRPXCUOLSJAMQLBDJNPKPDWSGBWGAHNUZDKQJLKKXAADGSZOREWYRFIYCQALGLJGZAVVDTQBMBCBNYHQLTUSWNREPVMROVYAOXDVARWGBOUUHMPSIEJHMYFWZCGLHZRAXNZMOSUWESQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EntityParameters msg;
    msg.setTimeStamp(0.818440518303332);
    msg.setSource(58920U);
    msg.setSourceEntity(214U);
    msg.setDestination(17119U);
    msg.setDestinationEntity(197U);
    msg.name.assign("XMDCBWSMCHVRYJDWWUUKPSFLWAIVPFPJNXZGHKRLGALFITAJJYEOWUTPTYYQLUOTUPPIMNIWCHDJTJLLSYJRZAKUSTUEZSGGVMEVZPDISNIWJIAHSIEEOHPXVEAHKBGXWTNXZDFZXFGVCQQFXOYQDWCBRPMKQJBMAHMNYIEEHOSRKGPCAFZNVMOODVLNACLBKLXRQJFCFEQODUKLHBNTTRVBDEBNYYZOBKUTGGQ");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("QXEWHVWFARXJNEHBDOUOESZHIBYXIWUJMZWOKKMLLHSJDWPPJZKPIKARQHTFAVTGRVECNAYRPSJFJDRDECBJMYBJBJMZGEXAGYKUQMNDUIPLYCDYZQQZXCBKVVWHDS");
    tmp_msg_0.value.assign("DVYLHZSMHYYNOJOWIBDKIZCOGNHINFBSBJTHDESQGDTEQYZMDUGULEXILERXUPBAAAOTBFCZSTOCMTRDNUEWRYJCKWWHBPOVVMTIGWGJEAYFENAQZJOPAFLMYSPIUOHIJVUPLKNTYPFZKATRAPVSMKRVJGUZOIWBMFQNRCPMH");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.7552651946605402);
    msg.setSource(11353U);
    msg.setSourceEntity(50U);
    msg.setDestination(26U);
    msg.setDestinationEntity(43U);
    msg.name.assign("PQOVRKZSKVBXNFELXJOVXAUZOVCNAYVQVCQVOOTIGESFKDJIJDQMLDHMGAMHNSEXTAPWQYKMRTHQBUOFHRHANGVGQAJGWYLX");
    msg.visibility.assign("DLRZLETBOGAPNPJOKBQIHLHSGRWSZOECMUOAVELOJFSQMVCFAGOWCSVULMHMREJEOVXUNYIQKJYXRILJYGPTAGMCSATSNBAGGYDKRTEEPZMDXTLOCOXMFQTQHVCTFMUWNVDSRW");
    msg.scope.assign("CQWKFDQAMUHDQNDAVJBXNRULDXONOTYGQGLWZJJTIVONHXXXMPIWJIGSSPTRSVJGROZCNKFUJXVYKACQUOGIPRRPARKMSPBUMVGJTXNYDZCVLSYAFGYISOQEYQUVT");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.40827213949059304);
    msg.setSource(10086U);
    msg.setSourceEntity(105U);
    msg.setDestination(24359U);
    msg.setDestinationEntity(131U);
    msg.name.assign("LGYPDVSYOUCZPYGMPAHBBNEHYAZQFAZTBLGASVYUOWDXDFVWZFQJCTRSIIOLNTXVUJROFTOELKLMAUEJWSNMDZBDWNRGKVRLWNSRENAJYPKAUQERSSSRFKXCVSAHQZADQHXLPXHTMRFGPKVMBMIMXZMOPQYCDCMTGIYWIGWLMIINJDVGTTUHHWEOWXKZ");
    msg.visibility.assign("WWOVAMAPUWCAQICPYJXNYYWTEXNZPZLGKGCYSAREWIPYSAWUZRILTTF");
    msg.scope.assign("FOURYVFDMURBBCDJRKOPLFQLSIYETHBDVBXSODGJTDOQIZHEMWMQKTVAIOFKSPJSSDXUZIOGEXCQNIGCVTQBWXQUSTRWTFAWZYLRMCVGZINOWOBWMVGECMTPALFTHBZGAXSMPLJWGTLHIQFFRDWYHYKDNHVVJXLUWAGKYSSKJEQFKPRHBBCUXHELZIMYNHHEKJNXZONDRKQGJEMPVGRTNARJP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::QueryEntityParameters msg;
    msg.setTimeStamp(0.40795446738182706);
    msg.setSource(29909U);
    msg.setSourceEntity(163U);
    msg.setDestination(34395U);
    msg.setDestinationEntity(119U);
    msg.name.assign("XCLZAORRIILQBAFJAWOTTSFWZLPEHPCJCEAGSDVBSISWTVDCEKWGVXQNCOLLJNPRVPBYEPYBXPKQHZNYSJBRGNMODF");
    msg.visibility.assign("AOMVCHFRUMHOKRNLEQTQAVBZSWPZLWHSJVCRNJBIMKMTQUGLMXDFNVDYFLGTXCOPBUDIWNWKPAJJJDKXJHIUXAERIUGJJTDQAEPBYCHPDMHOKZSXVKBYMTESXSCPNHENOZUXDIOLZCIQKCXCBRRVWNNGYYVHGUESFZKRLBMAOTWGLMRIEIVMBJAYIEDAABGXSNPGEKPWXSRFLJTAZDQGYRNPWUUTFKZVGZBDYLFYHQPTQOUOFCIWWFC");
    msg.scope.assign("NVAIQQJXFMNJBGONDXSGDMTSIFUTHNDAYEETISRLQJICZHNVTPQQOZURWAEJYAFKKPYAQLDBCDHLBEIDPYCROFWKOPOHZFTMPETELFWVWBGGUXYCXKFZXNINLBSVCAGZVFSEDHHMRZCMUTCZYYGSASSIKMXQWGBFMKCXQVEHRSOLWKMPZUJPIBEALCJMGDVGJAWYPNWHXOUFYIVUQOJQRRHVDRRPBJTIZOXJWLUBMSEKDLVKTTAURKU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("QueryEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.369772149500169);
    msg.setSource(45845U);
    msg.setSourceEntity(65U);
    msg.setDestination(32484U);
    msg.setDestinationEntity(226U);
    msg.name.assign("KGOWQVYGZLSFFJYUDJCVZAYDINURNFKMXDWZSCYEXOZIKPMXAUEBRGXCNGYNZPLQHJOYQTUSEBHXWCQBZVUOEPLBQEXTIJZFUMPCGXHBQOUCWXEEKWILBZDRGEDWXXAILFUIHIUAHFTVCQLNDFPRTQNYDTJVATLMFIPOZMRNVGEDVNOWLRWNCQDSQMVYKCVTMGKRAMKKYLY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.6553485287184916);
    msg.setSource(13543U);
    msg.setSourceEntity(48U);
    msg.setDestination(22873U);
    msg.setDestinationEntity(151U);
    msg.name.assign("PRJQLAIAMXQLAEUINOKYUUXZEHGCXIMTPTUGJXBKXACOLJFBWHCLBUDSKJFYPKULROMWMYDBZNHYYCFPVATDOYLPYEDQWSKDJVXWAPZXDKMGC");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("AXYJGDAOOJMRUWIGBNTTSLEARTHGRMPFCFBRVOSDDNSHZBXKDWEZCNOKXVJJRAAKLQYZKXKNFPVSOMARUFICZUHIBMQXQSFQCAOGPLTJNQUULJAIGYCYXQOCPQKNJBKKPYVHFJGTELNV");
    tmp_msg_0.value.assign("ERJHSTHDIWJHURKWHGQBVOEITUYULEFVFIJKDBGMNKEJTYWTWKELYVDZVOFLJZVXNP");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetEntityParameters msg;
    msg.setTimeStamp(0.039782526455838796);
    msg.setSource(42744U);
    msg.setSourceEntity(220U);
    msg.setDestination(60400U);
    msg.setDestinationEntity(207U);
    msg.name.assign("CIVXPFVMBLSVYNOJKAOGYYSQOCGTSDPTMBCIMZBFNEZGY");
    IMC::EntityParameter tmp_msg_0;
    tmp_msg_0.name.assign("RWZSCQJEINPMXXJAFRGUMHNYPGTLLAIDRGEQJRFMOILVJKNETQCHXATWPIDZTUMVWBMTSCYYPBUFOBQMXIOMRRWRPQPJSHKSVDKDZKEBQSOLIAEHYCLKZWQFVNYHAVVZIZJDFGNIWVBCMDCHXICMPSKJHUBOPF");
    tmp_msg_0.value.assign("GTRPWAKWUFLISIELFIFXEVWHCNYAOPXCZMYGQROZUBGCLLSSNEGTHUDBVTBZBCHQDWLGWD");
    msg.params.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.02374843744678301);
    msg.setSource(8984U);
    msg.setSourceEntity(74U);
    msg.setDestination(797U);
    msg.setDestinationEntity(103U);
    msg.name.assign("ZLBYKURJBYBCTGTRYCONDAMMWZVUXBPINLNVKYULYBVCABAEPRFORXJKWHTEBMGQRKKAPNHEAAJPEQCHAJBEHPRUKMDHCWMLWDBFQAPLFRYCFI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.07605521598428966);
    msg.setSource(29841U);
    msg.setSourceEntity(199U);
    msg.setDestination(17624U);
    msg.setDestinationEntity(5U);
    msg.name.assign("JMPYYMQACVEGXQKBJRZUKVEAJZKFOYMEKNGFENJTGIHNXWQSDMUWDBUAYXXEHTSXTKYIAAXOIRSZRPSXZPFCNVCPSGDFCRPHQJGOLIUGLHOUPHSTEVJBOYZMBNVBTZLTHAVJGUMSYNIUFPRROHLQWSOFSCC");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SaveEntityParameters msg;
    msg.setTimeStamp(0.10281742321548792);
    msg.setSource(31445U);
    msg.setSourceEntity(171U);
    msg.setDestination(29767U);
    msg.setDestinationEntity(254U);
    msg.name.assign("YWSYFSPDLCSHEONYDMKQKATVULCKCJAXJABVORCXFWUHNNEOLQJDFHMJDNIWIWRNKEZZUZYVTTRBFTRAVBRQEGNCPLOETRURBHOKCUPIYPYPYQXPCSDIHAXGZSVYBADUNGGXHZDIUHCFS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SaveEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.4469663343447796);
    msg.setSource(16495U);
    msg.setSourceEntity(119U);
    msg.setDestination(2479U);
    msg.setDestinationEntity(163U);
    msg.timeout = 1625466005U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.589894088094602);
    msg.setSource(17197U);
    msg.setSourceEntity(13U);
    msg.setDestination(54137U);
    msg.setDestinationEntity(18U);
    msg.timeout = 64857490U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CreateSession msg;
    msg.setTimeStamp(0.014898118744912425);
    msg.setSource(8296U);
    msg.setSourceEntity(245U);
    msg.setDestination(40611U);
    msg.setDestinationEntity(64U);
    msg.timeout = 3409977005U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CreateSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.5774889445446851);
    msg.setSource(27469U);
    msg.setSourceEntity(39U);
    msg.setDestination(31530U);
    msg.setDestinationEntity(213U);
    msg.sessid = 4090234703U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.9152265470248687);
    msg.setSource(59642U);
    msg.setSourceEntity(184U);
    msg.setDestination(45568U);
    msg.setDestinationEntity(229U);
    msg.sessid = 472159363U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CloseSession msg;
    msg.setTimeStamp(0.32129368003866643);
    msg.setSource(20569U);
    msg.setSourceEntity(159U);
    msg.setDestination(12275U);
    msg.setDestinationEntity(189U);
    msg.sessid = 488618923U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CloseSession #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.37672618705696304);
    msg.setSource(16998U);
    msg.setSourceEntity(178U);
    msg.setDestination(47618U);
    msg.setDestinationEntity(135U);
    msg.sessid = 1618302379U;
    msg.messages.assign("MEJHJIGUYPFMLRXEKVARJVDHCDGHIPTRGBIXKGBMQAQZEPXAAFWYW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.023226140358977965);
    msg.setSource(50924U);
    msg.setSourceEntity(221U);
    msg.setDestination(63925U);
    msg.setDestinationEntity(190U);
    msg.sessid = 3481453449U;
    msg.messages.assign("SDBFUMWNBLCWQBVRVSEAWDRWSEPLVNRTKDFGHBVABBOKSVGOARINRDISGRNPPNCEEGZSUCJJBJZSUKLUQJTKUCODZIMZJRBZOJPAHENG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionSubscription msg;
    msg.setTimeStamp(0.6044210514670084);
    msg.setSource(51179U);
    msg.setSourceEntity(243U);
    msg.setDestination(16074U);
    msg.setDestinationEntity(168U);
    msg.sessid = 381301084U;
    msg.messages.assign("BPEZXLKWCVODFGFOQLCEUPUCASHDXKLZLCEDTWPMIXXFKDDLCISUURHAPJGEPWIVJJDSASHSGZPVJANJZNMNTCETNYBQVWKF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionSubscription #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.14276152220679084);
    msg.setSource(51540U);
    msg.setSourceEntity(129U);
    msg.setDestination(29525U);
    msg.setDestinationEntity(220U);
    msg.sessid = 3504046753U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.027442180412422745);
    msg.setSource(45781U);
    msg.setSourceEntity(26U);
    msg.setDestination(46016U);
    msg.setDestinationEntity(250U);
    msg.sessid = 1899965951U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionKeepAlive msg;
    msg.setTimeStamp(0.6344571814739691);
    msg.setSource(65144U);
    msg.setSourceEntity(193U);
    msg.setDestination(21617U);
    msg.setDestinationEntity(241U);
    msg.sessid = 297459841U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionKeepAlive #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.6127272335606654);
    msg.setSource(40590U);
    msg.setSourceEntity(15U);
    msg.setDestination(28038U);
    msg.setDestinationEntity(19U);
    msg.sessid = 895287816U;
    msg.status = 52U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.3895692214097549);
    msg.setSource(63691U);
    msg.setSourceEntity(40U);
    msg.setDestination(40981U);
    msg.setDestinationEntity(182U);
    msg.sessid = 3674936756U;
    msg.status = 7U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SessionStatus msg;
    msg.setTimeStamp(0.7332533089882722);
    msg.setSource(20243U);
    msg.setSourceEntity(143U);
    msg.setDestination(7315U);
    msg.setDestinationEntity(214U);
    msg.sessid = 4013880874U;
    msg.status = 152U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SessionStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.8872208076567554);
    msg.setSource(7346U);
    msg.setSourceEntity(253U);
    msg.setDestination(39528U);
    msg.setDestinationEntity(43U);
    msg.name.assign("GRNXJQKMXPVYBROUPNEXHMSWWVEITKLZFVBJVEDUTALMKCIWRDLSONLWZUGYCUGZKWBBEGBIOAMLANFXWYNWRGXBVTDSAJPBUSFGAYVWWLIPLNRPKDKJXIIGKKASJCUMXYFHJHRXBKHDZLHVQZMEEATSOUAFSMUNSBNQCOKGMPEHEQVLQFDUWORIFMDMJAOQZTDEYJDFTUCPCFRPRTNCZPVOVZICTAXQYIBH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.0973604614543816);
    msg.setSource(31423U);
    msg.setSourceEntity(254U);
    msg.setDestination(10875U);
    msg.setDestinationEntity(65U);
    msg.name.assign("UTSDQRRUEGWZEMKICUPNDDKVHGJFSERFOABPLYLYODMIZOWUNPSWYSHHONLVMAZVGJUELWSRKHCCVKHQXDJVUVXFXCEABPWBLQCCH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PushEntityParameters msg;
    msg.setTimeStamp(0.11398770399204194);
    msg.setSource(44356U);
    msg.setSourceEntity(48U);
    msg.setDestination(37498U);
    msg.setDestinationEntity(15U);
    msg.name.assign("QGHGVZNFGREIELZEFKPCIQLAAGLWTQPRCJLWUJMVCSTKZEHATDVIJSLPZXZUFLWNYUBHWDBKFEEXBMVBUNQSEVODXFYXJGNUXCDOEWJRHUNPLTQG");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PushEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.6684853566212643);
    msg.setSource(46444U);
    msg.setSourceEntity(72U);
    msg.setDestination(64514U);
    msg.setDestinationEntity(45U);
    msg.name.assign("AGOABOTNUXJEEHMJOQMJBLZZQTYADLPBPOXDZHMCFVNETWKQMQTFEMZTFVOAXQIDKSEXRSTLTVPOMAWGKAGMIHRZSIILRECNVFCPOMKYKZWRVXQDKCLKQRYFGYBUEFUDSXYODCSPGXGSVQJIIBYOHWWZGRBIKCUBARNUXHEPKXIAZUYFASCSUDGOYBFLUSYKWZWTLDICPHUJVMWUFABGQCPVNXEJZRNLNEWNWLGHFYJNDJJRVHBSQNH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.02249125806526686);
    msg.setSource(50498U);
    msg.setSourceEntity(114U);
    msg.setDestination(35990U);
    msg.setDestinationEntity(74U);
    msg.name.assign("GGRUBBYAQAZHNUVDYUFFUCXFXNLQLSGBBJOAEHJPIPDTBGXIOZIXYMVLWWMDEOSZUBUJHHXFEAWDIPWNFUQZJDAZROJTCYASPBLGRAKONDZGNFKNRTWSUEKJATGMSLEFXIDJVVJZBPQDLHKJGVMCNQBVMRXLKWWOWOTPGQDFEVWQISLTCJYNHARNYIH");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PopEntityParameters msg;
    msg.setTimeStamp(0.5989344071246371);
    msg.setSource(33677U);
    msg.setSourceEntity(152U);
    msg.setDestination(14849U);
    msg.setDestinationEntity(68U);
    msg.name.assign("MFSVAKLOKRDFXAIVKWRBULVZZILPLZBHDWFKIAKTUWVKRLNQJBDGQZSCPTRPZDJEOFSRXYOSBFUAYWEZLYYAEMSNGXNLTSMJGNWFWYQLGEMDSARUIOCMHZWNJBIAVYNK");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PopEntityParameters #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.4450768910688673);
    msg.setSource(41991U);
    msg.setSourceEntity(250U);
    msg.setDestination(63883U);
    msg.setDestinationEntity(155U);
    msg.type = 187U;
    msg.error.assign("GMKRONNQOQCSCQZBMRBPJQLXJETNHVPUYNIYMBSBWWHLYXUBRZKFVQNHLIQEXYUZCIEPASSHLIYOWGMVKDRTWXJOEGXBVWUPTJCEGCMZPFUIMDDJPLVCRFAMHUZOOJZDXBCEATLVIDEWUAKNEYABEHTFWYDY");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.4829831254023429);
    msg.setSource(29593U);
    msg.setSourceEntity(229U);
    msg.setDestination(9681U);
    msg.setDestinationEntity(127U);
    msg.type = 75U;
    msg.error.assign("NWROOGIQUAXLJABXUPABCAKZNSHBIVROUAMXHVSSNMNSYBERQBCGDVIHCONJQEGZSBFVTBFWCJPZNRHQQQGGQBPMPTSMZAVNHVYVZVHKCETYLTLYNLSEKTF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IoEvent msg;
    msg.setTimeStamp(0.8742955516898311);
    msg.setSource(30527U);
    msg.setSourceEntity(250U);
    msg.setDestination(2642U);
    msg.setDestinationEntity(238U);
    msg.type = 183U;
    msg.error.assign("MMAFNZROSJXZATXJDTELZRXVOFWEVUIHTCDRYUWKCBXUMHTQL");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IoEvent #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.9568924986290115);
    msg.setSource(23944U);
    msg.setSourceEntity(116U);
    msg.setDestination(22436U);
    msg.setDestinationEntity(191U);
    msg.seq = 61259U;
    msg.sys_dst.assign("YBYJCOZTUZPLHAQRIDFBLDWRQDEEJTVPGXEMNHXWSUOMLZUAOEFWMBFNWZUFZE");
    msg.flags = 84U;
    const signed char tmp_msg_0[] = {-64, 39, 1, 114, 26, 78, 89, -68, 62, -116, 114};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.046245043535456665);
    msg.setSource(52681U);
    msg.setSourceEntity(13U);
    msg.setDestination(30251U);
    msg.setDestinationEntity(117U);
    msg.seq = 35927U;
    msg.sys_dst.assign("IUBAKXPMPJCTMUFZEDFXVDAGOVSXZKCICUIOFHLERJIGKNRBCNZTABFEUOWTSSAAATRMBFSLOFOOWQKPJWFRHBBSBWWYPFNMVKQCPHYUIDICUEQVGLZMDPZBYAAMERJPLDEZGREOCYWPBMNTMJTVHINEUPIHYLXEVWQNQFFKHRCL");
    msg.flags = 50U;
    const signed char tmp_msg_0[] = {-121, 69, -37, -69, -59, -26, 48, -96, -7, -127, 21, -48, 8, -47, -119, -16, -63, 125, 7, 87, 103, 82, -29, -33, 64, -53, 114, -65, 97, 51, -6, 118, 19, 103, -121, -94, 104, -116, 61, 94, -17, -94, 102, 103, -48, -65, 37, 124, -50, 95, 36, 30, -27, -86, 71, -116, 55, -122, 40, -36, -44, -4, -114, -18, 19, 55, -77, 96, -87, 40, 43, -48, 8, 114, 96, -84, 76, -96, -4, 98, 56, 121, -116, 97, -76, -32, -34, 125, -119, 42, 35, 102, -74, 92, 30, -48, -56, 35, -17, -58, 80, -50, -97, -8, 60, -99, -71, 93, -64, -72, 63, -37, -45, 81, 23, 118, -86, -93, -56, -112, 30, 115, -12, 118, 45, -2, -12, 103, -49, -71, 36, -73, 120, -106, 5, 32, -10, 41, -104, 21, 110, 82, -38, 81, -50, -10, 17, 2, -89, 44, 124, 113, 45, -59, 13, 121, 17, -90, 50, -87, 126, 126, 14, -3, -42, -76, 45, 95, 40, 111, 36, -28, -87, -109, -104, -124, -41, 120, 75, 126, -21, 102, 41, -96, 96, -33, -9, -122, 44, 86, -111, -29, -98, -23, 11, -52, 17, -13, 30, 57, 19, 45, -58, 123, 72, 28};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxFrame msg;
    msg.setTimeStamp(0.6081467355587012);
    msg.setSource(6735U);
    msg.setSourceEntity(234U);
    msg.setDestination(13464U);
    msg.setDestinationEntity(192U);
    msg.seq = 29263U;
    msg.sys_dst.assign("UOSWGVNWSDEVQRANKRAMXDXPWPKXUXPSQBRAYWRMGERIQVBNRPSJXMLBFYYKZEXPVHYYLJTNXMOFNEVICGVVEQGZBFEGWIEDHNHNKRAMPGFTCAJKDAQXROD");
    msg.flags = 115U;
    const signed char tmp_msg_0[] = {-70, -111, 114, 100, 98, -87, 93, 36, -20, 34, -33, 86, -72, -96, 91, -27, 83, 43, -17, 83, -30, -2, -98, 112, -64, 67, 27, 38, 74, -10, -109, -18, 91, -122, 52, -5, 70, 121, 23, 15, -26, 48, 76, -23, -32, 46, 3, -35, 20, 55, -98, -124, 8, 5, 56, -31, -52, 76, 67, 6, -97, 104, -25, -45, -35, 121, 125, 29, -6, -82, 3, -99, -2, -23, 109, -45, -104, 44, -74, -53, 43, -41, 80, -80, 72, 107, -45, 62, 56, 49, -21, -75, 7, -128, -105, 75, 45, -120, 112, -93, -2, -70, 124, 120, -36, -125, -56, 60, -46, 108, -42, 92, 99, 125, 10, -10, 119, -8, 27, -98, 41, 95, -25, -49, -101, -8, -75, -112, 59, -97, 53, -6, 10, -74, 76, 100, -45, -103, -96, -73, 117, 1, -65, -41, 49, 109, 113, 35, -99, 60, 14, -126, 56, 112, -128, -94, -66, 57, 89, 110, 126, -103, 125, 126, 56, -110, 106, 100, 19, -90, 38, -70, 53, 0, -48, 119, -12, 85, 40, -62, -84, -109, 16, -15, 40, 52, 79, -69, -122, 83, 44, -59, 20, -17, 36, 77, -59, 9, 10, 95, -11, 9, -123, -82, -14, -120, -106, 81, -13, 75, 31, -69, 65, -127, 29, 9, -18, -18, -86, -42, -80, -24, -39, -70, 72};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.1354231673741827);
    msg.setSource(21553U);
    msg.setSourceEntity(243U);
    msg.setDestination(59464U);
    msg.setDestinationEntity(116U);
    msg.sys_src.assign("QIHRQZXAKTPZWSWXGEFWNRPRJHBHDTVZOUOSBPJXKYGZIOCHCZLXQCMWAYXVLMLMEQLZGQVGEMFNISMDRXIARYBYEV");
    msg.sys_dst.assign("NGDZOBWQMYQJUBQWCLOMUPVQNXVUCNPWCUNHLJCYYAUSNATHDSOLJCIMHZAVFXJTJWESKLNYXMFFRXZPKSMXLBAGWAZWOQBLIXWRIGTDGSEFVSYAGIBYBFIOTRMHIHLLPGGRBYKKBRJUIHCYGFZRPIQCMKHTENVZFPYTZOFIDOKSJHVXETMNXJTAOSWUEEDGSXCZVFOK");
    msg.flags = 247U;
    const signed char tmp_msg_0[] = {40, 1, 79, 24, -18, -5, 100, -37, -107, 13, -92, -6, 94, -60, 82, 53, -1, -76, 48, 96, -105, -123, 45, -7, -102, 84, 104, 23, -45, -40, 81, 6, 3, 11, -98, 35, 112, 17, -17, 91, 51, -76, -51, 114, 112, 20, -50, -81, 113, -60, 75, -28, -83, -124, 23, 49, 93, 1, 32, 100, -78, -114, 65, 85, 32, 20, -96, -109, 105, 85, -125, -127, 78, -19, 49, -95, -84, -76, -110, 37, 27, -76, 40, -83, -111, -57, -76, 20, -63, 118, -40, 69, 90, 96, -11, 35, 42, 43, 116, -34, -35, -7, 116, 123, -112, -22, 20, 124, 80, -117, -117, -97, 108, -116, 36, 97, -115, -2, -103, 122, 12, 61, 55, 108, 102, -9, -125, 122, 117, 117, -16, -82, -52, -48, -75, 74, -35, -42, 50, 37, 78, 57, -102, 94, 92, 79, -90, -97, -69, -118, -50, -69, -111, -126, -119, -125, -106, 28};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.8086333689132094);
    msg.setSource(5403U);
    msg.setSourceEntity(189U);
    msg.setDestination(2751U);
    msg.setDestinationEntity(160U);
    msg.sys_src.assign("IPJINRPWDHBKCPUBEKVRFVQGIYHVJKGKEDZSCCDKJMLIOHRBXY");
    msg.sys_dst.assign("XSUKBBWMFLSRITKWUNTUDVILSEEYXULPAHZNCLQGF");
    msg.flags = 214U;
    const signed char tmp_msg_0[] = {-104, 121, 68, 30, -63, -30, -57, -13, -38, -59, -95, -9, 96, 63, -72, -110, 9, -116, -37, -33, -25, 20, 49, -109, 104, 25, -41, 79, 7, 3, 76, 83, -7, -91, -3, -8, 33, -64, -23, -73, 88, -74, 60, -78, 40, -13, 48, -2, -80, -41, 20, -96, -51, 31, -63, -62, 38, -7, -66, 58, 13, 99, -13, -113, 119, -120, 101, -56, -30, -49, -114, 1, -47, 67, 18, -94, -68, -125, 114, 14, -27, -112, -86, 0, -86, -67, 36, 61, 64, -90, -88, -117, -2, -35, 100, -63, 66, -54, -62, 70, -15, -96, 28, 5, 11, -90, -13, 66, 49, -33, 54, -101, 22, 54, -19, 125, 44, -16, -82, 99, -53, -25, 47, 60, -48, -66, 1, 11, 50, -114, -2, 116, 20, -58, -86, -19, -104, -13, 57, -59, 46, -22, -58, 64, -122, -28, 25, 126, 65, 11, 117, -64, -62, -107, 64, -34, 72, 33, -86, 104, 29, 30, -36, 74, 54, -111, 10, 120, 47, 42, 13, -2, -110, -5, 125, 8, 32, -86, -93, -38, 92, -32, -96, -118, 122, -128, 17, 114, -56, 113, 45, -54, 57, 63, 1, -102, -59, 112, 44, 36};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxFrame msg;
    msg.setTimeStamp(0.6333511303739854);
    msg.setSource(85U);
    msg.setSourceEntity(35U);
    msg.setDestination(16615U);
    msg.setDestinationEntity(232U);
    msg.sys_src.assign("FSUWBCRHLWFQXZPMOMZGDJQEQPHMYGDTXKNMJIBELOOHYPDZCSEZOBLVNQVZRHUTOKNURJKCVYPHSCXVXQQNLDTCAMBFCBBBUSRBIZAGNFJSFROGEKYFTDTVKWU");
    msg.sys_dst.assign("RJAFEGDKLQAKGNGBBMOKNVQZPDJTTELSRZFJURESJQLCCAJWZKCAKOTWMXXHDIBFQGVXOOHCYFUCNZJQDGRMTSNCVLNCWJWYFAFAPEWIUMIPYNRQOCHNOOAJVPQLYZIHNGDXFPVHJWBCSLRNPOHSEBDYXIKDQVZHLMEMTUMUUOZXYBATSUGGSRWDQPYVZXEWKMRKLPBZUHVLXJEI");
    msg.flags = 92U;
    const signed char tmp_msg_0[] = {-61, 18, 120, -104, -113, -60, 44, 18, 96, -59, -26, -72, 109, -126, -43, -23, -112, -14, -99, -103, -77, -91, 37, 46, 114, -42, -50, 74, -121, -20, -4, 12, -113, -37, -77, -21, -19, -99, 81, -33, -45, 48, -94, 65, 35, 69, 90, -12, 114, -16, -54, 48, -13, -73, -40, 59, -65, -74, -125, 12, 21, -123, -16, -108, 92, -16, 43, -116, -77, -16, 36, 16, -113, 24, 35, 53, -82, -109, 0, -104, -80, 74, -32, 45, 52, 99, -42, 119, 15, 18, 75, 112, 48, -88, -21, -124, 9, -100, -109, -97, -13, 111, 49, -108, -44, 87, 65, 62, -76, -31, 52, 110, -48, -102, 101, 89, -9, 71, -72, 33, -35, 107, -3, 117, 89, -107, -124, 105, 70, 65, -23, 117, 38, 40, -70, -82, 57, 93, 13, -49, -114, 60, -47, 87, -22, 118, 71, -4, 30, -101, 57, -70, 40, 117, 109, 73, -83, -90, 74, 19, 98, -106, -94, 37, -102, 103, 80, 29, 77, -7, -34, -80, -7, -25, 47, -40, -63, -107, 124, 3, -122, -128, 6, -38, 108, 15, -22, 29, 2, 56, 82, -84, 33, -115};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxFrame #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.4211062466544212);
    msg.setSource(12547U);
    msg.setSourceEntity(128U);
    msg.setDestination(45870U);
    msg.setDestinationEntity(142U);
    msg.seq = 58082U;
    msg.value = 155U;
    msg.error.assign("ZABPRJYRMXASPBIAKXVIEHAGHEOPUJDEPNLZTOKSQUYYBOHIWDSSKGHNDWKOFLPSSZRCJIIMTPFU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.7257557507465873);
    msg.setSource(47873U);
    msg.setSourceEntity(121U);
    msg.setDestination(48589U);
    msg.setDestinationEntity(38U);
    msg.seq = 57551U;
    msg.value = 7U;
    msg.error.assign("EOPWYWXHNPQTPYHVRIYRIRWINQJAWUHIJWGOKAVYPUKGUXSKTFFIEMBSZWUYFQCJFD");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxStatus msg;
    msg.setTimeStamp(0.7983514634777475);
    msg.setSource(61191U);
    msg.setSourceEntity(105U);
    msg.setDestination(58594U);
    msg.setDestinationEntity(57U);
    msg.seq = 22682U;
    msg.value = 164U;
    msg.error.assign("IEVVJQFZHXCULOCIYAQEARRXWZXLMVHMSEANRTOSCFFWXNWAKUULGQPVPBBHWJVDVIESNGVDFVDDNGHNIYDBCCGOITEHKFJCJUCIAJOSPXRVPAYKMYXVIOHISSMAXZZARBSGTAKKYJTTTESDSZFBEJLZMBOGMKWFXUKQIQPTUJZCJZSMZRUNONFPRYYGXOJLLRWPXHDUBLZNDMQDHLNEWKKYMKQEWEW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.4656172496494274);
    msg.setSource(31504U);
    msg.setSourceEntity(125U);
    msg.setDestination(37018U);
    msg.setDestinationEntity(109U);
    msg.seq = 22847U;
    msg.sys.assign("ZDEEORLPAITOGELHACCEPSNOIKMYKUMYWHEYWVMJWLKNNJLAPJLIJXNNVLUMSURCSGZVDSZFOTQJRUZXVEQKTTICRZIHTZKELKZSYIQAUPYCZGHMDKBOFUUNYUEAXTCQGEXBXSRVGQJTALQNINUYHKKHAPQFXDBAMMKLBUOBWWWHGGIOBFJBCPJHYDFRZYQDNMMGOSRSMOVVGCXRQBRDWQW");
    msg.value = 0.5219414115703395;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.8313487591829135);
    msg.setSource(40305U);
    msg.setSourceEntity(221U);
    msg.setDestination(26795U);
    msg.setDestinationEntity(168U);
    msg.seq = 37278U;
    msg.sys.assign("ODLUFNWBVFMWIJYDQCJISRWMCEDUKNBEDRLSPKWILIYUMYLHONFIKKHVLDSFHJRHFPJAMNVYSBUEFAECXOPETAPPDAPDKOXADFXCEOLXYKBVFVYKINHRSHHSNCAMIYTGOZBJEGNWUHYQRZBXBWMUQQZGGVZGEJZDIAQLNLOXCMJCGKGXSUABWFRWTXTMVNOEYURTZDWBECCAXLNYKMPRUTKZXVSQBTGSVIOUVSJWGZPGHFARTQZHJCR");
    msg.value = 0.35562320491830623;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamRxRange msg;
    msg.setTimeStamp(0.6287524074362121);
    msg.setSource(49491U);
    msg.setSourceEntity(22U);
    msg.setDestination(36658U);
    msg.setDestinationEntity(9U);
    msg.seq = 52193U;
    msg.sys.assign("JJPZQOORUTIUKFIHGERZRIDKETANBUZSUUFXQHRKRUWKDPHWENBWITHAYHOCOWPYYLYLBCVFOXTDUYFMCWJX");
    msg.value = 0.7597441035803383;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamRxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.8903510887690601);
    msg.setSource(21774U);
    msg.setSourceEntity(95U);
    msg.setDestination(45164U);
    msg.setDestinationEntity(49U);
    msg.seq = 52728U;
    msg.sys_dst.assign("VOBOJIHYOOODPQSQYYRDTZKDVUFZNECNUTLECRJYTI");
    msg.timeout = 0.7828161312968507;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.11439989638611903);
    msg.setSource(57269U);
    msg.setSourceEntity(64U);
    msg.setDestination(62273U);
    msg.setDestinationEntity(120U);
    msg.seq = 57207U;
    msg.sys_dst.assign("IWHPKEXNZWNAVELMFQKWXHZRTOYMLUFURUJVGYXXSAFQSCMHNPWBRWZQKIGFROLCNJADNGVGVBJNTDQFUTDIWMWFFBJPWTSLUZMYESTBOXEILTRCLHESTMCVMUJHP");
    msg.timeout = 0.9316616703062776;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UamTxRange msg;
    msg.setTimeStamp(0.05589489064255515);
    msg.setSource(30697U);
    msg.setSourceEntity(47U);
    msg.setDestination(62721U);
    msg.setDestinationEntity(107U);
    msg.seq = 59511U;
    msg.sys_dst.assign("LMHFCHZDIBKIHMHIUWFQLEKIXXAVPSVLMYCAXEBKMKWJGGQJTZEBLDLGKRBCHXRWYGVSQMPUZPXCUCRYNUCVOVPDMRDKSGINNPAJGSSUOQDHQSDWFNAXFEWIQHTGJRMFOQUCHRRABIUSECYMYVMDKIGUMVUTPZTWTYGEBFXTHJPLORJBVZPUWTOLAQDFGNCLJBKNWEWZVBKSBYAAOX");
    msg.timeout = 0.9203957579976854;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UamTxRange #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.36344710370754185);
    msg.setSource(26009U);
    msg.setSourceEntity(249U);
    msg.setDestination(3529U);
    msg.setDestinationEntity(172U);
    msg.action = 138U;
    msg.longain = 0.20197877249131735;
    msg.latgain = 0.9223617122194304;
    msg.bondthick = 1161348798U;
    msg.leadgain = 0.2159083765376011;
    msg.deconflgain = 0.9171316129187949;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.09301761579069268);
    msg.setSource(252U);
    msg.setSourceEntity(165U);
    msg.setDestination(59457U);
    msg.setDestinationEntity(237U);
    msg.action = 250U;
    msg.longain = 0.07665181936462206;
    msg.latgain = 0.1619979927561781;
    msg.bondthick = 3182204270U;
    msg.leadgain = 0.839420735517674;
    msg.deconflgain = 0.16035791721847814;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormCtrlParam msg;
    msg.setTimeStamp(0.4851202709924862);
    msg.setSource(59833U);
    msg.setSourceEntity(31U);
    msg.setDestination(37646U);
    msg.setDestinationEntity(81U);
    msg.action = 43U;
    msg.longain = 0.907581618253155;
    msg.latgain = 0.18477325991562332;
    msg.bondthick = 3091394069U;
    msg.leadgain = 0.54227544402024;
    msg.deconflgain = 0.278709988130996;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormCtrlParam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.8909616960311866);
    msg.setSource(12928U);
    msg.setSourceEntity(254U);
    msg.setDestination(3878U);
    msg.setDestinationEntity(64U);
    msg.err_mean = 0.4352301547822722;
    msg.dist_min_abs = 0.20768606217348218;
    msg.dist_min_mean = 0.32955624531757133;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.8490193705950291);
    msg.setSource(40470U);
    msg.setSourceEntity(175U);
    msg.setDestination(20488U);
    msg.setDestinationEntity(17U);
    msg.err_mean = 0.23698752295139636;
    msg.dist_min_abs = 0.4622712553045669;
    msg.dist_min_mean = 0.5111548789623926;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEval msg;
    msg.setTimeStamp(0.9173296658963186);
    msg.setSource(47484U);
    msg.setSourceEntity(172U);
    msg.setDestination(64117U);
    msg.setDestinationEntity(159U);
    msg.err_mean = 0.3563121863110428;
    msg.dist_min_abs = 0.2581603767948345;
    msg.dist_min_mean = 0.4843930035402644;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEval #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.8434222037500372);
    msg.setSource(42461U);
    msg.setSourceEntity(206U);
    msg.setDestination(43789U);
    msg.setDestinationEntity(80U);
    msg.action = 48U;
    msg.lon_gain = 0.9068801302988292;
    msg.lat_gain = 0.40801515217599416;
    msg.bond_thick = 0.6164869578592506;
    msg.lead_gain = 0.8578100911210401;
    msg.deconfl_gain = 0.5601143607517781;
    msg.accel_switch_gain = 0.13178741646022019;
    msg.safe_dist = 0.16894540503258093;
    msg.deconflict_offset = 0.3243826393941944;
    msg.accel_safe_margin = 0.6662871024372043;
    msg.accel_lim_x = 0.9467113888478245;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.3615369811049972);
    msg.setSource(32176U);
    msg.setSourceEntity(57U);
    msg.setDestination(51892U);
    msg.setDestinationEntity(184U);
    msg.action = 155U;
    msg.lon_gain = 0.9757888830345364;
    msg.lat_gain = 0.8870915996921042;
    msg.bond_thick = 0.9825641906598649;
    msg.lead_gain = 0.7517206130445253;
    msg.deconfl_gain = 0.13397540802408947;
    msg.accel_switch_gain = 0.4042113898155405;
    msg.safe_dist = 0.5614894475164554;
    msg.deconflict_offset = 0.13446042356961463;
    msg.accel_safe_margin = 0.9784146458550376;
    msg.accel_lim_x = 0.5226760710108911;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationControlParams msg;
    msg.setTimeStamp(0.4562736012086043);
    msg.setSource(16136U);
    msg.setSourceEntity(70U);
    msg.setDestination(20199U);
    msg.setDestinationEntity(30U);
    msg.action = 241U;
    msg.lon_gain = 0.7152209798618228;
    msg.lat_gain = 0.7241748657983733;
    msg.bond_thick = 0.2137090193286052;
    msg.lead_gain = 0.10239719156694005;
    msg.deconfl_gain = 0.25322360623071993;
    msg.accel_switch_gain = 0.5131831111921983;
    msg.safe_dist = 0.1619255683359605;
    msg.deconflict_offset = 0.1831336518434995;
    msg.accel_safe_margin = 0.9391754835331367;
    msg.accel_lim_x = 0.7635624878802535;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationControlParams #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.08381592426338202);
    msg.setSource(7317U);
    msg.setSourceEntity(146U);
    msg.setDestination(737U);
    msg.setDestinationEntity(199U);
    msg.type = 67U;
    msg.op = 236U;
    msg.err_mean = 0.2588942342177548;
    msg.dist_min_abs = 0.43449123311580984;
    msg.dist_min_mean = 0.2686876037608368;
    msg.roll_rate_mean = 0.9401683975340744;
    msg.time = 0.015876216828290657;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 44U;
    tmp_msg_0.lon_gain = 0.8478191970530025;
    tmp_msg_0.lat_gain = 0.39005180158888586;
    tmp_msg_0.bond_thick = 0.47665687990214967;
    tmp_msg_0.lead_gain = 0.29255344454490306;
    tmp_msg_0.deconfl_gain = 0.46775683592733563;
    tmp_msg_0.accel_switch_gain = 0.8411098178827668;
    tmp_msg_0.safe_dist = 0.43839137868823164;
    tmp_msg_0.deconflict_offset = 0.8309102700160245;
    tmp_msg_0.accel_safe_margin = 0.3922417820845414;
    tmp_msg_0.accel_lim_x = 0.8709209300460782;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.5367423589567263);
    msg.setSource(58226U);
    msg.setSourceEntity(68U);
    msg.setDestination(29331U);
    msg.setDestinationEntity(67U);
    msg.type = 249U;
    msg.op = 114U;
    msg.err_mean = 0.5070182530407901;
    msg.dist_min_abs = 0.8005398283871366;
    msg.dist_min_mean = 0.29863676035225617;
    msg.roll_rate_mean = 0.2820933399879013;
    msg.time = 0.6366242598118546;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 45U;
    tmp_msg_0.lon_gain = 0.1922470184049817;
    tmp_msg_0.lat_gain = 0.26515569041518827;
    tmp_msg_0.bond_thick = 0.32285998606840616;
    tmp_msg_0.lead_gain = 0.6566806023197561;
    tmp_msg_0.deconfl_gain = 0.7800518298971904;
    tmp_msg_0.accel_switch_gain = 0.47075888168010493;
    tmp_msg_0.safe_dist = 0.01876141481820326;
    tmp_msg_0.deconflict_offset = 0.6463813152641792;
    tmp_msg_0.accel_safe_margin = 0.312812866308364;
    tmp_msg_0.accel_lim_x = 0.32023505229990357;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FormationEvaluation msg;
    msg.setTimeStamp(0.7879701914735601);
    msg.setSource(17746U);
    msg.setSourceEntity(67U);
    msg.setDestination(8854U);
    msg.setDestinationEntity(251U);
    msg.type = 190U;
    msg.op = 77U;
    msg.err_mean = 0.35240659740837244;
    msg.dist_min_abs = 0.13222004814290378;
    msg.dist_min_mean = 0.02868818252962335;
    msg.roll_rate_mean = 0.5070885410311156;
    msg.time = 0.4351421666911913;
    IMC::FormationControlParams tmp_msg_0;
    tmp_msg_0.action = 97U;
    tmp_msg_0.lon_gain = 0.849786597831881;
    tmp_msg_0.lat_gain = 0.35194537421926797;
    tmp_msg_0.bond_thick = 0.987971879056934;
    tmp_msg_0.lead_gain = 0.20821303653307865;
    tmp_msg_0.deconfl_gain = 0.5532580483485535;
    tmp_msg_0.accel_switch_gain = 0.7394148753120121;
    tmp_msg_0.safe_dist = 0.009088757828476068;
    tmp_msg_0.deconflict_offset = 0.6475216137256466;
    tmp_msg_0.accel_safe_margin = 0.07549881417981474;
    tmp_msg_0.accel_lim_x = 0.016408608785917878;
    msg.controlparams.set(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FormationEvaluation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.016756191854357283);
    msg.setSource(12252U);
    msg.setSourceEntity(83U);
    msg.setDestination(15534U);
    msg.setDestinationEntity(37U);
    msg.lat = 0.23323719467624326;
    msg.lon = 0.9606261848815285;
    msg.eta = 3085854889U;
    msg.duration = 6059U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.16103782410415168);
    msg.setSource(34569U);
    msg.setSourceEntity(59U);
    msg.setDestination(47962U);
    msg.setDestinationEntity(46U);
    msg.lat = 0.935344091628767;
    msg.lon = 0.2451455126047245;
    msg.eta = 3493964026U;
    msg.duration = 15486U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiWaypoint msg;
    msg.setTimeStamp(0.6992409648774086);
    msg.setSource(48796U);
    msg.setSourceEntity(206U);
    msg.setDestination(45295U);
    msg.setDestinationEntity(179U);
    msg.lat = 0.29726479662634664;
    msg.lon = 0.5306971322545643;
    msg.eta = 3103305521U;
    msg.duration = 11412U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiWaypoint #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.12483502820270187);
    msg.setSource(33802U);
    msg.setSourceEntity(178U);
    msg.setDestination(38362U);
    msg.setDestinationEntity(251U);
    msg.plan_id = 15990U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.6880085920443482;
    tmp_msg_0.lon = 0.29860660163844455;
    tmp_msg_0.eta = 2978197231U;
    tmp_msg_0.duration = 42743U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.2619244765698203);
    msg.setSource(51025U);
    msg.setSourceEntity(180U);
    msg.setDestination(9011U);
    msg.setDestinationEntity(79U);
    msg.plan_id = 34023U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.04116341845715088;
    tmp_msg_0.lon = 0.9547670637475041;
    tmp_msg_0.eta = 178931593U;
    tmp_msg_0.duration = 27321U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiPlan msg;
    msg.setTimeStamp(0.10534516250079917);
    msg.setSource(4166U);
    msg.setSourceEntity(185U);
    msg.setDestination(56553U);
    msg.setDestinationEntity(8U);
    msg.plan_id = 5333U;
    IMC::SoiWaypoint tmp_msg_0;
    tmp_msg_0.lat = 0.9097654829202368;
    tmp_msg_0.lon = 0.8665404235673921;
    tmp_msg_0.eta = 3220635083U;
    tmp_msg_0.duration = 30006U;
    msg.waypoints.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiPlan #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.7806141326393309);
    msg.setSource(30917U);
    msg.setSourceEntity(200U);
    msg.setDestination(9842U);
    msg.setDestinationEntity(53U);
    msg.type = 163U;
    msg.command = 117U;
    msg.settings.assign("KLDHYKRATKVHFYVVTISJAJLIKECCFWCVHMGTAJZBZKUZOMZAKPBIWIWXEFLZTMCLJGYQUXVILFTRMSNGAPBMOGKQERNIOM");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 11311U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("RFFOLAUZWXZADHYJFYTJBSEYYDHUPQAKOISVNIFFNSXJVPBAB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.9835142376501491);
    msg.setSource(11196U);
    msg.setSourceEntity(70U);
    msg.setDestination(7421U);
    msg.setDestinationEntity(132U);
    msg.type = 179U;
    msg.command = 181U;
    msg.settings.assign("AOJGTWEDCHXPBSILGUFWVCBRTZCSOCXBIRHZPDYFYRZNZZLLMWVMZBVHNMKZDOFQELBNEUCTMHYNYUACKJJKKLXQLNQRNPBXHAHQTEYVFKUXXWWPFPZHWMQJF");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 25521U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("OAYQIEGSVUYRPLDZUZPKTDCOKTYBUHWNSCMUFHJXVHFCQOULLECNKWWRJLGZZAVMYJZODPIMGGVKGZCMZGPSIBAAWLNZSSHXKOVHRPKSOPEQEBQCPWTLNJJNOFCHDA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiCommand msg;
    msg.setTimeStamp(0.5433836482217028);
    msg.setSource(3723U);
    msg.setSourceEntity(35U);
    msg.setDestination(39911U);
    msg.setDestinationEntity(118U);
    msg.type = 101U;
    msg.command = 232U;
    msg.settings.assign("IKPJRQOCYEDDPEANAUBGLJUZGQVVWVXSLBNTYEFZMJALUSKAOYFBBSUCHUHFUXJQCFYZTWUCMGDMARGILTLGPDFNVIJQHIRKHQYGAEYOEPZFNJTCGZPXAKYXTGNAUVWSTUZXQKMBSTXJPVEDQHVNSFRWDMHIHPVLMGWWBNVLRHCBJROJUYCPZDGZORWQLSIOKKCWPEOXRNFJZHQHMMKOCFOYAIZ");
    IMC::SoiPlan tmp_msg_0;
    tmp_msg_0.plan_id = 37477U;
    msg.plan.set(tmp_msg_0);
    msg.info.assign("AGIMARTDAJYDWFSNCJRBPSCEYWIESQCIKROTIJRBJTVCGPQDCRLBZFYDWILBMLOPHRNFSLESKMGVBUOXQZSQHHPMRBMSFJXGVDKLGBJCTSOKWEEMIPVKHZKFGYTDOBKLNALMXYHEFBUEWPKDYAGFXJVXJTEMFGQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiCommand #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.8662063794959629);
    msg.setSource(19302U);
    msg.setSourceEntity(69U);
    msg.setDestination(63411U);
    msg.setDestinationEntity(101U);
    msg.state = 236U;
    msg.plan_id = 21347U;
    msg.wpt_id = 90U;
    msg.settings_chk = 17634U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.48472491898385783);
    msg.setSource(17439U);
    msg.setSourceEntity(25U);
    msg.setDestination(43663U);
    msg.setDestinationEntity(119U);
    msg.state = 15U;
    msg.plan_id = 65356U;
    msg.wpt_id = 172U;
    msg.settings_chk = 9129U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SoiState msg;
    msg.setTimeStamp(0.9384760646315011);
    msg.setSource(63642U);
    msg.setSourceEntity(95U);
    msg.setDestination(61824U);
    msg.setDestinationEntity(58U);
    msg.state = 184U;
    msg.plan_id = 56265U;
    msg.wpt_id = 58U;
    msg.settings_chk = 49362U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SoiState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.32690786225127244);
    msg.setSource(32676U);
    msg.setSourceEntity(79U);
    msg.setDestination(11794U);
    msg.setDestinationEntity(244U);
    msg.uid = 249U;
    msg.frag_number = 61U;
    msg.num_frags = 249U;
    const signed char tmp_msg_0[] = {-6, -55, 52, 59, -89, 66, 59, -110, 4, -11, -60, -54, -114, -27, 55, -62, 78, 65, 63, -68, 14, 74, 36, -126, 41, -25, -44, 12, -69, 16, -109, -23, -117, -59, -51, -50, -124, -4, -116, 113, 8, -7, 96, -40, -120, 82, 99, -95, -80, -111, -80, -72, -23, 13, -83, 71, 75, 35, -127, -99, -24, -128, -66, 73, 124, -22, -113, -10, -41, 72, -92, -119, 121, 41, 101, -48, -70, -91, -27, 84, 111, 5, 112, -92, -11, -40, 97, 79, -75, 2, -14, -15, -7, 122, 73, -116, -85, -107, 96, 91, 111, 43, -8, 17, 22, -3, 125, 50, 104, -117, -93, -128, 95, -43, -107, 46, 104, -90, 60, 10, 23, 25, 67, -119, -41, -120, -99, -87, 106, -34, 67, -107, 121, -33, -65, -71, -26, 62, -13, -127, -111, -17, 80, 120, 98, -82, -33, -128, 115, 37, -34, -100, -96, -94, -117, -97, -120, 109, 14, -22, -46, 89, 92, -101, 116, -67, 31};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.7165481728623205);
    msg.setSource(22551U);
    msg.setSourceEntity(96U);
    msg.setDestination(1518U);
    msg.setDestinationEntity(114U);
    msg.uid = 147U;
    msg.frag_number = 147U;
    msg.num_frags = 221U;
    const signed char tmp_msg_0[] = {105, 62, 122, 105, -2, 29, 94, -71, -27, 9, 107, 103, -47, -64, -27, 87, -106, -37, 76, -71, 92, 71, -108, 85, 13, 107, -126, -4, 35, 45, -4, -61, -83, -38, 109, -62, -75, 17, 91, 58, 60, -92, 7, -11, -16, 11, -52, -23, -77, 85, -115, -47, 34, 81, -44, -23, -12, 76, 110, -5, -103, 73, -93, 109, 124, -81, 107, 124, 91, 96, 122, 29, 75, 97, 122, 35, 67, 8, 11, 120, 113, -90, 53, -19, -111, -97, -116, -20, -6, -55, 44, -47, 63, 50, 101, 48, 72, 53, -18, -60, 96, 55, 42, -117, 76, -68, -119, 50, 112, 62, 120, -36, 84, -120, 56, 61, 58, -32, -119, 5, -14, 29, 106, 116, 80, -48, 121, -17, -123, -34, 122, 91, -9, -88, -6, 62, -108, -8, -32, -95, 15, 97};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::MessagePart msg;
    msg.setTimeStamp(0.5860242183798221);
    msg.setSource(39778U);
    msg.setSourceEntity(218U);
    msg.setDestination(62484U);
    msg.setDestinationEntity(17U);
    msg.uid = 72U;
    msg.frag_number = 15U;
    msg.num_frags = 99U;
    const signed char tmp_msg_0[] = {28, -124, 92, -115, -116, 87, -22, 117, -96, -39, 85, -75, -68, -73, 80, -73, 50, 99, -8, -1, -61, 24, -90, 69, 85, -82, 121, -70, 73, 84, 15, 67, -75, -108, 112, 23, -6, -99, -56, 13, -32, 45, 16, 13, 57, 35, -23, 115, 80, -53, -67, 69, -54, 65, -96, 86, 96, 29, 39, 53, -3, 63, -58, 37, -43, -125, -108, -119, 82, 21, -51, -32, -31, -106, 124, 93, -93, -46, 48, -123, 56, -109, -102, -104, 121, -64, 96, -8, 93, 54, 72, 102, 81, -101, 24, 64, -71, 53, -47, -109, 63, 19, 46, -117, 34};
    msg.data.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("MessagePart #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.49882514405518474);
    msg.setSource(50872U);
    msg.setSourceEntity(190U);
    msg.setDestination(7515U);
    msg.setDestinationEntity(102U);
    msg.content_type.assign("RKJUVWZBQYBSAMWBCSLBYTGLUEJHRLCYGT");
    const signed char tmp_msg_0[] = {-110, -9, -81, -7, -95, -95, 45, -123, 53, -4, -90, 32, 34, -117, 94, 31, 10, 11, 73, 91, -37, -122, -84, 29, -41, 99, 41, 42, 32, 28, -32, -9, -102, -46, -118, -107, -33, 76, -61, -28, -2, 7, 71, -68, -95, -36, 56, 1, 45, -110, 22, -106, 123, 33, -117, -125, -63, 15, -15, 39, 75, 72, -36, 111, -68, 93, -120, 28, -79, -104, 104, -49, -84, 57, 13, -27, 6, -68, -5, 14, -96, 58, -114, 104, 68, 36, 96, 86, -106, 82, 90, -45, -31, -68, -34, 48, 99, -58, 6, 77, -116, 61, 106, -25, 81, -78, 92, 98, 100, -24, 1, 22, 109, 41, 75, 42, -98, -23, -112, 8, -41, 108, -19, 58, 16, 56, -119, -118, 10, -89, 96, 32, -12, -65, 27, 14, -97, -40, -81, 69, -22, -82, -15, -26, -16, 47, -70, 85, 33, -72, 14, -54, 122, 8, 120, 103, 121, 112, 9, -51, 1, -95, -36, -2, -18, -103, -12, -99, 51, -118, 19, 49, 44, -126, -109, 21, 26, -110, -47, -40, 0, -118, 21, -3, 102, -55, -4, 87, -111, -60, -66, -113, -94, -43, 53, -75, -72, 76, 79, 107, -116, -53, -40, -97, 86, 94, -11, -92, -117, -3, -71, 70, -39, -83, 5, -58, 5, 49};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.07912573531425493);
    msg.setSource(58755U);
    msg.setSourceEntity(23U);
    msg.setDestination(63685U);
    msg.setDestinationEntity(221U);
    msg.content_type.assign("ETZQMDTXFBDFYDSXLDOWHLSMEYPIIJKGYUUIARGQYKPNSJXHVDSHQBGNTOIHFKGTRACIQQJXAGAGTCVDIEBWRPZCVPVBWENVZFSJJQVFMXQKVOYTKNRLLUFQKPHWJRPBCJRHZNMWNWLSBULMYOWOXZHHXBYUKJREYEUIGJDGLKAAOEKUMRRLMSXSZA");
    const signed char tmp_msg_0[] = {-68, -45, 87, -79, -57, -87, -50, -99, 85, -8, 77, 109, 78, -83, 70, 88, 76, 99, -100, 3, -86, 3, -88, 89, -89, 6, -51, -20, 96, 104, -94, 9, 0, -90, -111, 91, -97, 115, 20, 11, 41, -59};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NeptusBlob msg;
    msg.setTimeStamp(0.7068863244026117);
    msg.setSource(32210U);
    msg.setSourceEntity(136U);
    msg.setDestination(19601U);
    msg.setDestinationEntity(174U);
    msg.content_type.assign("FPOBIHGZKZCRBVOETVSZNBWFSBOSNEMTLNVXIGKFEJLMIH");
    const signed char tmp_msg_0[] = {11, 103, 121, 42, 79, 85, -28, 41, 37, -94, -99, 116, 38, 6, 59, -116, 32, -71, 2, 36, 90, 57, 23, 34, 59, 1, -59, 33, -114, -119, 9, 43, -79, 115, -32, -98, -1, -78, 34, -116, 95, -27};
    msg.content.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NeptusBlob #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.880742093242215);
    msg.setSource(14590U);
    msg.setSourceEntity(249U);
    msg.setDestination(37143U);
    msg.setDestinationEntity(229U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.8035659370653795);
    msg.setSource(52413U);
    msg.setSourceEntity(90U);
    msg.setDestination(4781U);
    msg.setDestinationEntity(95U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Aborted msg;
    msg.setTimeStamp(0.8630393512596913);
    msg.setSource(35463U);
    msg.setSourceEntity(138U);
    msg.setDestination(10334U);
    msg.setDestinationEntity(231U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Aborted #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.6628185231329013);
    msg.setSource(3684U);
    msg.setSourceEntity(162U);
    msg.setDestination(33714U);
    msg.setDestinationEntity(238U);
    msg.target = 48605U;
    msg.bearing = 0.10820135283526422;
    msg.elevation = 0.5911375051122777;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.9256084189003569);
    msg.setSource(3715U);
    msg.setSourceEntity(106U);
    msg.setDestination(15493U);
    msg.setDestinationEntity(93U);
    msg.target = 38540U;
    msg.bearing = 0.1150139426723914;
    msg.elevation = 0.6435754042991406;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAngles msg;
    msg.setTimeStamp(0.7621415800716126);
    msg.setSource(65319U);
    msg.setSourceEntity(163U);
    msg.setDestination(47457U);
    msg.setDestinationEntity(198U);
    msg.target = 16738U;
    msg.bearing = 0.4033689210260243;
    msg.elevation = 0.9132401297542576;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAngles #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.454467729846463);
    msg.setSource(45334U);
    msg.setSourceEntity(149U);
    msg.setDestination(56869U);
    msg.setDestinationEntity(23U);
    msg.target = 49423U;
    msg.x = 0.8923134755315771;
    msg.y = 0.0242730284586552;
    msg.z = 0.04438551617215536;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.21892732862060382);
    msg.setSource(52606U);
    msg.setSourceEntity(228U);
    msg.setDestination(42618U);
    msg.setDestinationEntity(133U);
    msg.target = 57515U;
    msg.x = 0.21288418445415846;
    msg.y = 0.8730426881242237;
    msg.z = 0.5637523909997628;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPosition msg;
    msg.setTimeStamp(0.5343126357621265);
    msg.setSource(14665U);
    msg.setSourceEntity(139U);
    msg.setDestination(42478U);
    msg.setDestinationEntity(107U);
    msg.target = 35550U;
    msg.x = 0.5794372196357146;
    msg.y = 0.08098538610354244;
    msg.z = 0.646557715980126;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.2516139550977655);
    msg.setSource(38185U);
    msg.setSourceEntity(185U);
    msg.setDestination(34532U);
    msg.setDestinationEntity(4U);
    msg.target = 27045U;
    msg.lat = 0.8838790093621015;
    msg.lon = 0.7716411065689376;
    msg.z_units = 37U;
    msg.z = 0.9499172939186225;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.20698346840645931);
    msg.setSource(21677U);
    msg.setSourceEntity(254U);
    msg.setDestination(26811U);
    msg.setDestinationEntity(118U);
    msg.target = 61965U;
    msg.lat = 0.2467429172393244;
    msg.lon = 0.7003379867674483;
    msg.z_units = 215U;
    msg.z = 0.21870354942547077;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFix msg;
    msg.setTimeStamp(0.5792387443091228);
    msg.setSource(7050U);
    msg.setSourceEntity(185U);
    msg.setDestination(4U);
    msg.setDestinationEntity(241U);
    msg.target = 52870U;
    msg.lat = 0.6194075666926684;
    msg.lon = 0.8240998290436764;
    msg.z_units = 204U;
    msg.z = 0.803441257488088;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFix #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.8650667627937126);
    msg.setSource(46248U);
    msg.setSourceEntity(157U);
    msg.setDestination(40690U);
    msg.setDestinationEntity(35U);
    msg.locale.assign("TIOUCWITXNLCBFBUQVCTQIPERCHYHPOUFESBJJKJBAJIPBGMKMECJQLDWHZEDROXDFWSOZZKXHIUVKQXGOUHDNZYNPSLKTSWZRMYIFSYAJVVFMHUQDTDAPTMYWDVJHRDAMPIRJBBATVYRMOQQNFGKCZGOVPAKLCMEZYWVXIXWEUVFRTZBXXMEGVLCWALFANNLHDNYRSUFKZATALFQJSBZEXOPEOGSIGYUWPOWEQBKDLLMYQCIPJXRSGTKSN");
    const signed char tmp_msg_0[] = {77, 110, -108, 67, 38, -77, -12, -110, 64, -88, -89, 31, 39, 106, -65, 63, -38, -91, 92, -104, -70, -43, 110, 101, -105, 92, -100, 98, -77, -60, -80, 50, 95, 70, 97, -10, 39};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.8028533810912807);
    msg.setSource(53044U);
    msg.setSourceEntity(166U);
    msg.setDestination(57749U);
    msg.setDestinationEntity(94U);
    msg.locale.assign("EASEUJZZEXZVRPJZCWMGNBNLWHGMWZARTYVEXWDHBJCUIPARKPWFFULPIFFILLHVUODKRLQGCQSQGSGCXKHOIXPIFETUACKRCQCCAHTLOSBIKBCEZBVDFOSTSAXLUGYDBVOMVKRODTAYJZFOXWTZNHHNMSHGGABFKVTPEXKMYWJFOJYMXEMVMVRQJQDPYNEBIYRTIJWYDAULDDIQZPUM");
    const signed char tmp_msg_0[] = {-109, -15, -113, 42, 93, -13, -114, -67, 28, 98, -79, -88, 12, 116, 19, -50, -7, -122, -14, -107, -50, 101, -113, 67, 102, -18, -78, 82, -44, 38, -55, 5, 110, 54, 122, 17, 79, 11, -105, 17, -90, 1, -123, -103, 16, -44, -40, 26, 31, -89, 101, -75, -72, -68, 81, 21, 82, 125, -56, -60, 107, 54, 114, -67, -28, -63, 77, 77, -107, 85, -53, -26, 39, 0, 58, -98, 10, -97, 43, 32, -26, 79, 26, 124, -42, 124, 87, -69, 62, -62, 95, -2, 18, 126, -84, -101, 54, -34, -98, 123, -25, -119, 42, -121, 111, 76, -29, -92, -122, 63, -70, -122, -126, -68, -5, 121, 119, -30, -62, -16, 12, 77, 63, 22, -60, 11, -28, -118, 98, -22, -101, -115, 120, 54, -99, 31, -22, -11, 109, -23, 39, 69, 103, 20, -52, 112, 16, -10, -37, 5, -109, 57, -49};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ParametersXml msg;
    msg.setTimeStamp(0.4111869898271038);
    msg.setSource(22529U);
    msg.setSourceEntity(106U);
    msg.setDestination(25283U);
    msg.setDestinationEntity(96U);
    msg.locale.assign("JRKLJHAFPZOSGGLELELPDZAOWFUDJPJWBSHAVADUKASPPTSZQGYUHLWDJFURMUGXLITUKYKSHPTZXMCKHMXFKODCRTWKNRBYGZVQGWTNBIBNQGNROHNOKTDISJFYEZIXVNTBVGDVJQGEWCAYQQVCBSBFMMENOBQINYEJTSYECAAXVLRONGEXKUFQJPMZRFASHHRHVECI");
    const signed char tmp_msg_0[] = {95, 60, 34, -113, 64, 83, -20, 51, -55, -86, -25, -84, 109, -114, 13, 75, 44, -68, -4, 63, 106, 115, 45, -113, 59, -81, -34, 61, 91, 31, -100, -108, -52, -75, -83};
    msg.config.assign(tmp_msg_0, tmp_msg_0 + sizeof(tmp_msg_0));

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.5114169932247126);
    msg.setSource(14728U);
    msg.setSourceEntity(141U);
    msg.setDestination(65192U);
    msg.setDestinationEntity(109U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.524471964851437);
    msg.setSource(18245U);
    msg.setSourceEntity(243U);
    msg.setDestination(25546U);
    msg.setDestinationEntity(40U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetParametersXml msg;
    msg.setTimeStamp(0.2837558756646389);
    msg.setSource(55328U);
    msg.setSourceEntity(75U);
    msg.setDestination(52291U);
    msg.setDestinationEntity(214U);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetParametersXml #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.6504602185031965);
    msg.setSource(27354U);
    msg.setSourceEntity(161U);
    msg.setDestination(46821U);
    msg.setDestinationEntity(170U);
    msg.camid = 177U;
    msg.x = 63819U;
    msg.y = 62696U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.6177419533493586);
    msg.setSource(24092U);
    msg.setSourceEntity(20U);
    msg.setDestination(6104U);
    msg.setDestinationEntity(195U);
    msg.camid = 215U;
    msg.x = 11682U;
    msg.y = 24609U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SetImageCoords msg;
    msg.setTimeStamp(0.22070369472448492);
    msg.setSource(7283U);
    msg.setSourceEntity(239U);
    msg.setDestination(58348U);
    msg.setDestinationEntity(170U);
    msg.camid = 218U;
    msg.x = 18842U;
    msg.y = 52216U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.9606274714601282);
    msg.setSource(557U);
    msg.setSourceEntity(39U);
    msg.setDestination(50668U);
    msg.setDestinationEntity(38U);
    msg.camid = 19U;
    msg.x = 12027U;
    msg.y = 12185U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.8982175455342182);
    msg.setSource(30101U);
    msg.setSourceEntity(147U);
    msg.setDestination(19226U);
    msg.setDestinationEntity(23U);
    msg.camid = 10U;
    msg.x = 48800U;
    msg.y = 53615U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetImageCoords msg;
    msg.setTimeStamp(0.3899085203714492);
    msg.setSource(54849U);
    msg.setSourceEntity(102U);
    msg.setDestination(1679U);
    msg.setDestinationEntity(15U);
    msg.camid = 68U;
    msg.x = 27227U;
    msg.y = 44758U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetImageCoords #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.145456252724099);
    msg.setSource(60212U);
    msg.setSourceEntity(45U);
    msg.setDestination(20900U);
    msg.setDestinationEntity(250U);
    msg.tracking = 130U;
    msg.lat = 0.8957385169509898;
    msg.lon = 0.06462076515999782;
    msg.x = 0.06949075047022168;
    msg.y = 0.915922503302678;
    msg.z = 0.38258451789739734;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.7057531896213574);
    msg.setSource(28260U);
    msg.setSourceEntity(89U);
    msg.setDestination(2320U);
    msg.setDestinationEntity(97U);
    msg.tracking = 104U;
    msg.lat = 0.7610961905809914;
    msg.lon = 0.6251313365170107;
    msg.x = 0.0307192991709051;
    msg.y = 0.38278327245482446;
    msg.z = 0.9564996481171484;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GetWorldCoordinates msg;
    msg.setTimeStamp(0.8793658683770009);
    msg.setSource(9336U);
    msg.setSourceEntity(200U);
    msg.setDestination(3731U);
    msg.setDestinationEntity(181U);
    msg.tracking = 72U;
    msg.lat = 0.856352513417702;
    msg.lon = 0.8916889072290597;
    msg.x = 0.7252165871240627;
    msg.y = 0.8249510318391574;
    msg.z = 0.9492341600806293;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GetWorldCoordinates #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.7693410234719015);
    msg.setSource(6395U);
    msg.setSourceEntity(114U);
    msg.setDestination(20458U);
    msg.setDestinationEntity(54U);
    msg.target.assign("XHELXJHIKGGKXKIUAS");
    msg.lbearing = 0.18896340426141334;
    msg.lelevation = 0.8001794478783837;
    msg.bearing = 0.2536600426552962;
    msg.elevation = 0.13490555929503378;
    msg.phi = 0.7144016737334433;
    msg.theta = 0.28378348722643976;
    msg.psi = 0.9915756847795487;
    msg.accuracy = 0.64386013605351;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.6593979236349167);
    msg.setSource(33915U);
    msg.setSourceEntity(169U);
    msg.setDestination(33190U);
    msg.setDestinationEntity(67U);
    msg.target.assign("EHSWUPXVDAJLBWXJHNPDIGSNBIEPUDHKURZSKFEBVRMGSPBZWDXBMGTRQCYMONUMZNRLMVOFQSVQCJUFYILAVUTJJKRKFQGROITTQSDTCAYELVTPNUSLOAKJKHDWXXWGPRTARYJNLSTHFEKCSJOERQJOWQVPOGPAZFOIIJOWCAOZGCLXFPXKVUEEPLEFWBZMAYCILYGKGXIWHDHMQAFVUWIDQTBMDENXMNMBHCYXALYQGYZTRZDIBFCKNBHYHV");
    msg.lbearing = 0.31934237613389604;
    msg.lelevation = 0.4332298255201491;
    msg.bearing = 0.8735025671223329;
    msg.elevation = 0.9463393270056777;
    msg.phi = 0.48991232869935364;
    msg.theta = 0.18489446376062457;
    msg.psi = 0.1791301621473811;
    msg.accuracy = 0.4545928788743362;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblAnglesExtended msg;
    msg.setTimeStamp(0.8407556983252018);
    msg.setSource(14226U);
    msg.setSourceEntity(249U);
    msg.setDestination(54808U);
    msg.setDestinationEntity(20U);
    msg.target.assign("KCBGFVLWEGDRTRNAWLSWQUSSMXDDIEKHJRTSLGINNKNAYSDPXFQXEACUJYCKJEVPECDOZMTIGEALBBZZPAYVHJOVMLVUGRZYKNZLQOBEGJOMHZIQUONYLICDIZMRGTGDRWKZNJOQVKHMFNXPTDTBMAXPNWGOUFTGOXFUCDINE");
    msg.lbearing = 0.8621645373140777;
    msg.lelevation = 0.6406437074203648;
    msg.bearing = 0.3751251162232323;
    msg.elevation = 0.6756219434290206;
    msg.phi = 0.634598822149247;
    msg.theta = 0.6834846544088192;
    msg.psi = 0.9978114096575117;
    msg.accuracy = 0.7785226926163239;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblAnglesExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.7179831718176499);
    msg.setSource(26844U);
    msg.setSourceEntity(167U);
    msg.setDestination(55357U);
    msg.setDestinationEntity(5U);
    msg.target.assign("GWZBSEZANRVAGDEOUSQOI");
    msg.x = 0.09570989159699805;
    msg.y = 0.33408855098246903;
    msg.z = 0.1560173052619639;
    msg.n = 0.13664941775916162;
    msg.e = 0.012517382639415708;
    msg.d = 0.5344906792870686;
    msg.phi = 0.7209875142193263;
    msg.theta = 0.6239600072761927;
    msg.psi = 0.313095237226384;
    msg.accuracy = 0.010637901180145293;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.07705768757073816);
    msg.setSource(38700U);
    msg.setSourceEntity(245U);
    msg.setDestination(55086U);
    msg.setDestinationEntity(244U);
    msg.target.assign("NCFNEEQGRPWIZXZHVWKMAXIOLGPJGHRWAUTMFFFXYDCIVXUGLTILHJTNAWLURQOOBBSWUSMZGQHJSZRTLYDMQXIXCMFBVBVZQGKVWPRYPHFKDZROMJWRQJLXCLZHUZQUJNABSLGPDIKSWSYAEKUCNJKKATWLCFBYWQRZID");
    msg.x = 0.0858655440168673;
    msg.y = 0.7013947932195065;
    msg.z = 0.22989507330109127;
    msg.n = 0.27916207739461474;
    msg.e = 0.42509222141159464;
    msg.d = 0.6335333767113047;
    msg.phi = 0.6196381696481572;
    msg.theta = 0.3714103120273139;
    msg.psi = 0.39961897196612095;
    msg.accuracy = 0.9308176755125964;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblPositionExtended msg;
    msg.setTimeStamp(0.5049016739263099);
    msg.setSource(15257U);
    msg.setSourceEntity(192U);
    msg.setDestination(39618U);
    msg.setDestinationEntity(120U);
    msg.target.assign("GQLZOTMTDEHTMUWHDJKDJHKWMAKCKNBJHFGGNCKRVGNBADLXOZAJPNVVHLTLPVP");
    msg.x = 0.9891596696240226;
    msg.y = 0.017714626235599273;
    msg.z = 0.6242301587555685;
    msg.n = 0.7870560142127864;
    msg.e = 0.7784789010668193;
    msg.d = 0.15114760974803532;
    msg.phi = 0.8867967028804292;
    msg.theta = 0.9932693113055359;
    msg.psi = 0.8674970618389133;
    msg.accuracy = 0.9706514361393924;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblPositionExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.9595422460381143);
    msg.setSource(51961U);
    msg.setSourceEntity(244U);
    msg.setDestination(46067U);
    msg.setDestinationEntity(214U);
    msg.target.assign("ZAMEBCWGCJPPAPJUTDGDLBKKIHQEDFKSNVJCUULWDBIDZDOOXOGMTFJQHCZIXQWPWPLRNBDTLVFKWWVMCLXIDBGRBKORFYQXBXJAIZLTOSTERITQKAAQVBEGNLZJYGLHESATMVVNCIMSCUYAVQZQSNHPJMDGMCYARRNXKAEJFBUQPXNPOIULNVYSFKJWEMMHSICSHSTRPORZEUGOHSMFERIHBXJAFYTF");
    msg.lat = 0.1389179770518819;
    msg.lon = 0.931997091610236;
    msg.z_units = 184U;
    msg.z = 0.028184040010318934;
    msg.accuracy = 0.4325636887943697;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.3237644358434678);
    msg.setSource(34890U);
    msg.setSourceEntity(213U);
    msg.setDestination(13994U);
    msg.setDestinationEntity(139U);
    msg.target.assign("IVAPANRAKVBETZYJDQEOORPLKOPPQNMXPVNSMZXYJLMHFDWUQGEDNXPIRKYABAZWBMFSGMXBYDRPSNHBNLLOBYORANJXNXCCUDVKEZVOJVZMCSIUGFICUIYASCMWNYDHBZCZWCCGSXNURKRUZHTOBZUJMKEHFZ");
    msg.lat = 0.866055818615922;
    msg.lon = 0.044047993637905125;
    msg.z_units = 142U;
    msg.z = 0.2497039039824095;
    msg.accuracy = 0.3630539758197002;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblFixExtended msg;
    msg.setTimeStamp(0.7235934824221952);
    msg.setSource(31885U);
    msg.setSourceEntity(89U);
    msg.setDestination(45443U);
    msg.setDestinationEntity(51U);
    msg.target.assign("AMWMJSYMFYUVTRYEWJINKDWCENRQXSVTYQZKEXLCTOHHIDQ");
    msg.lat = 0.3199271468707524;
    msg.lon = 0.3639479742919819;
    msg.z_units = 32U;
    msg.z = 0.1998163256838118;
    msg.accuracy = 0.16535954833476785;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblFixExtended #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.26281792296667683);
    msg.setSource(41664U);
    msg.setSourceEntity(171U);
    msg.setDestination(65005U);
    msg.setDestinationEntity(219U);
    msg.name.assign("KSPXBFALDTYAODXETMIGXIJNAYOMXPOGHXFFDPEUKUUKAVJSNCCBYFLQITEUMPEFRUFDMZHRASHRTZBKHFDIDPRZKGXIEHCITCCVOXOGMSMXSDWMPYIGEWODECRTVRJQOJKZNHIXMLTCYJUKSPWRNLIFSMYVNRPTJCBVWBHNHBAQVUUQKTQBYUQLABTQAESSZEH");
    msg.lat = 0.8360354704027421;
    msg.lon = 0.16429097865942022;
    msg.z = 0.00776976825805531;
    msg.z_units = 203U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.4763254731326517);
    msg.setSource(13388U);
    msg.setSourceEntity(67U);
    msg.setDestination(62583U);
    msg.setDestinationEntity(58U);
    msg.name.assign("RLCFTXBAJQWGNCMAGPFNUQXUEQFEMHCLROEAVOUPPXEBMSNSTAUOXUIWHYFUDTTRROGBTCZMCDBXYSHHGLFYZYAMVERWNXEGQJRZVKDUGBAUNSKVQDGINDNVORIEVZHJULMZLIJKJGTWKDLAJACIXFZFLUEIYWSKLLQZPIJOSHFCXJVBSRHGWIPYKSYHKPODMQKDNOIXBYBYRYFEDK");
    msg.lat = 0.6797055100163253;
    msg.lon = 0.9540450525981914;
    msg.z = 0.8632333765143761;
    msg.z_units = 156U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblModem msg;
    msg.setTimeStamp(0.7699004819719901);
    msg.setSource(56233U);
    msg.setSourceEntity(195U);
    msg.setDestination(7309U);
    msg.setDestinationEntity(76U);
    msg.name.assign("MZWULTWQZIVDTWROILNUJWFLQFQTCLUKRPAUHTHKGXRVBBZZPPVBTSHKAMFBZPJGXDZXEYREXIJPFNKQDNYIVLWIWWGGZREEBIEPOXZRLOOUJHRCHZUBKQEAZKGAFYCAUWJQMTAATXKYCHXWRSQSPBVLFGNSLTSDJUMYGDVABKHEPRVJYMONILTUDEGDYNKMIA");
    msg.lat = 0.8967775501397444;
    msg.lon = 0.7960216124467974;
    msg.z = 0.4367496820539636;
    msg.z_units = 252U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblModem #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.27839402248128364);
    msg.setSource(23605U);
    msg.setSourceEntity(213U);
    msg.setDestination(38164U);
    msg.setDestinationEntity(56U);
    msg.op = 14U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.1792774276470568);
    msg.setSource(31053U);
    msg.setSourceEntity(9U);
    msg.setDestination(63562U);
    msg.setDestinationEntity(16U);
    msg.op = 220U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UsblConfig msg;
    msg.setTimeStamp(0.6004953085915332);
    msg.setSource(10911U);
    msg.setSourceEntity(164U);
    msg.setDestination(61649U);
    msg.setDestinationEntity(86U);
    msg.op = 95U;
    IMC::UsblModem tmp_msg_0;
    tmp_msg_0.name.assign("HXKXKEZNVENVQKLGVVSLRICBXYVZGGPBZHVSMQRFCGVKDUMMCXOEASGHJAKXRJBJEGQLCHZBXZOFEEWNJLTHMNOPSLQZNXBUNWMTDBTPAUYZZIAWMYUWDHOWPDNLCSFSNPMWQGRUFGIYWQRPTDDSPBYHRPAKWWIT");
    tmp_msg_0.lat = 0.1098458330196278;
    tmp_msg_0.lon = 0.10645842269945194;
    tmp_msg_0.z = 0.5961509298431547;
    tmp_msg_0.z_units = 215U;
    msg.modems.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UsblConfig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.2886308094393526);
    msg.setSource(46295U);
    msg.setSourceEntity(206U);
    msg.setDestination(2920U);
    msg.setDestinationEntity(208U);
    msg.value = 0.010395955549587388;
    msg.type = 201U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.4512945240079924);
    msg.setSource(25432U);
    msg.setSourceEntity(80U);
    msg.setDestination(28518U);
    msg.setDestinationEntity(73U);
    msg.value = 0.1540009346017257;
    msg.type = 75U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DissolvedOrganicMatter msg;
    msg.setTimeStamp(0.3968464519582646);
    msg.setSource(48974U);
    msg.setSourceEntity(10U);
    msg.setDestination(19329U);
    msg.setDestinationEntity(1U);
    msg.value = 0.6653713238075066;
    msg.type = 19U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.8943824192675782);
    msg.setSource(22376U);
    msg.setSourceEntity(85U);
    msg.setDestination(6482U);
    msg.setDestinationEntity(6U);
    msg.value = 0.4120434696279909;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.5347611282066407);
    msg.setSource(39823U);
    msg.setSourceEntity(148U);
    msg.setDestination(60372U);
    msg.setDestinationEntity(59U);
    msg.value = 0.4414500058690026;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::OpticalBackscatter msg;
    msg.setTimeStamp(0.75642273410327);
    msg.setSource(12248U);
    msg.setSourceEntity(37U);
    msg.setDestination(25878U);
    msg.setDestinationEntity(105U);
    msg.value = 0.7575930308632873;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("OpticalBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.5032252563362136);
    msg.setSource(24230U);
    msg.setSourceEntity(3U);
    msg.setDestination(20222U);
    msg.setDestinationEntity(176U);
    msg.timestamp_last_service = 0.6695536365535326;
    msg.time_next_service = 0.49785687537044054;
    msg.time_motor_next_service = 0.5062686139720671;
    msg.time_idle_ground = 0.33378807704985736;
    msg.time_idle_air = 0.2896747730983782;
    msg.time_idle_water = 0.6309813173368521;
    msg.time_idle_underwater = 0.7607789051414404;
    msg.time_idle_unknown = 0.4135863217442305;
    msg.time_motor_ground = 0.1265397194166752;
    msg.time_motor_air = 0.7622070643281013;
    msg.time_motor_water = 0.7114972533950557;
    msg.time_motor_underwater = 0.6887044485331199;
    msg.time_motor_unknown = 0.7957132728929366;
    msg.rpm_min = -22144;
    msg.rpm_max = -31611;
    msg.depth_max = 0.5596828283548833;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.8293538697062962);
    msg.setSource(33472U);
    msg.setSourceEntity(246U);
    msg.setDestination(28725U);
    msg.setDestinationEntity(39U);
    msg.timestamp_last_service = 0.8153158627721456;
    msg.time_next_service = 0.6530864486077408;
    msg.time_motor_next_service = 0.9613269731563543;
    msg.time_idle_ground = 0.5954121157548955;
    msg.time_idle_air = 0.2990370996813486;
    msg.time_idle_water = 0.20467111041886654;
    msg.time_idle_underwater = 0.5044616289957279;
    msg.time_idle_unknown = 0.7769058646220814;
    msg.time_motor_ground = 0.44239397485350385;
    msg.time_motor_air = 0.6099390396324539;
    msg.time_motor_water = 0.304110303344719;
    msg.time_motor_underwater = 0.8504901568487252;
    msg.time_motor_unknown = 0.9509896536813667;
    msg.rpm_min = -28519;
    msg.rpm_max = -742;
    msg.depth_max = 0.9007023227308336;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Tachograph msg;
    msg.setTimeStamp(0.5705733932179314);
    msg.setSource(30166U);
    msg.setSourceEntity(248U);
    msg.setDestination(19857U);
    msg.setDestinationEntity(204U);
    msg.timestamp_last_service = 0.902334328672535;
    msg.time_next_service = 0.7223199365882804;
    msg.time_motor_next_service = 0.6684453728424241;
    msg.time_idle_ground = 0.22639260012039464;
    msg.time_idle_air = 0.6947914698858807;
    msg.time_idle_water = 0.26407950924549295;
    msg.time_idle_underwater = 0.6668658931518985;
    msg.time_idle_unknown = 0.9592301702213931;
    msg.time_motor_ground = 0.3078701539082751;
    msg.time_motor_air = 0.3465771753447575;
    msg.time_motor_water = 0.7128144494005086;
    msg.time_motor_underwater = 0.9587356728341024;
    msg.time_motor_unknown = 0.512063344078885;
    msg.rpm_min = 17950;
    msg.rpm_max = 4854;
    msg.depth_max = 0.07106222651063665;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Tachograph #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.8394311982928395);
    msg.setSource(19670U);
    msg.setSourceEntity(82U);
    msg.setDestination(47515U);
    msg.setDestinationEntity(42U);
    msg.severity = 199U;
    msg.text.assign("PKBWNPPLJOGERHKJACMOTWCRXHDIKBNAIGJAKRJYPNXDJUVHTGOJXCTYACUOMPBSKCZSMEIZWURLUYMFQDSYHJOQUFYCTTFREENZZTKITKGQTIGWFUKNYWEMQLFPILUKYZGRNMHXEBMQVPOELYBHJRFRUOFOINWSFRDSKSGEVVLJWYBSVQBPUQWXVXSHAHMVCDQMHDZMBITXPAGWNEANDBSYX");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.013530515354030714);
    msg.setSource(20288U);
    msg.setSourceEntity(231U);
    msg.setDestination(29312U);
    msg.setDestinationEntity(35U);
    msg.severity = 141U;
    msg.text.assign("DVOXACFQEHCTNBIKWSYWMVVUHWQEGTQIZSRIPGEDWYFRRDRBZVFXGKOSQMQEDGZUERMWHUWKIPCTMIJXBYYFOVSKBXXQEHSBUFPKOTCXPXJDPRZUEHTMWTOGIJNZJAVWAGTNDGKLYLZNSEOEU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ApmStatus msg;
    msg.setTimeStamp(0.8601330256067568);
    msg.setSource(19100U);
    msg.setSourceEntity(166U);
    msg.setDestination(38657U);
    msg.setDestinationEntity(64U);
    msg.severity = 33U;
    msg.text.assign("HOYOJUXCAFWGKDRFCEGWEYUWJTZPGGXURHMNDXRRZORDTNCNYQBPPKALXMOAOTVYBTSESOPJDBPKDEFFALBIJQUCDEPWJOSAQCNJNVPSFAQYUPIHPVCBYZYZMDROBXGKARUYXJFKLZLESMTVDNPVJDUFV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ApmStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.8245440214424599);
    msg.setSource(62904U);
    msg.setSourceEntity(28U);
    msg.setDestination(35626U);
    msg.setDestinationEntity(146U);
    msg.channel = -14;
    msg.value = 1793878881;
    msg.gain = 249U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.22751404533582575);
    msg.setSource(22420U);
    msg.setSourceEntity(52U);
    msg.setDestination(52280U);
    msg.setDestinationEntity(60U);
    msg.channel = 42;
    msg.value = 1251282952;
    msg.gain = 108U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SadcReadings msg;
    msg.setTimeStamp(0.3257250975562638);
    msg.setSource(25560U);
    msg.setSourceEntity(130U);
    msg.setDestination(38186U);
    msg.setDestinationEntity(68U);
    msg.channel = 64;
    msg.value = 219886112;
    msg.gain = 98U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SadcReadings #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.656656938990537);
    msg.setSource(57327U);
    msg.setSourceEntity(208U);
    msg.setDestination(63583U);
    msg.setDestinationEntity(175U);
    msg.ch01 = 0.11426708967959454;
    msg.ch02 = 0.9335322860487848;
    msg.ch03 = 0.3089786989527218;
    msg.ch04 = 0.7961922756101081;
    msg.ch05 = 0.293311552707903;
    msg.ch06 = 0.13167560139141876;
    msg.ch07 = 0.031674876372385086;
    msg.ch08 = 0.9944148625745489;
    msg.ch09 = 0.7739158613951784;
    msg.ch10 = 0.1757350544908175;
    msg.ch11 = 0.33578976432619767;
    msg.ch12 = 0.7061539541870621;
    msg.ch13 = 0.12042094405813086;
    msg.ch14 = 0.8851071952860838;
    msg.ch15 = 0.32244542167366785;
    msg.ch16 = 0.8518951592531879;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.7893637267454084);
    msg.setSource(18808U);
    msg.setSourceEntity(250U);
    msg.setDestination(16551U);
    msg.setDestinationEntity(211U);
    msg.ch01 = 0.4069412580055103;
    msg.ch02 = 0.8111004911478182;
    msg.ch03 = 0.4308502686388179;
    msg.ch04 = 0.397780116821971;
    msg.ch05 = 0.21759233865661498;
    msg.ch06 = 0.41411548779398477;
    msg.ch07 = 0.6197525647005718;
    msg.ch08 = 0.885222422374242;
    msg.ch09 = 0.8567497863427508;
    msg.ch10 = 0.4873728964694052;
    msg.ch11 = 0.9592683096682834;
    msg.ch12 = 0.6648752687016896;
    msg.ch13 = 0.4172474346796766;
    msg.ch14 = 0.875649668605452;
    msg.ch15 = 0.3367375395091048;
    msg.ch16 = 0.6706525596256862;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DmsDetection msg;
    msg.setTimeStamp(0.3516689539304453);
    msg.setSource(43443U);
    msg.setSourceEntity(201U);
    msg.setDestination(16756U);
    msg.setDestinationEntity(211U);
    msg.ch01 = 0.31176893077245493;
    msg.ch02 = 0.8707890941091289;
    msg.ch03 = 0.759142798833668;
    msg.ch04 = 0.3999322725916199;
    msg.ch05 = 0.0034425679436453915;
    msg.ch06 = 0.7892233107685468;
    msg.ch07 = 0.8214839592724874;
    msg.ch08 = 0.3623013927112758;
    msg.ch09 = 0.4083517170645855;
    msg.ch10 = 0.2505782215738208;
    msg.ch11 = 0.896613876402288;
    msg.ch12 = 0.31044596656812296;
    msg.ch13 = 0.3584714264110844;
    msg.ch14 = 0.805199270832742;
    msg.ch15 = 0.4408576056541188;
    msg.ch16 = 0.5258537321139855;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DmsDetection #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.24810715456211863);
    msg.setSource(10197U);
    msg.setSourceEntity(97U);
    msg.setDestination(52126U);
    msg.setDestinationEntity(31U);
    msg.op = 39U;
    msg.lat = 0.8882132154626471;
    msg.lon = 0.0017198087707717136;
    msg.height = 0.4682284079832345;
    msg.depth = 0.7271445007565442;
    msg.alt = 0.685867899755273;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.7726869439551058);
    msg.setSource(34554U);
    msg.setSourceEntity(32U);
    msg.setDestination(25308U);
    msg.setDestinationEntity(89U);
    msg.op = 213U;
    msg.lat = 0.21016927398440166;
    msg.lon = 0.7609209840238834;
    msg.height = 0.6588101281544375;
    msg.depth = 0.6139069118396462;
    msg.alt = 0.24584428578474427;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::HomePosition msg;
    msg.setTimeStamp(0.7164110710452559);
    msg.setSource(40313U);
    msg.setSourceEntity(14U);
    msg.setDestination(21131U);
    msg.setDestinationEntity(169U);
    msg.op = 53U;
    msg.lat = 0.07206960371716187;
    msg.lon = 0.8163319434421928;
    msg.height = 0.21560666093814973;
    msg.depth = 0.18102216341996047;
    msg.alt = 0.7014648618916064;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("HomePosition #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.06559776689267993);
    msg.setSource(3149U);
    msg.setSourceEntity(51U);
    msg.setDestination(48915U);
    msg.setDestinationEntity(174U);
    msg.name.assign("SKNEZSSQTERJODOYWJEDJMEWZBRFZPZLIQVVTOIWRLLGKEREKTTRIEKUQKHGLPHULRZDBMLNPJGYNHJANQZTOQFMQFFYGSIKXTEWVJWARDAXMCSAFHFAMWGGSCNYDWIXBNHKNAUKUEYVAVGPJCUMMOPCGPCOQINWCZCMIYUJMAZDQHGOBOULNUVXBVCSXBZCYKDLPFWTBXRBMUEPVDSHBTGYDURWKIHQLBYTILTCOFQHJPNDJRFZSOHXIPASVF");
    msg.value = 110U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.32008201177099493);
    msg.setSource(22772U);
    msg.setSourceEntity(81U);
    msg.setDestination(29565U);
    msg.setDestinationEntity(170U);
    msg.name.assign("QOXVBGAODOLMREDPUWPKYQUAUIGKKIXUAVZCRBNEMQGSOKBRWENPICWSHTNCIFUJFZTSSGWFOMLNDLMKGMVUXRVGJCSFLPMOYQBKKUPDWTRSGTICELXDCWXJVTEAJKOZNABEBXTBQPCHQFQNCBTWJATRPOGYYZHFSKTUHLDFHFZBLTVMAJBAMXYGIRAGRZHYVXDYI");
    msg.value = 173U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioState msg;
    msg.setTimeStamp(0.42635852026875565);
    msg.setSource(57745U);
    msg.setSourceEntity(106U);
    msg.setDestination(10736U);
    msg.setDestinationEntity(54U);
    msg.name.assign("ZFSOXTCVAATNSJRAVGKRSXVWYGJKJQFVQCXHWCRVCIOCMQCIBTNJQYZGCIIOYJYXSRDNNZULLEAFAFVMMDFYDFBRYHTDOBRNUXDPSLEKTKZEPTGDOMLVFAVSGBWUEOGHRMKUMWIARFBLEWNXJVEMKTWKZYEHBHDESMSLCIVKJUQNEEDHUHPJWRQOZZTZLOCYUPTIXSBBIHHIUBQXCQJPKFXHPZQPLQDXRGLWSWYBGO");
    msg.value = 187U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.9681853987775959);
    msg.setSource(208U);
    msg.setSourceEntity(1U);
    msg.setDestination(36828U);
    msg.setDestinationEntity(108U);
    msg.name.assign("HZQUAKMGCBWMDYPLOQRIJFVJJRPLVIFKIIBLTVQMGXOHUOMIAMPPNZUMXEEMMCXHBZUNGDYTHSAJSNVYWCRMWRRIPSGGWFHAPJDBKYQDERKGBSINPVRKXNFDQBLHNAOVWFFFUGZLZYPENWBRWCBHQYSWWOULHOHYJCDXKATTGZTDFSUTKBZIJQLNVXODPQKSCVJZQBCGSFJLKYREXNDS");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.42632514851588743);
    msg.setSource(54372U);
    msg.setSourceEntity(29U);
    msg.setDestination(33106U);
    msg.setDestinationEntity(146U);
    msg.name.assign("GLHHTZVONUZTEPCYJDXXQTWQEWHBRYNWZPGFXMVGFLLRFWBZTLDKFLKACFRTGJLXTPGNJACNDGBVPPDMUZMENXSYMMINJFPNYPFHIKODIVAKIIXDEIVALJUBKKOLNBLZWCSQSVPCKUWZATRRGCCEKDXVLDCO");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateGet msg;
    msg.setTimeStamp(0.24198546397287057);
    msg.setSource(47939U);
    msg.setSourceEntity(113U);
    msg.setDestination(26991U);
    msg.setDestinationEntity(252U);
    msg.name.assign("BFDITDKIUOSRQVGHFVWGKZJTPYJDFTALUQEYLAOGMBYPCRSSSAMZKVXYNGTOBGICYJSUWMHMVURKAXUZIFFONOQOCUFEDHRWDAQOAUOPWGWQZMENOJEFDJEWCBPZTNNMMXIZGXTWHLKTDJHRHEXVZXCKYGPXBLMTIYKQPHVCZLAICUGLTECEWWPARJFLJVBZBMHSQJUABNPNOYRRDSSKINDQPHPFBSB");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateGet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.3862477593274174);
    msg.setSource(8231U);
    msg.setSourceEntity(120U);
    msg.setDestination(50992U);
    msg.setDestinationEntity(152U);
    msg.name.assign("FCXPXTKFZOTNAWMZFOBPULPMYBDJRRFPRUQDKIGZMVEFGYTOQIBUICMCIUKSEINDXQIQYEVAEQEDIGTXYWUGYEJVRDHLOWJZJCQWTGFXBAWCHNPWDJOUMVXEHKFZWNWQDPVTDKEHVWBIXCAJSSZINEABTMSHILXAZUSLWLBSJYAURZTONQFZUNGMHKPQLMYOSGDXOGVRNNJMGKFSKHGRUAOTYYOHPEHNVDJBPZCBRLALS");
    msg.value = 209U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.8796195190210263);
    msg.setSource(12503U);
    msg.setSourceEntity(234U);
    msg.setDestination(20509U);
    msg.setDestinationEntity(112U);
    msg.name.assign("DQOQCBERRMRMVQOWGVPLOSPWLLCZTSPMTXKPKHPJLYSSOUTBZJNMUVXVMZXKOOJZAAKYJATADPXYJDIDIYUZRSUPGSBCBEXWXPTGLLNGADJKHMNTYRQXEYIYQXMHUUAJIFSVJNGBCBIHOVOQIRKLCGIVFFCJTNLXHKFKEEWZUDFFXLRRGAUQSJBZFBWNZFEKWHKHO");
    msg.value = 36U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::GpioStateSet msg;
    msg.setTimeStamp(0.5807781612609166);
    msg.setSource(62324U);
    msg.setSourceEntity(41U);
    msg.setDestination(9297U);
    msg.setDestinationEntity(74U);
    msg.name.assign("SIVGDVWEWXDYPTMJCVXBZNIXHMBSZGWRDOHTFZGQPNXYFBGFWZIMTXOERWMMQJAUWSUNAX");
    msg.value = 113U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("GpioStateSet #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.23789321067473757);
    msg.setSource(26224U);
    msg.setSourceEntity(142U);
    msg.setDestination(11274U);
    msg.setDestinationEntity(30U);
    msg.value = 0.46641503308615584;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.3390229979683477);
    msg.setSource(29381U);
    msg.setSourceEntity(155U);
    msg.setDestination(65035U);
    msg.setDestinationEntity(80U);
    msg.value = 0.2977019933561673;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ColoredDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.16018507457010422);
    msg.setSource(9738U);
    msg.setSourceEntity(53U);
    msg.setDestination(10769U);
    msg.setDestinationEntity(32U);
    msg.value = 0.5690502970846436;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ColoredDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.3424209573161122);
    msg.setSource(22726U);
    msg.setSourceEntity(68U);
    msg.setDestination(62754U);
    msg.setDestinationEntity(225U);
    msg.value = 0.1211856116927491;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.527596811047025);
    msg.setSource(17405U);
    msg.setSourceEntity(86U);
    msg.setDestination(15705U);
    msg.setDestinationEntity(42U);
    msg.value = 0.37025652411805876;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::FluorescentDissolvedOrganicMatter msg;
    msg.setTimeStamp(0.2612224252417834);
    msg.setSource(7994U);
    msg.setSourceEntity(99U);
    msg.setDestination(16950U);
    msg.setDestinationEntity(244U);
    msg.value = 0.22330543282673787;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("FluorescentDissolvedOrganicMatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.8857983487120342);
    msg.setSource(29405U);
    msg.setSourceEntity(6U);
    msg.setDestination(18548U);
    msg.setDestinationEntity(181U);
    msg.ampl = 0.7426931887808075;
    msg.dir = 0.49768006152208877;
    msg.freq = 0.7114962725755617;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.9060562032082541);
    msg.setSource(20211U);
    msg.setSourceEntity(47U);
    msg.setDestination(48388U);
    msg.setDestinationEntity(42U);
    msg.ampl = 0.3223073501307602;
    msg.dir = 0.7885175957882574;
    msg.freq = 0.6202771119107093;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::WaveProfile msg;
    msg.setTimeStamp(0.5663195121902828);
    msg.setSource(12803U);
    msg.setSourceEntity(98U);
    msg.setDestination(17303U);
    msg.setDestinationEntity(51U);
    msg.ampl = 0.7134612611551409;
    msg.dir = 0.5826253782438426;
    msg.freq = 0.01775543528495882;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("WaveProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.008722586472209692);
    msg.setSource(3029U);
    msg.setSourceEntity(26U);
    msg.setDestination(21584U);
    msg.setDestinationEntity(230U);
    msg.value = 0.5781501678966134;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.9019481875062513);
    msg.setSource(35584U);
    msg.setSourceEntity(4U);
    msg.setDestination(25304U);
    msg.setDestinationEntity(49U);
    msg.value = 0.0722742517952134;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TotalMagIntensity msg;
    msg.setTimeStamp(0.4138661642671936);
    msg.setSource(58312U);
    msg.setSourceEntity(177U);
    msg.setDestination(8380U);
    msg.setDestinationEntity(231U);
    msg.value = 0.02423096057844165;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TotalMagIntensity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.2997740975427331);
    msg.setSource(3135U);
    msg.setSourceEntity(139U);
    msg.setDestination(39535U);
    msg.setDestinationEntity(209U);
    msg.value = 0.2575251248242104;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.6013423348068039);
    msg.setSource(12376U);
    msg.setSourceEntity(161U);
    msg.setDestination(29086U);
    msg.setDestinationEntity(89U);
    msg.value = 0.2186780598752529;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Power msg;
    msg.setTimeStamp(0.5209071508139261);
    msg.setSource(49413U);
    msg.setSourceEntity(6U);
    msg.setDestination(46897U);
    msg.setDestinationEntity(184U);
    msg.value = 0.2619000463519472;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Power #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.19485235926342892);
    msg.setSource(31487U);
    msg.setSourceEntity(19U);
    msg.setDestination(10999U);
    msg.setDestinationEntity(27U);
    msg.value = 0.2825464557932601;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.7863612569568091);
    msg.setSource(40654U);
    msg.setSourceEntity(139U);
    msg.setDestination(7705U);
    msg.setDestinationEntity(103U);
    msg.value = 0.11533007965625597;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::EstimatedFreq msg;
    msg.setTimeStamp(0.7576762478488216);
    msg.setSource(60236U);
    msg.setSourceEntity(8U);
    msg.setDestination(31083U);
    msg.setDestinationEntity(50U);
    msg.value = 0.2830981063122703;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("EstimatedFreq #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.9771397441574197);
    msg.setSource(63621U);
    msg.setSourceEntity(136U);
    msg.setDestination(29005U);
    msg.setDestinationEntity(195U);
    msg.id = -13;
    msg.state = -11;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.5556275503642577);
    msg.setSource(23223U);
    msg.setSourceEntity(123U);
    msg.setDestination(29644U);
    msg.setDestinationEntity(133U);
    msg.id = -118;
    msg.state = 63;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelayState msg;
    msg.setTimeStamp(0.698754743106447);
    msg.setSource(12650U);
    msg.setSourceEntity(179U);
    msg.setDestination(26962U);
    msg.setDestinationEntity(177U);
    msg.id = 40;
    msg.state = -23;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelayState #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.9202165077889369);
    msg.setSource(11725U);
    msg.setSourceEntity(91U);
    msg.setDestination(60946U);
    msg.setDestinationEntity(57U);
    msg.angle = 0.6858833889608779;
    msg.speed = 0.3461577292067811;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.23804204635393367);
    msg.setSource(40845U);
    msg.setSourceEntity(171U);
    msg.setDestination(14992U);
    msg.setDestinationEntity(212U);
    msg.angle = 0.10550534918645893;
    msg.speed = 0.08382753589547842;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::RelativeWind msg;
    msg.setTimeStamp(0.6709469588662272);
    msg.setSource(19337U);
    msg.setSourceEntity(113U);
    msg.setDestination(44765U);
    msg.setDestinationEntity(64U);
    msg.angle = 0.3101610962703225;
    msg.speed = 0.20422274104438087;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("RelativeWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.3756644274240536);
    msg.setSource(44420U);
    msg.setSourceEntity(106U);
    msg.setDestination(22339U);
    msg.setDestinationEntity(69U);
    msg.dir = 0.8266454835212366;
    msg.speed = 0.35733447416767694;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.25385081377790253);
    msg.setSource(13912U);
    msg.setSourceEntity(137U);
    msg.setDestination(13381U);
    msg.setDestinationEntity(246U);
    msg.dir = 0.4299595357904372;
    msg.speed = 0.12185967022051714;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AbsoluteWind msg;
    msg.setTimeStamp(0.07553757454932053);
    msg.setSource(61810U);
    msg.setSourceEntity(89U);
    msg.setDestination(40320U);
    msg.setDestinationEntity(32U);
    msg.dir = 0.693008154337079;
    msg.speed = 0.0037466918290571805;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AbsoluteWind #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.6862393310603551);
    msg.setSource(60471U);
    msg.setSourceEntity(60U);
    msg.setDestination(15566U);
    msg.setDestinationEntity(68U);
    msg.x = 0.6610538882100663;
    msg.y = 0.4306568327954501;
    msg.z1 = 0.4731948442052395;
    msg.z2 = 0.4641966035617481;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.8178635423306069);
    msg.setSource(54461U);
    msg.setSourceEntity(235U);
    msg.setDestination(32795U);
    msg.setDestinationEntity(243U);
    msg.x = 0.6078357748570741;
    msg.y = 0.4523025625780943;
    msg.z1 = 0.469967392188964;
    msg.z2 = 0.5283996672284842;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentVelocity msg;
    msg.setTimeStamp(0.06886773863138806);
    msg.setSource(48816U);
    msg.setSourceEntity(4U);
    msg.setDestination(39709U);
    msg.setDestinationEntity(68U);
    msg.x = 0.5699974447822139;
    msg.y = 0.24312784663771392;
    msg.z1 = 0.8052050752023694;
    msg.z2 = 0.4631420849139686;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentVelocity #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.4367241115196574);
    msg.setSource(64659U);
    msg.setSourceEntity(199U);
    msg.setDestination(31871U);
    msg.setDestinationEntity(20U);
    msg.mmsi.assign("VCRCSLFIDPVMOHEOJYUAZYWMQJKAEOUNJJXOFZBSPFAPRVAXLLWINPUWHFYMZIEBGFRYKKBEHMUQETBGIDPBCGTSDIFKTCCOZAJNBKDGKQVQPQJEULQOURYGMKMLNAOV");
    msg.lat = 0.8071895437488732;
    msg.lon = 0.7433167565109963;
    msg.x = 0.04743627081059887;
    msg.y = 0.3420342220200342;
    msg.speed = 0.44730709130978263;
    msg.course = 0.7873847786790574;
    msg.dist = 0.27666604792430916;
    msg.length = 0.5441165942278239;
    msg.width = 0.8800112847449951;
    msg.o_vect = 0.5322136832077258;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.8891490756254012);
    msg.setSource(16350U);
    msg.setSourceEntity(162U);
    msg.setDestination(62285U);
    msg.setDestinationEntity(138U);
    msg.mmsi.assign("WAPQZYOYHUOYGASEAMZDZTSGUZGJLKKKEANKRWLVVIQBNRDNLIPPNFIWQMUWJSCIRNMGLBPPQFUEBMIVZCKOCJMKDRCZSYIRUESFNDPIRIGNVZJXJWRXAMRHFBMFOXWUBVBAHQAXLLLQXADTTSBSGDFCMHKQYHGKFQUXHHIVZXWHPKPMTAL");
    msg.lat = 0.8602716529761208;
    msg.lon = 0.7527161178525738;
    msg.x = 0.8642791454053548;
    msg.y = 0.764301749580969;
    msg.speed = 0.7428921758998726;
    msg.course = 0.9085262201438714;
    msg.dist = 0.8985611594657271;
    msg.length = 0.08169024474653497;
    msg.width = 0.3354347051885218;
    msg.o_vect = 0.6274475056615769;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CollisionAvoidance msg;
    msg.setTimeStamp(0.39192058121580964);
    msg.setSource(19947U);
    msg.setSourceEntity(35U);
    msg.setDestination(1834U);
    msg.setDestinationEntity(23U);
    msg.mmsi.assign("IEKAAFNYDQUPTFHZSJRUHZRRLRNSALPVTHSZLFPHTGSYRKNSIYIDEDHWNMQJKGTSCVOWHQMOUFYKMQVAYS");
    msg.lat = 0.42409356966487044;
    msg.lon = 0.6757931493900989;
    msg.x = 0.11931134642006391;
    msg.y = 0.12638591812600186;
    msg.speed = 0.6557770396286073;
    msg.course = 0.568665724362156;
    msg.dist = 0.25680082317024755;
    msg.length = 0.8440115782470746;
    msg.width = 0.6893303475337891;
    msg.o_vect = 0.08780735071488899;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CollisionAvoidance #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.9893337592972105);
    msg.setSource(39028U);
    msg.setSourceEntity(54U);
    msg.setDestination(45827U);
    msg.setDestinationEntity(11U);
    msg.depth_at_loc.assign("JNUSQILAEYWKBNPIGSPRYAICLPWPLPSWQEDMVRDJK");
    msg.danger.assign("DKHEGWEJVNBVVQMJCIUOFXUSSRIMIHZRBYHTPTZOENJXAJMLUYGPNQAKGGUTASKPMKTEONWCJGZRCQZXFHSOLBISAIQYNMLAIYLAHYBBHMZQLDF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.682044275140506);
    msg.setSource(9107U);
    msg.setSourceEntity(225U);
    msg.setDestination(33283U);
    msg.setDestinationEntity(227U);
    msg.depth_at_loc.assign("NEOOANJCQZBHEEDXYBFCMIVNJKZKCQGJSYVFRCQMUTHDFGIUATLEMWGWSOLWSDRKRADMBXBSPICMQYP");
    msg.danger.assign("FYKSMYXGAPUQTZAHNXXNEKNQBRFDBXTKJAALOHUBDUXKOVGHVGIMCTEPASGYBJXSCAOQAEYDEJDHKWIBYRDOGGZNNKCRBVUTMTKFFEIAWVYROFLAVXMZLKPSLLDWJJFGESIIZGLHHOLDQUPKGWPCORUMBEKLNWWXEZMYDSNCLTSCFSNWHDOIEMYWBZUJJZIQSFPIURVQWQQW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ENCAwareness msg;
    msg.setTimeStamp(0.757541313798119);
    msg.setSource(28509U);
    msg.setSourceEntity(46U);
    msg.setDestination(27361U);
    msg.setDestinationEntity(68U);
    msg.depth_at_loc.assign("VCLHQLXGBHEPMEOMNJWXXKOSIQVXTPFGNDGSLTMJNTOFSWDRELEJLSZSBZNLIRHUPEIIUJAZOBOVKKULDQUXYMZYDDMWHQZQYOPBAMWYHQLWHBRAZRPBGFHATKTRXMFYIUIQZGDDUYXQDFASTDUECEWOFANZBNXEXGKIIRFJFYVPDCYFSHJMTHWVKAXEBRMCMSCOCNKBGJTWATTNCHIVRGASORYGKZPUVPGVOVZ");
    msg.danger.assign("UAGIUAQZIKYKOYTPHRNBOJWJICBUHMOQYWNJVDKPGYTKUFTZIPJCJIKZUQLFXKPOASDKUMVZJFDBMDLELRUFBZLBFI");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ENCAwareness #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.6801042813029194);
    msg.setSource(13507U);
    msg.setSourceEntity(200U);
    msg.setDestination(5432U);
    msg.setDestinationEntity(220U);
    msg.value = 0.22776674869391944;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.321731068915845);
    msg.setSource(7979U);
    msg.setSourceEntity(233U);
    msg.setDestination(24912U);
    msg.setDestinationEntity(235U);
    msg.value = 0.7550744141859682;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Heave msg;
    msg.setTimeStamp(0.21780919707379787);
    msg.setSource(28466U);
    msg.setSourceEntity(56U);
    msg.setDestination(50869U);
    msg.setDestinationEntity(205U);
    msg.value = 0.23224876833962593;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Heave #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.4851124009519586);
    msg.setSource(37919U);
    msg.setSourceEntity(149U);
    msg.setDestination(64796U);
    msg.setDestinationEntity(66U);
    msg.beam1 = 0.630056121116866;
    msg.beam2 = 0.6079707580106568;
    msg.beam3 = 0.46129508133103647;
    msg.beam4 = 0.9189397027503478;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.9603463471121482);
    msg.setSource(45686U);
    msg.setSourceEntity(8U);
    msg.setDestination(6498U);
    msg.setDestinationEntity(126U);
    msg.beam1 = 0.21978145548712302;
    msg.beam2 = 0.3349939534610116;
    msg.beam3 = 0.7796470114917936;
    msg.beam4 = 0.8388275229914057;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::AcousticBackscatter msg;
    msg.setTimeStamp(0.18576857737460084);
    msg.setSource(36700U);
    msg.setSourceEntity(24U);
    msg.setDestination(61792U);
    msg.setDestinationEntity(13U);
    msg.beam1 = 0.8440890421047929;
    msg.beam2 = 0.9893473311637948;
    msg.beam3 = 0.5541434655211996;
    msg.beam4 = 0.5277913223832938;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("AcousticBackscatter #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.8201763039079937);
    msg.setSource(38717U);
    msg.setSourceEntity(65U);
    msg.setDestination(56461U);
    msg.setDestinationEntity(81U);
    msg.beam1 = 247U;
    msg.beam2 = 191U;
    msg.beam3 = 118U;
    msg.beam4 = 204U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.9510546301774302);
    msg.setSource(61018U);
    msg.setSourceEntity(9U);
    msg.setDestination(23641U);
    msg.setDestinationEntity(227U);
    msg.beam1 = 132U;
    msg.beam2 = 226U;
    msg.beam3 = 163U;
    msg.beam4 = 241U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Correlation msg;
    msg.setTimeStamp(0.22211729287895987);
    msg.setSource(20608U);
    msg.setSourceEntity(177U);
    msg.setDestination(32254U);
    msg.setDestinationEntity(241U);
    msg.beam1 = 0U;
    msg.beam2 = 154U;
    msg.beam3 = 50U;
    msg.beam4 = 122U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Correlation #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.8168075690244724);
    msg.setSource(59762U);
    msg.setSourceEntity(184U);
    msg.setDestination(53931U);
    msg.setDestinationEntity(80U);
    msg.pos = 0.3617272273175375;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.30309537851858925);
    msg.setSource(34376U);
    msg.setSourceEntity(190U);
    msg.setDestination(54251U);
    msg.setDestinationEntity(213U);
    msg.pos = 0.8658619384671481;
    IMC::ADCPBeam tmp_msg_0;
    tmp_msg_0.vel = 0.8580856041268334;
    tmp_msg_0.amp = 0.35647364161851613;
    tmp_msg_0.cor = 26U;
    msg.beams.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfileCell msg;
    msg.setTimeStamp(0.5036055675273791);
    msg.setSource(46150U);
    msg.setSourceEntity(248U);
    msg.setDestination(37349U);
    msg.setDestinationEntity(231U);
    msg.pos = 0.11327599998900484;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfileCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.7534136293463438);
    msg.setSource(39037U);
    msg.setSourceEntity(77U);
    msg.setDestination(51251U);
    msg.setDestinationEntity(241U);
    msg.beams = 87U;
    msg.cells = 250U;
    msg.coord_sys = 210U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.40959992472014173);
    msg.setSource(17350U);
    msg.setSourceEntity(227U);
    msg.setDestination(2732U);
    msg.setDestinationEntity(136U);
    msg.beams = 252U;
    msg.cells = 92U;
    msg.coord_sys = 130U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.42628812326800825;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.5388852299593351;
    tmp_tmp_msg_0_0.amp = 0.1255435088274851;
    tmp_tmp_msg_0_0.cor = 166U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CurrentProfile msg;
    msg.setTimeStamp(0.3273470394704521);
    msg.setSource(33751U);
    msg.setSourceEntity(184U);
    msg.setDestination(38706U);
    msg.setDestinationEntity(9U);
    msg.beams = 145U;
    msg.cells = 34U;
    msg.coord_sys = 40U;
    IMC::CurrentProfileCell tmp_msg_0;
    tmp_msg_0.pos = 0.8643643206439127;
    IMC::ADCPBeam tmp_tmp_msg_0_0;
    tmp_tmp_msg_0_0.vel = 0.8402765403621011;
    tmp_tmp_msg_0_0.amp = 0.6294162509861073;
    tmp_tmp_msg_0_0.cor = 117U;
    tmp_msg_0.beams.push_back(tmp_tmp_msg_0_0);
    msg.prof.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CurrentProfile #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.07449158931389666);
    msg.setSource(15573U);
    msg.setSourceEntity(114U);
    msg.setDestination(37589U);
    msg.setDestinationEntity(60U);
    msg.vel = 0.16898514835555856;
    msg.amp = 0.7916907090415969;
    msg.cor = 101U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.4632206964625233);
    msg.setSource(44770U);
    msg.setSourceEntity(105U);
    msg.setDestination(34113U);
    msg.setDestinationEntity(103U);
    msg.vel = 0.296674300156089;
    msg.amp = 0.570870621685896;
    msg.cor = 87U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ADCPBeam msg;
    msg.setTimeStamp(0.4351531283869421);
    msg.setSource(21481U);
    msg.setSourceEntity(183U);
    msg.setDestination(18789U);
    msg.setDestinationEntity(249U);
    msg.vel = 0.344565268830361;
    msg.amp = 0.49251342365110495;
    msg.cor = 241U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ADCPBeam #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.5755097679192032);
    msg.setSource(12079U);
    msg.setSourceEntity(193U);
    msg.setDestination(58872U);
    msg.setDestinationEntity(130U);
    msg.serial_no = 3708502522U;
    msg.unix_timestamp = 2686651486U;
    msg.millis = 21828U;
    msg.trans_protocol = 179U;
    msg.trans_id = 3189796896U;
    msg.trans_data = 21970U;
    msg.snr = 25U;
    msg.trans_freq = 40U;
    msg.recv_mem_addr = 30073U;
    msg.lat = 0.5524217814757811;
    msg.lon = 0.4674168124428262;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.4982335415707576);
    msg.setSource(44606U);
    msg.setSourceEntity(161U);
    msg.setDestination(15603U);
    msg.setDestinationEntity(66U);
    msg.serial_no = 2483778935U;
    msg.unix_timestamp = 2849305259U;
    msg.millis = 55163U;
    msg.trans_protocol = 192U;
    msg.trans_id = 2726594319U;
    msg.trans_data = 3274U;
    msg.snr = 178U;
    msg.trans_freq = 197U;
    msg.recv_mem_addr = 64705U;
    msg.lat = 0.36442701105091246;
    msg.lon = 0.6035584749301053;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRFishTag msg;
    msg.setTimeStamp(0.6714327311003007);
    msg.setSource(51153U);
    msg.setSourceEntity(2U);
    msg.setDestination(7328U);
    msg.setDestinationEntity(156U);
    msg.serial_no = 3384994242U;
    msg.unix_timestamp = 2273398U;
    msg.millis = 33466U;
    msg.trans_protocol = 105U;
    msg.trans_id = 215645245U;
    msg.trans_data = 3667U;
    msg.snr = 193U;
    msg.trans_freq = 219U;
    msg.recv_mem_addr = 24495U;
    msg.lat = 0.1158055752049566;
    msg.lon = 0.024644893260122758;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRFishTag #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.23124091786790923);
    msg.setSource(29029U);
    msg.setSourceEntity(148U);
    msg.setDestination(4546U);
    msg.setDestinationEntity(103U);
    msg.serial_no = 2465780100U;
    msg.unix_timestamp = 489705223U;
    msg.temperature = 0.9236240505063374;
    msg.avg_noise_level = 229U;
    msg.peak_noise_level = 3U;
    msg.recv_listen_freq = 191U;
    msg.recv_mem_addr = 24766U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.17000506602849141);
    msg.setSource(48789U);
    msg.setSourceEntity(216U);
    msg.setDestination(5208U);
    msg.setDestinationEntity(244U);
    msg.serial_no = 822653971U;
    msg.unix_timestamp = 4160932071U;
    msg.temperature = 0.10663552664510578;
    msg.avg_noise_level = 246U;
    msg.peak_noise_level = 189U;
    msg.recv_listen_freq = 184U;
    msg.recv_mem_addr = 8741U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::TBRSensor msg;
    msg.setTimeStamp(0.5114469359200773);
    msg.setSource(47353U);
    msg.setSourceEntity(167U);
    msg.setDestination(14653U);
    msg.setDestinationEntity(78U);
    msg.serial_no = 3072280384U;
    msg.unix_timestamp = 3792728632U;
    msg.temperature = 0.4358127356937612;
    msg.avg_noise_level = 240U;
    msg.peak_noise_level = 83U;
    msg.recv_listen_freq = 31U;
    msg.recv_mem_addr = 55099U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("TBRSensor #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.15120538420670693);
    msg.setSource(13842U);
    msg.setSourceEntity(94U);
    msg.setDestination(13784U);
    msg.setDestinationEntity(152U);
    msg.frequency = 186190957U;
    msg.info.assign("PJZKTBATIQZBUGESRGCMQVZJMCJXHMPLAXYXNYDQNRQAVGTWZWMMVTYKNDGIVIWSSJDPVONYRQWKFQBEZQDPIMHEPELHIPGFRWKHNOBYETZAOROJHKYVUXVYCALKTESXXFUALRDVAIFFMAISQMJOOKBQCJWCCCEHJJYTFDUSHFDXBSWNNYIPUVBLLRJSFLXBRKHHLUVTBGWNLAFLRSTUOMPYGDUXKDFZW");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.0979607061222636);
    msg.setSource(52886U);
    msg.setSourceEntity(126U);
    msg.setDestination(46413U);
    msg.setDestinationEntity(37U);
    msg.frequency = 1703799410U;
    msg.info.assign("UTKBDBYBBGZJANHKBOXYUFTOBMNIUYGGREOODHDRLEIXOCZPEABGWDUVSQELTWWXOIFWJBZAVDFSXHOPKQCCYFWNAHNIVNMMVSFKEAJMCXLDPUVUIDOMDGHGLYBNLQZSHSXCSSJCLZFIRKTWPVQXQDUFQZSQTXIOVLCAETXVPMJNKHGVLR");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::IridiumReport msg;
    msg.setTimeStamp(0.762135561476201);
    msg.setSource(41866U);
    msg.setSourceEntity(113U);
    msg.setDestination(6309U);
    msg.setDestinationEntity(129U);
    msg.frequency = 6454491U;
    msg.info.assign("ZKWOIBBTPDWNRSJZXYHTRJRRQGVTNAMCWQTAHYZSLBIZZOWLTYJUYCBHHJRANAGUPXFVREYWIHNDEOQKHYAFOKCVFXWEQZSBFKKCGHTGQYMKOGGOUGVDISKFHKMNMAUGPYLEXAPCJQUMEJTCULYRLDEZDMVWFPQKLPXDMHDDUNHWFBOXRPVZXXBDMUQSFMJABYWIADLNPILOCBFJGIQOSSTIOWNSVJJNZRQULRU");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("IridiumReport #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.8803815076095917);
    msg.setSource(34997U);
    msg.setSourceEntity(236U);
    msg.setDestination(7460U);
    msg.setDestinationEntity(240U);
    msg.restriction = 82U;
    msg.reason.assign("OQXVCYIJNVWANOSUTFPFFGKAYRYJBHPZVHDCERGVXXBAKSRUWNQGYHBJWAATCSBQKVRZXKFOUSIGKCMQYXEGXDWPTQOLIXQYJTUYBCBITYXHVPFVBEGUCMYRLZRCZRZSIDEHAHFDNRVMJHMNCCEONSOANIELPETMDDALEZKPKAVRQULLJXOIWSEFMIPNGEWQQFZDIKPVBTHAXP");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.3650457150586278);
    msg.setSource(29899U);
    msg.setSourceEntity(99U);
    msg.setDestination(44024U);
    msg.setDestinationEntity(233U);
    msg.restriction = 238U;
    msg.reason.assign("QSQBPXBWCXOKFRBWIUWREIQJAKFUGXUF");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::CommRestriction msg;
    msg.setTimeStamp(0.43011983216983996);
    msg.setSource(14267U);
    msg.setSourceEntity(73U);
    msg.setDestination(64032U);
    msg.setDestinationEntity(176U);
    msg.restriction = 237U;
    msg.reason.assign("DORKVZLXVPIFLEUOHZTLDGIHVXFSCCFTFRJUQSHCRVETMDWIFVHYKDAMZXZKPCUYIGHPEBVYNDULLXWONSBMZZZYIOSBQKJIFYPBTHNVQCFPHMKVUJFUQJNXLEONA");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("CommRestriction #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.03168573532954522);
    msg.setSource(61289U);
    msg.setSourceEntity(80U);
    msg.setDestination(25491U);
    msg.setDestinationEntity(126U);
    msg.adcp = -9;
    msg.adcp_dur = 4273312019U;
    msg.adcp_fr = 3347825871U;
    msg.ctd = -14;
    msg.ctd_dur = 1072921702U;
    msg.ctd_fr = 1569503432U;
    msg.opt = 1;
    msg.opt_dur = 85621583U;
    msg.opt_fr = 2830243743U;
    msg.tbl = -86;
    msg.tbl_dur = 1496582679U;
    msg.tbl_fr = 284842014U;
    msg.eco = -96;
    msg.eco_dur = 1337591838U;
    msg.eco_fr = 2261514187U;
    msg.par = 7;
    msg.par_dur = 337312695U;
    msg.par_fr = 2166210870U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.5235830588848255);
    msg.setSource(12354U);
    msg.setSourceEntity(74U);
    msg.setDestination(3397U);
    msg.setDestinationEntity(190U);
    msg.adcp = 89;
    msg.adcp_dur = 905082580U;
    msg.adcp_fr = 2387905069U;
    msg.ctd = -9;
    msg.ctd_dur = 4177688520U;
    msg.ctd_fr = 2558248500U;
    msg.opt = 28;
    msg.opt_dur = 3763415021U;
    msg.opt_fr = 1801879664U;
    msg.tbl = -60;
    msg.tbl_dur = 3767365469U;
    msg.tbl_fr = 3190216776U;
    msg.eco = -48;
    msg.eco_dur = 4268964204U;
    msg.eco_fr = 502787671U;
    msg.par = -9;
    msg.par_dur = 1323338988U;
    msg.par_fr = 1953878706U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensors msg;
    msg.setTimeStamp(0.9067697331936039);
    msg.setSource(14059U);
    msg.setSourceEntity(166U);
    msg.setDestination(25387U);
    msg.setDestinationEntity(23U);
    msg.adcp = -122;
    msg.adcp_dur = 3852497717U;
    msg.adcp_fr = 3128978052U;
    msg.ctd = 93;
    msg.ctd_dur = 151141931U;
    msg.ctd_fr = 1511930056U;
    msg.opt = 92;
    msg.opt_dur = 3735209022U;
    msg.opt_fr = 3770184273U;
    msg.tbl = 61;
    msg.tbl_dur = 2305720011U;
    msg.tbl_fr = 3314931597U;
    msg.eco = -48;
    msg.eco_dur = 605883183U;
    msg.eco_fr = 771421944U;
    msg.par = 81;
    msg.par_dur = 1625800976U;
    msg.par_fr = 2814182344U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensors #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.9307284088349541);
    msg.setSource(18113U);
    msg.setSourceEntity(197U);
    msg.setDestination(42477U);
    msg.setDestinationEntity(91U);
    msg.adcp = 101;
    msg.adcp_dur = 2677350290U;
    msg.adcp_fr = 1049133037U;
    msg.ctd = -85;
    msg.ctd_dur = 4009206540U;
    msg.ctd_fr = 3929275284U;
    msg.opt = -50;
    msg.opt_dur = 421406186U;
    msg.opt_fr = 1582960508U;
    msg.tbl = -36;
    msg.tbl_dur = 185986687U;
    msg.tbl_fr = 2125224495U;
    msg.eco = 111;
    msg.eco_dur = 92839484U;
    msg.eco_fr = 3221784189U;
    msg.par = 10;
    msg.par_dur = 2413897336U;
    msg.par_fr = 2602080653U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.6664072645592277);
    msg.setSource(47808U);
    msg.setSourceEntity(196U);
    msg.setDestination(14550U);
    msg.setDestinationEntity(100U);
    msg.adcp = -44;
    msg.adcp_dur = 4123283063U;
    msg.adcp_fr = 3111485213U;
    msg.ctd = -32;
    msg.ctd_dur = 1020693666U;
    msg.ctd_fr = 4091591753U;
    msg.opt = -60;
    msg.opt_dur = 2025264923U;
    msg.opt_fr = 2739507385U;
    msg.tbl = -127;
    msg.tbl_dur = 1320415387U;
    msg.tbl_fr = 4001268719U;
    msg.eco = 44;
    msg.eco_dur = 3157430179U;
    msg.eco_fr = 207190649U;
    msg.par = -2;
    msg.par_dur = 4169302825U;
    msg.par_fr = 4221408960U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::ScienceSensorsReply msg;
    msg.setTimeStamp(0.4583636917006384);
    msg.setSource(7823U);
    msg.setSourceEntity(176U);
    msg.setDestination(2499U);
    msg.setDestinationEntity(232U);
    msg.adcp = -21;
    msg.adcp_dur = 4019347045U;
    msg.adcp_fr = 733270793U;
    msg.ctd = -50;
    msg.ctd_dur = 1807051346U;
    msg.ctd_fr = 2395102385U;
    msg.opt = 118;
    msg.opt_dur = 1811584576U;
    msg.opt_fr = 1661976108U;
    msg.tbl = -121;
    msg.tbl_dur = 693272415U;
    msg.tbl_fr = 2552562057U;
    msg.eco = -2;
    msg.eco_dur = 3529452907U;
    msg.eco_fr = 178577235U;
    msg.par = 35;
    msg.par_dur = 1150177698U;
    msg.par_fr = 470865660U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("ScienceSensorsReply #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.8063071231079577);
    msg.setSource(43541U);
    msg.setSourceEntity(237U);
    msg.setDestination(39044U);
    msg.setDestinationEntity(123U);
    msg.value = 0.13624474391218067;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.8962833258180802);
    msg.setSource(21163U);
    msg.setSourceEntity(2U);
    msg.setDestination(48020U);
    msg.setDestinationEntity(36U);
    msg.value = 0.3937624245389061;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::PAR msg;
    msg.setTimeStamp(0.29760214519576267);
    msg.setSource(49881U);
    msg.setSourceEntity(92U);
    msg.setDestination(401U);
    msg.setDestinationEntity(202U);
    msg.value = 0.3892514154327448;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("PAR #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.6974849250172434);
    msg.setSource(23192U);
    msg.setSourceEntity(23U);
    msg.setDestination(4251U);
    msg.setDestinationEntity(234U);
    msg.lat = 0.18329743929967257;
    msg.lon = 0.8740787038437857;
    msg.depth.assign("YMTQZGUFQBKBTUSLSYUPTWMERPONFYNWOTNGGLRJYHMDMAWAOJXHLHEMONPWNGJLFUYCCZRXKWWJEJALPKDIGFVZPMTCPCHDEETTSSYPUKYDQANQKZKDKMOQREDNJIJRIIBIFVFFTKZC");
    msg.vel.assign("RAPTCZYDQCGOSAOMQAFYHRDYPAXPTPLSORGWBPQCCISQBCMZJWGUCDYBLKTGQYXIOBLFMDGPBMFJTZTGYJBQVWDEZUTYELMIWVLLJKRCNHOUXLFKGZMJQDOCMIAVXP");
    msg.dir.assign("TKIKEXKBVTIUSOHQMOJRYHZUGAHAFGZSZKGBRXCVRXVPNOJMOOIJMWEPPKPZUQVTPPYKHHEZSWTHLMQUYQELKZCVNTHZRBJMAMRIASNDURXYWDWWWYSWVNIBLIEOCAEIUQCNBXTLLSJYNBVCDXRUQQALCJFFMSCINIMTOQSIOUBYV");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.0015884111235660026);
    msg.setSource(50456U);
    msg.setSourceEntity(249U);
    msg.setDestination(12845U);
    msg.setDestinationEntity(66U);
    msg.lat = 0.2531923227063331;
    msg.lon = 0.3704253118417734;
    msg.depth.assign("GICYRXAFYUMWCCLQOFQFEMFGSHMNKQAOZJGNITXBZWDPKIPWPCOSAPOGKDJGKCHWEXLIXJLMZVPMKIDQHRYEZBFKQWDEVEBNGUXDJUCEAZOFLOAURYNSUWUNWNIOWCJBRBOSKACEUGVNFSDZBHJMCGMTBQVNJOXLMVT");
    msg.vel.assign("USYXDFJKEOVRHDQAVVGJUMHQVFRZPBXIEBYLZTEGDNPATOILOVMHTRNQMKMONADFBJYRUVRTNFNGNJTGYJWMYCMTYCFJADAIEEXWERBIMGKIPBKIUJGEFFWNNAPZQCITBFAXWHZWKGYZUXVZHZXSEPQBQSSWSCDPK");
    msg.dir.assign("VTUZBTXMHOPGQWOINZOIBWERRFNCVXYORZXHPFMHKEVTZFSJOUGYBMYTFDJLKIIDOHIVNAKSASLWGOLXOUFDIMYVNXPSAUYTNSWKMQWRSPDPNAKJUBBMAGRFBCVFQZWDAVREWJZRMVRKQBLE");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::SingleCurrentCell msg;
    msg.setTimeStamp(0.8209643704900099);
    msg.setSource(15608U);
    msg.setSourceEntity(40U);
    msg.setDestination(47757U);
    msg.setDestinationEntity(156U);
    msg.lat = 0.19189348533622397;
    msg.lon = 0.3951754370076901;
    msg.depth.assign("LJUTMSCXQCEFNROVKTAAIJGWBPETBVNFMWZTURGYQTKILZYTOJFMUQLPOEBXZVNWYXLBZJTHIHNDVYKPKSHSJTAKSUYDFD");
    msg.vel.assign("JWJXTMTZKCRDXCVQWOEEUQLGGAQTKDIHQFWNJNHXSGXPBNVOCKGBQIOVKKMXNYBUZVATPTLLGSCOQCFEQOJANZYHYIMDZKJKJHSBVIQPMRYXCXMSKRZNDFSAAETEJMGLLFOSJYLNH");
    msg.dir.assign("IFTGUDZYJRRRGRKFBAPKKZLXOQDSUXMEIFBCXPYTZADKWVEHQUQ");

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("SingleCurrentCell #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.9674502044893871);
    msg.setSource(44242U);
    msg.setSourceEntity(81U);
    msg.setDestination(52513U);
    msg.setDestinationEntity(198U);
    msg.source.assign("YONVWEBJNAIWFECNFVYTYIQATXZYMJXHOFBBCRRMLHWPMCYRPBUHQPZINGKDGMYUKNKQXGFSVJRLBIMIUUAZKDCFBTEQWVUXSKJRCSIDMMUCLSNC");
    msg.lat = 0.4734712126144974;
    msg.lon = 0.3869367603370517;
    msg.sog = 0.3529456947412194;
    msg.uc = 0.688122590445891;
    msg.depth = 0.6406045350628397;
    msg.value = 0.2255008999376552;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.5276001540438199);
    msg.setSource(42152U);
    msg.setSourceEntity(122U);
    msg.setDestination(20015U);
    msg.setDestinationEntity(226U);
    msg.source.assign("ECTRWVWKLTNYZWZAETCIRAQDQQJOPBKIGRVHKZBCSHQTWQFLMUNADSTYUGZRXJKOMXNIJSGVKATVPMEVDSUBAMQJCRLFBEEFBPUAKHDMCEJFCNKZOYNKOTVPIDQANFDHVOGVHJYFNHSQZMHBALNSXYGXRGUJYOPWOVXSFQUPZSMPPETNYI");
    msg.lat = 0.006109962127827329;
    msg.lon = 0.011705052389602288;
    msg.sog = 0.8943878982632955;
    msg.uc = 0.8880717861065067;
    msg.depth = 0.9161597884685824;
    msg.value = 0.7825091770631115;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Gamma msg;
    msg.setTimeStamp(0.5158633131463054);
    msg.setSource(42051U);
    msg.setSourceEntity(248U);
    msg.setDestination(15086U);
    msg.setDestinationEntity(250U);
    msg.source.assign("YPWRKOQLKSKFQRPLQNLHWWRTKWWJTOMBRLHCQEVMYJNIDXHUGVBNLFIUAGLNMBKGJJKJNCEWXVDIZHQGQINZDPSFBEMPSLFRJBUHCZZEZWBHLPRCENUWIAEAVCAFMVGVODAJUEGITZFUOCGRVOLSKYRATDXIOSYOAHUMIYYRVQZDHIXUOIBVYPSPXKQBGCNVQFJGBGAHPT");
    msg.lat = 0.4599860643721063;
    msg.lon = 0.056855722530044894;
    msg.sog = 0.6487758257459745;
    msg.uc = 0.7302998235264216;
    msg.depth = 0.4141685799789363;
    msg.value = 0.9032150193472903;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Gamma #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.8096045569369316);
    msg.setSource(21780U);
    msg.setSourceEntity(34U);
    msg.setDestination(51279U);
    msg.setDestinationEntity(121U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.40488619793607805;
    tmp_msg_0.x = 0.5617941950723374;
    tmp_msg_0.y = 0.5915558614368067;
    tmp_msg_0.z = 0.2584949434289713;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.6509884031727979;
    tmp_msg_1.x = 0.037843349380496494;
    tmp_msg_1.y = 0.9927225936270373;
    tmp_msg_1.z = 0.17966661080092172;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.8325105278587583;
    tmp_msg_2.value = 0.7128860869806373;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.16464266508131464);
    msg.setSource(50872U);
    msg.setSourceEntity(116U);
    msg.setDestination(43494U);
    msg.setDestinationEntity(64U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.7191284667381563;
    tmp_msg_0.x = 0.8680396477848216;
    tmp_msg_0.y = 0.7189786107330919;
    tmp_msg_0.z = 0.278198866711587;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.35506648873246405;
    tmp_msg_1.x = 0.9766016831699825;
    tmp_msg_1.y = 0.8630786152477362;
    tmp_msg_1.z = 0.721134215289788;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.5207069692575247;
    tmp_msg_2.value = 0.2716094111395687;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::Imu msg;
    msg.setTimeStamp(0.8185101237222198);
    msg.setSource(20042U);
    msg.setSourceEntity(224U);
    msg.setDestination(10612U);
    msg.setDestinationEntity(4U);
    IMC::Acceleration tmp_msg_0;
    tmp_msg_0.time = 0.26417357277177744;
    tmp_msg_0.x = 0.8077938344097884;
    tmp_msg_0.y = 0.8290616354722995;
    tmp_msg_0.z = 0.17329577874015656;
    msg.acceleration.set(tmp_msg_0);
    IMC::AngularVelocity tmp_msg_1;
    tmp_msg_1.time = 0.09959046707504193;
    tmp_msg_1.x = 0.27177201997734757;
    tmp_msg_1.y = 0.17549128845323225;
    tmp_msg_1.z = 0.025806764175949293;
    msg.angular_velocity.set(tmp_msg_1);
    IMC::Temperature tmp_msg_2;
    tmp_msg_2.time = 0.8695475052586641;
    tmp_msg_2.value = 0.2993125987749371;
    msg.temperature.set(tmp_msg_2);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("Imu #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.25109046590610473);
    msg.setSource(50832U);
    msg.setSourceEntity(115U);
    msg.setDestination(26748U);
    msg.setDestinationEntity(15U);
    msg.gdop = 0.8869760340469449;
    msg.pdop = 0.7421099487157948;
    msg.tdop = 0.395210158748158;
    msg.vdop = 0.1463651799894924;
    msg.hdop = 0.8529688561306689;
    msg.ndop = 0.07330256125371726;
    msg.edop = 0.5056947349454203;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.5657434494088255);
    msg.setSource(20946U);
    msg.setSourceEntity(86U);
    msg.setDestination(36376U);
    msg.setDestinationEntity(199U);
    msg.gdop = 0.705191845409908;
    msg.pdop = 0.07858127440667906;
    msg.tdop = 0.6964262459712097;
    msg.vdop = 0.7261303607653936;
    msg.hdop = 0.8228324214579754;
    msg.ndop = 0.12623381917649834;
    msg.edop = 0.9785012335759077;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxDOP msg;
    msg.setTimeStamp(0.00455299431447731);
    msg.setSource(56202U);
    msg.setSourceEntity(174U);
    msg.setDestination(43500U);
    msg.setDestinationEntity(11U);
    msg.gdop = 0.35195239152832325;
    msg.pdop = 0.26061311860467806;
    msg.tdop = 0.09275471823952464;
    msg.vdop = 0.8281584304669449;
    msg.hdop = 0.8206087442387072;
    msg.ndop = 0.565918138336717;
    msg.edop = 0.7062214531800897;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxDOP #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.5039931047088361);
    msg.setSource(12364U);
    msg.setSourceEntity(174U);
    msg.setDestination(57939U);
    msg.setDestinationEntity(25U);
    msg.meanx = 0.027777729243395166;
    msg.meany = 0.5661694919921659;
    msg.meanz = 0.6766402869483256;
    msg.dur = 3476719424U;
    msg.meanacc = 0.044979906014673166;
    msg.obs = 4159978122U;
    msg.valid = 228U;
    msg.active = 214U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.8793619593608392);
    msg.setSource(62988U);
    msg.setSourceEntity(10U);
    msg.setDestination(48538U);
    msg.setDestinationEntity(247U);
    msg.meanx = 0.2713041980653591;
    msg.meany = 0.13716650684843312;
    msg.meanz = 0.9885447524489747;
    msg.dur = 2881281485U;
    msg.meanacc = 0.015809995820304845;
    msg.obs = 3509371799U;
    msg.valid = 108U;
    msg.active = 148U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSvIn msg;
    msg.setTimeStamp(0.9115968381040291);
    msg.setSource(23124U);
    msg.setSourceEntity(159U);
    msg.setDestination(18395U);
    msg.setDestinationEntity(127U);
    msg.meanx = 0.06907477969594122;
    msg.meany = 0.7943350020233887;
    msg.meanz = 0.9586225111305847;
    msg.dur = 2256896910U;
    msg.meanacc = 0.7111016015558126;
    msg.obs = 635408959U;
    msg.valid = 102U;
    msg.active = 90U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSvIn #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.2822263031699209);
    msg.setSource(19129U);
    msg.setSourceEntity(173U);
    msg.setDestination(18328U);
    msg.setDestinationEntity(220U);
    msg.gpsfixtype = 32U;
    msg.flags = 44U;
    msg.diffcorr = 148U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.3649530280918041);
    msg.setSource(40869U);
    msg.setSourceEntity(161U);
    msg.setDestination(21294U);
    msg.setDestinationEntity(25U);
    msg.gpsfixtype = 111U;
    msg.flags = 180U;
    msg.diffcorr = 154U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxStatus msg;
    msg.setTimeStamp(0.8679863482345788);
    msg.setSource(19313U);
    msg.setSourceEntity(241U);
    msg.setDestination(53598U);
    msg.setDestinationEntity(243U);
    msg.gpsfixtype = 18U;
    msg.flags = 124U;
    msg.diffcorr = 123U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxStatus #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.4528773772197944);
    msg.setSource(51206U);
    msg.setSourceEntity(247U);
    msg.setDestination(15251U);
    msg.setDestinationEntity(47U);
    msg.gnssid = 11U;
    msg.svid = 9U;
    msg.sigid = 253U;
    msg.freqid = 12U;
    msg.prres = 0.7771200297099436;
    msg.cno = 47U;
    msg.qualityind = 207U;
    msg.corrsource = 84U;
    msg.ionomodel = 137U;
    msg.health = 57U;
    msg.sigflags = 76U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.6641742197448192);
    msg.setSource(4875U);
    msg.setSourceEntity(199U);
    msg.setDestination(17595U);
    msg.setDestinationEntity(198U);
    msg.gnssid = 22U;
    msg.svid = 217U;
    msg.sigid = 57U;
    msg.freqid = 1U;
    msg.prres = 0.3899989316899689;
    msg.cno = 144U;
    msg.qualityind = 163U;
    msg.corrsource = 232U;
    msg.ionomodel = 251U;
    msg.health = 96U;
    msg.sigflags = 67U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSignal msg;
    msg.setTimeStamp(0.5411610885733149);
    msg.setSource(38717U);
    msg.setSourceEntity(140U);
    msg.setDestination(21019U);
    msg.setDestinationEntity(39U);
    msg.gnssid = 219U;
    msg.svid = 54U;
    msg.sigid = 57U;
    msg.freqid = 135U;
    msg.prres = 0.33973970999820835;
    msg.cno = 57U;
    msg.qualityind = 62U;
    msg.corrsource = 59U;
    msg.ionomodel = 188U;
    msg.health = 229U;
    msg.sigflags = 9U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSignal #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.8641410070503935);
    msg.setSource(36202U);
    msg.setSourceEntity(130U);
    msg.setDestination(14247U);
    msg.setDestinationEntity(218U);
    msg.numsigs = 21U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 149U;
    tmp_msg_0.svid = 65U;
    tmp_msg_0.sigid = 138U;
    tmp_msg_0.freqid = 64U;
    tmp_msg_0.prres = 0.09809699277449468;
    tmp_msg_0.cno = 244U;
    tmp_msg_0.qualityind = 123U;
    tmp_msg_0.corrsource = 233U;
    tmp_msg_0.ionomodel = 181U;
    tmp_msg_0.health = 137U;
    tmp_msg_0.sigflags = 113U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.1410539919552094);
    msg.setSource(61526U);
    msg.setSourceEntity(139U);
    msg.setDestination(33195U);
    msg.setDestinationEntity(114U);
    msg.numsigs = 5U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSig msg;
    msg.setTimeStamp(0.2690458484256014);
    msg.setSource(54830U);
    msg.setSourceEntity(178U);
    msg.setDestination(29925U);
    msg.setDestinationEntity(78U);
    msg.numsigs = 191U;
    IMC::gnssSignal tmp_msg_0;
    tmp_msg_0.gnssid = 45U;
    tmp_msg_0.svid = 21U;
    tmp_msg_0.sigid = 91U;
    tmp_msg_0.freqid = 142U;
    tmp_msg_0.prres = 0.15067162608839046;
    tmp_msg_0.cno = 205U;
    tmp_msg_0.qualityind = 157U;
    tmp_msg_0.corrsource = 56U;
    tmp_msg_0.ionomodel = 213U;
    tmp_msg_0.health = 249U;
    tmp_msg_0.sigflags = 75U;
    msg.sigs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSig #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.19882976670044472);
    msg.setSource(25933U);
    msg.setSourceEntity(201U);
    msg.setDestination(50517U);
    msg.setDestinationEntity(182U);
    msg.gnssid = 10U;
    msg.svid = 53U;
    msg.elev = 0.14965768636227383;
    msg.azim = 0.19663455985614908;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.19683555205335657);
    msg.setSource(38022U);
    msg.setSourceEntity(241U);
    msg.setDestination(61955U);
    msg.setDestinationEntity(87U);
    msg.gnssid = 249U;
    msg.svid = 20U;
    msg.elev = 0.8541409476942251;
    msg.azim = 0.5814999017518515;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::gnssSatellite msg;
    msg.setTimeStamp(0.02947681471856023);
    msg.setSource(19494U);
    msg.setSourceEntity(147U);
    msg.setDestination(33463U);
    msg.setDestinationEntity(43U);
    msg.gnssid = 68U;
    msg.svid = 121U;
    msg.elev = 0.018258546551501054;
    msg.azim = 0.04401497533369392;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("gnssSatellite #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.9037757948983491);
    msg.setSource(47035U);
    msg.setSourceEntity(245U);
    msg.setDestination(26152U);
    msg.setDestinationEntity(197U);
    msg.numsvs = 32U;
    IMC::gnssSatellite tmp_msg_0;
    tmp_msg_0.gnssid = 20U;
    tmp_msg_0.svid = 110U;
    tmp_msg_0.elev = 0.3957622307376045;
    tmp_msg_0.azim = 0.790660128823821;
    msg.svs.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.9366090272610395);
    msg.setSource(5618U);
    msg.setSourceEntity(73U);
    msg.setDestination(13776U);
    msg.setDestinationEntity(182U);
    msg.numsvs = 97U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxSat msg;
    msg.setTimeStamp(0.6239453741113576);
    msg.setSource(18987U);
    msg.setSourceEntity(205U);
    msg.setDestination(13690U);
    msg.setDestinationEntity(111U);
    msg.numsvs = 95U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxSat #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.867137262507907);
    msg.setSource(16369U);
    msg.setSourceEntity(240U);
    msg.setDestination(41209U);
    msg.setDestinationEntity(217U);
    msg.refstationid = 58654U;
    msg.itow = 962927648U;
    msg.relposn = 0.24733605347580356;
    msg.relpose = 0.12605263300166514;
    msg.relposd = 0.25816340977089114;
    msg.relposlength = 0.9694125389195888;
    msg.relposheading = 0.769006031383913;
    msg.accn = 0.28519778108902627;
    msg.acce = 0.13019666274077102;
    msg.accd = 0.8037068108946746;
    msg.acclength = 0.5832436873069722;
    msg.accheading = 0.8945954371744386;
    msg.gnssfixok = 29U;
    msg.diffsoln = 154U;
    msg.relposvalid = 69U;
    msg.ismoving = 248U;
    msg.refposmiss = 228U;
    msg.refobsmiss = 235U;
    msg.relposheadingvalid = 210U;
    msg.carrsoln = 206U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.45834100532984523);
    msg.setSource(34407U);
    msg.setSourceEntity(240U);
    msg.setDestination(64803U);
    msg.setDestinationEntity(170U);
    msg.refstationid = 4197U;
    msg.itow = 2159412614U;
    msg.relposn = 0.15024940692139388;
    msg.relpose = 0.22116880516114057;
    msg.relposd = 0.6764090477254272;
    msg.relposlength = 0.751537049081657;
    msg.relposheading = 0.7358566007625748;
    msg.accn = 0.5115606995191124;
    msg.acce = 0.4496871645410446;
    msg.accd = 0.22897223748861406;
    msg.acclength = 0.751723978929604;
    msg.accheading = 0.17547546989713458;
    msg.gnssfixok = 235U;
    msg.diffsoln = 243U;
    msg.relposvalid = 136U;
    msg.ismoving = 190U;
    msg.refposmiss = 22U;
    msg.refobsmiss = 52U;
    msg.relposheadingvalid = 189U;
    msg.carrsoln = 71U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::UbxRelPosNED msg;
    msg.setTimeStamp(0.09392410725596367);
    msg.setSource(33544U);
    msg.setSourceEntity(89U);
    msg.setDestination(31801U);
    msg.setDestinationEntity(209U);
    msg.refstationid = 13928U;
    msg.itow = 1744353090U;
    msg.relposn = 0.9188524871909484;
    msg.relpose = 0.13525905042912678;
    msg.relposd = 0.07895450571761053;
    msg.relposlength = 0.9401288664764305;
    msg.relposheading = 0.847185848827754;
    msg.accn = 0.9390601852802611;
    msg.acce = 0.15937533589641495;
    msg.accd = 0.4735169350523337;
    msg.acclength = 0.10401911942756525;
    msg.accheading = 0.3947166192475363;
    msg.gnssfixok = 194U;
    msg.diffsoln = 113U;
    msg.relposvalid = 73U;
    msg.ismoving = 44U;
    msg.refposmiss = 10U;
    msg.refobsmiss = 221U;
    msg.relposheadingvalid = 108U;
    msg.carrsoln = 33U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("UbxRelPosNED #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.6169982705781489);
    msg.setSource(40171U);
    msg.setSourceEntity(234U);
    msg.setDestination(6323U);
    msg.setDestinationEntity(218U);
    IMC::CollisionAvoidance tmp_msg_0;
    tmp_msg_0.mmsi.assign("KBXHFAYHCBNBXQMPKHOQIXTDBLYCHSCDPYMUPSIKFXYWLOLCOGECWGLUJJEGEMOKODZRPQKPANIWAGYYRLAZVUVCRSBZRIZBYMAJYUTZHGMQUUOVNOFPQITXGPXKTTZZOZ");
    tmp_msg_0.lat = 0.9557245469127162;
    tmp_msg_0.lon = 0.6406165088998174;
    tmp_msg_0.x = 0.514933858868186;
    tmp_msg_0.y = 0.128145341496954;
    tmp_msg_0.speed = 0.43692345709744895;
    tmp_msg_0.course = 0.7871564091764481;
    tmp_msg_0.dist = 0.5769733706741402;
    tmp_msg_0.length = 0.652519342478689;
    tmp_msg_0.width = 0.47580187839851873;
    tmp_msg_0.o_vect = 0.9037477339049543;
    msg.obstacles.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.5543021645656473);
    msg.setSource(16406U);
    msg.setSourceEntity(105U);
    msg.setDestination(31927U);
    msg.setDestinationEntity(93U);
    IMC::CollisionAvoidance tmp_msg_0;
    tmp_msg_0.mmsi.assign("GNCHSTPTQMKJGPXWRBFSFCHPUYQPRYSIKKVAWMTGIXJJAOEIHRRT");
    tmp_msg_0.lat = 0.7665019243218857;
    tmp_msg_0.lon = 0.17648731458937217;
    tmp_msg_0.x = 0.07781290733550672;
    tmp_msg_0.y = 0.7559605502314936;
    tmp_msg_0.speed = 0.9327283789296648;
    tmp_msg_0.course = 0.8700673830671374;
    tmp_msg_0.dist = 0.020079731924370625;
    tmp_msg_0.length = 0.5677138351802025;
    tmp_msg_0.width = 0.011029856909315017;
    tmp_msg_0.o_vect = 0.3358688801386429;
    msg.obstacles.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::DynObsVec msg;
    msg.setTimeStamp(0.6124458963376676);
    msg.setSource(31295U);
    msg.setSourceEntity(77U);
    msg.setDestination(11602U);
    msg.setDestinationEntity(64U);
    IMC::CollisionAvoidance tmp_msg_0;
    tmp_msg_0.mmsi.assign("CDATCWGMBQPVOVZZDLGAYJXVPHAVJUHTYGAGFOYOOSBKQHCESAMYNQRHRPSXVDSBAIKIGZTEZRRMIYPJJENSKEDCYMVXVNUBHSIWXECZBTPJFLKMNLZLUKICOSQKKITQYJSJLMYUGAATXCRXWDPAQWVLRIQEPWGOELHFHXHKUENRNUZDIDFWIBLTBYWQDBIDR");
    tmp_msg_0.lat = 0.6869910607236027;
    tmp_msg_0.lon = 0.6694128963464357;
    tmp_msg_0.x = 0.8587638197135905;
    tmp_msg_0.y = 0.033437182829958556;
    tmp_msg_0.speed = 0.6732213649525368;
    tmp_msg_0.course = 0.06599992149368161;
    tmp_msg_0.dist = 0.7732295914210344;
    tmp_msg_0.length = 0.31446819336949494;
    tmp_msg_0.width = 0.6167855086076739;
    tmp_msg_0.o_vect = 0.3135255678772366;
    msg.obstacles.push_back(tmp_msg_0);

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("DynObsVec #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.31959345166479314);
    msg.setSource(15565U);
    msg.setSourceEntity(157U);
    msg.setDestination(57537U);
    msg.setDestinationEntity(98U);
    msg.mmsi.assign("BMOITMRNFVEPLDXXFOVEFNRBWBZGCOJOWTAQDPFLPNGTOVQASQIGOKMCTYPXSYLRJHULFVQMBJYKMYPPUNFMNGWDQFQLEKWTFPKKSKIHGDLUYZGPYRJUZRBWONRXZRPYNAIUYTVREYLLCZVKCCRXUEKDIAVADFZZUBSICHHHHXIHGEUGHSABTMXQJVX");
    msg.concession = 0.7364609240755451;
    msg.cog_int = 0.8127130488832651;
    msg.cog_int_off = 0.5812230329160745;
    msg.sog_int = 0.09496372989463808;
    msg.sog_int_off = 0.1804304277650176;
    msg.state = 0U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.03134899799385504);
    msg.setSource(9795U);
    msg.setSourceEntity(89U);
    msg.setDestination(42386U);
    msg.setDestinationEntity(65U);
    msg.mmsi.assign("AVPFGGQUEJZPBAHXJKKHKEOQLHFNOYFDIAFEXYOIABNBGRYANZVGJROLSXHZLEVPYCDMGZFGXCTZPEREWNBTZYXVEIZEDVWKGCMDBTWQSCLUPTJDQBMWKSMYIIYNOCIRRCMHXBLHTXRFVFKDTMUJFMNOUESKNKSWKNLUU");
    msg.concession = 0.2541960684675685;
    msg.cog_int = 0.7965221304786385;
    msg.cog_int_off = 0.7715391630437181;
    msg.sog_int = 0.05151562862286441;
    msg.sog_int_off = 0.3280734936082782;
    msg.state = 14U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationData msg;
    msg.setTimeStamp(0.21583391877556501);
    msg.setSource(60341U);
    msg.setSourceEntity(80U);
    msg.setDestination(15056U);
    msg.setDestinationEntity(206U);
    msg.mmsi.assign("XDKBKXYFTMJTNAZZJMRVQRLEYIWBHEKUAMPBDAH");
    msg.concession = 0.7344071457739406;
    msg.cog_int = 0.9081065091936817;
    msg.cog_int_off = 0.9760784771584586;
    msg.sog_int = 0.8422424216174015;
    msg.sog_int_off = 0.42531210093108496;
    msg.state = 83U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationData #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationMsgLog msg;
    msg.setTimeStamp(0.17918496508898918);
    msg.setSource(4526U);
    msg.setSourceEntity(170U);
    msg.setDestination(14584U);
    msg.setDestinationEntity(101U);
    msg.mmsi.assign("FXIYFHVJYMEOXBPOURVXWXTWXAASRYJUSIWGWQSSPGCYDECMBGFUEVRXIZELLIYVOZHEZSFSMKZBCVWKTBSUJIVMJEPFHWTWSGOPMKDHFBVOLWAGRBNCDATLWKENTAJCIGYUXAPKJNUSMGQLZTSALEBCWAJOUUQ");
    msg.msg_in = 84U;
    msg.msg_out = 87U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationMsgLog #0", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #0", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationMsgLog msg;
    msg.setTimeStamp(0.6513686031347428);
    msg.setSource(48899U);
    msg.setSourceEntity(179U);
    msg.setDestination(54311U);
    msg.setDestinationEntity(157U);
    msg.mmsi.assign("PKMSCRSSNZTIGZLTFIVLYEHWNQJFQRVCTPKJYJVJDFIZOTBXMWUMYVRMZBNSLLFEKWCDHXZZJWBEOVQFKOSYPLBSMQQJMWTPHXKIAEYRCOEXSRNDBNDMFRUBCDVDFYZEEDHUOKLZRQDJGYGEUHRAGVNNUAVUOMSXKVTDNIFLIBHLGQOQWPYAPAPGCHORGQVKXIALDWTIHZTFOMYUCBOXHHLKGF");
    msg.msg_in = 201U;
    msg.msg_out = 145U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationMsgLog #1", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #1", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  {
    IMC::NegotiationMsgLog msg;
    msg.setTimeStamp(0.8365130474908984);
    msg.setSource(35886U);
    msg.setSourceEntity(231U);
    msg.setDestination(41091U);
    msg.setDestinationEntity(18U);
    msg.mmsi.assign("OCHZJQGYRWOOYXPIJDGTOUFUBFYNSHVQKPOJLQEWIXLULSREAOAMLXUIMLHXASRBZWMPEPPFNSGTXZVFGLECBTGKZPONWDOIR");
    msg.msg_in = 74U;
    msg.msg_out = 86U;

    try
    {
      Utils::ByteBuffer bfr;
      IMC::Packet::serialize(&msg, bfr);
      IMC::Message* msg_d = IMC::Packet::deserialize(bfr.getBuffer(), bfr.getSize());
      test.boolean("NegotiationMsgLog #2", msg == *msg_d);
      delete msg_d;
    }
    catch (IMC::InvalidMessageSize& e)
    {
      (void)e;
      test.boolean("msg #2", msg.getSerializationSize() > DUNE_IMC_CONST_MAX_SIZE);
    }
  }

  return test.getReturnValue();
}
